/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(Activated)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorEnteredVolume)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(ActorLeavingVolume)
AUTOGENERATE_NAME(AddCameraEffect)
AUTOGENERATE_NAME(AddCheatManager)
AUTOGENERATE_NAME(AddInteraction)
AUTOGENERATE_NAME(AIHearSound)
AUTOGENERATE_NAME(AllowDetourTo)
AUTOGENERATE_NAME(AnimBegin)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(AssociateAttackedNotify)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(AttackedNotify)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(BreathTimer)
AUTOGENERATE_NAME(Broadcast)
AUTOGENERATE_NAME(BroadcastLocalized)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(ChangeAnimation)
AUTOGENERATE_NAME(ClearL2Game)
AUTOGENERATE_NAME(ClientCloseMenu)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(ClientNameChange)
AUTOGENERATE_NAME(ClientOpenMenu)
AUTOGENERATE_NAME(ClientSetViewTarget)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(ClientValidate)
AUTOGENERATE_NAME(CloseAll)
AUTOGENERATE_NAME(CloseMenu)
AUTOGENERATE_NAME(ConnectFailure)
AUTOGENERATE_NAME(Deactivated)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(Desireability)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(DetourWeight)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EndCrouch)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(FillPrecacheMaterialsArray)
AUTOGENERATE_NAME(FillPrecacheStaticMeshesArray)
AUTOGENERATE_NAME(FinishedInterpolation)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(ForceKill)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(GetDestination)
AUTOGENERATE_NAME(GetEffTargetLocation)
AUTOGENERATE_NAME(GetHitEffectName)
AUTOGENERATE_NAME(GetLocalLogFileName)
AUTOGENERATE_NAME(GetSlaveDestination)
AUTOGENERATE_NAME(GetSpawnRate)
AUTOGENERATE_NAME(HeadVolumeChange)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(InitializeController)
AUTOGENERATE_NAME(Initialized)
AUTOGENERATE_NAME(InitInputSystem)
AUTOGENERATE_NAME(Inspection)
AUTOGENERATE_NAME(KApplyForce)
AUTOGENERATE_NAME(KeyFrameReached)
AUTOGENERATE_NAME(KForceExceed)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(KImpact)
AUTOGENERATE_NAME(KSkelConvulse)
AUTOGENERATE_NAME(KUpdateState)
AUTOGENERATE_NAME(KVehicleUpdateParams)
AUTOGENERATE_NAME(KVelDropBelow)
AUTOGENERATE_NAME(L2GameActionNotify)
AUTOGENERATE_NAME(L2NetLogin)
AUTOGENERATE_NAME(L2NetPostLogin)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(LogGameSpecial)
AUTOGENERATE_NAME(LogGameSpecial2)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(ModifyVelocity)
AUTOGENERATE_NAME(MonitoredPawnAlert)
AUTOGENERATE_NAME(NeedsMenuResolution)
AUTOGENERATE_NAME(Notify)
AUTOGENERATE_NAME(NotifyBump)
AUTOGENERATE_NAME(NotifyDie)
AUTOGENERATE_NAME(NotifyHeadVolumeChange)
AUTOGENERATE_NAME(NotifyHitMover)
AUTOGENERATE_NAME(NotifyHitWall)
AUTOGENERATE_NAME(NotifyJumpApex)
AUTOGENERATE_NAME(NotifyLanded)
AUTOGENERATE_NAME(NotifyMissedJump)
AUTOGENERATE_NAME(NotifyPhysicsVolumeChange)
AUTOGENERATE_NAME(OnAdminReply)
AUTOGENERATE_NAME(OpenMenu)
AUTOGENERATE_NAME(OwnerPossess)
AUTOGENERATE_NAME(PawnEnteredVolume)
AUTOGENERATE_NAME(PawnLeavingVolume)
AUTOGENERATE_NAME(PhysicsChangedFor)
AUTOGENERATE_NAME(PhysicsVolumeChange)
AUTOGENERATE_NAME(PlayDying)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerSeesMe)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(PlayFalling)
AUTOGENERATE_NAME(PlayJump)
AUTOGENERATE_NAME(PlayLandingAnimation)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(PostNetReceive)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(PostSetPawnResource)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(PrepareForMove)
AUTOGENERATE_NAME(PreshotNotify)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(Process_KeyEvent)
AUTOGENERATE_NAME(Process_KeyType)
AUTOGENERATE_NAME(Process_Message)
AUTOGENERATE_NAME(Process_PostRender)
AUTOGENERATE_NAME(Process_PreRender)
AUTOGENERATE_NAME(Process_Tick)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(RemoveCameraEffect)
AUTOGENERATE_NAME(RemoveInteraction)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(ReplaceMenu)
AUTOGENERATE_NAME(SceneEnded)
AUTOGENERATE_NAME(SceneStarted)
AUTOGENERATE_NAME(SeeMonster)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(ServerCallback)
AUTOGENERATE_NAME(ServerChangeVoiceChatter)
AUTOGENERATE_NAME(ServerGetVoiceChatters)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(ServerValidationResponse)
AUTOGENERATE_NAME(SetAirVolume)
AUTOGENERATE_NAME(SetAnimAction)
AUTOGENERATE_NAME(SetFocusTo)
AUTOGENERATE_NAME(SetHeadScale)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(SetProgressMessage)
AUTOGENERATE_NAME(SetProgressTime)
AUTOGENERATE_NAME(SetRequiredGameResolution)
AUTOGENERATE_NAME(SetupSpecialPathAbilities)
AUTOGENERATE_NAME(SetWalking)
AUTOGENERATE_NAME(ShotNotify)
AUTOGENERATE_NAME(ShowUpgradeMenu)
AUTOGENERATE_NAME(SoakStop)
AUTOGENERATE_NAME(SpawnDefaultPlayerPawn)
AUTOGENERATE_NAME(SpawnPlayerPawn)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(StartCrouch)
AUTOGENERATE_NAME(StopPlayFiring)
AUTOGENERATE_NAME(SuggestMovePreparation)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(ThirdPersonEffects)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(TornOff)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(TriggerEvent)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(UpdateCharacter)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(UsedBy)
AUTOGENERATE_NAME(VehicleStateReceived)
AUTOGENERATE_NAME(WorldSpaceOverlays)
AUTOGENERATE_NAME(ZoneChange)

#ifndef NAMES_ONLY

enum EActorEffectType
{
    EAST_None               =0,
    EAST_Silhouette         =1,
    EAST_CubemapSilhouette  =2,
    EAST_WeaponSilhouette   =3,
    EAST_MAX                =4,
};
enum eKillZType
{
    KILLZ_None              =0,
    KILLZ_Lava              =1,
    KILLZ_Suicide           =2,
    KILLZ_MAX               =3,
};
enum EDoubleClickDir
{
    DCLICK_None             =0,
    DCLICK_Left             =1,
    DCLICK_Right            =2,
    DCLICK_Forward          =3,
    DCLICK_Back             =4,
    DCLICK_Active           =5,
    DCLICK_Done             =6,
    DCLICK_MAX              =7,
};
enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};
enum ESpawnPos
{
    SPN_Normal              =0,
    SPN_Top                 =1,
    SPN_Mid                 =2,
    SPN_Btm                 =3,
    SPN_MAX                 =4,
};
enum ENAttackStatus
{
    NAST_None               =0,
    NAST_AttackStart        =1,
    NAST_AttackDelay        =2,
    NAST_AttackShot         =3,
    NAST_AttackDemage       =4,
    NAST_AttackEnd          =5,
    NAST_MAX                =6,
};
enum ENMagicAniStatus
{
    NMAS_None               =0,
    NMAS_RotationTo         =1,
    NMAS_CastStart          =2,
    NMAS_Cast               =3,
    NMAS_CastEnd            =4,
    NMAS_ShotStart          =5,
    NMAS_Shot               =6,
    NMAS_ShotEnd            =7,
    NMAS_MAX                =8,
};
enum EForceType
{
    FT_None                 =0,
    FT_DragAlong            =1,
    FT_MAX                  =2,
};
enum EMusicTransition
{
    MTRAN_None              =0,
    MTRAN_Instant           =1,
    MTRAN_Segue             =2,
    MTRAN_Fade              =3,
    MTRAN_FastFade          =4,
    MTRAN_SlowFade          =5,
    MTRAN_MAX               =6,
};
enum ESoundSlot
{
    SLOT_None               =0,
    SLOT_Misc               =1,
    SLOT_Pain               =2,
    SLOT_Interact           =3,
    SLOT_Ambient            =4,
    SLOT_Talk               =5,
    SLOT_Interface          =6,
    SLOT_MAX                =7,
};
enum EL2GameAction
{
    LGA_SaintConsensusOpening=0,
    LGA_SaintConsensusOpened=1,
    LGA_SaintConsensusClosing=2,
    LGA_SaintConsensusClosed=3,
    LGA_MAX                 =4,
};
enum EPawnSubMeshStyle
{
    PMS_Boots               =0,
    PMS_LowBody             =1,
    PMS_UpBody              =2,
    PMS_Glove               =3,
    PMS_Hair2               =4,
    PMS_Hair1               =5,
    PMS_Helm                =6,
    PMS_HairAcce1           =7,
    PMS_HairAcce2           =8,
    PMS_Face                =9,
    PMS_RightHand           =10,
    PMS_LeftHand            =11,
    PMS_RightArm            =12,
    PMS_LeftArm             =13,
    PMS_Cloak               =14,
    PMS_CloakCover          =15,
    PMS_MAX                 =16,
};
enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_Alpha               =5,
    STY_Additive            =6,
    STY_Subtractive         =7,
    STY_Particle            =8,
    STY_AlphaZ              =9,
    STY_MAX                 =10,
};
enum ETargetSpineStatus
{
    TSR_None                =0,
    TSR_START               =1,
    TSR_END                 =2,
    TSR_MAX                 =3,
};
enum EAttachType
{
    EATP_Relative           =0,
    EATP_Absolute           =1,
    EATP_MAX                =2,
};
enum ENetRole
{
    ROLE_None               =0,
    ROLE_DumbProxy          =1,
    ROLE_SimulatedProxy     =2,
    ROLE_AutonomousProxy    =3,
    ROLE_Authority          =4,
    ROLE_MAX                =5,
};
enum EL2ObjectType
{
    EL2_NORMAL              =0,
    EL2_DOOR                =1,
    EL2_CHAIR               =2,
    EL2_MAX                 =3,
};
enum ELodBlendViewType
{
    ELBT_None               =0,
    ELBT_Normal             =1,
    ELBT_Downing            =2,
    ELBT_Upping             =3,
    ELBT_MAX                =4,
};
enum EActorViewType
{
    EAVT_None               =0,
    EAVT_InSight            =1,
    EAVT_InSighting         =2,
    EAVT_OutSight           =3,
    EAVT_OutSighting        =4,
    EAVT_Spawning           =5,
    EAVT_Deleting           =6,
    EAVT_Hiding             =7,
    EAVT_Showing            =8,
    EAVT_Controller         =9,
    EAVT_HighLight          =10,
    EAVT_Despawning         =11,
    EAVT_MAX                =12,
};
enum EL2EventCmd
{
    LEC_None                =0,
    LEC_Show                =1,
    LEC_Play                =2,
    LEC_MAX                 =3,
};
enum EDetailMode
{
    DM_Low                  =0,
    DM_High                 =1,
    DM_SuperHigh            =2,
    DM_MAX                  =3,
};
enum EFilterState
{
    FS_Maybe                =0,
    FS_Yes                  =1,
    FS_No                   =2,
    FS_MAX                  =3,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_Terraform            =6,
    DT_SpriteAnimOnce       =7,
    DT_StaticMesh           =8,
    DT_DrawType             =9,
    DT_Particle             =10,
    DT_AntiPortal           =11,
    DT_FluidSurface         =12,
    DT_Sun                  =13,
    DT_MusicVolume          =14,
    DT_Custom               =15,
    DT_Native               =16,
    DT_MAX                  =17,
};
enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Swimming           =3,
    PHYS_Flying             =4,
    PHYS_Rotating           =5,
    PHYS_Projectile         =6,
    PHYS_Interpolating      =7,
    PHYS_MovingBrush        =8,
    PHYS_Spider             =9,
    PHYS_Trailer            =10,
    PHYS_Ladder             =11,
    PHYS_RootMotion         =12,
    PHYS_Karma              =13,
    PHYS_KarmaRagDoll       =14,
    PHYS_MovingTrailer      =15,
    PHYS_EffectTrailer      =16,
    PHYS_NProjectile        =17,
    PHYS_NMover             =18,
    PHYS_L2Movement         =19,
    PHYS_MAX                =20,
};
#define UCONST_MINFLOORZ 0.7
#define UCONST_MAXSTEPHEIGHT 10.0

struct AActor_eventGetEffTargetLocation_Parms
{
    FVector LocVector;
};
struct AActor_eventTriggerEvent_Parms
{
    FName EventName;
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTravelPostAccept_Parms
{
};
struct AActor_eventTravelPreAccept_Parms
{
};
struct AActor_eventPostSetPawnResource_Parms
{
};
struct AActor_eventPostNetBeginPlay_Parms
{
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* MessageClass;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventRenderTexture_Parms
{
    class UScriptedTexture* Tex;
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventDemoPlaySound_Parms
{
    class USound* Sound;
    BYTE Slot;
    FLOAT Volume;
    BITFIELD bNoOverride;
    FLOAT Radius;
    FLOAT Pitch;
    BITFIELD Attenuate;
};
struct AActor_eventTornOff_Parms
{
};
struct AActor_eventTakeDamage_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector Momentum;
    class UClass* DamageType;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
    BYTE KillType;
};
struct AActor_eventUsedBy_Parms
{
    class APawn* User;
};
struct AActor_eventEndedRotation_Parms
{
};
struct AActor_eventFinishedInterpolation_Parms
{
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPostTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};
struct AActor_eventTimer_Parms
{
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventPostNetReceive_Parms
{
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventKUpdateState_Parms
{
    FKRigidBodyState NewState;
    BITFIELD ReturnValue;
};
struct AActor_eventKApplyForce_Parms
{
    FVector Force;
    FVector Torque;
};
struct AActor_eventKSkelConvulse_Parms
{
};
struct AActor_eventKVelDropBelow_Parms
{
};
struct AActor_eventKImpact_Parms
{
    class AActor* Other;
    FVector pos;
    FVector impactVel;
    FVector impactNorm;
};
struct AActor_eventAnimEnd_Parms
{
    INT Channel;
};
struct AActor_eventClearL2Game_Parms
{
};
struct AActor_eventL2GameActionNotify_Parms
{
    BYTE GameAction;
};
class ENGINE_API AActor : public UObject
{
public:
    BYTE Physics;
    BYTE DrawType;
    class UStaticMesh* StaticMesh;
    class AActor* Owner;
    class AActor* Base;
    FActorRenderDataPtr ActorRenderData;
    FLightRenderDataPtr LightRenderData;
    INT RenderRevision;
    BYTE StaticFilterState;
    BITFIELD bDynamicActorFilterState:1 GCC_PACK(4);
    FName ForcedVisibilityZoneTag GCC_PACK(4);
    BITFIELD bSpecialLit:1 GCC_PACK(4);
    BITFIELD bActorShadows:1;
    BITFIELD bCorona:1;
    BITFIELD bLightingVisibility:1;
    BITFIELD bUseDynamicLights:1;
    BITFIELD bLightChanged:1;
    BITFIELD bUpdateShadow:1;
    BITFIELD bHideShadow:1;
    BITFIELD bHideRightHandMesh:1;
    BITFIELD bHideLeftHandMesh:1;
    BITFIELD bNeedCleanup:1;
    BITFIELD bShadowOnly:1;
    INT CreatureID GCC_PACK(4);
    BITFIELD NoCheatCollision:1 GCC_PACK(4);
    BITFIELD CanIngnoreCollision:1;
    BITFIELD bDeleteNow:1;
    BITFIELD bAlwaysVisible:1;
    BITFIELD bStatic:1;
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bTicked:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bHighDetail:1;
    BITFIELD bSuperHighDetail:1;
    BITFIELD bOnlyDrawIfAttached:1;
    BITFIELD bStasis:1;
    BITFIELD bTrailerAllowRotation:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bTrailerNoOwnerDestroy:1;
    BITFIELD bRelativeTrail:1;
    FVector RelativeTrailOffset GCC_PACK(4);
    BITFIELD bSelfRotation:1 GCC_PACK(4);
    BITFIELD bWorldGeometry:1;
    BITFIELD bAcceptsProjectors:1;
    BITFIELD bOrientOnSlope:1;
    BITFIELD bOnlyAffectPawns:1;
    BITFIELD bDisableSorting:1;
    BITFIELD bIgnoreEncroachers:1;
    BITFIELD bShowOctreeNodes:1;
    BITFIELD bWasSNFiltered:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bOnlyRelevantToOwner:1;
    BITFIELD bNetDirty:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bReplicateMovement:1;
    BITFIELD bSkipActorPropertyReplication:1;
    BITFIELD bUpdateSimulatedPosition:1;
    BITFIELD bTearOff:1;
    BITFIELD bOnlyDirtyReplication:1;
    BITFIELD bReplicateAnimations:1;
    BITFIELD bNetInitialRotation:1;
    BITFIELD bCompressedPosition:1;
    BITFIELD bAlwaysZeroBoneOffset:1;
    FVector RelativeLocInVehicle GCC_PACK(4);
    INT VehicleID;
    BITFIELD bVehicleTargetMove:1 GCC_PACK(4);
    BITFIELD bVehicleCompensativeMove:1;
    BITFIELD bHasActorTarget:1;
    BITFIELD bL2DesiredRotated:1;
    FRotator L2DesriedRotator GCC_PACK(4);
    BITFIELD L2NeedTick:1 GCC_PACK(4);
    BITFIELD bCheckChangableLevel:1;
    BITFIELD bImmediatelyStop:1;
    BITFIELD bNeedPostSpawnProcess:1;
    BYTE L2ActorViewtype GCC_PACK(4);
    FLOAT L2ActorViewDuration;
    FLOAT L2ActorViewElapsedTime;
    BYTE L2LodViewType;
    FLOAT L2LodViewDuration;
    FLOAT L2LodViewElapsedTime;
    INT L2CurrentLod;
    INT L2ServerObjectRealID;
    INT L2ServerObjectID;
    BYTE L2ServerObjectType;
    BYTE RemoteRole;
    BYTE Role;
    INT NetTag;
    FLOAT NetUpdateTime;
    FLOAT NetUpdateFrequency;
    FLOAT NetPriority;
    class APawn* Instigator;
    FName AttachmentBone;
    BYTE AttachType;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    FLOAT LifeSpan;
    FPointRegion Region;
    FName ForcedRegionTag;
    INT ForcedRegion;
    FLOAT TimerRate;
    class UMesh* Mesh;
    FLOAT LastRenderTime;
    FName Tag;
    TArrayNoInit<INT> Leaves;
    FName Event;
    TArrayNoInit<FL2Event> L2GameEvent;
    class AInventory* Inventory;
    FLOAT TimerCounter;
    class UMeshInstance* MeshInstance;
    FName L2MoveEvent;
    BITFIELD bSunAffect:1 GCC_PACK(4);
    BYTE TargetSpineStatus GCC_PACK(4);
    FLOAT LODBias;
    FName InitialState;
    FName Group;
    TArrayNoInit<class AActor*> Child;
    TArrayNoInit<class AActor*> Touching;
    TArrayNoInit<INT> OctreeNodes;
    FBox OctreeBox;
    FVector OctreeBoxCenter;
    FVector OctreeBoxRadii;
    class AActor* Deleted;
    FLOAT LatentFloat;
    INT CollisionTag;
    INT JoinedTag;
    class APhysicsVolume* PhysicsVolume;
    FVector Location;
    FRotator Rotation;
    FVector Velocity;
    FVector Acceleration;
    FName AttachTag;
    TArrayNoInit<class AActor*> Attached;
    FVector RelativeLocation;
    FRotator RelativeRotation;
    BITFIELD bHardAttach:1 GCC_PACK(4);
    FMatrix HardRelMatrix GCC_PACK(4);
    TArrayNoInit<FProjectorRenderInfoPtr> Projectors;
    TArrayNoInit<FStaticMeshProjectorRenderInfoPtr> StaticMeshProjectors;
    class UMaterial* Texture;
    class UStaticMeshInstance* StaticMeshInstance;
    class UModel* Brush;
    FLOAT DrawScale;
    FVector DrawScale3D;
    FVector PrePivot;
    TArrayNoInit<class UMaterial*> Skins;
    class UMaterial* OverlayMaterial;
    FLOAT OverlayTimer;
    FColor OverlayColor;
    class UMaterial* RepSkin;
    BYTE AmbientGlow;
    BYTE MaxLights;
    class UConvexVolume* AntiPortal;
    FLOAT CullDistance;
    FLOAT ScaleGlow;
    FNMoverPtr NMoverActor;
    class AL2NMover* L2NMover;
    class ULevel* SWXLevel;
    FRotator SwayRotationOrig;
    BITFIELD bDontBatch:1 GCC_PACK(4);
    BYTE Style GCC_PACK(4);
    BITFIELD bUnlit:1 GCC_PACK(4);
    BITFIELD bShadowCast:1;
    BITFIELD bStaticLighting:1;
    BITFIELD bUseLightingFromBase:1;
    BITFIELD bIgnoredRange:1;
    BITFIELD bUnlitCheck:1;
    BITFIELD bCulledSunlight:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    BITFIELD bDestroyInPainVolume:1;
    BITFIELD bShouldBaseAtStartup:1;
    BITFIELD bPendingDelete:1;
    BITFIELD bAnimByOwner:1;
    BITFIELD bOwnerNoSee:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bClientAnim:1;
    BITFIELD bDisturbFluidSurface:1;
    BITFIELD bAlwaysTick:1;
    FLOAT TransientSoundVolume GCC_PACK(4);
    FLOAT TransientSoundRadius;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    BITFIELD bCollideActors:1 GCC_PACK(4);
    BITFIELD bCollideWorld:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bProjTarget:1;
    BITFIELD bBlockZeroExtentTraces:1;
    BITFIELD bBlockNonZeroExtentTraces:1;
    BITFIELD bAutoAlignToTerrain:1;
    BITFIELD bUseCylinderCollision:1;
    BITFIELD bBlockKarma:1;
    BITFIELD bNetNotify:1;
    BITFIELD bIgnoreOutOfWorld:1;
    BITFIELD bBounce:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    FLOAT Mass GCC_PACK(4);
    FLOAT Buoyancy;
    FRotator RotationRate;
    FRotator KayboardRotationRate;
    INT KeyboardRotationYawFromServer;
    FRotator RotationLimit;
    FRotator DesiredRotation;
    class AActor* PendingTouch;
    FVector ColLocation;
    class UKarmaParamsCollision* KParams;
    INT KStepTag;
    FAnimRep SimAnim;
    BYTE ForceType;
    FLOAT ForceRadius;
    FLOAT ForceScale;
    BITFIELD bNetInitial:1 GCC_PACK(4);
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bNoRepMesh:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bHiddenEdGroup:1;
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bObsolete:1;
    BITFIELD bPathColliding:1;
    BITFIELD bPathTemp:1;
    BITFIELD bScriptInitialized:1;
    BITFIELD bLockLocation:1;
    BITFIELD bLockUndelete:1;
    class UClass* MessageClass GCC_PACK(4);
    TArrayNoInit<class ANSkillProjectile*> NSkillProjectileActor;
    TArrayNoInit<class AActor*> SpelledNEffectActor;
    TArrayNoInit<class AActor*> NProjectileActor;
    BYTE NAttackStatus;
    class AActor* EffectOwner;
    BYTE SpawnPos;
    FTextureModifyinfo TexModifyInfo;
    BYTE L2ActorEffecttype;
    BITFIELD bTangentLoad:1 GCC_PACK(4);
    INT nUseNormalmap GCC_PACK(4);
    DECLARE_FUNCTION(execMultiply_ColorFloat);
    DECLARE_FUNCTION(execAdd_ColorColor);
    DECLARE_FUNCTION(execMultiply_FloatColor);
    DECLARE_FUNCTION(execSubtract_ColorColor);
    DECLARE_FUNCTION(execCollidingActors);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execBasedActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execDynamicActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execMoveCacheEntry);
    DECLARE_FUNCTION(execGetCacheEntry);
    DECLARE_FUNCTION(execGetNextIntDesc);
    DECLARE_FUNCTION(execGetNextInt);
    DECLARE_FUNCTION(execGetURLMap);
    DECLARE_FUNCTION(execGetNextSkin);
    DECLARE_FUNCTION(execGetMapName);
    DECLARE_FUNCTION(execSuggestFallVelocity);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execMakeNoise);
    DECLARE_FUNCTION(execGetSoundDuration);
    DECLARE_FUNCTION(execPlaySoundOnVehicle);
    DECLARE_FUNCTION(execDemoPlaySound);
    DECLARE_FUNCTION(execPlayOwnedSound);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execNDestroy);
    DECLARE_FUNCTION(execStopAllMusic);
    DECLARE_FUNCTION(execStopMusic);
    DECLARE_FUNCTION(execPlayMusic);
    DECLARE_FUNCTION(execUnClock);
    DECLARE_FUNCTION(execClock);
    DECLARE_FUNCTION(execKIsRagdollAvailable);
    DECLARE_FUNCTION(execKMakeRagdollAvailable);
    DECLARE_FUNCTION(execKRemoveAllBoneLifters);
    DECLARE_FUNCTION(execKRemoveLifterFromBone);
    DECLARE_FUNCTION(execKAddBoneLifter);
    DECLARE_FUNCTION(execKFreezeRagdoll);
    DECLARE_FUNCTION(execKGetSkelMass);
    DECLARE_FUNCTION(execKSetSkelVel);
    DECLARE_FUNCTION(execKEnableCollision);
    DECLARE_FUNCTION(execKDisableCollision);
    DECLARE_FUNCTION(execKGetActorGravScale);
    DECLARE_FUNCTION(execKSetActorGravScale);
    DECLARE_FUNCTION(execKSetBlockKarma);
    DECLARE_FUNCTION(execKSetStayUpright);
    DECLARE_FUNCTION(execKAddImpulse);
    DECLARE_FUNCTION(execKIsAwake);
    DECLARE_FUNCTION(execKWake);
    DECLARE_FUNCTION(execKGetImpactThreshold);
    DECLARE_FUNCTION(execKSetImpactThreshold);
    DECLARE_FUNCTION(execKGetCOMPosition);
    DECLARE_FUNCTION(execKGetCOMOffset);
    DECLARE_FUNCTION(execKSetCOMOffset);
    DECLARE_FUNCTION(execKGetRestitution);
    DECLARE_FUNCTION(execKSetRestitution);
    DECLARE_FUNCTION(execKGetFriction);
    DECLARE_FUNCTION(execKSetFriction);
    DECLARE_FUNCTION(execKGetDampingProps);
    DECLARE_FUNCTION(execKSetDampingProps);
    DECLARE_FUNCTION(execKGetInertiaTensor);
    DECLARE_FUNCTION(execKSetInertiaTensor);
    DECLARE_FUNCTION(execKGetMass);
    DECLARE_FUNCTION(execKSetMass);
    DECLARE_FUNCTION(execKRBVecFromVector);
    DECLARE_FUNCTION(execKRBVecToVector);
    DECLARE_FUNCTION(execKDrawRigidBodyState);
    DECLARE_FUNCTION(execKGetRigidBodyState);
    DECLARE_FUNCTION(execKGetRBQuaternion);
    DECLARE_FUNCTION(execOnlyAffectPawns);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execDebugUnclock);
    DECLARE_FUNCTION(execDebugClock);
    DECLARE_FUNCTION(execDrawDebugLine);
    DECLARE_FUNCTION(execGetRenderBoundingSphere);
    DECLARE_FUNCTION(execAnimIsInGroup);
    DECLARE_FUNCTION(execGetAnimParams);
    DECLARE_FUNCTION(execSetBoneRotation);
    DECLARE_FUNCTION(execSetBoneLocation);
    DECLARE_FUNCTION(execSetBoneDirection);
    DECLARE_FUNCTION(execSetBoneScale);
    DECLARE_FUNCTION(execLockRootMotion);
    DECLARE_FUNCTION(execAttachToBoneWithIndex);
    DECLARE_FUNCTION(execDetachFromBone);
    DECLARE_FUNCTION(execAttachToBone);
    DECLARE_FUNCTION(execGetRootRotationDelta);
    DECLARE_FUNCTION(execGetRootLocationDelta);
    DECLARE_FUNCTION(execGetRootRotation);
    DECLARE_FUNCTION(execGetRootLocation);
    DECLARE_FUNCTION(execGetBoneCoordsWithBoneIndex);
    DECLARE_FUNCTION(execGetBoneRotation);
    DECLARE_FUNCTION(execGetBoneCoords);
    DECLARE_FUNCTION(execAnimBlendToAlpha);
    DECLARE_FUNCTION(execAnimBlendParams);
    DECLARE_FUNCTION(execBoneRefresh);
    DECLARE_FUNCTION(execLinkMesh);
    DECLARE_FUNCTION(execLinkSkelAnim);
    DECLARE_FUNCTION(execGetNotifyChannel);
    DECLARE_FUNCTION(execEnableChannelNotify);
    DECLARE_FUNCTION(execIsTweening);
    DECLARE_FUNCTION(execSetAnimFrame);
    DECLARE_FUNCTION(execFreezeAnimAt);
    DECLARE_FUNCTION(execHasBoneName);
    DECLARE_FUNCTION(execStopAnimating);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execTweenAnim);
    DECLARE_FUNCTION(execLoopAnim);
    DECLARE_FUNCTION(execPlayAnim);
    DECLARE_FUNCTION(execGetMeshName);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execAutonomousPhysics);
    DECLARE_FUNCTION(execMoveSmooth);
    DECLARE_FUNCTION(execSetRelativeLocation);
    DECLARE_FUNCTION(execSetRelativeRotation);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMove);
    DECLARE_FUNCTION(execSetDrawType);
    DECLARE_FUNCTION(execSetStaticMesh);
    DECLARE_FUNCTION(execSetDrawScale3D);
    DECLARE_FUNCTION(execSetDrawScale);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execGetViewport);
    DECLARE_FUNCTION(execConsoleCommand);
    void eventGetEffTargetLocation(FVector& LocVector)
    {
        AActor_eventGetEffTargetLocation_Parms Parms;
        Parms.LocVector=LocVector;
        ProcessEvent(FindFunctionChecked(ENGINE_GetEffTargetLocation),&Parms);
        LocVector=Parms.LocVector;
    }
    void eventTriggerEvent(FName EventName, class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTriggerEvent_Parms Parms;
        Parms.EventName=EventName;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerEvent),&Parms);
    }
    void eventTravelPostAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
    }
    void eventTravelPreAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
    }
    void eventPostSetPawnResource()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostSetPawnResource),NULL);
    }
    void eventPostNetBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
    }
    void eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    void eventPostBeginPlay()
    {
        if(IsProbing(NAME_PostBeginPlay)) {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
        }
    }
    void eventBroadcastLocalizedMessage(class UClass* MessageClass, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
        Parms.MessageClass=MessageClass;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
    }
    void eventPreBeginPlay()
    {
        if(IsProbing(NAME_PreBeginPlay)) {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
        }
    }
    void eventRenderTexture(class UScriptedTexture* Tex)
    {
        AActor_eventRenderTexture_Parms Parms;
        Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderTexture),&Parms);
    }
    void eventBeginPlay()
    {
        if(IsProbing(NAME_BeginPlay)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
        }
    }
    void eventPostTeleport(class ATeleporter* OutTeleporter)
    {
        AActor_eventPostTeleport_Parms Parms;
        Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
    }
    BITFIELD eventPreTeleport(class ATeleporter* InTeleporter)
    {
        AActor_eventPreTeleport_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InTeleporter=InTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
        return Parms.ReturnValue;
    }
    void eventDemoPlaySound(class USound* Sound, BYTE Slot, FLOAT Volume, BITFIELD bNoOverride, FLOAT Radius, FLOAT Pitch, BITFIELD Attenuate)
    {
        AActor_eventDemoPlaySound_Parms Parms;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.Volume=Volume;
        Parms.bNoOverride=bNoOverride;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
    }
    void eventTornOff()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TornOff),NULL);
    }
    void eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, class UClass* DamageType)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.Damage=Damage;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLocation=HitLocation;
        Parms.Momentum=Momentum;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
    }
    void eventKilledBy(class APawn* EventInstigator)
    {
        AActor_eventKilledBy_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
    }
    void eventFellOutOfWorld(BYTE KillType)
    {
        AActor_eventFellOutOfWorld_Parms Parms;
        Parms.KillType=KillType;
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),&Parms);
    }
    void eventUsedBy(class APawn* User)
    {
        AActor_eventUsedBy_Parms Parms;
        Parms.User=User;
        ProcessEvent(FindFunctionChecked(ENGINE_UsedBy),&Parms);
    }
    void eventEndedRotation()
    {
        if(IsProbing(NAME_EndedRotation)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
        }
    }
    void eventFinishedInterpolation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FinishedInterpolation),NULL);
    }
    void eventEncroachedBy(class AActor* Other)
    {
        AActor_eventEncroachedBy_Parms Parms;
        if(IsProbing(NAME_EncroachedBy)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
        }
    }
    BITFIELD eventEncroachingOn(class AActor* Other)
    {
        AActor_eventEncroachingOn_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_EncroachingOn)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
        }
        return Parms.ReturnValue;
    }
    class AActor* eventSpecialHandling(class APawn* Other)
    {
        AActor_eventSpecialHandling_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_SpecialHandling)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        if(IsProbing(NAME_Detach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
        }
    }
    void eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        if(IsProbing(NAME_Attach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
        }
    }
    void eventBaseChange()
    {
        if(IsProbing(NAME_BaseChange)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
        }
    }
    void eventBump(class AActor* Other)
    {
        AActor_eventBump_Parms Parms;
        if(IsProbing(NAME_Bump)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
        }
    }
    void eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        if(IsProbing(NAME_UnTouch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
        }
    }
    void eventPostTouch(class AActor* Other)
    {
        AActor_eventPostTouch_Parms Parms;
        if(IsProbing(NAME_PostTouch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
        }
    }
    void eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        if(IsProbing(NAME_Touch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
        }
    }
    void eventPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AActor_eventPhysicsVolumeChange_Parms Parms;
        if(IsProbing(NAME_PhysicsVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsVolumeChange),&Parms);
        }
    }
    void eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        if(IsProbing(NAME_ZoneChange)) {
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
        }
    }
    void eventLanded(FVector HitNormal)
    {
        AActor_eventLanded_Parms Parms;
        if(IsProbing(NAME_Landed)) {
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
        }
    }
    void eventFalling()
    {
        if(IsProbing(NAME_Falling)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
        }
    }
    void eventHitWall(FVector HitNormal, class AActor* HitWall)
    {
        AActor_eventHitWall_Parms Parms;
        if(IsProbing(NAME_HitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
        }
    }
    void eventTimer()
    {
        if(IsProbing(NAME_Timer)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
        }
    }
    void eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
    }
    void eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
    }
    void eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUnTrigger_Parms Parms;
        if(IsProbing(NAME_UnTrigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
        }
    }
    void eventTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTrigger_Parms Parms;
        if(IsProbing(NAME_Trigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
        }
    }
    void eventPostNetReceive()
    {
        if(IsProbing(NAME_PostNetReceive)) {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetReceive),NULL);
        }
    }
    void eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
        }
    }
    void eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        if(IsProbing(NAME_LostChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
        }
    }
    void eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        if(IsProbing(NAME_GainedChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
        }
    }
    void eventDestroyed()
    {
        if(IsProbing(NAME_Destroyed)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
        }
    }
    BITFIELD eventKUpdateState(FKRigidBodyState& NewState)
    {
        AActor_eventKUpdateState_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(ENGINE_KUpdateState),&Parms);
        NewState=Parms.NewState;
        return Parms.ReturnValue;
    }
    void eventKApplyForce(FVector& Force, FVector& Torque)
    {
        AActor_eventKApplyForce_Parms Parms;
        Parms.Force=Force;
        Parms.Torque=Torque;
        ProcessEvent(FindFunctionChecked(ENGINE_KApplyForce),&Parms);
        Force=Parms.Force;
        Torque=Parms.Torque;
    }
    void eventKSkelConvulse()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KSkelConvulse),NULL);
    }
    void eventKVelDropBelow()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KVelDropBelow),NULL);
    }
    void eventKImpact(class AActor* Other, FVector pos, FVector impactVel, FVector impactNorm)
    {
        AActor_eventKImpact_Parms Parms;
        Parms.Other=Other;
        Parms.pos=pos;
        Parms.impactVel=impactVel;
        Parms.impactNorm=impactNorm;
        ProcessEvent(FindFunctionChecked(ENGINE_KImpact),&Parms);
    }
    void eventAnimEnd(INT Channel)
    {
        AActor_eventAnimEnd_Parms Parms;
        if(IsProbing(NAME_AnimEnd)) {
        Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),&Parms);
        }
    }
    void eventClearL2Game()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClearL2Game),NULL);
    }
    void eventL2GameActionNotify(BYTE GameAction)
    {
        AActor_eventL2GameActionNotify_Parms Parms;
        Parms.GameAction=GameAction;
        ProcessEvent(FindFunctionChecked(ENGINE_L2GameActionNotify),&Parms);
    }
    DECLARE_CLASS(AActor,UObject,0|CLASS_NativeReplication,Engine)
    #include "AActor.h"
};


class ENGINE_API ADecoVolumeObject : public AActor
{
public:
    DECLARE_CLASS(ADecoVolumeObject,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoVolumeObject)
};


class ENGINE_API AKeypoint : public AActor
{
public:
    DECLARE_CLASS(AKeypoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API ADecorationList : public AKeypoint
{
public:
    TArrayNoInit<FDecorationType> Decorations;
    DECLARE_CLASS(ADecorationList,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecorationList)
};


class ENGINE_API ALookTarget : public AKeypoint
{
public:
    DECLARE_CLASS(ALookTarget,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALookTarget)
};

enum ESoundOcclusion
{
    OCCLUSION_Default       =0,
    OCCLUSION_None          =1,
    OCCLUSION_BSP           =2,
    OCCLUSION_StaticMeshes  =3,
    OCCLUSION_MAX           =4,
};
enum ASType
{
    AST_Always              =0,
    AST_Day                 =1,
    AST_Night               =2,
    AST_Water               =3,
    AST_MAX                 =4,
};

class ENGINE_API AAmbientSound : public AKeypoint
{
public:
    BYTE AmbientSoundType;
    INT AmbientRandom;
    FLOAT AmbientSoundStartTime;
    class USound* AmbientSound;
    FLOAT SoundRadius;
    BYTE SoundVolume;
    BYTE SoundPitch;
    BYTE SoundOcclusion;
    BITFIELD bFullVolume:1 GCC_PACK(4);
    DECLARE_CLASS(AAmbientSound,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAmbientSound)
};


class ENGINE_API AAIScript : public AKeypoint
{
public:
    class UClass* ControllerClass;
    BITFIELD bNavigate:1 GCC_PACK(4);
    BITFIELD bLoggingEnabled:1;
    class AAIMarker* myMarker GCC_PACK(4);
    DECLARE_CLASS(AAIScript,AKeypoint,0,Engine)
	virtual INT AddMyMarker(AActor *S);
	virtual void ClearMarker();
};


class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    #include "AInterpolationPoint.h"
};


class ENGINE_API APolyMarker : public AKeypoint
{
public:
    DECLARE_CLASS(APolyMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APolyMarker)
};


class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};

enum ECALCSTEP
{
    STEP_TARGET_PLAYER      =0,
    STEP_MOVE_BACK          =1,
    STEP_ROTATE_FLOAT       =2,
    STEP_TARGET_FLOAT       =3,
    STEP_MOVE_FLOAT         =4,
    STEP_MAX                =5,
};

class ENGINE_API AViewportWindowController : public AActor
{
public:
    class USkeletalMeshInstance* TargetSMInst;
    INT BoneIndex;
    FVector TargetLocation;
    FRotator TargetRotation;
    TArrayNoInit<FVector> CameraPath;
    INT CalcStep;
    FVector OrgLocation;
    INT EffectType;
    FLOAT fEffectElapsedTime;
    DECLARE_CLASS(AViewportWindowController,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AViewportWindowController)
};

struct ENGINE_API FKeyValuePair
{
    FString Key;
    FString Value;
    friend ENGINE_API FArchive& operator<<(FArchive& Ar,FKeyValuePair& MyKeyValuePair)
    {
        return Ar << MyKeyValuePair.Key << MyKeyValuePair.Value;
    }
};

struct ENGINE_API FPlayerResponseLine
{
    INT PlayerNum;
    INT PlayerID;
    FString PlayerName;
    INT Ping;
    INT Score;
    INT StatsID;
    TArray<FKeyValuePair> PlayerInfo;
    friend ENGINE_API FArchive& operator<<(FArchive& Ar,FPlayerResponseLine& MyPlayerResponseLine)
    {
        return Ar << MyPlayerResponseLine.PlayerNum << MyPlayerResponseLine.PlayerID << MyPlayerResponseLine.PlayerName << MyPlayerResponseLine.Ping << MyPlayerResponseLine.Score << MyPlayerResponseLine.StatsID << MyPlayerResponseLine.PlayerInfo;
    }
};

struct ENGINE_API FServerResponseLine
{
    INT ServerID;
    FString IP;
    INT Port;
    INT QueryPort;
    FString ServerName;
    FString MapName;
    FString GameType;
    INT CurrentPlayers;
    INT MaxPlayers;
    INT Ping;
    TArray<FKeyValuePair> ServerInfo;
    TArray<FPlayerResponseLine> PlayerInfo;
    friend ENGINE_API FArchive& operator<<(FArchive& Ar,FServerResponseLine& MyServerResponseLine)
    {
        return Ar << MyServerResponseLine.ServerID << MyServerResponseLine.IP << MyServerResponseLine.Port << MyServerResponseLine.QueryPort << MyServerResponseLine.ServerName << MyServerResponseLine.MapName << MyServerResponseLine.GameType << MyServerResponseLine.CurrentPlayers << MyServerResponseLine.MaxPlayers << MyServerResponseLine.Ping << MyServerResponseLine.ServerInfo << MyServerResponseLine.PlayerInfo;
    }
};


class ENGINE_API AInfo : public AActor
{
public:
    DECLARE_CLASS(AInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};


struct ASecurity_eventServerCallback_Parms
{
    INT SecType;
    FString Data;
};
class ENGINE_API ASecurity : public AInfo
{
public:
    INT LastType;
    FStringNoInit LastParams[2];
    DECLARE_FUNCTION(execNativePerform);
    void eventServerCallback(INT SecType, const FString& Data)
    {
        ASecurity_eventServerCallback_Parms Parms;
        Parms.SecType=SecType;
        Parms.Data=Data;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerCallback),&Parms);
    }
    DECLARE_CLASS(ASecurity,AInfo,0,Engine)
    #include "ASecurity.h"
};

enum EAffect
{
    AFFECT_ViewportCamera   =0,
    AFFECT_Actor            =1,
    AFFECT_MAX              =2,
};

struct ASceneManager_eventSceneEnded_Parms
{
};
struct ASceneManager_eventSceneStarted_Parms
{
};
class ENGINE_API ASceneManager : public AInfo
{
public:
    TArrayNoInit<class UMatAction*> Actions;
    BYTE Affect;
    class AActor* AffectedActor;
    BITFIELD bLooping:1 GCC_PACK(4);
    BITFIELD bCinematicView:1;
    FName PlayerScriptTag GCC_PACK(4);
    FName NextSceneTag;
    BITFIELD bReverseView:1 GCC_PACK(4);
    INT nSceneManagerID GCC_PACK(4);
    FLOAT PctSceneComplete;
    class UMatAction* CurrentAction;
    FLOAT SceneSpeed;
    FLOAT TotalSceneTime;
    class AActor* Viewer;
    class APawn* OldPawn;
    BITFIELD bIsRunning:1 GCC_PACK(4);
    BITFIELD bIsSceneStarted:1;
    FLOAT CurrentTime GCC_PACK(4);
    TArrayNoInit<FVector> SampleLocations;
    TArrayNoInit<class UMatSubAction*> SubActions;
    FOrientation CamOrientation;
    FOrientation PrevOrientation;
    FInterpolator RotInterpolator;
    FVector CameraShake;
    FVector DollyOffset;
    DECLARE_FUNCTION(execGetTotalSceneTime);
    void eventSceneEnded()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SceneEnded),NULL);
    }
    void eventSceneStarted()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SceneStarted),NULL);
    }
    DECLARE_CLASS(ASceneManager,AInfo,0|CLASS_Config,Engine)
    #include "ASceneManager.h"
};


class ENGINE_API AL2SeamlessInfo : public AInfo
{
public:
    FLOAT AffectRange;
    INT MapX;
    INT MapY;
    BITFIELD bLoaded:1 GCC_PACK(4);
    DECLARE_CLASS(AL2SeamlessInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AL2SeamlessInfo)
};

enum SuperPointMoveType
{
    Follow_Rail             =0,
    Move_Random             =1,
    Follow_MAX              =2,
};

class ENGINE_API ASuperPointInfo : public AInfo
{
public:
    FStringNoInit SuperPointName;
    BYTE MoveType;
    TArrayNoInit<FVector> DeltaPoint;
    TArrayNoInit<FVector> AbsPoint;
    TArrayNoInit<INT> Delay;
    FColor LineColor;
    FColor PathColor;
    FColor FontColor;
    INT Paths;
    DECLARE_CLASS(ASuperPointInfo,AInfo,0,Engine)
	typedef TMap<int, TArray<FVector> > SuperPointPathMapType;
	SuperPointPathMapType* GetPaths() { return (SuperPointPathMapType*)Paths; }
	virtual void PostEditChange() 
	{
		for (int i=0; i<AbsPoint.Num(); i++)
		{
			DeltaPoint(i) = AbsPoint(i) - Location;
		}
	}
};


class ENGINE_API AServerPrimitive : public AInfo
{
public:
    TArrayNoInit<FServerPointStruct> PointArray;
    TArrayNoInit<FServerLineStruct> LineArray;
    FColor LineColor;
    FStringNoInit Name;
    DECLARE_CLASS(AServerPrimitive,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AServerPrimitive)
};


class ENGINE_API ANpcPosInfo : public AInfo
{
public:
    TArrayNoInit<FNpcPos> pos;
    FColor LineColor;
    FName NpcName;
    FStringNoInit nickname;
    FName ai;
    TArrayNoInit<FNpcPrivate> Privates;
    FWhenExtinctionCreate when_extinction_create;
    BITFIELD bWayPointsShow:1 GCC_PACK(4);
    TArrayNoInit<FWayPoint> WayPoints GCC_PACK(4);
    DECLARE_CLASS(ANpcPosInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANpcPosInfo)
};


class ENGINE_API ALocationInfo : public AInfo
{
public:
    BITFIELD bMovable:1 GCC_PACK(4);
    DECLARE_CLASS(ALocationInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALocationInfo)
};

enum InitalSpawn
{
    All                     =0,
    random1                 =1,
    random2                 =2,
};

class ENGINE_API ATerritoryInfo : public AInfo
{
public:
    FStringNoInit TerritoryName;
    INT PointNum;
    FLOAT TerritoryHeight;
    FVector DeltaPoint[64];
    FColor LineColor;
    TArrayNoInit<FAnywhereNpcMaker> npcmaker;
    DECLARE_CLASS(ATerritoryInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATerritoryInfo)
};


class ENGINE_API AEnvCreatureManagerInfo : public AInfo
{
public:
    DECLARE_CLASS(AEnvCreatureManagerInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AEnvCreatureManagerInfo)
};


class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
	INT* GetOptimizedRepList( BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};


class ENGINE_API ATeamInfo : public AReplicationInfo
{
public:
    FStringNoInit TeamName;
    INT Size;
    FLOAT Score;
    INT TeamIndex;
    FColor TeamColor;
    FColor AltTeamColor;
    class AActor* HomeBase;
    class UClass* DefaultPlayerClass;
    FStringNoInit ColorNames[4];
    class UMaterial* TeamIcon;
    DECLARE_CLASS(ATeamInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    #include "ATeamInfo.h"
};

enum ECarriedObjectState
{
    COS_Home                =0,
    COS_HeldFriendly        =1,
    COS_HeldEnemy           =2,
    COS_Down                =3,
    COS_MAX                 =4,
};

class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit GameName;
    FStringNoInit GameClass;
    BITFIELD bTeamGame:1 GCC_PACK(4);
    BITFIELD bStopCountDown:1;
    BITFIELD bMatchHasBegun:1;
    BITFIELD bTeamSymbolsUpdated:1;
    INT RemainingTime GCC_PACK(4);
    INT ElapsedTime;
    INT RemainingMinute;
    FLOAT SecondCount;
    INT GoalScore;
    INT TimeLimit;
    INT MaxLives;
    class ATeamInfo* Teams[2];
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    INT ServerRegion;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    class AActor* Winner;
    TArrayNoInit<class APlayerReplicationInfo*> PRIArray;
    FVector FlagPos;
    BYTE CarriedObjectState[2];
    INT MatchID;
    DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "AGameReplicationInfo.h"
};


struct APlayerReplicationInfo_eventClientNameChange_Parms
{
};
struct APlayerReplicationInfo_eventUpdateCharacter_Parms
{
};
class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
    FLOAT Score;
    FLOAT Deaths;
    class ACarriedObject* HasFlag;
    INT Ping;
    class AVolume* PlayerVolume;
    class AZoneInfo* PlayerZone;
    INT NumLives;
    FStringNoInit PlayerName;
    FStringNoInit CharacterName;
    FStringNoInit OldCharacterName;
    FStringNoInit OldName;
    FStringNoInit PreviousName;
    INT PlayerID;
    class ATeamInfo* Team;
    INT TeamID;
    class UClass* VoiceType;
    BITFIELD bAdmin:1 GCC_PACK(4);
    BITFIELD bIsFemale:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bOnlySpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bOutOfLives:1;
    BITFIELD bBot:1;
    BITFIELD bWelcomed:1;
    BITFIELD bReceivedPing:1;
    BITFIELD bHasFlag:1;
    INT StartTime GCC_PACK(4);
    FStringNoInit StringSpectating;
    FStringNoInit StringUnknown;
    INT GoalsScored;
    INT Kills;
    void eventClientNameChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClientNameChange),NULL);
    }
    void eventUpdateCharacter()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateCharacter),NULL);
    }
    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    #include "APlayerReplicationInfo.h"
};


class ENGINE_API APotentialClimbWatcher : public AInfo
{
public:
    DECLARE_CLASS(APotentialClimbWatcher,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APotentialClimbWatcher)
};


class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator;
    class UClass* DefaultWeapon;
    FStringNoInit DefaultWeaponName;
    FStringNoInit GroupName;
    FStringNoInit FriendlyName;
    FStringNoInit Description;
    BITFIELD bUserAdded:1 GCC_PACK(4);
    DECLARE_CLASS(AMutator,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMutator)
};


class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};


class ENGINE_API ASavedMove : public AInfo
{
public:
    class ASavedMove* NextMove;
    FLOAT TimeStamp;
    FLOAT Delta;
    BITFIELD bRun:1 GCC_PACK(4);
    BITFIELD bDuck:1;
    BITFIELD bPressedJump:1;
    BITFIELD bDoubleJump:1;
    BYTE DoubleClickMove GCC_PACK(4);
    BYTE SavedPhysics;
    FVector SavedLocation;
    FVector SavedVelocity;
    DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};


struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    class ASkyZoneInfo* SkyZone;
    FName ZoneTag;
    FStringNoInit LocationName;
    FLOAT KillZ;
    BYTE KillZType;
    BITFIELD bSoftKillZ:1 GCC_PACK(4);
    BITFIELD bFogZone:1;
    BITFIELD bTerrainZone:1;
    BITFIELD bDistanceFog:1;
    BITFIELD bClearToFogColor:1;
    TArrayNoInit<class ATerrainInfo*> Terrains GCC_PACK(4);
    FVector AmbientVector;
    BYTE AmbientBrightness;
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FColor DistanceFogColor;
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    FLOAT DistanceFogBlendTime;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    class UI3DL2Listener* ZoneEffect;
    class UTexture* LensFlare[12];
    FLOAT LensFlareOffset[12];
    FLOAT LensFlareScale[12];
    BITFIELD bLonelyZone:1 GCC_PACK(4);
    TArrayNoInit<class AZoneInfo*> ManualExcludes GCC_PACK(4);
    DECLARE_FUNCTION(execZoneActors);
    void eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        if(IsProbing(NAME_ActorLeaving)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
        }
    }
    void eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        if(IsProbing(NAME_ActorEntered)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
        }
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0,Engine)
    #include "AZoneInfo.h"
};


struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
struct AWarpZoneInfo_eventGenerate_Parms
{
};
class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1 GCC_PACK(4);
    INT iWarpZone GCC_PACK(4);
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    void eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
    }
    void eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
    #include "AWarpZoneInfo.h"
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ENetMode
{
    NM_Standalone           =0,
    NM_DedicatedServer      =1,
    NM_ListenServer         =2,
    NM_Client               =3,
    NM_MAX                  =4,
};
enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_Saving           =2,
    LEVACT_Connecting       =3,
    LEVACT_Precaching       =4,
    LEVACT_MAX              =5,
};
enum EPhysicsDetailLevel
{
    PDL_Low                 =0,
    PDL_Medium              =1,
    PDL_High                =2,
    PDL_MAX                 =3,
};

struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};
struct ALevelInfo_eventFillPrecacheStaticMeshesArray_Parms
{
};
struct ALevelInfo_eventFillPrecacheMaterialsArray_Parms
{
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    FLOAT TimeDilation;
    FLOAT TimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FLOAT PauseDelay;
    FLOAT DecalStayScale;
    BYTE PhysicsDetailLevel;
    FLOAT KarmaTimeScale;
    FLOAT RagdollTimeScale;
    INT MaxRagdolls;
    FLOAT KarmaGravScale;
    BITFIELD bKStaticFriction:1 GCC_PACK(4);
    BITFIELD bKNoInit:1;
    FStringNoInit Title GCC_PACK(4);
    FStringNoInit Author;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    class APlayerReplicationInfo* Pauser;
    INT RecommendedNumPlayers;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    FStringNoInit SelectedGroups;
    BITFIELD bLonePlayer:1 GCC_PACK(4);
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BYTE DetailMode GCC_PACK(4);
    BITFIELD bDropDetail:1 GCC_PACK(4);
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bPathsRebuilt:1;
    BITFIELD bHasPathNodes:1;
    BITFIELD bCapFramerate:1;
    BITFIELD bNeverPrecache:1;
    FVector CameraLocationDynamic GCC_PACK(4);
    FVector CameraLocationTop;
    FVector CameraLocationFront;
    FVector CameraLocationSide;
    FRotator CameraRotationDynamic;
    FStringNoInit Song;
    FLOAT PlayerDoppler;
    FLOAT MusicVolumeOverride;
    FLOAT Brightness;
    class UTexture* Screenshot;
    class UTexture* DefaultTexture;
    class UTexture* WireframeTexture;
    class UTexture* WhiteSquareTexture;
    class UTexture* LargeVertex;
    INT HubStackLevel;
    BYTE LevelAction;
    class AGameReplicationInfo* GRI;
    BYTE NetMode;
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    FStringNoInit DefaultGameType;
    FStringNoInit PreCacheGame;
    class AGameInfo* Game;
    FLOAT DefaultGravity;
    class ANavigationPoint* NavigationPointList;
    class AController* ControllerList;
    class APlayerController* LocalPlayerController;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1 GCC_PACK(4);
    FLOAT NextSwitchCountdown GCC_PACK(4);
    class UObjectPool* ObjectPool;
    TArrayNoInit<class UMaterial*> PrecacheMaterials;
    TArrayNoInit<class UStaticMesh*> PrecacheStaticMeshes;
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execIsDemoBuild);
    DECLARE_FUNCTION(execGetLocalURL);
    DECLARE_FUNCTION(execIsEntry);
    DECLARE_FUNCTION(execDetailChange);
    void eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
    }
    void eventFillPrecacheStaticMeshesArray()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FillPrecacheStaticMeshesArray),NULL);
    }
    void eventFillPrecacheMaterialsArray()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FillPrecacheMaterialsArray),NULL);
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "ALevelInfo.h"
};


struct AGameInfo_eventBroadcastLocalized_Parms
{
    class AActor* Sender;
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AGameInfo_eventBroadcast_Parms
{
    class AActor* Sender;
    FString Msg;
    FName Type;
};
struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* PlayerPawn;
};
struct AGameInfo_eventL2NetPostLogin_Parms
{
    class APlayerController* NewPlayer;
};
struct AGameInfo_eventPostLogin_Parms
{
    class APlayerController* NewPlayer;
};
struct AGameInfo_eventSpawnPlayerPawn_Parms
{
    class AController* aPlayer;
    FString PawnClassName;
    FVector StartLocation;
    FRotator StartRotation;
};
struct AGameInfo_eventSpawnDefaultPlayerPawn_Parms
{
    class AController* aPlayer;
};
struct AGameInfo_eventL2NetLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class APlayerController* ReturnValue;
};
struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class APlayerController* ReturnValue;
};
struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString Address;
    FString Error;
    FString FailCode;
};
struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};
struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};
struct AGameInfo_eventDetailChange_Parms
{
};
struct AGameInfo_eventGameEnding_Parms
{
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    BITFIELD bRestartLevel:1 GCC_PACK(4);
    BITFIELD bPauseable:1;
    BITFIELD bWeaponStay:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bDelayedStart:1;
    BITFIELD bWaitingToStartMatch:1;
    BITFIELD bChangeLevels:1;
    BITFIELD bAlreadyChanged:1;
    BITFIELD bLoggingGame:1;
    BITFIELD bEnableStatLogging:1;
    BITFIELD bAllowWeaponThrowing:1;
    FLOAT GameDifficulty GCC_PACK(4);
    INT GoreLevel;
    FLOAT AutoAim;
    FLOAT GameSpeed;
    FLOAT StartTime;
    FStringNoInit DefaultPlayerClassName;
    FStringNoInit ScoreBoardType;
    FStringNoInit BotMenuType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit GameUMenuType;
    FStringNoInit MultiplayerUMenuType;
    FStringNoInit GameOptionsMenuType;
    FStringNoInit HUDType;
    FStringNoInit MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    INT MaxSpectators;
    INT NumSpectators;
    INT MaxPlayers;
    INT NumPlayers;
    INT NumBots;
    INT CurrentID;
    FStringNoInit DefaultPlayerName;
    FStringNoInit GameName;
    FLOAT FearCostFallOff;
    INT GoalScore;
    INT MaxLives;
    INT TimeLimit;
    class UClass* DeathMessageClass;
    class UClass* GameMessageClass;
    FName OtherMesgGroup;
    FStringNoInit MutatorClass;
    class AMutator* BaseMutator;
    FStringNoInit AccessControlClass;
    class AAccessControl* AccessControl;
    class AGameRules* GameRulesModifiers;
    FStringNoInit BroadcastHandlerClass;
    class ABroadcastHandler* BroadcastHandler;
    class UClass* PlayerControllerClass;
    FStringNoInit PlayerControllerClassName;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    BITFIELD bWelcomePending:1 GCC_PACK(4);
    class AGameStats* GameStats GCC_PACK(4);
    class UClass* GameStatsClass;
    TArrayNoInit<FVoiceChatterInfo> VoiceChatters;
    class UClass* SecurityClass;
    FStringNoInit ScreenShotName;
    FStringNoInit DecoTextName;
    FStringNoInit Acronym;
    FStringNoInit GIPropsDisplayText[11];
    FStringNoInit GIPropsExtras[2];
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execGetNetworkNumber);
    void eventBroadcastLocalized(class AActor* Sender, class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AGameInfo_eventBroadcastLocalized_Parms Parms;
        Parms.Sender=Sender;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalized),&Parms);
    }
    void eventBroadcast(class AActor* Sender, const FString& Msg, FName Type)
    {
        AGameInfo_eventBroadcast_Parms Parms;
        Parms.Sender=Sender;
        Parms.Msg=Msg;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_Broadcast),&Parms);
    }
    void eventAcceptInventory(class APawn* PlayerPawn)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
    }
    void eventL2NetPostLogin(class APlayerController* NewPlayer)
    {
        AGameInfo_eventL2NetPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_L2NetPostLogin),&Parms);
    }
    void eventPostLogin(class APlayerController* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
    }
    void eventSpawnPlayerPawn(class AController* aPlayer, const FString& PawnClassName, FVector StartLocation, FRotator StartRotation)
    {
        AGameInfo_eventSpawnPlayerPawn_Parms Parms;
        Parms.aPlayer=aPlayer;
        Parms.PawnClassName=PawnClassName;
        Parms.StartLocation=StartLocation;
        Parms.StartRotation=StartRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnPlayerPawn),&Parms);
    }
    void eventSpawnDefaultPlayerPawn(class AController* aPlayer)
    {
        AGameInfo_eventSpawnDefaultPlayerPawn_Parms Parms;
        Parms.aPlayer=aPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnDefaultPlayerPawn),&Parms);
    }
    class APlayerController* eventL2NetLogin(const FString& Portal, const FString& Options, FString& Error)
    {
        AGameInfo_eventL2NetLogin_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_L2NetLogin),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    class APlayerController* eventLogin(const FString& Portal, const FString& Options, FString& Error)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    void eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.Address=Address;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    FString eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
        Error=Parms.Error;
    }
    void eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    void eventGameEnding()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};


struct AStatLog_eventLogGameSpecial2_Parms
{
    FString SpecialID;
    FString SpecialParam;
    FString SpecialParam2;
};
struct AStatLog_eventLogGameSpecial_Parms
{
    FString SpecialID;
    FString SpecialParam;
};
struct AStatLog_eventGetLocalLogFileName_Parms
{
    FString ReturnValue;
};
class ENGINE_API AStatLog : public AInfo
{
public:
    INT Context;
    BITFIELD bWorld:1 GCC_PACK(4);
    FLOAT TimeStamp GCC_PACK(4);
    FStringNoInit LocalStandard;
    FStringNoInit WorldStandard;
    FStringNoInit LogVersion;
    FStringNoInit LogInfoURL;
    FStringNoInit GameName;
    FStringNoInit GameCreator;
    FStringNoInit GameCreatorURL;
    FStringNoInit DecoderRingURL;
    FStringNoInit LocalBatcherURL;
    FStringNoInit LocalBatcherParams;
    FStringNoInit LocalStatsURL;
    FStringNoInit WorldBatcherURL;
    FStringNoInit WorldBatcherParams;
    FStringNoInit WorldStatsURL;
    FStringNoInit LocalLogDir;
    FStringNoInit WorldLogDir;
    BITFIELD bWorldBatcherError:1 GCC_PACK(4);
    BITFIELD bBatchLocal:1;
    class AStatLog* LocalLog GCC_PACK(4);
    DECLARE_FUNCTION(execGetMapFileName);
    DECLARE_FUNCTION(execGetGMTRef);
    DECLARE_FUNCTION(execGetPlayerChecksum);
    DECLARE_FUNCTION(execLogMutator);
    DECLARE_FUNCTION(execInitialCheck);
    DECLARE_FUNCTION(execBrowseRelativeLocalURL);
    DECLARE_FUNCTION(execExecuteWorldLogBatcher);
    DECLARE_FUNCTION(execBatchLocal);
    DECLARE_FUNCTION(execExecuteSilentLogBatcher);
    DECLARE_FUNCTION(execExecuteLocalLogBatcher);
    void eventLogGameSpecial2(const FString& SpecialID, const FString& SpecialParam, const FString& SpecialParam2)
    {
        AStatLog_eventLogGameSpecial2_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        Parms.SpecialParam2=SpecialParam2;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial2),&Parms);
    }
    void eventLogGameSpecial(const FString& SpecialID, const FString& SpecialParam)
    {
        AStatLog_eventLogGameSpecial_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial),&Parms);
    }
    FString eventGetLocalLogFileName()
    {
        AStatLog_eventGetLocalLogFileName_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLocalLogFileName),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AStatLog,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLog)
};


class ENGINE_API AStatLogFile : public AStatLog
{
public:
    BITFIELD bWatermark:1 GCC_PACK(4);
    INT LogAr GCC_PACK(4);
    FStringNoInit StatLogFile;
    FStringNoInit StatLogFinal;
    DECLARE_FUNCTION(execFileLog);
    DECLARE_FUNCTION(execFileFlush);
    DECLARE_FUNCTION(execGetChecksum);
    DECLARE_FUNCTION(execWatermark);
    DECLARE_FUNCTION(execCloseLog);
    DECLARE_FUNCTION(execOpenLog);
    DECLARE_CLASS(AStatLogFile,AStatLog,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLogFile)
};


class ENGINE_API AGameStats : public AInfo
{
public:
    class AFileLog* TempLog;
    class AGameReplicationInfo* GRI;
    BITFIELD bShowBots:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGetMapFileName);
    DECLARE_FUNCTION(execGetStatsIdentifier);
    DECLARE_CLASS(AGameStats,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameStats)
};


class ENGINE_API AFileLog : public AInfo
{
public:
    INT LogAr;
    FStringNoInit LogFileName;
    DECLARE_FUNCTION(execLogf);
    DECLARE_FUNCTION(execCloseLog);
    DECLARE_FUNCTION(execOpenLog);
    DECLARE_CLASS(AFileLog,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AFileLog)
};

struct ENGINE_API FAccessoryType
{
    INT Depth;
    class UStaticMesh* Mesh;
};


class ENGINE_API AStaticMeshActor : public AActor
{
public:
    BITFIELD bAgitDefaultStaticMesh:1 GCC_PACK(4);
    INT AgitID GCC_PACK(4);
    INT AccessoryIndex;
    INT AgitStatus;
    INT CurrAccessoryType;
    TArrayNoInit<FAccessoryType> AccessoryTypeList;
    BITFIELD bTimeReactor:1 GCC_PACK(4);
    FLOAT ShowTime GCC_PACK(4);
    FLOAT HideTime;
    class USound* StepSound_1;
    class USound* StepSound_2;
    class USound* StepSound_3;
    BITFIELD bExactProjectileCollision:1 GCC_PACK(4);
    DECLARE_CLASS(AStaticMeshActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStaticMeshActor)
};


class ENGINE_API AMovableStaticMeshActor : public AStaticMeshActor
{
public:
    FRotator L2OrgRotator;
    FL2RotatorTime L2CycleDeltaTime;
    FL2RotatorTime L2CurrentCycleTime;
    FL2RotatorTime L2CurrentMax;
    BITFIELD bL2InitMove:1 GCC_PACK(4);
    TArrayNoInit<FName> L2MovementTag GCC_PACK(4);
    FL2RotatorTime L2AccelRatio;
    BITFIELD bUseL2RotatorMaxRandom:1 GCC_PACK(4);
    BITFIELD bUseL2RotatorRandomStart:1;
    FRotator L2RotatorRate GCC_PACK(4);
    FRotator L2RotatorMax;
    DECLARE_CLASS(AMovableStaticMeshActor,AStaticMeshActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMovableStaticMeshActor)
};


class ENGINE_API ASpawnableStaticMeshActor : public AStaticMeshActor
{
public:
    DECLARE_CLASS(ASpawnableStaticMeshActor,AStaticMeshActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASpawnableStaticMeshActor)
};

enum EProjectorBlending
{
    PB_None                 =0,
    PB_Modulate             =1,
    PB_AlphaBlend           =2,
    PB_Add                  =3,
    PB_MAX                  =4,
};

class ENGINE_API AProjector : public AActor
{
public:
    BYTE MaterialBlendingOp;
    BYTE FrameBufferBlendingOp;
    class UMaterial* ProjTexture;
    INT FOV;
    INT MaxTraceDistance;
    BITFIELD bProjectBSP:1 GCC_PACK(4);
    BITFIELD bProjectTerrain:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectParticles:1;
    BITFIELD bProjectActor:1;
    BITFIELD bLevelStatic:1;
    BITFIELD bClipBSP:1;
    BITFIELD bClipStaticMesh:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnBackfaces:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnParallelBSP:1;
    FName ProjectTag GCC_PACK(4);
    BITFIELD bDynamicAttach:1 GCC_PACK(4);
    FPlane FrustumPlanes[6] GCC_PACK(4);
    FVector FrustumVertices[8];
    FBox Box;
    FProjectorRenderInfoPtr RenderInfo;
    class UTexture* GradientTexture;
    FMatrix GradientMatrix;
    FMatrix Matrix;
    FVector OldLocation;
    FLOAT ProjectorRadius;
    DECLARE_FUNCTION(execDetachActor);
    DECLARE_FUNCTION(execAttachActor);
    DECLARE_FUNCTION(execAbandonProjector);
    DECLARE_FUNCTION(execDetachProjector);
    DECLARE_FUNCTION(execAttachProjector);
    DECLARE_CLASS(AProjector,AActor,0,Engine)
    #include "AProjector.h"
};


class ENGINE_API AMarkProjector : public AProjector
{
public:
    FVector DesireLocation;
    FVector OffsetDesireLocation;
    BITFIELD bAttachMark:1 GCC_PACK(4);
    class AActor* ProjectedActor GCC_PACK(4);
    DECLARE_FUNCTION(execUpdateDesireLocation);
    DECLARE_CLASS(AMarkProjector,AProjector,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMarkProjector)
};


class ENGINE_API AShadowProjector : public AProjector
{
public:
    class AActor* ShadowActor;
    FVector LightDirection;
    FLOAT LightDistance;
    BITFIELD RootMotion:1 GCC_PACK(4);
    BITFIELD bBlobShadow:1;
    BITFIELD bShadowActive:1;
    class UShadowBitmapMaterial* ShadowTexture GCC_PACK(4);
    BITFIELD L2Hidden:1 GCC_PACK(4);
    BITFIELD L2DefaultShadow:1;
    DECLARE_FUNCTION(execCheckVisible);
    DECLARE_FUNCTION(execUpdateLightInfo);
    DECLARE_CLASS(AShadowProjector,AProjector,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AShadowProjector)
};


class ENGINE_API AMatDemoActor : public AActor
{
public:
    DECLARE_CLASS(AMatDemoActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMatDemoActor)
};

enum ESamePoseStat
{
    SPS_NONE                =0,
    SPS_ONCE                =1,
    SPS_TWICE               =2,
    SPS_MAX                 =3,
};
enum FishingType
{
    FST_NONE                =0,
    FST_WAIT                =1,
    FST_BATTLE              =2,
    FST_MAX                 =3,
};
enum RideType
{
    RD_NONE                 =0,
    RD_STRIDER              =1,
    RD_WYVERN               =2,
    RD_MAX                  =3,
};
enum WeaponType
{
    WT_HAND                 =0,
    WT_1HS                  =1,
    WT_2HS                  =2,
    WT_DUAL                 =3,
    WT_POLE                 =4,
    WT_BOW                  =5,
    WT_THROW                =6,
    WT_DUALFIST             =7,
    WT_MAX                  =8,
};
enum EUpdateMovementAnimType
{
    UM_NONE                 =0,
    UM_ONCE                 =1,
    UM_FORCE                =2,
    UM_MAX                  =3,
};
enum NActionList
{
    NACT_NONE               =0,
    NACT_MELLEATTACK        =1,
    NACT_BOWATTACK          =2,
    NACT_PICITEM            =3,
    NACT_CHANGEITEM         =4,
    NACT_SKILLUSE           =5,
    NACT_SKILLINPUTWAIT     =6,
    NACT_THROWATTACK        =7,
    NACT_SHOTATTACK         =8,
    NACT_PRIVATESTORE       =9,
    NACT_OBSERVING          =10,
    NACT_MAX                =11,
};
struct ENGINE_API FNAttackActionParam
{
    INT Damage;
    BITFIELD bMiss:1 GCC_PACK(4);
    BITFIELD bCritical:1;
    BITFIELD bShieldDefense:1;
    BITFIELD bSpirit:1;
    INT SoulshotGrade GCC_PACK(4);
    class AActor* ActionTarget;
};

struct ENGINE_API FNPrimeActionParam
{
    INT ActionID;
    INT Damage;
    BITFIELD bMiss:1 GCC_PACK(4);
    BITFIELD bCritical:1;
    BITFIELD bShieldDefense:1;
    BITFIELD bSpirit:1;
    INT SoulshotGrade GCC_PACK(4);
    class AActor* ActionTarget;
    INT MaxAtkShotNum;
    INT CurAtkShotNum;
    INT SkillID;
    TArrayNoInit<FNAttackActionParam> NAssociatedAttackParam;
};

struct ENGINE_API FNAtkConsumeItemParam
{
    INT BowItemID;
    INT BowUseItemID;
};

struct ENGINE_API FNSilhouetteParam
{
    BYTE Type;
    BYTE R;
    BYTE G;
    BYTE B;
};


struct APawn_eventNotifyDie_Parms
{
};
struct APawn_eventAssociateAttackedNotify_Parms
{
    class APawn* Attacker;
    class AActor* AttackActor;
    INT Type;
    INT Damage;
    BITFIELD bMiss;
    BITFIELD bShieldDefense;
    BITFIELD bCritical;
    BITFIELD bSpirit;
    BITFIELD keepframerate;
    BITFIELD showeffect;
};
struct APawn_eventAttackedNotify_Parms
{
    class APawn* Attacker;
    class AActor* AttackActor;
    INT Type;
    BITFIELD keepframerate;
    BITFIELD showeffect;
};
struct APawn_eventPlayLandingAnimation_Parms
{
    FLOAT impactVel;
};
struct APawn_eventPlayFalling_Parms
{
};
struct APawn_eventPlayJump_Parms
{
};
struct APawn_eventChangeAnimation_Parms
{
};
struct APawn_eventStopPlayFiring_Parms
{
};
struct APawn_eventPlayDying_Parms
{
    class UClass* DamageType;
    FVector HitLoc;
};
struct APawn_eventSetAnimAction_Parms
{
    FName NewAction;
};
struct APawn_eventBreathTimer_Parms
{
};
struct APawn_eventHeadVolumeChange_Parms
{
    class APhysicsVolume* newHeadVolume;
};
struct APawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventStartCrouch_Parms
{
    FLOAT HeightAdjust;
};
struct APawn_eventEndCrouch_Parms
{
    FLOAT HeightAdjust;
};
struct APawn_eventModifyVelocity_Parms
{
    FLOAT DeltaTime;
    FVector OldVelocity;
};
struct APawn_eventClientMessage_Parms
{
    FString S;
    FName Type;
};
struct APawn_eventSetWalking_Parms
{
    BITFIELD bNewIsWalking;
};
struct APawn_eventAnimBegin_Parms
{
    FName SequenceName;
};
struct APawn_eventSetHeadScale_Parms
{
    FLOAT NewScale;
};
class ENGINE_API APawn : public AActor
{
public:
    class UMesh* SubMeshes[9];
    class UMesh* RightHandMesh;
    class UMesh* LeftHandMesh;
    class UMesh* RightArmMesh;
    class UMesh* LeftArmMesh;
    class UMesh* CloakMesh;
    class UMesh* CloakCoverMesh;
    class UMeshInstance* SubMeshInstances[9];
    class UMeshInstance* RightHandMeshInstance;
    class UMeshInstance* LeftHandMeshInstance;
    class UMeshInstance* RightArmMeshInstance;
    class UMeshInstance* LeftArmMeshInstance;
    class UMeshInstance* CloakMeshInstance;
    class UMeshInstance* CloakCoverMeshInstance;
    FName RightHandBone;
    FName LeftHandBone;
    FName RightArmBone;
    FName LeftArmBone;
    FName SpineBone;
    FName LowbodyBone;
    FName CapeBone;
    FName HeadBone;
    FName RightFootBone;
    FName LeftFootBone;
    FName WingBone;
    INT EffectSpawnBoneIdx;
    class UMaterial* SubSkins[9];
    class UMaterial* RightHandSkins;
    class UMaterial* LeftHandSkins;
    class UMaterial* RightArmSkins;
    class UMaterial* LeftArmSkins[3];
    class UMaterial* CloakSkins[2];
    FStringNoInit nickname;
    FName ai;
    TArrayNoInit<FNpcPrivate> Privates;
    FWhenExtinctionCreate when_extinction_create;
    BITFIELD bWayPointsShow:1 GCC_PACK(4);
    TArrayNoInit<FWayPoint> WayPoints GCC_PACK(4);
    FLOAT WeaponScale;
    FNMagicInfo MagicInfo;
    class UMesh* SubMeshesBuffer[9];
    class UMaterial* SubSkinsBuffer[9];
    class UMesh* RightHandMeshBuffer;
    class UMaterial* RightHandSkinsBuffer;
    class UMesh* LeftHandMeshBuffer;
    class UMaterial* LeftHandSkinsBuffer;
    class UMesh* RightArmMeshBuffer;
    class UMaterial* RightArmSkinsBuffer;
    class UMesh* LeftArmMeshBuffer;
    class UMaterial* LeftArmSkinsBuffer[3];
    class UMesh* CloakMeshBuffer;
    class UMaterial* CloakSkinsBuffer[2];
    class UMesh* CloakCoverMeshBuffer;
    FNSilhouetteParam NSilhouetteData;
    FNPrimeActionParam NPrimeAction;
    TArrayNoInit<FNActionPtr> NActions;
    FNAtkConsumeItemParam NAtkConsumeItem;
    TArrayNoInit<class UExtraMeshData*> ExtraMeshDatas;
    BITFIELD bPhysicInit:1 GCC_PACK(4);
    BITFIELD bAsTreatWorld:1;
    BITFIELD bIgnorePhysics:1;
    BITFIELD CanBeIngnoredCollision:1;
    BITFIELD bPlayingSpecialAnim:1;
    FRotator LastNeckRot GCC_PACK(4);
    FRotator LastBodyRot;
    BITFIELD bFaceRotation:1 GCC_PACK(4);
    BITFIELD bEnableFaceRotation:1;
    BITFIELD bNpc:1;
    INT CharClassID GCC_PACK(4);
    INT NpcClassID;
    INT AttackItemClassID;
    INT DefenseItemClassID;
    INT ShieldItemClassID;
    BITFIELD bGetOnVehicle:1 GCC_PACK(4);
    FLOAT AttackSpeedRate GCC_PACK(4);
    FLOAT NonAttackSpeedRate;
    FLOAT SkillSpeedRate;
    FLOAT PhysicalSkillSpeedRate;
    FLOAT MoveTimer;
    FLOAT MoveToPawnAdjust;
    INT MoveEmergencyLevel;
    INT WalkAnimFrameInMove;
    FLOAT ValidateLocationMoveTime;
    FLOAT ValidateLocationSpeed;
    INT WantedYaw;
    BITFIELD bWantChangeYaw:1 GCC_PACK(4);
    BITFIELD bTurning:1;
    INT TurningDir GCC_PACK(4);
    BITFIELD bNotRotationMoving:1 GCC_PACK(4);
    class UClass* DamageEffect GCC_PACK(4);
    FLOAT GroundMaxSpeed;
    FLOAT GroundMinSpeed;
    FLOAT WaterMaxSpeed;
    FLOAT WaterMinSpeed;
    FLOAT AirMaxSpeed;
    FLOAT AirMinSpeed;
    FLOAT HoverMaxSpeed;
    FLOAT HoverMinSpeed;
    BITFIELD bUpdateMovementAnim:1 GCC_PACK(4);
    BYTE UpdateMovementAnimType GCC_PACK(4);
    BITFIELD bRide:1 GCC_PACK(4);
    class APawn* RidePawn GCC_PACK(4);
    BYTE CurRideType;
    BYTE CurWeaponType;
    BITFIELD bFish:1 GCC_PACK(4);
    BITFIELD bBrightFloat:1;
    BYTE CurFishingType GCC_PACK(4);
    class AActor* FishLine;
    class AL2Float* FishFloat;
    class AViewportWindowController* VWController;
    FLOAT SkinNotifyElapsedTime;
    FLOAT SkinNotifyNextStartTime;
    BITFIELD bDemageAct:1 GCC_PACK(4);
    INT bDemageStatus GCC_PACK(4);
    FLOAT DemageDist;
    BITFIELD bSpineRotation:1 GCC_PACK(4);
    BITFIELD bTargetSpineRotation:1;
    FVector EffTargetLocation GCC_PACK(4);
    INT LoadingResourceRef;
    BITFIELD bCreatedResource:1 GCC_PACK(4);
    INT Curvature GCC_PACK(4);
    FLOAT WaistAngle;
    FVector WarpDest;
    BITFIELD IsWarpDest:1 GCC_PACK(4);
    BITFIELD bReadyToWarp:1;
    BITFIELD bIgnoreToWarp:1;
    INT Environment GCC_PACK(4);
    BITFIELD bHitGroundInWater:1 GCC_PACK(4);
    BITFIELD bSwimAfloat:1;
    FRotator LastFootRot GCC_PACK(4);
    FName TurnAnimName[8];
    FName WalkAnimName[8];
    FName RunAnimName[8];
    FName FallAnimName[8];
    FName DamageFlyAnimName[8];
    FName JumpAnimName[8];
    FName BJumpAnimName[8];
    FName WaitAnimName[8];
    FName AtkWaitAnimName[8];
    FName SitAnimName[8];
    FName SitWaitAnimName[8];
    FName StandAnimName[8];
    FName DeathStandAnimName[8];
    FName ChairSitAnimName[8];
    FName ChairWaitAnimName[8];
    FName ChairStandAnimName[8];
    FName StunAnimName[8];
    FName Atk01AnimName[8];
    FName Atk02AnimName[8];
    FName Atk03AnimName[8];
    FName AtkUpAnimName[8];
    FName AtkDownAnimName[8];
    FName SpAtk01AnimName[8];
    FName SpAtk02AnimName[8];
    FName SpAtk03AnimName[8];
    FName SpAtk04AnimName[8];
    FName SpAtk05AnimName[8];
    FName SpAtk06AnimName[8];
    FName SpAtk07AnimName[8];
    FName SpAtk08AnimName[8];
    FName SpAtk09AnimName[8];
    FName SpAtk10AnimName[8];
    FName SpAtk11AnimName[8];
    FName SpAtk12AnimName[8];
    FName SpAtk13AnimName[8];
    FName SpAtk14AnimName[8];
    FName SpAtk15AnimName[8];
    FName SpAtk16AnimName[8];
    FName SpAtk17AnimName[8];
    FName SpAtk18AnimName[8];
    FName SpAtk19AnimName[8];
    FName SpAtk20AnimName[8];
    FName SpAtk21AnimName[8];
    FName SpAtk22AnimName[8];
    FName SpAtk23AnimName[8];
    FName SpAtk24AnimName[8];
    FName SpAtk25AnimName[8];
    FName SpAtk26AnimName[8];
    FName SpAtk27AnimName[8];
    FName SpAtk28AnimName[8];
    FName ShieldAtkAnimName[8];
    FName DefenceAnimName[8];
    FName DodgeAnimName[8];
    FName DeathAnimName[8];
    FName DeathWaitAnimName[8];
    FName SitDeathAnimName[8];
    FName SitDeathWaitAnimName[8];
    FName DamageAnimName[8];
    FName CastShortAnimName[8];
    FName CastMidAnimName[8];
    FName CastLongAnimName[8];
    FName CastEndAnimName[8];
    FName MagicThrowAnimName[8];
    FName MagicShotAnimName[8];
    FName MagicNoTargetAnimName[8];
    FName MagicFriendAnimName[8];
    FName PicItemAnimName[8];
    FName ThrowAnimName[8];
    FName PcSocialAnimName[20];
    FName NpcSocialAnimName[5];
    FName RiderWaitAnimName[3];
    FName RiderAtkAnimName[3];
    FName RiderRunAnimName[3];
    FName RiderDeathWaitAnimName[3];
    FName RiderDeathAnimName[3];
    FName SwimDeathAnimName[8];
    FName SwimAnimName[8];
    FName SwimWaitAnimName[8];
    FName SwimDeathWaitAnimName[8];
    FName SwimAttackWaitAnimName[8];
    FName FishStartAnimName;
    FName FishWaitAnimName;
    FName FishControlAnimName;
    FName FishPullAnimName;
    FName FishEndAnimName;
    FLOAT WalkAnimRate[8];
    FLOAT RunAnimRate[8];
    FLOAT Atk01AnimRate[8];
    FLOAT Atk02AnimRate[8];
    FLOAT Atk03AnimRate[8];
    FLOAT AtkUpAnimRate[8];
    FLOAT AtkDownAnimRate[8];
    FLOAT SpAtk01AnimRate[8];
    FLOAT SpAtk02AnimRate[8];
    FLOAT SpAtk03AnimRate[8];
    FLOAT SpAtk04AnimRate[8];
    FLOAT ShieldAtkAnimRate[8];
    FLOAT CastShortAnimRate[8];
    FLOAT CastMidAnimRate[8];
    FLOAT CastLongAnimRate[8];
    FLOAT CastShortEndAnimRate[8];
    FLOAT MagicThrowAnimRate[8];
    FLOAT MagicShotAnimRate[8];
    FLOAT MagicNoTargetAnimRate[8];
    FLOAT MagicFriendAnimRate[8];
    FLOAT ThrowAnimRate[8];
    FLOAT SitAnimRate;
    FLOAT StandAnimRate;
    INT PcSocialHideRightWeapon[20];
    INT PcSocialHideLeftWeapon[20];
    INT NpcSocialHideRightWeapon[5];
    INT NpcSocialHideLeftWeapon[5];
    INT PcCastHideRightWeapon;
    INT PcCastHideLeftWeapon;
    class AController* Controller;
    FLOAT NetRelevancyTime;
    class APlayerController* LastRealViewer;
    class AActor* LastViewer;
    BITFIELD bJustLanded:1 GCC_PACK(4);
    BITFIELD bUpAndOut:1;
    BITFIELD bIsWalking:1;
    BITFIELD bWarping:1;
    BITFIELD bWantsToCrouch:1;
    BITFIELD bIsCrouched:1;
    BITFIELD bTryToUncrouch:1;
    BITFIELD bCanCrouch:1;
    BITFIELD bCrawler:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bJumpCapable:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanClimbLadders:1;
    BITFIELD bCanStrafe:1;
    BITFIELD bCanDoubleJump:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bNoJumpAdjust:1;
    BITFIELD bCountJumps:1;
    BITFIELD bSimulateGravity:1;
    BITFIELD bUpdateEyeheight:1;
    BITFIELD bIgnoreForces:1;
    BITFIELD bNoVelocityUpdate:1;
    BITFIELD bCanWalkOffLedges:1;
    BITFIELD bSteadyFiring:1;
    BITFIELD bCanBeBaseForPawns:1;
    BITFIELD bClientCollision:1;
    BITFIELD bSimGravityDisabled:1;
    BITFIELD bDirectHitWall:1;
    BITFIELD bThumped:1;
    BITFIELD bInvulnerableBody:1;
    BITFIELD bIsFemale:1;
    BITFIELD bAutoActivate:1;
    BITFIELD bCanPickupInventory:1;
    BITFIELD bUpdatingDisplay:1;
    BITFIELD bAmbientCreature:1;
    BITFIELD bLOSHearing:1;
    BITFIELD bSameZoneHearing:1;
    BITFIELD bAdjacentZoneHearing:1;
    BITFIELD bMuffledHearing:1;
    BITFIELD bAroundCornerHearing:1;
    BITFIELD bDontPossess:1;
    BITFIELD bAutoFire:1;
    BITFIELD bRollToDesired:1;
    BITFIELD bIgnorePlayFiring:1;
    BITFIELD bCachedRelevant:1;
    BITFIELD bUseCompressedPosition:1;
    BITFIELD bWeaponBob:1;
    BITFIELD bHideRegularHUD:1;
    BITFIELD bSpecialHUD:1;
    BITFIELD bSpecialCalcView:1;
    BITFIELD bNoWeaponFiring:1;
    BITFIELD bIsTyping:1;
    BYTE FlashCount GCC_PACK(4);
    BYTE Visibility;
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    FName AIScriptTag;
    FLOAT HearingThreshold;
    FLOAT Alertness;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT SkillModifier;
    FLOAT AvgPhysicsTime;
    FLOAT MeleeRange;
    class ANavigationPoint* Anchor;
    class ANavigationPoint* LastAnchor;
    FLOAT FindAnchorFailedTime;
    FLOAT LastValidAnchorTime;
    FLOAT DestinationOffset;
    FLOAT NextPathRadius;
    FVector SerpentineDir;
    FLOAT SerpentineDist;
    FLOAT SerpentineTime;
    FLOAT UncrouchTime;
    FLOAT SpawnTime;
    FLOAT GroundSpeed;
    FLOAT WaterSpeed;
    FLOAT AirSpeed;
    FLOAT LadderSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT AirControl;
    FLOAT WalkingPct;
    FLOAT CrouchedPct;
    FLOAT MaxFallSpeed;
    FVector ConstantAcceleration;
    FStringNoInit OwnerName;
    class AWeapon* Weapon;
    class AWeapon* PendingWeapon;
    class APowerups* SelectedItem;
    FLOAT BaseEyeHeight;
    FLOAT EyeHeight;
    FVector Floor;
    FLOAT SplashTime;
    FLOAT CrouchHeight;
    FLOAT CrouchRadius;
    FLOAT OldZ;
    class APhysicsVolume* HeadVolume;
    INT Health;
    FLOAT BreathTime;
    FLOAT UnderWaterTime;
    FLOAT LastPainTime;
    class UClass* ReducedDamageType;
    FLOAT HeadScale;
    class APhysicsVolume* FootVolume;
    FVector noise1spot;
    FLOAT noise1time;
    class APawn* noise1other;
    FLOAT noise1loudness;
    FVector noise2spot;
    FLOAT noise2time;
    class APawn* noise2other;
    FLOAT noise2loudness;
    FLOAT LastPainSound;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FVector WalkBob;
    FLOAT SoundDampening;
    FLOAT DamageScaling;
    FStringNoInit MenuName;
    class AProjector* Shadow;
    class AShadowProjector* Shadow1;
    BITFIELD bIgnoreShadowClipping:1 GCC_PACK(4);
    BITFIELD bSameAnim:1;
    BITFIELD bLongDeathWaitAnim:1;
    TArrayNoInit<FNPawnLightPtr> NPawnLight GCC_PACK(4);
    TArrayNoInit<FNAbnormalStatPtr> NAbnormalStat;
    TArrayNoInit<FNBoneScalerStatPtr> NBoneScalerStat;
    TArrayNoInit<class ANCubics*> NCubicArray;
    class AL2Alarm* OverHeadAlarm;
    BITFIELD bShowArrow:1 GCC_PACK(4);
    FVector ArrowTarget GCC_PACK(4);
    TArrayNoInit<FNAppendixEffectPtr> NAppendixEffect;
    TArrayNoInit<FNWeaponEffectPtr> NWeaponEffect;
    class AEmitter* NHeroEffect;
    FNCursedWeaponEffectPtr NCursedWeaponEffect;
    TArrayNoInit<class AEmitter*> NDecoEffect;
    class AEmitter* NSpoilEffect;
    BYTE SamePoseStat;
    class UClass* BloodEffect;
    class UClass* LowGoreBlood;
    class UClass* ControllerClass;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class ALadderVolume* OnLadder;
    FName LandMovementState;
    FName WaterMovementState;
    class APlayerStart* LastStartSpot;
    FLOAT LastStartTime;
    INT ComboAnimPlayNum;
    FName ComboAnimPlayName[8];
    INT ComboAnimPlayCount;
    FName AnimAction;
    FVector TakeHitLocation;
    class UClass* HitDamageType;
    FVector TearOffMomentum;
    BITFIELD bPhysicsAnimUpdate:1 GCC_PACK(4);
    BITFIELD bWasCrouched:1;
    BITFIELD bWasWalking:1;
    BITFIELD bWasOnGround:1;
    BITFIELD bInitializeAnimation:1;
    BITFIELD bPlayedDeath:1;
    BYTE OldPhysics GCC_PACK(4);
    FLOAT OldRotYaw;
    FVector OldAcceleration;
    FLOAT BaseMovementRate;
    FName MovementAnims[4];
    FName TurnLeftAnim;
    FName TurnRightAnim;
    FLOAT BlendChangeTime;
    FLOAT MovementBlendStartTime;
    FLOAT ForwardStrafeBias;
    FLOAT BackwardStrafeBias;
    BITFIELD bNeedTurnAnim:1 GCC_PACK(4);
    class AMarkProjector* Mark GCC_PACK(4);
    FRotator TargetDirSpineRot;
    FStringNoInit ChatMsg;
    FVector HitLocation;
    FLOAT HitWaterEffectTimer;
    FLOAT RecentHitWaterInterval;
    FStringNoInit PrivateStoreChatMsg;
    FStringNoInit PrivateBuyChatMsg;
    FStringNoInit RecipeShopMsg;
    INT AbnormalVisualEffectType;
    INT AbnormalVisualEffectStopMoveFlag;
    FLOAT AbnormalVisualEffectLifeTime;
    INT AppendixEffectType;
    BITFIELD bPlayerCharacter:1 GCC_PACK(4);
    INT PlayerSlotNum GCC_PACK(4);
    FLOAT BoundRadius;
    BITFIELD bLobbyCharacter:1 GCC_PACK(4);
    FName LobbyWaitAnim GCC_PACK(4);
    FLOAT NameOffset;
    FLOAT DeadNameOffset;
    BITFIELD bRendered:1 GCC_PACK(4);
    BITFIELD bShowGuilty:1;
    FLOAT fBlinkTime GCC_PACK(4);
    FLOAT fMaxAirSpeed;
    FLOAT fMinAirSpeed;
    FLOAT fAirSpeedAccel;
    INT CameraWalkingAccelMode;
    FLOAT fMaxAirSpeedIncRate;
    BITFIELD bUseDarkEffect:1 GCC_PACK(4);
    FLOAT CastingEffectScale GCC_PACK(4);
    BITFIELD bIsHero:1 GCC_PACK(4);
    BITFIELD bHeroWeapon:1;
    BITFIELD bIsCursedWeapon:1;
    INT CursedWeaponLevel GCC_PACK(4);
    INT SoundableBootsClassID;
    INT LastAttackItemClassID;
    INT AttackItemEnchantedValue;
    INT AttackItemVariationOption1;
    INT AttackItemVariationOption2;
    FCompressedPosition PawnPosition;
    BITFIELD bColosseumSelected:1 GCC_PACK(4);
    INT ColosseumTeam GCC_PACK(4);
    INT ColosseumPartyNum;
    FLOAT OriCollisionRadius;
    FLOAT OriCollisionHeight;
    FVector HelmMeshOrigin;
    FRotator HelmMeshRotOrigin;
    FVector HairAcceMeshOrigin[2];
    FRotator HairAcceMeshRotOrigin[2];
    TArrayNoInit<INT> NQuestList;
    BITFIELD bNeedPostSetPawnResourceProcess:1 GCC_PACK(4);
    FLOAT fAutoTargetPendingTime GCC_PACK(4);
    class APawn* AutoTargetPawn;
    BITFIELD bNeedSetPawnResource:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGetRefSkeletonNum);
    DECLARE_FUNCTION(execGetShieldItemSound);
    DECLARE_FUNCTION(execGetDefenseItemSound);
    DECLARE_FUNCTION(execSetRelativeCoords);
    DECLARE_FUNCTION(execPlayAnimUM);
    DECLARE_FUNCTION(execForceCrouch);
    DECLARE_FUNCTION(execReachedDestination);
    void eventNotifyDie()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyDie),NULL);
    }
    void eventAssociateAttackedNotify(class APawn* Attacker, class AActor* AttackActor, INT Type, INT Damage, BITFIELD bMiss, BITFIELD bShieldDefense, BITFIELD bCritical, BITFIELD bSpirit, BITFIELD keepframerate, BITFIELD showeffect)
    {
        APawn_eventAssociateAttackedNotify_Parms Parms;
        Parms.Attacker=Attacker;
        Parms.AttackActor=AttackActor;
        Parms.Type=Type;
        Parms.Damage=Damage;
        Parms.bMiss=bMiss;
        Parms.bShieldDefense=bShieldDefense;
        Parms.bCritical=bCritical;
        Parms.bSpirit=bSpirit;
        Parms.keepframerate=keepframerate;
        Parms.showeffect=showeffect;
        ProcessEvent(FindFunctionChecked(ENGINE_AssociateAttackedNotify),&Parms);
    }
    void eventAttackedNotify(class APawn* Attacker, class AActor* AttackActor, INT Type, BITFIELD keepframerate, BITFIELD showeffect)
    {
        APawn_eventAttackedNotify_Parms Parms;
        Parms.Attacker=Attacker;
        Parms.AttackActor=AttackActor;
        Parms.Type=Type;
        Parms.keepframerate=keepframerate;
        Parms.showeffect=showeffect;
        ProcessEvent(FindFunctionChecked(ENGINE_AttackedNotify),&Parms);
    }
    void eventPlayLandingAnimation(FLOAT impactVel)
    {
        APawn_eventPlayLandingAnimation_Parms Parms;
        Parms.impactVel=impactVel;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayLandingAnimation),&Parms);
    }
    void eventPlayFalling()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayFalling),NULL);
    }
    void eventPlayJump()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayJump),NULL);
    }
    void eventChangeAnimation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ChangeAnimation),NULL);
    }
    void eventStopPlayFiring()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StopPlayFiring),NULL);
    }
    void eventPlayDying(class UClass* DamageType, FVector HitLoc)
    {
        APawn_eventPlayDying_Parms Parms;
        Parms.DamageType=DamageType;
        Parms.HitLoc=HitLoc;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayDying),&Parms);
    }
    void eventSetAnimAction(FName NewAction)
    {
        APawn_eventSetAnimAction_Parms Parms;
        Parms.NewAction=NewAction;
        ProcessEvent(FindFunctionChecked(ENGINE_SetAnimAction),&Parms);
    }
    void eventBreathTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BreathTimer),NULL);
    }
    void eventHeadVolumeChange(class APhysicsVolume* newHeadVolume)
    {
        APawn_eventHeadVolumeChange_Parms Parms;
        if(IsProbing(NAME_HeadVolumeChange)) {
        Parms.newHeadVolume=newHeadVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadVolumeChange),&Parms);
        }
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        APawn_eventUpdateEyeHeight_Parms Parms;
        if(IsProbing(NAME_UpdateEyeHeight)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
        }
    }
    void eventStartCrouch(FLOAT HeightAdjust)
    {
        APawn_eventStartCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_StartCrouch),&Parms);
    }
    void eventEndCrouch(FLOAT HeightAdjust)
    {
        APawn_eventEndCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_EndCrouch),&Parms);
    }
    void eventModifyVelocity(FLOAT DeltaTime, FVector OldVelocity)
    {
        APawn_eventModifyVelocity_Parms Parms;
        if(IsProbing(NAME_ModifyVelocity)) {
        Parms.DeltaTime=DeltaTime;
        Parms.OldVelocity=OldVelocity;
        ProcessEvent(FindFunctionChecked(ENGINE_ModifyVelocity),&Parms);
        }
    }
    void eventClientMessage(const FString& S, FName Type)
    {
        APawn_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventSetWalking(BITFIELD bNewIsWalking)
    {
        APawn_eventSetWalking_Parms Parms;
        Parms.bNewIsWalking=bNewIsWalking;
        ProcessEvent(FindFunctionChecked(ENGINE_SetWalking),&Parms);
    }
    void eventAnimBegin(FName SequenceName)
    {
        APawn_eventAnimBegin_Parms Parms;
        Parms.SequenceName=SequenceName;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimBegin),&Parms);
    }
    void eventSetHeadScale(FLOAT NewScale)
    {
        APawn_eventSetHeadScale_Parms Parms;
        Parms.NewScale=NewScale;
        ProcessEvent(FindFunctionChecked(ENGINE_SetHeadScale),&Parms);
    }
    DECLARE_CLASS(APawn,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "APawn.h"
};


class ENGINE_API AVehicle : public APawn
{
public:
    class UClass* PartClass[16];
    class AVehiclePart* VehicleParts[16];
    FVector PartOffset[16];
    INT NumParts;
    BITFIELD bActivated:1 GCC_PACK(4);
    BITFIELD bUpdating:1;
    class UStaticMesh* StaticVehicleMast GCC_PACK(4);
    BITFIELD bTrip:1 GCC_PACK(4);
    FVector TripTarget GCC_PACK(4);
    FLOAT MoveSpeed;
    INT RotationSpeed;
    DECLARE_CLASS(AVehicle,APawn,0|CLASS_Config,Engine)
    #include "AVehicle.h"
};


class ENGINE_API AVehicleRoutePoint : public AVehicle
{
public:
    FStringNoInit RouteName;
    TArrayNoInit<FVector> DeltaPoint;
    TArrayNoInit<FVector> AbsPoint;
    TArrayNoInit<INT> MovingSpeed;
    TArrayNoInit<INT> RotatingSpeed;
    TArrayNoInit<INT> TimeToNextAction;
    TArrayNoInit<INT> SpeakerID;
    TArrayNoInit<INT> WaitingMessageID;
    TArrayNoInit<INT> StationID;
    FColor LineColor;
    FColor PathColor;
    FColor FontColor;
    INT Paths;
    DECLARE_CLASS(AVehicleRoutePoint,AVehicle,0|CLASS_Config,Engine)
	typedef TMap<int, TArray<FVector> > VehicleRoutePointPathMapType;
	VehicleRoutePointPathMapType* GetPaths() { return (VehicleRoutePointPathMapType*)Paths; }
	virtual void PostEditChange() 
	{
		for (int i=0; i<AbsPoint.Num(); i++)
		{
			DeltaPoint(i) = AbsPoint(i) - Location;
		}
	}
};


class ENGINE_API AScout : public APawn
{
public:
    FLOAT MaxLandingVelocity;
    DECLARE_CLASS(AScout,APawn,0|CLASS_Config,Engine)
    #include "AScout.h"
};

#define UCONST_FilterFrames 5

struct AKVehicle_eventKVehicleUpdateParams_Parms
{
};
struct AKVehicle_eventVehicleStateReceived_Parms
{
};
class ENGINE_API AKVehicle : public APawn
{
public:
    FLOAT Steering;
    FLOAT Throttle;
    class APawn* Driver;
    TArrayNoInit<FVector> ExitPositions;
    FVector DrivePos;
    FRotator DriveRot;
    class UClass* DestroyEffectClass;
    BITFIELD bAutoDrive:1 GCC_PACK(4);
    BITFIELD bGetOut:1;
    class AKVehicleFactory* ParentFactory GCC_PACK(4);
    BITFIELD bVehicleIsFiring:1 GCC_PACK(4);
    BITFIELD bVehicleIsAltFiring:1;
    FVector CameraHistory[5] GCC_PACK(4);
    INT NextHistorySlot;
    BITFIELD bHistoryWarmup:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGraphData);
    void eventKVehicleUpdateParams()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KVehicleUpdateParams),NULL);
    }
    void eventVehicleStateReceived()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_VehicleStateReceived),NULL);
    }
    DECLARE_CLASS(AKVehicle,APawn,0|CLASS_Config,Engine)
#ifdef WITH_KARMA
	virtual void PostNetReceive();
    virtual void PostEditChange();
	virtual void setPhysics(BYTE NewPhysics, AActor *NewFloor, FVector NewFloorV);
	virtual void TickSimulated( FLOAT DeltaSeconds );
	virtual void TickAuthoritative( FLOAT DeltaSeconds );
#endif
};


class ENGINE_API AEmitter : public AActor
{
public:
    TArrayNoInit<class UParticleEmitter*> Emitters;
    BITFIELD AutoDestroy:1 GCC_PACK(4);
    BITFIELD AutoReset:1;
    BITFIELD DisableFogging:1;
    FRangeVector GlobalOffsetRange GCC_PACK(4);
    FRange TimeTillResetRange;
    BITFIELD AutoReplay:1 GCC_PACK(4);
    FLOAT SpeedRate GCC_PACK(4);
    BITFIELD bRotEmitter:1 GCC_PACK(4);
    FRotator RotPerSecond GCC_PACK(4);
    BITFIELD FixedBoundingBox:1 GCC_PACK(4);
    FLOAT FixedBoundingBoxExpand GCC_PACK(4);
    TArrayNoInit<class USound*> SpawnSound;
    FLOAT SoundRadius;
    FLOAT SoundVolume;
    BITFIELD SoundLooping:1 GCC_PACK(4);
    FLOAT SoundPitchMin GCC_PACK(4);
    FLOAT SoundPitchMax;
    INT Initialized;
    FBox BoundingBox;
    FLOAT EmitterRadius;
    FLOAT EmitterHeight;
    BITFIELD ActorForcesEnabled:1 GCC_PACK(4);
    FVector GlobalOffset GCC_PACK(4);
    FLOAT TimeTillReset;
    BITFIELD UseParticleProjectors:1 GCC_PACK(4);
    class UParticleMaterial* ParticleMaterial GCC_PACK(4);
    BITFIELD DeleteParticleEmitters:1 GCC_PACK(4);
    FLOAT FixedLifeTime GCC_PACK(4);
    BITFIELD FirstSpawnParticle:1 GCC_PACK(4);
    FVector TrailerPrePivot GCC_PACK(4);
    BITFIELD bUseLight:1 GCC_PACK(4);
    BYTE LightType GCC_PACK(4);
    BYTE LightEffect;
    BYTE LightBrightness;
    FLOAT LightRadius;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE EmitterLightingType;
    class AEmitterLight* pEmitterLight;
    FLOAT EL_LifeSpan;
    FLOAT EL_InitialDelay;
    BITFIELD bUseQuake:1 GCC_PACK(4);
    BYTE ShakeType GCC_PACK(4);
    FLOAT ShakeIntensity;
    FVector ShakeVector;
    FLOAT ShakeRange;
    INT ShakeCount;
    FLOAT ShakeTime;
    FLOAT EQ_InitialDelay;
    FRange VisibleLimit;
    FLOAT VisibilityInterpRange;
    BITFIELD bSetSizeScale:1 GCC_PACK(4);
    DECLARE_FUNCTION(execSetSizeScale);
    DECLARE_FUNCTION(execKill);
    DECLARE_CLASS(AEmitter,AActor,0,Engine)
    #include "AEmitter.h"
};


struct AAirEmitter_eventSetAirVolume_Parms
{
    class AAirVolume* NewVolume;
};
struct AAirEmitter_eventForceKill_Parms
{
};
class ENGINE_API AAirEmitter : public AEmitter
{
public:
    BITFIELD bAttachToPawn:1 GCC_PACK(4);
    BITFIELD bByOpacity:1;
    INT NumSteps GCC_PACK(4);
    FRange FadeRange;
    FLOAT FadeAlpha;
    INT FadeAlphaByNum;
    class AAirVolume* RecentVolume;
    FLOAT RecentFadeSeconds;
    FLOAT BoostVanishCoef;
    FLOAT VanishCoef;
    INT IndexPE;
    void eventSetAirVolume(class AAirVolume* NewVolume)
    {
        AAirEmitter_eventSetAirVolume_Parms Parms;
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_SetAirVolume),&Parms);
    }
    void eventForceKill()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceKill),NULL);
    }
    DECLARE_CLASS(AAirEmitter,AEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAirEmitter)
};


struct AWaterHitEmitter_eventGetSpawnRate_Parms
{
    FLOAT PawnVelocity;
    FLOAT ReturnValue;
};
class ENGINE_API AWaterHitEmitter : public AEmitter
{
public:
    FLOAT eventGetSpawnRate(FLOAT PawnVelocity)
    {
        AWaterHitEmitter_eventGetSpawnRate_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PawnVelocity=PawnVelocity;
        ProcessEvent(FindFunctionChecked(ENGINE_GetSpawnRate),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AWaterHitEmitter,AEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWaterHitEmitter)
};


class ENGINE_API AL2Indicator : public AEmitter
{
public:
    INT Type;
    DECLARE_CLASS(AL2Indicator,AEmitter,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AL2Indicator)
};


struct ANProjectile_eventPreshotNotify_Parms
{
    class APawn* Attacker;
};
struct ANProjectile_eventShotNotify_Parms
{
};
class ENGINE_API ANProjectile : public AEmitter
{
public:
    FLOAT Speed;
    FLOAT AccSpeed;
    class AActor* TargetActor;
    FVector LastTargetLocation;
    FRotator LastTargetRotation;
    class AActor* TraceActor;
    BITFIELD bTrackingCamera:1 GCC_PACK(4);
    BITFIELD bPreDestroy:1;
    BITFIELD bHermiteInterpolation:1;
    FVector VelInitial GCC_PACK(4);
    FVector VelFinal;
    FVector LocInitial;
    FLOAT Duration;
    FLOAT CurTime;
    FLOAT Disp;
    FNMagicInfo MagicInfo;
    void eventPreshotNotify(class APawn* Attacker)
    {
        ANProjectile_eventPreshotNotify_Parms Parms;
        Parms.Attacker=Attacker;
        ProcessEvent(FindFunctionChecked(ENGINE_PreshotNotify),&Parms);
    }
    void eventShotNotify()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShotNotify),NULL);
    }
    DECLARE_CLASS(ANProjectile,AEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANProjectile)
};


class ENGINE_API ANSkillProjectile : public ANProjectile
{
public:
    INT SkillID;
    FRotator HitRot;
    DECLARE_CLASS(ANSkillProjectile,ANProjectile,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANSkillProjectile)
};

enum ECubicMovementType
{
    ECMT_FOLLOW             =0,
    ECMT_FLOAT              =1,
    ECMT_SKILLUSE           =2,
    ECMT_BUFF               =3,
    ECMT_FLOATSTART         =4,
    ECMT_ONVEHICLE          =5,
    ECMT_MAX                =6,
};
enum ECubicType
{
    ECT_STORM               =0,
    ECT_VAMPIRIC            =1,
    ECT_LIFE                =2,
    ECT_VIPER               =3,
    ECT_DEBUFF              =4,
    ECT_MAX                 =5,
};

class ENGINE_API ANCubics : public AEmitter
{
public:
    BYTE CubicType;
    BYTE CubicMovementType;
    FVector DestLocation;
    INT CubicIndex;
    INT SkillID;
    class APawn* TargetPawn;
    FLOAT SkillActiveTime;
    FRotator RotPerSecond;
    FNMagicInfo MagicInfo;
    DECLARE_CLASS(ANCubics,AEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANCubics)
};

enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_AnyBump              =2,
    BT_MAX                  =3,
};
enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

struct AMover_eventKeyFrameReached_Parms
{
};
class ENGINE_API AMover : public AActor
{
public:
    BITFIELD bCanBeAttacked:1 GCC_PACK(4);
    INT DamageGrade GCC_PACK(4);
    FStringNoInit MoverName;
    BITFIELD bOpen:1 GCC_PACK(4);
    class UStaticMesh* MeshGrade[7] GCC_PACK(4);
    FLOAT RangeHeight;
    FVector RangeDelta[4];
    FVector HitActorNormal;
    TArrayNoInit<class USound*> DamageSounds;
    TArrayNoInit<class USound*> BrokenSounds;
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime;
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    BITFIELD bUseShortestRotation:1;
    BITFIELD bIsLeader:1;
    FName PlayerBumpEvent GCC_PACK(4);
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* MoveAmbientSound;
    class USound* LoopSound;
    FName OpeningEvent;
    FName OpenedEvent;
    FName ClosingEvent;
    FName ClosedEvent;
    FName LoopEvent;
    FVector KeyPos[8];
    FRotator KeyRot[8];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class ANavigationPoint* myMarker;
    BITFIELD bOpening:1 GCC_PACK(4);
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bClosed:1;
    BITFIELD bPlayerOnly:1;
    BITFIELD bAutoDoor:1;
    BITFIELD bNoAIRelevance:1;
    FVector SimOldPos GCC_PACK(4);
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    TArrayNoInit<class AAntiPortalActor*> AntiPortals;
    FName AntiPortalTag;
    void eventKeyFrameReached()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KeyFrameReached),NULL);
    }
    DECLARE_CLASS(AMover,AActor,0|CLASS_NativeReplication,Engine)
    #include "AMover.h"
};


class ENGINE_API AFluidSurfaceOscillator : public AActor
{
public:
    class AFluidSurfaceInfo* FluidInfo;
    FLOAT Frequency;
    BYTE Phase;
    FLOAT Strength;
    FLOAT Radius;
    FLOAT OscTime;
    DECLARE_CLASS(AFluidSurfaceOscillator,AActor,0,Engine)
	void UpdateOscillation( FLOAT DeltaTime );
	virtual void PostEditChange();
	virtual void Destroy();
};


class ENGINE_API AL2Radar : public AActor
{
public:
    INT Type;
    DECLARE_CLASS(AL2Radar,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AL2Radar)
};

enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Sunlight             =19,
    LE_QuadraticNonIncidence=20,
    LE_MAX                  =21,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_TexturePaletteOnce   =8,
    LT_TexturePaletteLoop   =9,
    LT_FadeOut              =10,
    LT_Fade                 =11,
    LT_MAX                  =12,
};

class ENGINE_API ALight : public AActor
{
public:
    BYTE LightType;
    BYTE LightEffect;
    FLOAT LightBrightness;
    FLOAT LightRadius;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BITFIELD bSunlightColor:1 GCC_PACK(4);
    BITFIELD bTimeLight:1;
    FLOAT LightOnTime GCC_PACK(4);
    FLOAT LightOffTime;
    FLOAT LightPrevTime;
    FLOAT LightLifeTime;
    FLOAT MinCoronaSize;
    FLOAT MaxCoronaSize;
    FLOAT CoronaRotation;
    FLOAT CoronaRotationOffset;
    BITFIELD UseOwnFinalBlend:1 GCC_PACK(4);
    DECLARE_CLASS(ALight,AActor,0,Engine)
    #include "ALight.h"
};

enum EEmitterLightType
{
    EEL_PawnOnly            =0,
    EEL_WorldOnly           =1,
    EEL_All                 =2,
    EEL_MAX                 =3,
};

class ENGINE_API AEmitterLight : public ALight
{
public:
    BYTE EmitterLightType;
    DECLARE_CLASS(AEmitterLight,ALight,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AEmitterLight)
};


class ENGINE_API ANMovableSunLight : public ALight
{
public:
    DECLARE_CLASS(ANMovableSunLight,ALight,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANMovableSunLight)
};

enum TagState
{
    L2TAG_NONE              =0,
    L2TAG_WAIT              =1,
    L2TAG_BATTLE            =2,
    L2TAG_MAX               =3,
};

class ENGINE_API AL2Float : public AActor
{
public:
    BYTE State;
    INT FishType;
    BITFIELD Gut:1 GCC_PACK(4);
    BITFIELD Fake:1;
    FLOAT WaterEffectTimer GCC_PACK(4);
    FLOAT FakeEffectTimer;
    FVector OldEffectLoc;
    FLOAT fEffectElapsedTime;
    INT EffectType;
    FVector OrgLocation;
    class AEmitter* BrightEffect;
    FName WaitAnimName;
    FName BattleAnimName;
    FName BattleWaitAnimName[6];
    DECLARE_CLASS(AL2Float,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AL2Float)
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};

class ENGINE_API ABrush : public AActor
{
public:
    BYTE CsgOper;
    class UObject* UnusedLightMesh;
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1 GCC_PACK(4);
    DECLARE_CLASS(ABrush,AActor,0,Engine)
    #include "ABrush.h"
};


class ENGINE_API AVolume : public ABrush
{
public:
    class AActor* AssociatedActor;
    FName AssociatedActorTag;
    INT LocationPriority;
    FStringNoInit LocationName;
    class ADecorationList* DecoList;
    DECLARE_FUNCTION(execEncompasses);
    DECLARE_CLASS(AVolume,ABrush,0,Engine)
    #include "AVolume.h"
};


class ENGINE_API AAirVolume : public AVolume
{
public:
    FName EffectName;
    FLOAT FullFadeSeconds;
    FLOAT RelativeOffset;
    DECLARE_CLASS(AAirVolume,AVolume,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAirVolume)
};


class ENGINE_API AMusicVolume : public AVolume
{
public:
    INT nMusicID;
    BITFIELD bForcePlayMusic:1 GCC_PACK(4);
    BITFIELD bLoopMusic:1;
    DECLARE_CLASS(AMusicVolume,AVolume,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMusicVolume)
};


class ENGINE_API ABlockingVolume : public AVolume
{
public:
    BITFIELD bClampFluid:1 GCC_PACK(4);
    DECLARE_CLASS(ABlockingVolume,AVolume,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(ABlockingVolume)
};


struct APhysicsVolume_eventGetHitEffectName_Parms
{
    FName A;
    FName B;
};
struct APhysicsVolume_eventPawnLeavingVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventPawnEnteredVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventActorLeavingVolume_Parms
{
    class AActor* Other;
};
struct APhysicsVolume_eventActorEnteredVolume_Parms
{
    class AActor* Other;
};
struct APhysicsVolume_eventPhysicsChangedFor_Parms
{
    class AActor* Other;
};
class ENGINE_API APhysicsVolume : public AVolume
{
public:
    BITFIELD bPainCausing:1 GCC_PACK(4);
    FVector ZoneVelocity GCC_PACK(4);
    FVector Gravity;
    FLOAT GroundFriction;
    FLOAT TerminalVelocity;
    FLOAT DamagePerSec;
    class UClass* DamageType;
    INT Priority;
    class USound* EntrySound;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* ExitActor;
    FLOAT FluidFriction;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bDestructive:1 GCC_PACK(4);
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bWaterVolume:1;
    class AInfo* PainTimer GCC_PACK(4);
    BITFIELD bDistanceFog:1 GCC_PACK(4);
    FColor DistanceFogColor GCC_PACK(4);
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    BITFIELD bUseDistanceFogColor:1 GCC_PACK(4);
    BITFIELD bUseCellophane:1;
    FColor CellophaneColor GCC_PACK(4);
    FLOAT KExtraLinearDamping;
    FLOAT KExtraAngularDamping;
    FLOAT KBuoyancy;
    class APhysicsVolume* NextPhysicsVolume;
    BITFIELD bL2WaterVolume:1 GCC_PACK(4);
    BITFIELD bL2StepVolume:1;
    INT StepSoundID GCC_PACK(4);
    void eventGetHitEffectName(FName& A, FName& B)
    {
        APhysicsVolume_eventGetHitEffectName_Parms Parms;
        Parms.A=A;
        Parms.B=B;
        ProcessEvent(FindFunctionChecked(ENGINE_GetHitEffectName),&Parms);
        A=Parms.A;
        B=Parms.B;
    }
    void eventPawnLeavingVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnLeavingVolume_Parms Parms;
        if(IsProbing(NAME_PawnLeavingVolume)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnLeavingVolume),&Parms);
        }
    }
    void eventPawnEnteredVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnEnteredVolume_Parms Parms;
        if(IsProbing(NAME_PawnEnteredVolume)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnEnteredVolume),&Parms);
        }
    }
    void eventActorLeavingVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorLeavingVolume_Parms Parms;
        if(IsProbing(NAME_ActorLeavingVolume)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeavingVolume),&Parms);
        }
    }
    void eventActorEnteredVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorEnteredVolume_Parms Parms;
        if(IsProbing(NAME_ActorEnteredVolume)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEnteredVolume),&Parms);
        }
    }
    void eventPhysicsChangedFor(class AActor* Other)
    {
        APhysicsVolume_eventPhysicsChangedFor_Parms Parms;
        if(IsProbing(NAME_PhysicsChangedFor)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsChangedFor),&Parms);
        }
    }
    DECLARE_CLASS(APhysicsVolume,AVolume,0|CLASS_NativeReplication,Engine)
    #include "APhysicsVolume.h"
};


class ENGINE_API ALadderVolume : public APhysicsVolume
{
public:
    FName ClimbingAnimation;
    FName TopAnimation;
    FRotator WallDir;
    FVector LookDir;
    FVector ClimbDir;
    class ALadder* LadderList;
    BITFIELD bNoPhysicalLadder:1 GCC_PACK(4);
    BITFIELD bAutoPath:1;
    class APawn* PendingClimber GCC_PACK(4);
    DECLARE_CLASS(ALadderVolume,APhysicsVolume,0,Engine)
    #include "ALadderVolume.h"
};


class ENGINE_API ADefaultPhysicsVolume : public APhysicsVolume
{
public:
    DECLARE_CLASS(ADefaultPhysicsVolume,APhysicsVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADefaultPhysicsVolume)
};


class ENGINE_API AL2Alarm : public AActor
{
public:
    class USound* ClickSound;
    DECLARE_CLASS(AL2Alarm,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AL2Alarm)
};


class ENGINE_API ANMoon : public AActor
{
public:
    FLOAT Radius;
    FLOAT Latitude;
    FLOAT Longitude;
    FLOAT LimitMaxRadius;
    FLOAT MoonScale;
    BITFIELD bMakeLightmap:1 GCC_PACK(4);
    FVector Position GCC_PACK(4);
    BITFIELD bMoonLight:1 GCC_PACK(4);
    INT EnvType GCC_PACK(4);
    class UTexture* Flame[12];
    BYTE LightHue;
    BYTE LightSaturation;
    FLOAT LightBrightness;
    DECLARE_CLASS(ANMoon,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANMoon)
};


class ENGINE_API ANSun : public AActor
{
public:
    FLOAT Radius;
    FLOAT Latitude;
    FLOAT Longitude;
    FLOAT LimitMaxRadius;
    FLOAT SunScale;
    BITFIELD bMakeLightmap:1 GCC_PACK(4);
    FVector Position GCC_PACK(4);
    DECLARE_CLASS(ANSun,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANSun)
};


struct AInspector_eventInspection_Parms
{
    INT Param1;
    INT Param2;
    INT param3;
    INT param4;
    INT ReturnValue;
};
class ENGINE_API AInspector : public AActor
{
public:
    DECLARE_FUNCTION(execInspectorFunc006);
    DECLARE_FUNCTION(execInspectorFunc005);
    DECLARE_FUNCTION(execInspectorFunc004);
    DECLARE_FUNCTION(execInspectorFunc003);
    DECLARE_FUNCTION(execInspectorFunc002);
    DECLARE_FUNCTION(execInspectorFunc001);
    INT eventInspection(INT Param1, INT Param2, INT param3, INT param4)
    {
        AInspector_eventInspection_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Param1=Param1;
        Parms.Param2=Param2;
        Parms.param3=param3;
        Parms.param4=param4;
        ProcessEvent(FindFunctionChecked(ENGINE_Inspection),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AInspector,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInspector)
};


class ENGINE_API AL2Dice : public AActor
{
public:
    FRotator TargetRotation;
    FRotator DeltaRotation;
    class USound* DropSound;
    FVector CheckLocation;
    FNActionPtr Action;
    BITFIELD bActionOn:1 GCC_PACK(4);
    DECLARE_CLASS(AL2Dice,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AL2Dice)
};


class ENGINE_API AL2Pickup : public AActor
{
public:
    FRotator TargetRotation;
    FRotator DeltaRotation;
    class USound* DropSound;
    BITFIELD bPendingDrop:1 GCC_PACK(4);
    class AEmitter* DropEffectActor GCC_PACK(4);
    BITFIELD bDropEffectActor:1 GCC_PACK(4);
    FVector CheckLocation GCC_PACK(4);
    DECLARE_CLASS(AL2Pickup,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AL2Pickup)
};

enum PStopType
{
    STP_SIT                 =0,
    STP_STAND               =1,
    STP_FAKE_DEAD           =2,
    STP_FAKE_DEAD_STAND     =3,
    STP_CHAIR_SIT           =4,
    STP_MAX                 =5,
};
enum PMoveType
{
    PMT_SLOW                =0,
    PMT_FAST                =1,
    PMT_MAX                 =2,
};
#define UCONST_LATENT_MOVETOWARD 503

struct AController_eventMonitoredPawnAlert_Parms
{
};
struct AController_eventEnemyNotVisible_Parms
{
};
struct AController_eventSeeMonster_Parms
{
    class APawn* Seen;
};
struct AController_eventSeePlayer_Parms
{
    class APawn* Seen;
};
struct AController_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
};
struct AController_eventSetupSpecialPathAbilities_Parms
{
};
struct AController_eventDesireability_Parms
{
    class APickup* P;
    FLOAT ReturnValue;
};
struct AController_eventPrepareForMove_Parms
{
    class ANavigationPoint* Goal;
    class UReachSpec* Path;
};
struct AController_eventAllowDetourTo_Parms
{
    class ANavigationPoint* N;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyMissedJump_Parms
{
};
struct AController_eventNotifyJumpApex_Parms
{
};
struct AController_eventNotifyHitMover_Parms
{
    FVector HitNormal;
    class AMover* Wall;
};
struct AController_eventNotifyBump_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyHitWall_Parms
{
    FVector HitNormal;
    class AActor* Wall;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyLanded_Parms
{
    FVector HitNormal;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyHeadVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventLongFall_Parms
{
};
struct AController_eventSoakStop_Parms
{
    FString problem;
};
struct AController_eventAIHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
    BITFIELD Attenuate;
};
struct AController_eventMayFall_Parms
{
};
class ENGINE_API AController : public AActor
{
public:
    class APawn* Pawn;
    INT PlayerNum;
    FLOAT SightCounter;
    FLOAT FovAngle;
    FLOAT Handedness;
    BITFIELD bIsPlayer:1 GCC_PACK(4);
    BITFIELD bGodMode:1;
    BITFIELD bLOSflag:1;
    BITFIELD bAdvancedTactics:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bCanDoSpecial:1;
    BITFIELD bAdjusting:1;
    BITFIELD bPreparingMove:1;
    BITFIELD bControlAnimations:1;
    BITFIELD bEnemyInfoValid:1;
    BITFIELD bNotifyApex:1;
    BITFIELD bUsePlayerHearing:1;
    BITFIELD bJumpOverWall:1;
    BITFIELD bEnemyAcquired:1;
    BITFIELD bSoaking:1;
    BITFIELD bHuntPlayer:1;
    BITFIELD bAllowedToTranslocate:1;
    BITFIELD bAllowedToImpactJump:1;
    BYTE bRun GCC_PACK(4);
    BYTE bDuck;
    BYTE bFire;
    BYTE bAltFire;
    FVector AdjustLoc;
    class AController* nextController;
    FLOAT Stimulus;
    FLOAT MoveTimer;
    class AActor* MoveTarget;
    FVector Destination;
    FVector FocalPoint;
    class AActor* Focus;
    BITFIELD bMoveLocationDone:1 GCC_PACK(4);
    INT SelectedCreatureID GCC_PACK(4);
    class AActor* SelectedActor;
    BITFIELD bDead:1 GCC_PACK(4);
    BITFIELD bAutoAttacking:1;
    BITFIELD bAttackIntend:1;
    TArrayNoInit<FVector> ReservedMovePoint GCC_PACK(4);
    class AActor* ReservedMoveActor;
    FLOAT ReservedMoveDistance;
    BYTE MoveType;
    BYTE WaitType;
    BITFIELD bMyController:1 GCC_PACK(4);
    class AMover* PendingMover GCC_PACK(4);
    class AActor* GoalList[4];
    class ANavigationPoint* home;
    FLOAT MinHitWall;
    FLOAT RespawnPredictionTime;
    INT AcquisitionYawRate;
    class APawn* Enemy;
    class AActor* Target;
    FVector LastSeenPos;
    FVector LastSeeingPos;
    FLOAT LastSeenTime;
    FStringNoInit VoiceType;
    FLOAT OldMessageTime;
    class AActor* RouteCache[16];
    class UReachSpec* CurrentPath;
    FVector CurrentPathDir;
    class AActor* RouteGoal;
    FLOAT RouteDist;
    FLOAT LastRouteFind;
    class UClass* PlayerReplicationInfoClass;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class UClass* PawnClass;
    class UClass* PreviousPawnClass;
    FLOAT GroundPitchTime;
    FVector ViewX;
    FVector ViewY;
    FVector ViewZ;
    class ANavigationPoint* StartSpot;
    FVector MonitorStartLoc;
    class APawn* MonitoredPawn;
    FLOAT MonitorMaxDistSq;
    class AAvoidMarker* FearSpots[2];
    class AActor* LastFailedReach;
    FLOAT FailedReachTime;
    FVector FailedReachLocation;
    class AWeapon* LastPawnWeapon;
    DECLARE_FUNCTION(execEndClimbLadder);
    DECLARE_FUNCTION(execStopWaiting);
    DECLARE_FUNCTION(execInLatentExecution);
    DECLARE_FUNCTION(execPickAnyTarget);
    DECLARE_FUNCTION(execPickTarget);
    DECLARE_FUNCTION(execRemoveController);
    DECLARE_FUNCTION(execAddController);
    DECLARE_FUNCTION(execFindBestInventoryPath);
    DECLARE_FUNCTION(execWaitForLanding);
    DECLARE_FUNCTION(execPickWallAdjust);
    DECLARE_FUNCTION(execactorReachable);
    DECLARE_FUNCTION(execpointReachable);
    DECLARE_FUNCTION(execEAdjustJump);
    DECLARE_FUNCTION(execFindRandomDest);
    DECLARE_FUNCTION(execFindPathTowardNearest);
    DECLARE_FUNCTION(execFindPathToIntercept);
    DECLARE_FUNCTION(execFindPathToward);
    DECLARE_FUNCTION(execFindPathTo);
    DECLARE_FUNCTION(execCanSee);
    DECLARE_FUNCTION(execLineOfSightTo);
    DECLARE_FUNCTION(execFinishRotation);
    DECLARE_FUNCTION(execMoveToward);
    DECLARE_FUNCTION(execMoveTo);
    void eventMonitoredPawnAlert()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MonitoredPawnAlert),NULL);
    }
    void eventEnemyNotVisible()
    {
        if(IsProbing(NAME_EnemyNotVisible)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EnemyNotVisible),NULL);
        }
    }
    void eventSeeMonster(class APawn* Seen)
    {
        AController_eventSeeMonster_Parms Parms;
        if(IsProbing(NAME_SeeMonster)) {
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeeMonster),&Parms);
        }
    }
    void eventSeePlayer(class APawn* Seen)
    {
        AController_eventSeePlayer_Parms Parms;
        if(IsProbing(NAME_SeePlayer)) {
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeePlayer),&Parms);
        }
    }
    void eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
    {
        AController_eventHearNoise_Parms Parms;
        if(IsProbing(NAME_HearNoise)) {
        Parms.Loudness=Loudness;
        Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
        }
    }
    void eventSetupSpecialPathAbilities()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetupSpecialPathAbilities),NULL);
    }
    FLOAT eventDesireability(class APickup* P)
    {
        AController_eventDesireability_Parms Parms;
        Parms.ReturnValue=0;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_Desireability),&Parms);
        return Parms.ReturnValue;
    }
    void eventPrepareForMove(class ANavigationPoint* Goal, class UReachSpec* Path)
    {
        AController_eventPrepareForMove_Parms Parms;
        if(IsProbing(NAME_PrepareForMove)) {
        Parms.Goal=Goal;
        Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_PrepareForMove),&Parms);
        }
    }
    BITFIELD eventAllowDetourTo(class ANavigationPoint* N)
    {
        AController_eventAllowDetourTo_Parms Parms;
        Parms.ReturnValue=0;
        Parms.N=N;
        ProcessEvent(FindFunctionChecked(ENGINE_AllowDetourTo),&Parms);
        return Parms.ReturnValue;
    }
    void eventNotifyMissedJump()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyMissedJump),NULL);
    }
    void eventNotifyJumpApex()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyJumpApex),NULL);
    }
    void eventNotifyHitMover(FVector HitNormal, class AMover* Wall)
    {
        AController_eventNotifyHitMover_Parms Parms;
        Parms.HitNormal=HitNormal;
        Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitMover),&Parms);
    }
    BITFIELD eventNotifyBump(class AActor* Other)
    {
        AController_eventNotifyBump_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyBump)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyBump),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyHitWall(FVector HitNormal, class AActor* Wall)
    {
        AController_eventNotifyHitWall_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyHitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitWall),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyLanded(FVector HitNormal)
    {
        AController_eventNotifyLanded_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyLanded)) {
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLanded),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
    {
        AController_eventNotifyHeadVolumeChange_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyHeadVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHeadVolumeChange),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AController_eventNotifyPhysicsVolumeChange_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyPhysicsVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyPhysicsVolumeChange),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventLongFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
    }
    void eventSoakStop(const FString& problem)
    {
        AController_eventSoakStop_Parms Parms;
        Parms.problem=problem;
        ProcessEvent(FindFunctionChecked(ENGINE_SoakStop),&Parms);
    }
    void eventAIHearSound(class AActor* Actor, INT Id, class USound* S, FVector SoundLocation, FVector Parameters, BITFIELD Attenuate)
    {
        AController_eventAIHearSound_Parms Parms;
        if(IsProbing(NAME_AIHearSound)) {
        Parms.Actor=Actor;
        Parms.Id=Id;
        Parms.S=S;
        Parms.SoundLocation=SoundLocation;
        Parms.Parameters=Parameters;
        Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_AIHearSound),&Parms);
        }
    }
    void eventMayFall()
    {
        if(IsProbing(NAME_MayFall)) {
        ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
        }
    }
    DECLARE_CLASS(AController,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "AController.h"
};


struct APlayerController_eventServerGetVoiceChatters_Parms
{
    class APlayerController* Player;
};
struct APlayerController_eventServerChangeVoiceChatter_Parms
{
    class APlayerController* Player;
    INT IpAddr;
    INT Handle;
    BITFIELD Add;
};
struct APlayerController_eventClientCloseMenu_Parms
{
    BITFIELD bCloseAll;
    BITFIELD bCancel;
};
struct APlayerController_eventClientOpenMenu_Parms
{
    FString Menu;
    BITFIELD bDisconnect;
    FString Msg1;
    FString Msg2;
};
struct APlayerController_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerController_eventRemoveCameraEffect_Parms
{
    class UCameraEffect* ExEffect;
    BITFIELD ReturnValue;
};
struct APlayerController_eventAddCameraEffect_Parms
{
    class UCameraEffect* NewEffect;
    BITFIELD RemoveExisting;
};
struct APlayerController_eventPlayerTick_Parms
{
    FLOAT DeltaTime;
};
struct APlayerController_eventSetProgressTime_Parms
{
    FLOAT t;
};
struct APlayerController_eventSetProgressMessage_Parms
{
    INT Index;
    FString S;
    FColor C;
};
struct APlayerController_eventPreClientTravel_Parms
{
};
struct APlayerController_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
};
struct APlayerController_eventClientMessage_Parms
{
    FString S;
    FName Type;
};
struct APlayerController_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct APlayerController_eventInitInputSystem_Parms
{
};
struct APlayerController_eventClientSetViewTarget_Parms
{
    class AActor* A;
};
struct APlayerController_eventAddCheatManager_Parms
{
};
struct APlayerController_eventClientHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
    BITFIELD Attenuate;
};
struct APlayerController_eventServerValidationResponse_Parms
{
    FString R;
};
struct APlayerController_eventClientValidate_Parms
{
    FString C;
};
struct APlayerController_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};
class ENGINE_API APlayerController : public AController
{
public:
    class UPlayer* Player;
    BITFIELD bLookUpStairs:1 GCC_PACK(4);
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bCenterView:1;
    BITFIELD bBehindView:1;
    BITFIELD bFrozen:1;
    BITFIELD bPressedJump:1;
    BITFIELD bDoubleJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bNeverSwitchOnPickup:1;
    BITFIELD bZooming:1;
    BITFIELD bAlwaysLevel:1;
    BITFIELD bSetTurnRot:1;
    BITFIELD bCheatFlying:1;
    BITFIELD bFreeCamera:1;
    BITFIELD bZeroRoll:1;
    BITFIELD bCameraPositionLocked:1;
    BITFIELD bViewBot:1;
    BITFIELD UseFixedVisibility:1;
    BITFIELD bBlockCloseCamera:1;
    BITFIELD bValidBehindCamera:1;
    BITFIELD bForcePrecache:1;
    BITFIELD bNoVoiceMessages:1;
    BITFIELD bNoVoiceTaunts:1;
    BITFIELD bNoAutoTaunts:1;
    BITFIELD bAutoTaunt:1;
    BITFIELD bNoMatureLanguage:1;
    BYTE AnnouncerLevel GCC_PACK(4);
    BYTE AnnouncerVolume;
    FLOAT AimingHelp;
    FLOAT MaxResponseTime;
    FLOAT WaitDelay;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    BYTE bStrafe;
    BYTE bSnapLevel;
    BYTE bLook;
    BYTE bFreeLook;
    BYTE bTurn180;
    BYTE bTurnToNearest;
    BYTE bXAxis;
    BYTE bYAxis;
    BYTE DoubleClickDir;
    INT ShowFlags;
    INT Misc1;
    INT Misc2;
    INT RendMap;
    FLOAT OrthoZoom;
    class AActor* ViewTarget;
    class AController* RealViewTarget;
    FLOAT CameraDist;
    FVector OldCameraLoc;
    FRotator OldCameraRot;
    TArrayNoInit<class UCameraEffect*> CameraEffects;
    BITFIELD bRenderWide:1 GCC_PACK(4);
    FLOAT DesiredFOV GCC_PACK(4);
    FLOAT DefaultFOV;
    FLOAT ZoomLevel;
    FVector FixedLocation;
    FRotator FixedRotation;
    FMatrix RenderWorldToCamera;
    FVector FlashScale;
    FVector FlashFog;
    FLOAT ConstantGlowScale;
    FVector ConstantGlowFog;
    FColor LastDistanceFogColor;
    FLOAT LastDistanceFogStart;
    FLOAT LastDistanceFogEnd;
    FLOAT CurrentDistanceFogEnd;
    FLOAT TimeSinceLastFogChange;
    INT LastZone;
    FRotator TargetViewRotation;
    FLOAT TargetEyeHeight;
    FVector TargetWeaponViewOffset;
    class AHUD* myHUD;
    FLOAT LastPlaySound;
    FLOAT LastPlaySpeech;
    FStringNoInit Song;
    BYTE Transition;
    class ASavedMove* SavedMoves;
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    class AWeapon* OldClientWeapon;
    INT WeaponUpdate;
    FStringNoInit ProgressMessage[4];
    FColor ProgressColor[4];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit StatsUsername;
    FStringNoInit StatsPassword;
    class UClass* LocalMessageClass;
    FLOAT MaxShakeRoll;
    FVector MaxShakeOffset;
    FLOAT ShakeRollRate;
    FVector ShakeOffsetRate;
    FVector ShakeOffset;
    FLOAT ShakeRollTime;
    FVector ShakeOffsetTime;
    class APawn* TurnTarget;
    INT EnemyTurnSpeed;
    INT GroundPitch;
    FRotator TurnRot180;
    FVector OldFloor;
    class UCheatManager* CheatManager;
    class UClass* CheatClass;
    class UPlayerInput* PlayerInput;
    class UClass* InputClass;
    FVector FailedPathStart;
    INT DemoViewPitch;
    INT DemoViewYaw;
    class ASecurity* PlayerSecurity;
    FLOAT ForcePrecacheTime;
    FLOAT LastPingUpdate;
    class APhysicsVolume* LastPhysicsVolume;
    FLOAT CurrentDistanceFogStart;
    FColor CurrentDistanceColor;
    FLOAT VolumeFogBlendRatio;
    class USound* UnderWaterLoopSound;
    BITFIELD bUseHoldCamera:1 GCC_PACK(4);
    FLOAT CompensateYaw GCC_PACK(4);
    FLOAT CopmensatePitch;
    class AEmitter* FloatingSolid;
    class AEmitter* SunBeam;
    FVector LastSamplingLocation;
    DECLARE_FUNCTION(execChangeVoiceChatter);
    DECLARE_FUNCTION(execLeaveVoiceChat);
    DECLARE_FUNCTION(execClientHearSound);
    DECLARE_FUNCTION(execFindStairRotation);
    DECLARE_FUNCTION(execServerValidationResponse);
    DECLARE_FUNCTION(execClientValidate);
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execClientTravel);
    DECLARE_FUNCTION(execSetViewTarget);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execGetServerNetworkAddress);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    void eventServerGetVoiceChatters(class APlayerController* Player)
    {
        APlayerController_eventServerGetVoiceChatters_Parms Parms;
        Parms.Player=Player;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerGetVoiceChatters),&Parms);
    }
    void eventServerChangeVoiceChatter(class APlayerController* Player, INT IpAddr, INT Handle, BITFIELD Add)
    {
        APlayerController_eventServerChangeVoiceChatter_Parms Parms;
        Parms.Player=Player;
        Parms.IpAddr=IpAddr;
        Parms.Handle=Handle;
        Parms.Add=Add;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerChangeVoiceChatter),&Parms);
    }
    void eventClientCloseMenu(BITFIELD bCloseAll, BITFIELD bCancel)
    {
        APlayerController_eventClientCloseMenu_Parms Parms;
        Parms.bCloseAll=bCloseAll;
        Parms.bCancel=bCancel;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientCloseMenu),&Parms);
    }
    void eventClientOpenMenu(const FString& Menu, BITFIELD bDisconnect, const FString& Msg1, const FString& Msg2)
    {
        APlayerController_eventClientOpenMenu_Parms Parms;
        Parms.Menu=Menu;
        Parms.bDisconnect=bDisconnect;
        Parms.Msg1=Msg1;
        Parms.Msg2=Msg2;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientOpenMenu),&Parms);
    }
    void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerController_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    BITFIELD eventRemoveCameraEffect(class UCameraEffect* ExEffect)
    {
        APlayerController_eventRemoveCameraEffect_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ExEffect=ExEffect;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveCameraEffect),&Parms);
        return Parms.ReturnValue;
    }
    void eventAddCameraEffect(class UCameraEffect* NewEffect, BITFIELD RemoveExisting)
    {
        APlayerController_eventAddCameraEffect_Parms Parms;
        Parms.NewEffect=NewEffect;
        Parms.RemoveExisting=RemoveExisting;
        ProcessEvent(FindFunctionChecked(ENGINE_AddCameraEffect),&Parms);
    }
    void eventPlayerTick(FLOAT DeltaTime)
    {
        APlayerController_eventPlayerTick_Parms Parms;
        if(IsProbing(NAME_PlayerTick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
        }
    }
    void eventSetProgressTime(FLOAT t)
    {
        APlayerController_eventSetProgressTime_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressTime),&Parms);
    }
    void eventSetProgressMessage(INT Index, const FString& S, FColor C)
    {
        APlayerController_eventSetProgressMessage_Parms Parms;
        Parms.Index=Index;
        Parms.S=S;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressMessage),&Parms);
    }
    void eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
    }
    void eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type)
    {
        APlayerController_eventTeamMessage_Parms Parms;
        Parms.PRI=PRI;
        Parms.S=S;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
    }
    void eventClientMessage(const FString& S, FName Type)
    {
        APlayerController_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        APlayerController_eventReceiveLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
    }
    void eventInitInputSystem()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitInputSystem),NULL);
    }
    void eventClientSetViewTarget(class AActor* A)
    {
        APlayerController_eventClientSetViewTarget_Parms Parms;
        Parms.A=A;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientSetViewTarget),&Parms);
    }
    void eventAddCheatManager()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AddCheatManager),NULL);
    }
    void eventClientHearSound(class AActor* Actor, INT Id, class USound* S, FVector SoundLocation, FVector Parameters, BITFIELD Attenuate)
    {
        APlayerController_eventClientHearSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.Id=Id;
        Parms.S=S;
        Parms.SoundLocation=SoundLocation;
        Parms.Parameters=Parameters;
        Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
    }
    void eventServerValidationResponse(const FString& R)
    {
        APlayerController_eventServerValidationResponse_Parms Parms;
        Parms.R=R;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerValidationResponse),&Parms);
    }
    void eventClientValidate(const FString& C)
    {
        APlayerController_eventClientValidate_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientValidate),&Parms);
    }
    void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerController_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    DECLARE_CLASS(APlayerController,AController,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "APlayerController.h"
};


class ENGINE_API ALineagePlayerController : public APlayerController
{
public:
    INT CheatFlyYaw;
    BITFIELD bUseAutoTrackingPawn:1 GCC_PACK(4);
    BITFIELD bUseVolumeCamera:1;
    BITFIELD bUseHitCheckCamera:1;
    FLOAT AutoTrackingPawnSpeed GCC_PACK(4);
    INT VolumeCameraRadius;
    INT HitCheckCameraMinDist;
    INT FixedDefaultViewNum;
    INT FixedDefaultCameraYaw[10];
    INT FixedDefaultCameraPitch[10];
    FLOAT FixedDefaultCameraDist[10];
    FLOAT FixedDefaultCameraViewHeight[10];
    INT FixedDefaultCameraHidePlayer[10];
    INT FixedDefaultCameraDisableZoom[10];
    FLOAT CameraViewHeightAdjust;
    BITFIELD bDisableCameraManuallyRotating:1 GCC_PACK(4);
    BITFIELD bCameraManuallyRotating:1;
    BITFIELD bFixView:1;
    BITFIELD bCameraMovingToDefault:1;
    BITFIELD bUseDefaultCameraYaw:1;
    BITFIELD bUseDefaultCameraPitch:1;
    BITFIELD bUseDefaultCameraDist:1;
    BITFIELD bDisableZoom:1;
    FLOAT OldZoomingDist GCC_PACK(4);
    FVector OldCameraLocation;
    FRotator OldCameraRotation;
    FVector OldViewTargetLocation;
    FLOAT ManuallyCameraYaw;
    FLOAT ManuallyCameraPitch;
    FLOAT CurZoomingDist;
    FLOAT DesiredZoomingDist;
    INT DesiredPitch;
    INT CurVolumeCameraRadius;
    INT CurFixedDefaultCameraNo;
    INT DefaultCameraYaw;
    INT DefaultCameraPitch;
    FLOAT DefaultCameraDist;
    BITFIELD bCameraSpecialMove:1 GCC_PACK(4);
    BITFIELD bCameraMovingToSpecial:1;
    INT SpecialCameraYaw GCC_PACK(4);
    INT SpecialCameraPitch;
    FLOAT SpecialCameraDist;
    FLOAT SpecialCameraDistSpeed;
    INT SpecialCameraYawSpeed;
    INT SpecialCameraPitchSpeed;
    FLOAT SpecialCameraDuration;
    INT SpecialCurCameraYaw;
    INT SpecialCurCameraPitch;
    FLOAT SpecialCurCameraDist;
    INT CameraRelYaw;
    INT CameraRelPitch;
    INT CameraRelYawSpeed;
    INT CameraRelPitchSpeed;
    INT CameraCurRelYaw;
    INT CameraCurRelPitch;
    INT SavedViewTargetYaw;
    INT SavedViewTargetPitch;
    FLOAT ValidateLocationTime;
    FLOAT TurningPendingTime;
    BITFIELD bKeyboardMoving:1 GCC_PACK(4);
    BITFIELD bKeyboardMovingPermanently:1;
    BITFIELD bDesiredKeyboardMoving:1;
    BITFIELD bDesiredKeyboardMovingPermanently:1;
    INT KeyboardMovingDir GCC_PACK(4);
    INT KeyboardMovingDirFlg;
    FLOAT KeyboardMovingPendingTime;
    BITFIELD bJoypadMoving:1 GCC_PACK(4);
    BITFIELD bDesiredJoypadMoving:1;
    BITFIELD bDesiredJoypadMovingPermanently:1;
    INT JoypadMovingDir GCC_PACK(4);
    FLOAT JoypadMovingPendingTime;
    BITFIELD ShouldTurnToMovingDir:1 GCC_PACK(4);
    FLOAT MaxZoomingDist GCC_PACK(4);
    FLOAT MinZoomingDist;
    TArrayNoInit<FNViewShakePtr> NViewShake;
    TArrayNoInit<FNViewShakeMgrPtr> NViewShakeMgr;
    BITFIELD bObserverModeOn:1 GCC_PACK(4);
    BITFIELD bBroadcastObserverModeOn:1;
    class AMusicVolume* MusicVolume GCC_PACK(4);
    BITFIELD bCanPlayMusic:1 GCC_PACK(4);
    FLOAT MusicWaitTime GCC_PACK(4);
    FLOAT DefaultMusicWaitTime;
    INT MusicHandle;
    INT VoiceHandle;
    BITFIELD bVehicleStart:1 GCC_PACK(4);
    BITFIELD bGetServerMusic:1;
    INT nGetServerVoice GCC_PACK(4);
    FLOAT PlayMusicDelay;
    FLOAT PlayVoiceDelay;
    BITFIELD bLockMusic:1 GCC_PACK(4);
    FStringNoInit bServerMusicName GCC_PACK(4);
    FStringNoInit bServerVoiceName;
    BITFIELD bCameraWalking:1 GCC_PACK(4);
    class AActor* CameraModeTarget GCC_PACK(4);
    FLOAT ManuallyCameraSpeed;
    class AAirEmitter* AirEffect;
    DECLARE_CLASS(ALineagePlayerController,APlayerController,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALineagePlayerController)
};


class ENGINE_API ACamera : public APlayerController
{
public:
    DECLARE_CLASS(ACamera,APlayerController,0|CLASS_Config,Engine)
    #include "ACamera.h"
};


struct AAIController_eventGetSlaveDestination_Parms
{
    class APawn* P;
};
struct AAIController_eventGetDestination_Parms
{
    class APawn* P;
};
struct AAIController_eventOwnerPossess_Parms
{
    class APawn* aPawn;
};
class ENGINE_API AAIController : public AController
{
public:
    BITFIELD bHunting:1 GCC_PACK(4);
    BITFIELD bAdjustFromWalls:1;
    class AAIScript* MyScript GCC_PACK(4);
    FLOAT Skill;
    DECLARE_FUNCTION(execWaitToSeeEnemy);
    void eventGetSlaveDestination(class APawn* P)
    {
        AAIController_eventGetSlaveDestination_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_GetSlaveDestination),&Parms);
    }
    void eventGetDestination(class APawn* P)
    {
        AAIController_eventGetDestination_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_GetDestination),&Parms);
    }
    void eventOwnerPossess(class APawn* aPawn)
    {
        AAIController_eventOwnerPossess_Parms Parms;
        Parms.aPawn=aPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_OwnerPossess),&Parms);
    }
    DECLARE_CLASS(AAIController,AController,0|CLASS_Config,Engine)
    #include "AAIController.h"
};


class ENGINE_API ACarriedObject : public AActor
{
public:
    BITFIELD bHome:1 GCC_PACK(4);
    BITFIELD bHeld:1;
    class APlayerReplicationInfo* HolderPRI GCC_PACK(4);
    class APawn* Holder;
    class ANavigationPoint* LastAnchor;
    FLOAT LastValidAnchorTime;
    DECLARE_CLASS(ACarriedObject,AActor,0|CLASS_NativeReplication,Engine)
	INT* GetOptimizedRepList( BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};


class ENGINE_API ATriggers : public AActor
{
public:
    DECLARE_CLASS(ATriggers,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};


class ENGINE_API AAvoidMarker : public ATriggers
{
public:
    DECLARE_CLASS(AAvoidMarker,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAvoidMarker)
};


struct ALineOfSightTrigger_eventPlayerSeesMe_Parms
{
    class APlayerController* P;
};
class ENGINE_API ALineOfSightTrigger : public ATriggers
{
public:
    FLOAT MaxViewDist;
    FLOAT OldTickTime;
    BITFIELD bEnabled:1 GCC_PACK(4);
    BITFIELD bTriggered:1;
    FName SeenActorTag GCC_PACK(4);
    class AActor* SeenActor;
    INT MaxViewAngle;
    FLOAT RequiredViewDir;
    void eventPlayerSeesMe(class APlayerController* P)
    {
        ALineOfSightTrigger_eventPlayerSeesMe_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerSeesMe),&Parms);
    }
    DECLARE_CLASS(ALineOfSightTrigger,ATriggers,0,Engine)
    #include "ALineOfSightTrigger.h"
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_HumanPlayerProximity =5,
    TT_MAX                  =6,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType;
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType GCC_PACK(4);
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    BITFIELD bSavedInitialCollision:1 GCC_PACK(4);
    BITFIELD bSavedInitialActive:1;
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};


struct ANavigationPoint_eventSuggestMovePreparation_Parms
{
    class APawn* Other;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventDetourWeight_Parms
{
    class APawn* Other;
    FLOAT PathWeight;
    FLOAT ReturnValue;
};
struct ANavigationPoint_eventAccept_Parms
{
    class AActor* Incoming;
    class AActor* Source;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventSpecialCost_Parms
{
    class APawn* Seeker;
    class UReachSpec* Path;
    INT ReturnValue;
};
class ENGINE_API ANavigationPoint : public AActor
{
public:
    TArrayNoInit<class UReachSpec*> PathList;
    FName ProscribedPaths[4];
    FName ForcedPaths[4];
    INT visitedWeight;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    INT TransientCost;
    INT FearCost;
    BITFIELD bEndPoint:1 GCC_PACK(4);
    BITFIELD bTransientEndPoint:1;
    BITFIELD taken:1;
    BITFIELD bBlocked:1;
    BITFIELD bPropagatesSound:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAlwaysUseStrafing:1;
    BITFIELD bForceNoStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bSpecialMove:1;
    BITFIELD bNoAutoConnect:1;
    BITFIELD bNotBased:1;
    BITFIELD bPathsChanged:1;
    BITFIELD bDestinationOnly:1;
    BITFIELD bSourceOnly:1;
    BITFIELD bSpecialForced:1;
    BITFIELD bMustBeReachable:1;
    class APickup* InventoryCache GCC_PACK(4);
    FLOAT InventoryDist;
    BITFIELD eventSuggestMovePreparation(class APawn* Other)
    {
        ANavigationPoint_eventSuggestMovePreparation_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SuggestMovePreparation),&Parms);
        return Parms.ReturnValue;
    }
    FLOAT eventDetourWeight(class APawn* Other, FLOAT PathWeight)
    {
        ANavigationPoint_eventDetourWeight_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        Parms.PathWeight=PathWeight;
        ProcessEvent(FindFunctionChecked(ENGINE_DetourWeight),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventAccept(class AActor* Incoming, class AActor* Source)
    {
        ANavigationPoint_eventAccept_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Incoming=Incoming;
        Parms.Source=Source;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
        return Parms.ReturnValue;
    }
    INT eventSpecialCost(class APawn* Seeker, class UReachSpec* Path)
    {
        ANavigationPoint_eventSpecialCost_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Seeker=Seeker;
        Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
    #include "ANavigationPoint.h"
};


class ENGINE_API AJumpDest : public ANavigationPoint
{
public:
    BITFIELD bOptionalJumpDest:1 GCC_PACK(4);
    INT NumUpstreamPaths GCC_PACK(4);
    class UReachSpec* UpstreamPaths[8];
    FVector NeededJump[8];
    FLOAT CalculatedGravityZ[8];
    DECLARE_CLASS(AJumpDest,ANavigationPoint,0,Engine)
	virtual void SetupForcedPath(APawn* Scout, UReachSpec* Path);
	void ClearPaths();
	UBOOL ReviewPath(APawn* Scout);
};


class ENGINE_API AJumpPad : public ANavigationPoint
{
public:
    FVector JumpVelocity;
    class AActor* JumpTarget;
    FLOAT JumpZModifier;
    class USound* JumpSound;
    DECLARE_CLASS(AJumpPad,ANavigationPoint,0,Engine)
	void addReachSpecs(APawn * Scout, UBOOL bOnlyChanged);
	void RenderEditorSelected(FLevelSceneNode* SceneNode,FRenderInterface* RI, FDynamicActor* FDA);
};


class ENGINE_API ADoor : public ANavigationPoint
{
public:
    FName DoorTag;
    class AMover* MyDoor;
    FName DoorTrigger;
    class AActor* RecommendedTrigger;
    BITFIELD bInitiallyClosed:1 GCC_PACK(4);
    BITFIELD bBlockedWhenClosed:1;
    BITFIELD bDoorOpen:1;
    BITFIELD bTempNoCollide:1;
    DECLARE_CLASS(ADoor,ANavigationPoint,0,Engine)
    #include "ADoor.h"
};


class ENGINE_API AAutoDoor : public ADoor
{
public:
    DECLARE_CLASS(AAutoDoor,ADoor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAutoDoor)
};


class ENGINE_API ASmallNavigationPoint : public ANavigationPoint
{
public:
    DECLARE_CLASS(ASmallNavigationPoint,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASmallNavigationPoint)
};


class ENGINE_API ALadder : public ASmallNavigationPoint
{
public:
    class ALadderVolume* MyLadder;
    class ALadder* LadderList;
    DECLARE_CLASS(ALadder,ASmallNavigationPoint,0,Engine)
    #include "ALadder.h"
};


class ENGINE_API AAutoLadder : public ALadder
{
public:
    DECLARE_CLASS(AAutoLadder,ALadder,0,Engine)
	virtual UBOOL IsIdentifiedAs(FName ActorName);
};


class ENGINE_API AWarpZoneMarker : public ASmallNavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(AWarpZoneMarker,ASmallNavigationPoint,0,Engine)
    #include "AWarpZoneMarker.h"
};


class ENGINE_API AAIMarker : public ASmallNavigationPoint
{
public:
    class AAIScript* markedScript;
    DECLARE_CLASS(AAIMarker,ASmallNavigationPoint,0,Engine)
	virtual UBOOL IsIdentifiedAs(FName ActorName);
};


class ENGINE_API AInventorySpot : public ASmallNavigationPoint
{
public:
    class APickup* markedItem;
    DECLARE_CLASS(AInventorySpot,ASmallNavigationPoint,0,Engine)
	virtual UBOOL IsIdentifiedAs(FName ActorName);
    virtual AInventorySpot* GetAInventorySpot() { return this; }
};


class ENGINE_API APlayerStart : public ASmallNavigationPoint
{
public:
    BYTE TeamNumber;
    BITFIELD bSinglePlayerStart:1 GCC_PACK(4);
    BITFIELD bCoopStart:1;
    BITFIELD bEnabled:1;
    BITFIELD bPrimaryStart:1;
    FLOAT LastSpawnCampTime GCC_PACK(4);
    DECLARE_CLASS(APlayerStart,ASmallNavigationPoint,0,Engine)
    #include "APlayerStart.h"
};


class ENGINE_API ATeleporter : public ASmallNavigationPoint
{
public:
    FStringNoInit URL;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FVector TargetVelocity GCC_PACK(4);
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ASmallNavigationPoint,0,Engine)
    #include "ATeleporter.h"
};


class ENGINE_API ALiftExit : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    BYTE SuggestedKeyFrame;
    BYTE KeyFrame;
    DECLARE_CLASS(ALiftExit,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};


class ENGINE_API ALiftCenter : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT MaxDist2D;
    FVector LiftOffset;
    DECLARE_CLASS(ALiftCenter,ANavigationPoint,0,Engine)
    #include "ALiftCenter.h"
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
	virtual UBOOL ReviewPath(APawn* Scout);
	virtual void CheckSymmetry(ANavigationPoint* Other);
	virtual INT AddMyMarker(AActor *S);
};


class ENGINE_API APickup : public AActor
{
public:
    FLOAT MaxDesireability;
    class AInventorySpot* myMarker;
    class ANavigationPoint* PickupCache;
    class UClass* InventoryType;
    BITFIELD bInstantRespawn:1 GCC_PACK(4);
    BITFIELD bOnlyReplicateHidden:1;
    BITFIELD bAmbientGlow:1;
    BITFIELD bDropped:1;
    BITFIELD bPredictRespawns:1;
    FLOAT RespawnTime GCC_PACK(4);
    FLOAT RespawnEffectTime;
    FStringNoInit PickupMessage;
    class USound* PickupSound;
    FStringNoInit PickupForce;
    DECLARE_FUNCTION(execRemoveFromNavigation);
    DECLARE_FUNCTION(execAddToNavigation);
    DECLARE_CLASS(APickup,AActor,0|CLASS_NativeReplication,Engine)
    #include "APickup.h"
};


struct AStationaryWeapons_eventDeactivated_Parms
{
};
struct AStationaryWeapons_eventActivated_Parms
{
};
class ENGINE_API AStationaryWeapons : public APickup
{
public:
    INT TeamIndex;
    BITFIELD bIgnoreTeammates:1 GCC_PACK(4);
    class UStaticMesh* Meshes[2] GCC_PACK(4);
    BYTE bActive;
    BYTE bLastActive;
    void eventDeactivated()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Deactivated),NULL);
    }
    void eventActivated()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Activated),NULL);
    }
    DECLARE_CLASS(AStationaryWeapons,APickup,0|CLASS_NativeReplication,Engine)
    #include "AStationaryWeapons.h"
};


class ENGINE_API AAmmo : public APickup
{
public:
    INT AmmoAmount;
    DECLARE_CLASS(AAmmo,APickup,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAmmo)
};


class ENGINE_API AAntiPortalActor : public AActor
{
public:
    DECLARE_CLASS(AAntiPortalActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAntiPortalActor)
};


class ENGINE_API AInventoryAttachment : public AActor
{
public:
    DECLARE_CLASS(AInventoryAttachment,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventoryAttachment)
};


struct AWeaponAttachment_eventThirdPersonEffects_Parms
{
};
class ENGINE_API AWeaponAttachment : public AInventoryAttachment
{
public:
    BYTE FlashCount;
    BITFIELD bAutoFire:1 GCC_PACK(4);
    FName FiringMode GCC_PACK(4);
    FLOAT FiringSpeed;
    void eventThirdPersonEffects()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ThirdPersonEffects),NULL);
    }
    DECLARE_CLASS(AWeaponAttachment,AInventoryAttachment,0|CLASS_NativeReplication,Engine)
    #include "AWeaponAttachment.h"
};


class ENGINE_API ADamageType : public AActor
{
public:
    FStringNoInit DeathString;
    FStringNoInit FemaleSuicide;
    FStringNoInit MaleSuicide;
    FLOAT ViewFlash;
    FVector ViewFog;
    class UClass* DamageEffect;
    FStringNoInit DamageWeaponName;
    BITFIELD bArmorStops:1 GCC_PACK(4);
    BITFIELD bInstantHit:1;
    BITFIELD bFastInstantHit:1;
    BITFIELD bAlwaysGibs:1;
    BITFIELD bNoSpecificLocation:1;
    BITFIELD bSkeletize:1;
    BITFIELD bCausesBlood:1;
    BITFIELD bKUseOwnDeathVel:1;
    FLOAT GibModifier GCC_PACK(4);
    class UClass* PawnDamageEffect;
    class UClass* PawnDamageEmitter;
    TArrayNoInit<class USound*> PawnDamageSounds;
    class UClass* LowGoreDamageEffect;
    class UClass* LowGoreDamageEmitter;
    TArrayNoInit<class USound*> LowGoreDamageSounds;
    class UClass* LowDetailEffect;
    class UClass* LowDetailEmitter;
    FLOAT FlashScale;
    FVector FlashFog;
    INT DamageDesc;
    INT DamageThreshold;
    FVector DamageKick;
    FLOAT KDamageImpulse;
    FLOAT KDeathVel;
    FLOAT KDeathUpKick;
    DECLARE_CLASS(ADamageType,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADamageType)
};


class ENGINE_API AVehiclePart : public AActor
{
public:
    BITFIELD bUpdating:1 GCC_PACK(4);
    DECLARE_CLASS(AVehiclePart,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVehiclePart)
};


class ENGINE_API AInventory : public AActor
{
public:
    BYTE InventoryGroup;
    BYTE GroupOffset;
    BITFIELD bDisplayableInv:1 GCC_PACK(4);
    BITFIELD bTossedOut:1;
    class UClass* PickupClass GCC_PACK(4);
    INT Charge;
    FVector PlayerViewOffset;
    FRotator PlayerViewPivot;
    BITFIELD bDrawingFirstPerson:1 GCC_PACK(4);
    FLOAT BobDamping GCC_PACK(4);
    class AActor* ThirdPersonActor;
    class UClass* AttachmentClass;
    class UMaterial* Icon;
    class UMaterial* StatusIcon;
    FStringNoInit ItemName;
    DECLARE_CLASS(AInventory,AActor,0|CLASS_NativeReplication,Engine)
    #include "AInventory.h"
};


class ENGINE_API AAmmunition : public AInventory
{
public:
    INT MaxAmmo;
    INT AmmoAmount;
    INT PickupAmmo;
    BITFIELD bRecommendSplashDamage:1 GCC_PACK(4);
    BITFIELD bTossed:1;
    BITFIELD bTrySplash:1;
    BITFIELD bLeadTarget:1;
    BITFIELD bInstantHit:1;
    BITFIELD bSplashDamage:1;
    class UClass* ProjectileClass GCC_PACK(4);
    class UClass* MyDamageType;
    FLOAT WarnTargetPct;
    FLOAT RefireRate;
    class USound* FireSound;
    FLOAT MaxAutoAimRange;
    DECLARE_CLASS(AAmmunition,AInventory,0|CLASS_NativeReplication,Engine)
    #include "AAmmunition.h"
};


class ENGINE_API APowerups : public AInventory
{
public:
    INT NumCopies;
    BITFIELD bCanHaveMultipleCopies:1 GCC_PACK(4);
    BITFIELD bAutoActivate:1;
    BITFIELD bActivatable:1;
    BITFIELD bActive:1;
    FStringNoInit ExpireMessage GCC_PACK(4);
    class USound* ActivateSound;
    class USound* DeActivateSound;
    DECLARE_CLASS(APowerups,AInventory,0|CLASS_NativeReplication,Engine)
    #include "APowerups.h"
};


class ENGINE_API AWeapon : public AInventory
{
public:
    class UClass* AmmoName;
    INT PickupAmmoCount;
    class AAmmunition* AmmoType;
    BYTE ReloadCount;
    BITFIELD bPointing:1 GCC_PACK(4);
    BITFIELD bWeaponUp:1;
    BITFIELD bChangeWeapon:1;
    BITFIELD bCanThrow:1;
    BITFIELD bRapidFire:1;
    BITFIELD bForceReload:1;
    FLOAT StopFiringTime GCC_PACK(4);
    INT AutoSwitchPriority;
    FVector FireOffset;
    FLOAT ShakeMag;
    FLOAT ShakeTime;
    FVector ShakeVert;
    FVector ShakeSpeed;
    class UTexture* CrossHair;
    class APowerups* Affector;
    FLOAT TraceAccuracy;
    BITFIELD bMeleeWeapon:1 GCC_PACK(4);
    BITFIELD bSniping:1;
    FLOAT aimerror GCC_PACK(4);
    FLOAT AIRating;
    FLOAT CurrentRating;
    FLOAT TraceDist;
    FLOAT MaxRange;
    FRotator AdjustedAim;
    class USound* FireSound;
    class USound* SelectSound;
    FStringNoInit MessageNoAmmo;
    FStringNoInit WeaponDescription;
    FColor NameColor;
    BITFIELD bSteadyToggle:1 GCC_PACK(4);
    BITFIELD bForceFire:1;
    BITFIELD bForceAltFire:1;
    FStringNoInit LeftHandedMesh GCC_PACK(4);
    FLOAT DisplayFOV;
    FLOAT FlashTime;
    FLOAT MuzzleScale;
    FLOAT FlashOffsetY;
    FLOAT FlashOffsetX;
    FLOAT FlashLength;
    FLOAT MuzzleFlashSize;
    class UTexture* MFTexture;
    BYTE FlashCount;
    BITFIELD bAutoFire:1 GCC_PACK(4);
    BITFIELD bMuzzleFlash:1;
    BITFIELD bSetFlashTime:1;
    BITFIELD bDrawMuzzleFlash:1;
    BITFIELD bMuzzleFlashParticles:1;
    class UMesh* MuzzleFlashMesh GCC_PACK(4);
    FLOAT MuzzleFlashScale;
    BYTE MuzzleFlashStyle;
    class UTexture* MuzzleFlashTexture;
    FLOAT FireAdjust;
    DECLARE_CLASS(AWeapon,AInventory,0|CLASS_NativeReplication,Engine)
    #include "AWeapon.h"
};

struct ENGINE_API FConsoleMessage
{
    FStringNoInit Text;
    FColor TextColor;
    FLOAT MessageLife;
    class APlayerReplicationInfo* PRI;
};


struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventShowUpgradeMenu_Parms
{
};
struct AHUD_eventConnectFailure_Parms
{
    FString FailCode;
    FString URL;
};
struct AHUD_eventWorldSpaceOverlays_Parms
{
};
class ENGINE_API AHUD : public AActor
{
public:
    class UFont* SmallFont;
    class UFont* MedFont;
    class UFont* BigFont;
    class UFont* LargeFont;
    FStringNoInit HUDConfigWindowType;
    class AHUD* nextHUD;
    class APlayerController* PlayerOwner;
    FStringNoInit ProgressFontName;
    class UFont* ProgressFontFont;
    FLOAT ProgressFadeTime;
    FColor MOTDColor;
    class AScoreBoard* ScoreBoard;
    BITFIELD bHideHUD:1 GCC_PACK(4);
    BITFIELD bShowScores:1;
    BITFIELD bShowDebugInfo:1;
    BITFIELD bHideCenterMessages:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD bMessageBeep:1;
    FLOAT HudCanvasScale GCC_PACK(4);
    FStringNoInit LoadingMessage;
    FStringNoInit SavingMessage;
    FStringNoInit ConnectingMessage;
    FStringNoInit PausedMessage;
    FStringNoInit PrecachingMessage;
    FColor ConsoleColor;
    INT ConsoleMessageCount;
    INT ConsoleFontSize;
    INT MessageFontOffset;
    FConsoleMessage TextMessages[8];
    FLOAT ConsoleMessagePosX;
    FLOAT ConsoleMessagePosY;
    FStringNoInit FontArrayNames[9];
    class UFont* FontArrayFonts[9];
    INT FontScreenWidthMedium[9];
    INT FontScreenWidthSmall[9];
    DECLARE_FUNCTION(execDraw3DLine);
    void eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventShowUpgradeMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowUpgradeMenu),NULL);
    }
    void eventConnectFailure(const FString& FailCode, const FString& URL)
    {
        AHUD_eventConnectFailure_Parms Parms;
        Parms.FailCode=FailCode;
        Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_ConnectFailure),&Parms);
    }
    void eventWorldSpaceOverlays()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_WorldSpaceOverlays),NULL);
    }
    DECLARE_CLASS(AHUD,AActor,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


class ENGINE_API AProjectile : public AActor
{
public:
    FLOAT Speed;
    FLOAT MaxSpeed;
    FLOAT TossZ;
    BITFIELD bSwitchToZeroCollision:1 GCC_PACK(4);
    FLOAT Damage GCC_PACK(4);
    FLOAT DamageRadius;
    FLOAT MomentumTransfer;
    class UClass* MyDamageType;
    class USound* SpawnSound;
    class USound* ImpactSound;
    class UClass* ExplosionDecal;
    FLOAT ExploWallOut;
    DECLARE_CLASS(AProjectile,AActor,0,Engine)
    #include "AProjectile.h"
};


class ENGINE_API ADecoration : public AActor
{
public:
    class UClass* EffectWhenDestroyed;
    BITFIELD bPushable:1 GCC_PACK(4);
    BITFIELD bDamageable:1;
    BITFIELD bPushSoundPlaying:1;
    BITFIELD bSplash:1;
    class USound* PushSound GCC_PACK(4);
    class USound* EndPushSound;
    INT numLandings;
    class UClass* contents;
    INT NumFrags;
    class UTexture* FragSkin;
    class UClass* FragType;
    FVector FragMomentum;
    INT Health;
    FLOAT SplashTime;
    DECLARE_CLASS(ADecoration,AActor,0,Engine)
    #include "ADecoration.h"
};


class ENGINE_API ANote : public AActor
{
public:
    FStringNoInit Text;
    DECLARE_CLASS(ANote,AActor,0,Engine)
    #include "ANote.h"
};


class ENGINE_API AL2NMover : public AActor
{
public:
    BITFIELD bLoop:1 GCC_PACK(4);
    BITFIELD bMoveStart:1;
    BITFIELD bMoveEnd:1;
    BITFIELD bMovePause:1;
    FLOAT MoveStartDelay GCC_PACK(4);
    FVector OwnerOrigin;
    INT TargetIndex;
    TArrayNoInit<FNMoverTarget> MoverTargets;
    FLOAT MoveSpeed;
    FLOAT CurMoveSpeed;
    FLOAT AccelRate;
    FLOAT AccelAccelRate;
    FLOAT CurAccelRate;
    FLOAT MaxSpeed;
    FLOAT MinSpeed;
    FLOAT MaxAccelRate;
    FLOAT MinAccelRate;
    class AActor* ForceBounceActor;
    DECLARE_CLASS(AL2NMover,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AL2NMover)
};


class ENGINE_API AKActor : public AActor
{
public:
    BITFIELD bKTakeShot:1 GCC_PACK(4);
    TArrayNoInit<class USound*> ImpactSounds GCC_PACK(4);
    FLOAT ImpactVolume;
    class UClass* ImpactEffect;
    BITFIELD bOrientImpactEffect:1 GCC_PACK(4);
    FLOAT ImpactInterval GCC_PACK(4);
    FLOAT LastImpactTime;
    DECLARE_CLASS(AKActor,AActor,0,Engine)
	virtual void Spawned();
};


class ENGINE_API AKTire : public AKActor
{
public:
    class AKCarWheelJoint* WheelJoint;
    FLOAT RollFriction;
    FLOAT LateralFriction;
    FLOAT RollSlip;
    FLOAT LateralSlip;
    FLOAT MinSlip;
    FLOAT SlipRate;
    FLOAT Softness;
    FLOAT Adhesion;
    FLOAT Restitution;
    BITFIELD bTireOnGround:1 GCC_PACK(4);
    FLOAT GroundSlipVel GCC_PACK(4);
    FVector GroundSlipVec;
    FLOAT SpinSpeed;
    class UMaterial* GroundMaterial;
    FKRigidBodyState ReceiveState;
    BITFIELD bReceiveStateNew:1 GCC_PACK(4);
    DECLARE_CLASS(AKTire,AKActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKTire)
};


struct AKConstraint_eventKForceExceed_Parms
{
    FLOAT forceMag;
};
class ENGINE_API AKConstraint : public AKActor
{
public:
    INT KConstraintData;
    class AActor* KConstraintActor1;
    class AActor* KConstraintActor2;
    FName KConstraintBone1;
    FName KConstraintBone2;
    BITFIELD bKDisableCollision:1 GCC_PACK(4);
    FVector KPos1 GCC_PACK(4);
    FVector KPriAxis1;
    FVector KSecAxis1;
    FVector KPos2;
    FVector KPriAxis2;
    FVector KSecAxis2;
    BITFIELD bKForceFrameUpdate:1 GCC_PACK(4);
    FLOAT KForceThreshold GCC_PACK(4);
    DECLARE_FUNCTION(execKGetConstraintTorque);
    DECLARE_FUNCTION(execKGetConstraintForce);
    DECLARE_FUNCTION(execKUpdateConstraintParams);
    void eventKForceExceed(FLOAT forceMag)
    {
        AKConstraint_eventKForceExceed_Parms Parms;
        Parms.forceMag=forceMag;
        ProcessEvent(FindFunctionChecked(ENGINE_KForceExceed),&Parms);
    }
    DECLARE_CLASS(AKConstraint,AKActor,0,Engine)
#ifdef WITH_KARMA
    virtual MdtConstraintID getKConstraint() const;
    virtual McdModelID getKModel() const;

	virtual void physKarma(FLOAT DeltaTime);

	virtual void PostEditChange();
	virtual void PostEditMove();

    virtual void KUpdateConstraintParams();
	
	virtual void CheckForErrors(); // used for checking that this constraint is valid buring map build
	virtual void RenderEditorSelected(FLevelSceneNode* SceneNode,FRenderInterface* RI, FDynamicActor* FDA);
	virtual UBOOL CheckOwnerUpdated();

	virtual void preKarmaStep(FLOAT DeltaTime) {};
	virtual void postKarmaStep() {};
#endif
};


class ENGINE_API AKCarWheelJoint : public AKConstraint
{
public:
    FLOAT KSteerAngle;
    FLOAT KProportionalGap;
    FLOAT KMaxSteerTorque;
    FLOAT KMaxSteerSpeed;
    BITFIELD bKSteeringLocked:1 GCC_PACK(4);
    FLOAT KMotorTorque GCC_PACK(4);
    FLOAT KMaxSpeed;
    FLOAT KBraking;
    FLOAT KSuspLowLimit;
    FLOAT KSuspHighLimit;
    FLOAT KSuspStiffness;
    FLOAT KSuspDamping;
    FLOAT KSuspRef;
    FLOAT KWheelHeight;
    DECLARE_CLASS(AKCarWheelJoint,AKConstraint,0,Engine)
#ifdef WITH_KARMA
    virtual void KUpdateConstraintParams();
	virtual void preKarmaStep(FLOAT DeltaTime);
#endif
};


class ENGINE_API AKConeLimit : public AKConstraint
{
public:
    FLOAT KHalfAngle;
    FLOAT KStiffness;
    FLOAT KDamping;
    DECLARE_CLASS(AKConeLimit,AKConstraint,0,Engine)
#ifdef WITH_KARMA
    virtual void KUpdateConstraintParams();
#endif
};

enum EHingeType
{
    HT_Normal               =0,
    HT_Springy              =1,
    HT_Motor                =2,
    HT_Controlled           =3,
    HT_MAX                  =4,
};

class ENGINE_API AKHinge : public AKConstraint
{
public:
    BYTE KHingeType;
    FLOAT KStiffness;
    FLOAT KDamping;
    FLOAT KDesiredAngVel;
    FLOAT KMaxTorque;
    FLOAT KDesiredAngle;
    FLOAT KProportionalGap;
    FLOAT KAltDesiredAngle;
    BITFIELD KUseAltDesired:1 GCC_PACK(4);
    FLOAT KCurrentAngle GCC_PACK(4);
    DECLARE_CLASS(AKHinge,AKConstraint,0,Engine)
#ifdef WITH_KARMA
    virtual void KUpdateConstraintParams();
	virtual void preKarmaStep(FLOAT DeltaTime);
#endif
};


class ENGINE_API AKBSJoint : public AKConstraint
{
public:
    DECLARE_CLASS(AKBSJoint,AKConstraint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKBSJoint)
};

enum ESkelLocationUpdate
{
    PTSU_None               =0,
    PTSU_SpawnOffset        =1,
    PTSU_Location           =2,
    PTSU_MAX                =3,
};
enum EParticleMeshSpawning
{
    PTMS_None               =0,
    PTMS_Linear             =1,
    PTMS_Random             =2,
    PTMS_MAX                =3,
};
enum EParticleCollisionSound
{
    PTSC_None               =0,
    PTSC_LinearGlobal       =1,
    PTSC_LinearLocal        =2,
    PTSC_Random             =3,
    PTSC_MAX                =4,
};
enum EParticleEffectAxis
{
    PTEA_NegativeX          =0,
    PTEA_PositiveZ          =1,
    PTEA_MAX                =2,
};
enum EParticleStartLocationShape
{
    PTLS_Box                =0,
    PTLS_Sphere             =1,
    PTLS_Polar              =2,
    PTLS_All                =3,
    PTLS_MAX                =4,
};
enum EParticleVelocityDirection
{
    PTVD_None               =0,
    PTVD_StartPositionAndOwner=1,
    PTVD_OwnerAndStartPosition=2,
    PTVD_AddRadial          =3,
    PTVD_MAX                =4,
};
enum EParticleRotationSource
{
    PTRS_None               =0,
    PTRS_Actor              =1,
    PTRS_Offset             =2,
    PTRS_Normal             =3,
    PTRS_MAX                =4,
};
enum EParticleParticleChoice
{
    PTWC_MaxParticle        =0,
    PTWC_ParticlePerSecond  =1,
    PTWC_MAX                =2,
};
enum EParticleCoordinateSystem
{
    PTCS_Independent        =0,
    PTCS_Relative           =1,
    PTCS_Absolute           =2,
    PTCS_RelativeRotation   =3,
    PTCS_Spray              =4,
    PTCS_MAX                =5,
};
enum EParticleDrawStyle
{
    PTDS_Regular            =0,
    PTDS_AlphaBlend         =1,
    PTDS_Modulated          =2,
    PTDS_Translucent        =3,
    PTDS_AlphaModulate_MightNotFogCorrectly=4,
    PTDS_Darken             =5,
    PTDS_Brighten           =6,
    PTDS_MAX                =7,
};
enum EBlendMode
{
    BM_MODULATE             =0,
    BM_MODULATE2X           =1,
    BM_MODULATE4X           =2,
    BM_ADD                  =3,
    BM_ADDSIGNED            =4,
    BM_ADDSIGNED2X          =5,
    BM_SUBTRACT             =6,
    BM_ADDSMOOTH            =7,
    BM_BLENDDIFFUSEALPHA    =8,
    BM_BLENDTEXTUREALPHA    =9,
    BM_BLENDFACTORALPHA     =10,
    BM_BLENDTEXTUREALPHAPM  =11,
    BM_BLENDCURRENTALPHA    =12,
    BM_PREMODULATE          =13,
    BM_MODULATEALPHA_ADDCOLOR=14,
    BM_MODULATEINVALPHA_ADDCOLOR=15,
    BM_MODULATEINVCOLOR_ADDALPHA=16,
    BM_HACK                 =17,
    BM_MAX                  =18,
};

class ENGINE_API UParticleEmitter : public UObject
{
public:
    FVector Acceleration;
    BITFIELD IndependentSprayAccel:1 GCC_PACK(4);
    BITFIELD UseCollision:1;
    FVector ExtentMultiplier GCC_PACK(4);
    FRangeVector DampingFactorRange;
    BITFIELD UseCollisionPlanes:1 GCC_PACK(4);
    TArrayNoInit<FPlane> CollisionPlanes GCC_PACK(4);
    BITFIELD UseMaxCollisions:1 GCC_PACK(4);
    FRange MaxCollisions GCC_PACK(4);
    INT SpawnFromOtherEmitter;
    INT SpawnAmount;
    FRangeVector SpawnedVelocityScaleRange;
    BITFIELD UseSpawnedVelocityScale:1 GCC_PACK(4);
    BITFIELD UseColorScale:1;
    TArrayNoInit<FParticleColorScale> ColorScale GCC_PACK(4);
    FLOAT ColorScaleRepeats;
    FRangeVector ColorMultiplierRange;
    FLOAT Opacity;
    FLOAT OpacityRatio;
    FPlane FadeOutFactor;
    FLOAT FadeOutStartTime;
    BITFIELD FadeOut:1 GCC_PACK(4);
    FPlane FadeInFactor GCC_PACK(4);
    FLOAT FadeInEndTime;
    BITFIELD FadeIn:1 GCC_PACK(4);
    BITFIELD UseActorForces:1;
    BYTE CoordinateSystem GCC_PACK(4);
    INT MaxParticles;
    BITFIELD ResetAfterChange:1 GCC_PACK(4);
    BYTE EffectAxis GCC_PACK(4);
    INT LevelOfWeather;
    INT CheckLevelOfWeather;
    BYTE ParticleChoice;
    BITFIELD WeatherEffect:1 GCC_PACK(4);
    TArrayNoInit<FRange> WeatherRangeTime GCC_PACK(4);
    BITFIELD WeatherSoundCheck:1 GCC_PACK(4);
    BITFIELD ForcedLifeTime:1;
    BITFIELD ForcedFade:1;
    BITFIELD ForcedMaxParticles:1;
    BITFIELD RespawnDeadParticles:1;
    BITFIELD AutoDestroy:1;
    BITFIELD AutoReset:1;
    BITFIELD Disabled:1;
    BITFIELD DisableFogging:1;
    FRange AutoResetTimeRange GCC_PACK(4);
    FStringNoInit Name;
    FVector StartLocationOffset;
    FRangeVector StartLocationRange;
    INT AddLocationFromOtherEmitter;
    BYTE StartLocationShape;
    FRange SphereRadiusRange;
    FRangeVector StartLocationPolarRange;
    FRange StartMassRange;
    class UStaticMesh* MeshSpawningStaticMesh;
    BYTE MeshSpawning;
    BITFIELD VelocityFromMesh:1 GCC_PACK(4);
    FRangeVector VelocityScaleRange GCC_PACK(4);
    FRangeVector MeshScaleRange;
    BITFIELD UniformMeshScale:1 GCC_PACK(4);
    BITFIELD UniformVelocityScale:1;
    BITFIELD UseColorFromMesh:1;
    BITFIELD SpawnOnlyInDirectionOfNormal:1;
    FVector MeshNormal GCC_PACK(4);
    FRange MeshNormalThresholdRange;
    INT AlphaRef;
    BITFIELD AlphaTest:1 GCC_PACK(4);
    BITFIELD AcceptsProjectors:1;
    BITFIELD ZTest:1;
    BITFIELD ZWrite:1;
    BITFIELD UseRevolution:1;
    FRangeVector RevolutionCenterOffsetRange GCC_PACK(4);
    FRangeVector RevolutionsPerSecondRange;
    BITFIELD UseRevolutionScale:1 GCC_PACK(4);
    TArrayNoInit<FParticleRevolutionScale> RevolutionScale GCC_PACK(4);
    FLOAT RevolutionScaleRepeats;
    BYTE UseRotationFrom;
    BITFIELD SpinParticles:1 GCC_PACK(4);
    FRotator RotationOffset GCC_PACK(4);
    FVector SpinCCWorCW;
    FRangeVector SpinsPerSecondRange;
    FRangeVector StartSpinRange;
    BITFIELD DampRotation:1 GCC_PACK(4);
    FRangeVector RotationDampingFactorRange GCC_PACK(4);
    FVector RotationNormal;
    BITFIELD UseSizeScale:1 GCC_PACK(4);
    BITFIELD UseRegularSizeScale:1;
    TArrayNoInit<FParticleTimeScale> SizeScale GCC_PACK(4);
    FLOAT SizeScaleRepeats;
    FRangeVector StartSizeRange;
    BITFIELD UniformSize:1 GCC_PACK(4);
    BYTE UseSkeletalLocationAs GCC_PACK(4);
    class AActor* SkeletalMeshActor;
    FVector SkeletalScale;
    FRange RelativeBoneIndexRange;
    TArrayNoInit<FParticleSound> Sounds;
    BYTE SpawningSound;
    FRange SpawningSoundIndex;
    FRange SpawningSoundProbability;
    BYTE CollisionSound;
    FRange CollisionSoundIndex;
    FRange CollisionSoundProbability;
    FLOAT ParticlesPerSecond;
    FLOAT InitialParticlesPerSecond;
    BITFIELD AutomaticInitialSpawning:1 GCC_PACK(4);
    BYTE DrawStyle GCC_PACK(4);
    class UTexture* Texture;
    INT TextureUSubdivisions;
    INT TextureVSubdivisions;
    BITFIELD BlendBetweenSubdivisions:1 GCC_PACK(4);
    BITFIELD UseSubdivisionScale:1;
    TArrayNoInit<FLOAT> SubdivisionScale GCC_PACK(4);
    INT SubdivisionStart;
    INT SubdivisionEnd;
    BITFIELD UseRandomSubdivision:1 GCC_PACK(4);
    FLOAT SecondsBeforeInactive GCC_PACK(4);
    FLOAT MinSquaredVelocity;
    FRange InitialTimeRange;
    FRange LifetimeRange;
    FRange InitialDelayRange;
    BITFIELD TriggerDisabled:1 GCC_PACK(4);
    BITFIELD ResetOnTrigger:1;
    FRange SpawnOnTriggerRange GCC_PACK(4);
    FLOAT SpawnOnTriggerPPS;
    FRangeVector StartVelocityRange;
    FRange StartVelocityRadialRange;
    FVector MaxAbsVelocity;
    FRangeVector VelocityLossRange;
    INT AddVelocityFromOtherEmitter;
    FRangeVector AddVelocityMultiplierRange;
    BYTE GetVelocityDirectionFrom;
    BITFIELD UseVelocityScale:1 GCC_PACK(4);
    TArrayNoInit<FParticleVelocityScale> VelocityScale GCC_PACK(4);
    FLOAT VelocityScaleRepeats;
    FLOAT WarmupTicksPerSecond;
    FLOAT RelativeWarmupTime;
    class AEmitter* Owner;
    BITFIELD Initialized:1 GCC_PACK(4);
    BITFIELD Inactive:1;
    FLOAT InactiveTime GCC_PACK(4);
    TArrayNoInit<FParticle> Particles;
    INT ParticleIndex;
    INT ActiveParticles;
    FLOAT PPSFraction;
    FBox BoundingBox;
    FVector RealExtentMultiplier;
    BITFIELD RealDisableFogging:1 GCC_PACK(4);
    BITFIELD AllParticlesDead:1;
    BITFIELD WarmedUp:1;
    INT OtherIndex GCC_PACK(4);
    FLOAT InitialDelay;
    FVector GlobalOffset;
    FLOAT TimeTillReset;
    INT PS2Data;
    INT MaxActiveParticles;
    INT CurrentCollisionSoundIndex;
    INT CurrentSpawningSoundIndex;
    INT CurrentMeshSpawningIndex;
    FLOAT MaxSizeScale;
    INT KillPending;
    INT DeferredParticles;
    FVector RealMeshNormal;
    TArrayNoInit<FVector> MeshVertsAndNormals;
    INT CurrentSpawnOnTrigger;
    BITFIELD bOwnerTracking:1 GCC_PACK(4);
    FLOAT CurLifeTime GCC_PACK(4);
    BITFIELD bNotifyPreDestroy:1 GCC_PACK(4);
    DECLARE_FUNCTION(execTrigger);
    DECLARE_FUNCTION(execSpawnParticle);
    DECLARE_CLASS(UParticleEmitter,UObject,0,Engine)
    #include "UParticleEmitter.h"
};


class ENGINE_API UTrailEmitter : public UParticleEmitter
{
public:
    INT MaxPointsPerTrail;
    FRange DistanceRange;
    BITFIELD UseCrossedSheets:1 GCC_PACK(4);
    INT MaxTrailTwistAngle GCC_PACK(4);
    TArrayNoInit<FParticleTrailData> TrailData;
    TArrayNoInit<FParticleTrailInfo> TrailInfo;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    DECLARE_CLASS(UTrailEmitter,UParticleEmitter,0,Engine)
    #include "UTrailEmitter.h"
};

enum EParticleDirectionUsage
{
    PTDU_None               =0,
    PTDU_Up                 =1,
    PTDU_Right              =2,
    PTDU_Forward            =3,
    PTDU_Normal             =4,
    PTDU_UpAndNormal        =5,
    PTDU_RightAndNormal     =6,
    PTDU_Scale              =7,
    PTDU_MAX                =8,
};

class ENGINE_API USpriteEmitter : public UParticleEmitter
{
public:
    BYTE UseDirectionAs;
    FVector ProjectionNormal;
    INT Refraction;
    FLOAT RefrUScale;
    FLOAT RefrVScale;
    FVector RealProjectionNormal;
    DECLARE_CLASS(USpriteEmitter,UParticleEmitter,0,Engine)
    #include "USpriteEmitter.h"
};


class ENGINE_API USparkEmitter : public UParticleEmitter
{
public:
    FRange LineSegmentsRange;
    FRange TimeBeforeVisibleRange;
    FRange TimeBetweenSegmentsRange;
    TArrayNoInit<FParticleSparkData> SparkData;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT NumSegments;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    DECLARE_CLASS(USparkEmitter,UParticleEmitter,0,Engine)
    #include "USparkEmitter.h"
};

enum EAccDrop
{
    ADRP_NONE               =0,
    ADRP_BYPOINT            =1,
    ADRP_BYTIME             =2,
    ADRP_BYTIME_DUAL        =3,
    ADRP_MAX                =4,
};
enum EGetPointAxis
{
    PAXIS_OwnerX            =0,
    PAXIS_OwnerY            =1,
    PAXIS_OwnerZ            =2,
    PAXIS_BoneNormal        =3,
    PAXIS_StartBoneDirection=4,
    PAXIS_AxisNormal        =5,
    PAXIS_MAX               =6,
};
struct ENGINE_API FRibbonPoint
{
    FVector Location;
    FVector LocationUnder;
    FVector MovingDirection;
    FVector MovingDirectionUnder;
    FLOAT Width;
};


class ENGINE_API URibbonEmitter : public UParticleEmitter
{
public:
    FLOAT SampleRate;
    FLOAT DecayRate;
    INT NumPoints;
    BYTE AccDrop;
    INT PointsDropRate;
    FLOAT ThresholdTime;
    INT MinPoints;
    FLOAT ThresholdTime2;
    FLOAT RibbonWidth;
    BYTE GetPointAxisFrom;
    FVector AxisNormal;
    FLOAT MinSampleDist;
    FLOAT MinSampleDot;
    FLOAT PointOriginOffset;
    FLOAT RibbonTextureUScale;
    FLOAT RibbonTextureVScale;
    INT NumSheets;
    TArrayNoInit<FLOAT> SheetScale;
    FVector StartBoneOffset;
    FVector EndBoneOffset;
    FName BoneNameStart;
    FName BoneNameEnd;
    TArrayNoInit<FRibbonPoint> RibbonPoints;
    BITFIELD bUseInterpolation:1 GCC_PACK(4);
    INT CntrPoints GCC_PACK(4);
    FLOAT ScaleRatio;
    BITFIELD bSamplePoints:1 GCC_PACK(4);
    BITFIELD bDecayPoints:1;
    BITFIELD bDecayPointsWhenStopped:1;
    BITFIELD bSyncDecayWhenKilled:1;
    BITFIELD bLengthBasedTextureU:1;
    BITFIELD bUseSheetScale:1;
    BITFIELD bUseBones:1;
    BITFIELD bUseBoneDistance:1;
    FLOAT SampleTimer GCC_PACK(4);
    FLOAT DecayTimer;
    FLOAT RealSampleRate;
    FLOAT RealDecayRate;
    INT SheetsUsed;
    FRibbonPoint LastSampledPoint;
    BITFIELD bKilled:1 GCC_PACK(4);
    BITFIELD bDecaying:1;
    DECLARE_CLASS(URibbonEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(URibbonEmitter)
};


class ENGINE_API UMeshEmitter : public UParticleEmitter
{
public:
    class UStaticMesh* StaticMesh;
    BITFIELD UseMeshBlendMode:1 GCC_PACK(4);
    BITFIELD RenderTwoSided:1;
    BITFIELD UseParticleColor:1;
    FVector MeshExtent GCC_PACK(4);
    DECLARE_CLASS(UMeshEmitter,UParticleEmitter,0,Engine)
    #include "UMeshEmitter.h"
};

enum EBeamEndPointType
{
    PTEP_Velocity           =0,
    PTEP_Distance           =1,
    PTEP_Offset             =2,
    PTEP_Actor              =3,
    PTEP_TraceOffset        =4,
    PTEP_OffsetAsAbsolute   =5,
    PTEP_MAX                =6,
};

class ENGINE_API UBeamEmitter : public UParticleEmitter
{
public:
    FRange BeamDistanceRange;
    TArrayNoInit<FParticleBeamEndPoint> BeamEndPoints;
    BYTE DetermineEndPointBy;
    FLOAT BeamTextureUScale;
    FLOAT BeamTextureVScale;
    INT RotatingSheets;
    BITFIELD TriggerEndpoint:1 GCC_PACK(4);
    FRangeVector LowFrequencyNoiseRange GCC_PACK(4);
    INT LowFrequencyPoints;
    FRangeVector HighFrequencyNoiseRange;
    INT HighFrequencyPoints;
    TArrayNoInit<FParticleBeamScale> LFScaleFactors;
    TArrayNoInit<FParticleBeamScale> HFScaleFactors;
    FLOAT LFScaleRepeats;
    FLOAT HFScaleRepeats;
    BITFIELD UseHighFrequencyScale:1 GCC_PACK(4);
    BITFIELD UseLowFrequencyScale:1;
    BITFIELD NoiseDeterminesEndPoint:1;
    FRangeVector DynamicHFNoiseRange GCC_PACK(4);
    FRange DynamicHFNoisePointsRange;
    FRange DynamicTimeBetweenNoiseRange;
    BITFIELD UseBranching:1 GCC_PACK(4);
    FRange BranchProbability GCC_PACK(4);
    FRange BranchHFPointsRange;
    INT BranchEmitter;
    FRange BranchSpawnAmountRange;
    BITFIELD LinkupLifetime:1 GCC_PACK(4);
    INT SheetsUsed GCC_PACK(4);
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    FLOAT BeamValueSum;
    TArrayNoInit<FParticleBeamData> HFPoints;
    TArrayNoInit<FVector> LFPoints;
    TArrayNoInit<class AActor*> HitActors;
    FLOAT TimeSinceLastDynamicNoise;
    DECLARE_CLASS(UBeamEmitter,UParticleEmitter,0,Engine)
    #include "UBeamEmitter.h"
};


class ENGINE_API UShadowBitmapMaterial : public UBitmapMaterial
{
public:
    INT TextureInterfaces[2];
    INT ShadowInterface;
    class AActor* ShadowActor;
    FVector LightDirection;
    FLOAT LightDistance;
    FLOAT LightFOV;
    BITFIELD Dirty:1 GCC_PACK(4);
    BITFIELD Invalid:1;
    BITFIELD bBlobShadow:1;
    FLOAT CullDistance GCC_PACK(4);
    BYTE ShadowDarkness;
    class UBitmapMaterial* BlobShadow;
    BITFIELD bDefaultShadow:1 GCC_PACK(4);
    INT ShadowIndex GCC_PACK(4);
    INT ShadowTextureRevision;
    DECLARE_FUNCTION(execDestroy);
    DECLARE_CLASS(UShadowBitmapMaterial,UBitmapMaterial,0,Engine)
	virtual void Destroy();

	virtual FBaseTexture* GetRenderInterface();
	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);
};


class ENGINE_API UScriptedTexture : public UBitmapMaterial
{
public:
    INT RenderTarget;
    class UViewport* RenderViewport;
    class AActor* Client;
    INT Revision;
    INT OldRevision;
    DECLARE_FUNCTION(execDrawPortal);
    DECLARE_FUNCTION(execDrawTile);
    DECLARE_FUNCTION(execTextSize);
    DECLARE_FUNCTION(execDrawText);
    DECLARE_FUNCTION(execSetSize);
    DECLARE_CLASS(UScriptedTexture,UBitmapMaterial,0,Engine)
	void Render(FRenderInterface* RI);

	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);
	virtual FBaseTexture* GetRenderInterface();
	virtual void Destroy();
	virtual void PostEditChange();
};

struct ENGINE_API FTerrainMaterialLayer
{
    class UMaterial* Texture;
    class UBitmapMaterial* AlphaWeight;
    FMatrix TextureMatrix;
};


class ENGINE_API UTerrainMaterial : public URenderedMaterial
{
public:
    TArrayNoInit<FTerrainMaterialLayer> Layers;
    BYTE RenderMethod;
    BITFIELD FirstPass:1 GCC_PACK(4);
    DECLARE_CLASS(UTerrainMaterial,URenderedMaterial,0,Engine)
	virtual UMaterial* CheckFallback();
	virtual UBOOL HasFallback();
};


class ENGINE_API UProjectorMaterial : public URenderedMaterial
{
public:
    class UBitmapMaterial* Gradient;
    class UMaterial* Projected;
    class UMaterial* BaseMaterial;
    BYTE BaseMaterialBlending;
    BYTE FrameBufferBlending;
    FMatrix Matrix;
    FMatrix GradientMatrix;
    BITFIELD bProjected:1 GCC_PACK(4);
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnBackfaces:1;
    BITFIELD bStaticProjector:1;
    BITFIELD bTwoSided:1;
    DECLARE_CLASS(UProjectorMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UProjectorMaterial)
};


class ENGINE_API UParticleMaterial : public URenderedMaterial
{
public:
    INT ParticleBlending;
    INT BlendBetweenSubdivisions;
    INT RenderTwoSided;
    INT UseTFactor;
    class UBitmapMaterial* BitmapMaterial;
    INT Refraction;
    FLOAT RefrUScale;
    FLOAT RefrVScale;
    INT AlphaTest;
    INT AlphaRef;
    INT ZTest;
    INT ZWrite;
    INT Wireframe;
    BITFIELD AcceptsProjectors:1 GCC_PACK(4);
    INT NumProjectors GCC_PACK(4);
    FParticleProjectorInfo Projectors[8];
    DECLARE_CLASS(UParticleMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleMaterial)
};


class ENGINE_API UVertexColor : public URenderedMaterial
{
public:
    DECLARE_CLASS(UVertexColor,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UVertexColor)
};


class ENGINE_API UConstantMaterial : public URenderedMaterial
{
public:
    DECLARE_CLASS(UConstantMaterial,URenderedMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds) { return FColor(0,0,0,0); }
};

enum EColorFadeType
{
    FC_Linear               =0,
    FC_Sinusoidal           =1,
    FC_MAX                  =2,
};

class ENGINE_API UFadeColor : public UConstantMaterial
{
public:
    FColor Color1;
    FColor Color2;
    FLOAT FadePeriod;
    FLOAT FadePhase;
    BYTE ColorFadeType;
    DECLARE_CLASS(UFadeColor,UConstantMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds);
};


class ENGINE_API UConstantColor : public UConstantMaterial
{
public:
    FColor Color;
    DECLARE_CLASS(UConstantColor,UConstantMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds) { return Color; }
};

enum EOutputBlending
{
    OB_Normal               =0,
    OB_Masked               =1,
    OB_Modulate             =2,
    OB_Translucent          =3,
    OB_Invisible            =4,
    OB_Brighten             =5,
    OB_Darken               =6,
    OB_MAX                  =7,
};

class ENGINE_API UShader : public URenderedMaterial
{
public:
    class UMaterial* Diffuse;
    class UMaterial* Opacity;
    class UMaterial* Specular;
    class UMaterial* SpecularityMask;
    class UMaterial* SelfIllumination;
    class UMaterial* SelfIlluminationMask;
    class UMaterial* Detail;
    FLOAT DetailScale;
    BYTE OutputBlending;
    BITFIELD TwoSided:1 GCC_PACK(4);
    BITFIELD Wireframe:1;
    BITFIELD ModulateStaticLighting2X:1;
    BITFIELD PerformLightingOnSpecularPass:1;
    BITFIELD TreatAsTwoSided:1;
    BITFIELD ZWrite:1;
    BITFIELD AlphaTest:1;
    BYTE AlphaRef GCC_PACK(4);
    class UMaterial* NormalMap;
    FLOAT BumpOffsetScaleFactor;
    FLOAT BumpOffsetBiasFactor;
    DECLARE_CLASS(UShader,URenderedMaterial,0,Engine)
    #include "UShader.h"
};


class ENGINE_API UModifier : public UMaterial
{
public:
    class UMaterial* Material;
    DECLARE_CLASS(UModifier,UMaterial,0,Engine)
    #include "UModifier.h"
};


class ENGINE_API UGlowModifier : public UModifier
{
public:
    FColor GlowColor;
    DECLARE_CLASS(UGlowModifier,UModifier,0,Engine)
	virtual UBOOL RequiresSortingEx(FDynamicActor* FDA);
};


class ENGINE_API UOpacityModifier : public UModifier
{
public:
    class UMaterial* Opacity;
    BITFIELD bOverrideTexModifier:1 GCC_PACK(4);
    DECLARE_CLASS(UOpacityModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UOpacityModifier)
};

enum EMaterialSequenceTriggerActon
{
    MSTA_Ignore             =0,
    MSTA_Reset              =1,
    MSTA_Pause              =2,
    MSTA_Stop               =3,
    MSTA_MAX                =4,
};
enum EMaterialSequenceAction
{
    MSA_ShowMaterial        =0,
    MSA_FadeToMaterial      =1,
    MSA_MAX                 =2,
};
struct ENGINE_API FMaterialSequenceItem
{
    class UMaterial* Material;
    FLOAT Time;
    BYTE Action;
};


class ENGINE_API UMaterialSequence : public UModifier
{
public:
    TArrayNoInit<FMaterialSequenceItem> SequenceItems;
    BYTE TriggerAction;
    BITFIELD Loop:1 GCC_PACK(4);
    BITFIELD Paused:1;
    FLOAT CurrentTime GCC_PACK(4);
    FLOAT LastTime;
    FLOAT TotalTime;
    DECLARE_CLASS(UMaterialSequence,UModifier,0,Engine)
	virtual void PostEditChange();
	virtual UBOOL CheckCircularReferences( TArray<class UMaterial*>& History );
	virtual void PreSetMaterial(FLOAT TimeSeconds);
	virtual void Serialize(FArchive& Ar);
	void	Reset();		
	void	Trigger();		
};


class ENGINE_API UMaterialSwitch : public UModifier
{
public:
    INT Current;
    TArrayNoInit<class UMaterial*> Materials;
    DECLARE_CLASS(UMaterialSwitch,UModifier,0,Engine)
	virtual void PostEditChange();
	virtual UBOOL CheckCircularReferences( TArray<class UMaterial*>& History );
};

enum EFrameBufferBlending
{
    FB_Overwrite            =0,
    FB_Modulate             =1,
    FB_AlphaBlend           =2,
    FB_AlphaModulate_MightNotFogCorrectly=3,
    FB_Translucent          =4,
    FB_Darken               =5,
    FB_Brighten             =6,
    FB_Invisible            =7,
    FB_Add                  =8,
    FB_MAX                  =9,
};

class ENGINE_API UFinalBlend : public UModifier
{
public:
    BYTE FrameBufferBlending;
    BITFIELD ZWrite:1 GCC_PACK(4);
    BITFIELD ZTest:1;
    BITFIELD AlphaTest:1;
    BITFIELD TwoSided:1;
    BYTE AlphaRef GCC_PACK(4);
    BITFIELD TreatAsTwoSided:1 GCC_PACK(4);
    DECLARE_CLASS(UFinalBlend,UModifier,0,Engine)
    #include "UFinalBlend.h"
};

enum ETexCoordCount
{
    TCN_2DCoords            =0,
    TCN_3DCoords            =1,
    TCN_4DCoords            =2,
    TCN_MAX                 =3,
};
enum ETexCoordSrc
{
    TCS_Stream0             =0,
    TCS_Stream1             =1,
    TCS_Stream2             =2,
    TCS_Stream3             =3,
    TCS_Stream4             =4,
    TCS_Stream5             =5,
    TCS_Stream6             =6,
    TCS_Stream7             =7,
    TCS_WorldCoords         =8,
    TCS_CameraCoords        =9,
    TCS_WorldEnvMapCoords   =10,
    TCS_CameraEnvMapCoords  =11,
    TCS_ProjectorCoords     =12,
    TCS_SphereMap           =13,
    TCS_SphereMapModulateOpacity=14,
    TCS_NoChange            =15,
    TCS_MAX                 =16,
};

class ENGINE_API UTexModifier : public UModifier
{
public:
    BYTE TexCoordSource;
    BYTE TexCoordCount;
    BITFIELD TexCoordProjected:1 GCC_PACK(4);
    DECLARE_CLASS(UTexModifier,UModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds) { return NULL; }

	// Material interface.
	virtual INT MaterialUSize();
	virtual INT MaterialVSize();
	virtual BYTE RequiredUVStreams();
	virtual UBOOL GetValidated();
	virtual void SetValidated( UBOOL InValidated );
};


class ENGINE_API UTexCoordSource : public UTexModifier
{
public:
    INT SourceChannel;
    DECLARE_CLASS(UTexCoordSource,UTexModifier,0,Engine)
	void PostEditChange();
};


class ENGINE_API UTexMatrix : public UTexModifier
{
public:
    FMatrix Matrix;
    DECLARE_CLASS(UTexMatrix,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds) { return &Matrix; }
};

enum ETexEnvMapType
{
    EM_WorldSpace           =0,
    EM_CameraSpace          =1,
    EM_SphereMap            =2,
    EM_SphereMapModulateOpacity=3,
    EM_MAX                  =4,
};

class ENGINE_API UTexEnvMap : public UTexModifier
{
public:
    BYTE EnvMapType;
    DECLARE_CLASS(UTexEnvMap,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

enum ETexOscillationType
{
    OT_Pan                  =0,
    OT_Stretch              =1,
    OT_StretchRepeat        =2,
    OT_Jitter               =3,
    OT_MAX                  =4,
};

class ENGINE_API UTexOscillator : public UTexModifier
{
public:
    FLOAT UOscillationRate;
    FLOAT VOscillationRate;
    FLOAT UOscillationPhase;
    FLOAT VOscillationPhase;
    FLOAT UOscillationAmplitude;
    FLOAT VOscillationAmplitude;
    BYTE UOscillationType;
    BYTE VOscillationType;
    FLOAT UOffset;
    FLOAT VOffset;
    FLOAT LastSu;
    FLOAT LastSv;
    FLOAT CurrentUJitter;
    FLOAT CurrentVJitter;
    FMatrix M;
    DECLARE_CLASS(UTexOscillator,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
	// UObject interface
	virtual void PostEditChange();
};

enum ERetriggerAction
{
    RTA_Reverse             =0,
    RTA_Reset               =1,
    RTA_Ignore              =2,
    RTA_Retrigger           =3,
    RTA_MAX                 =4,
};

class ENGINE_API UTexOscillatorTriggered : public UTexOscillator
{
public:
    BYTE RetriggerAction;
    FLOAT StopAfterPeriod;
    FLOAT TriggeredTime;
    BITFIELD Reverse:1 GCC_PACK(4);
    BITFIELD Triggered:1;
    DECLARE_CLASS(UTexOscillatorTriggered,UTexOscillator,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

enum ETexRotationType
{
    TR_FixedRotation        =0,
    TR_ConstantlyRotating   =1,
    TR_OscillatingRotation  =2,
    TR_MAX                  =3,
};

class ENGINE_API UTexRotator : public UTexModifier
{
public:
    BYTE TexRotationType;
    FRotator Rotation;
    BITFIELD ConstantRotation:1 GCC_PACK(4);
    FLOAT UOffset GCC_PACK(4);
    FLOAT VOffset;
    FRotator OscillationRate;
    FRotator OscillationAmplitude;
    FRotator OscillationPhase;
    FMatrix M;
    DECLARE_CLASS(UTexRotator,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
	void PostLoad()
	{
		Super::PostLoad();
		//!!OLDVER
		if( ConstantRotation )
		{
			ConstantRotation = 0;
			TexRotationType = TR_ConstantlyRotating;
		}
	}
};


class ENGINE_API UTexScaler : public UTexModifier
{
public:
    FLOAT UScale;
    FLOAT VScale;
    FLOAT UOffset;
    FLOAT VOffset;
    FMatrix M;
    DECLARE_CLASS(UTexScaler,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};


class ENGINE_API UTexPanner : public UTexModifier
{
public:
    FRotator PanDirection;
    FLOAT PanRate;
    FMatrix M;
    DECLARE_CLASS(UTexPanner,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};


class ENGINE_API UTexPannerTriggered : public UTexPanner
{
public:
    BYTE RetriggerAction;
    FLOAT StopAfterPeriod;
    FLOAT TriggeredTime;
    BITFIELD Reverse:1 GCC_PACK(4);
    BITFIELD Triggered:1;
    DECLARE_CLASS(UTexPannerTriggered,UTexPanner,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

enum EL2TextureOp
{
    P_DISABLE               =0,
    P_SELECTARG1            =1,
    P_SELECTARG2            =2,
    P_MODULATE              =3,
    P_MODULATE2X            =4,
    P_MODULATE4X            =5,
    P_ADD                   =6,
    P_ADDSIGNED             =7,
    P_ADDSIGNED2X           =8,
    P_SUBTRACT              =9,
    P_ADDSMOOTH             =10,
    P_BLENDDIFFUSEALPHA     =11,
    P_BLENDTEXTUREALPHA     =12,
    P_BLENDFACTORALPHA      =13,
    P_BLENDTEXTUREALPHAPM   =14,
    P_BLENDCURRENTALPHA     =15,
    P_PREMODULATE           =16,
    P_MODULATEALPHA_ADDCOLOR=17,
    P_MODULATECOLOR_ADDALPHA=18,
    P_MODULATEINVALPHA_ADDCOLOR=19,
    P_MODULATEINVCOLOR_ADDALPHA=20,
    P_BUMPENVMAP            =21,
    P_BUMPENVMAPLUMINANCE   =22,
    P_DOTPRODUCT3           =23,
    P_MULTIPLYADD           =24,
    P_MAX                   =25,
};

class ENGINE_API UL2ColorModifier : public UModifier
{
public:
    FColor Color;
    BITFIELD RenderTwoSided:1 GCC_PACK(4);
    BITFIELD AlphaBlend:1;
    BYTE AlphaOp GCC_PACK(4);
    BYTE ColorOp;
    DECLARE_CLASS(UL2ColorModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UL2ColorModifier)
};


class ENGINE_API UColorModifier : public UModifier
{
public:
    FColor Color;
    BITFIELD RenderTwoSided:1 GCC_PACK(4);
    BITFIELD AlphaBlend:1;
    DECLARE_CLASS(UColorModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UColorModifier)
};

enum EAlphaOperation
{
    AO_Use_Mask             =0,
    AO_Multiply             =1,
    AO_Add                  =2,
    AO_Use_Alpha_From_Material1=3,
    AO_Use_Alpha_From_Material2=4,
    AO_MAX                  =5,
};
enum EColorOperation
{
    CO_Use_Color_From_Material1=0,
    CO_Use_Color_From_Material2=1,
    CO_Multiply             =2,
    CO_Add                  =3,
    CO_Subtract             =4,
    CO_AlphaBlend_With_Mask =5,
    CO_Add_With_Mask_Modulation=6,
    CO_Use_Color_From_Mask  =7,
    CO_MAX                  =8,
};

class ENGINE_API UCombiner : public UMaterial
{
public:
    BYTE CombineOperation;
    BYTE AlphaOperation;
    class UMaterial* Material1;
    class UMaterial* Material2;
    class UMaterial* Mask;
    BITFIELD InvertMask:1 GCC_PACK(4);
    BITFIELD Modulate2X:1;
    BITFIELD Modulate4X:1;
    DECLARE_CLASS(UCombiner,UMaterial,0,Engine)
    #include "UCombiner.h"
};


class ENGINE_API UAnimNotify : public UObject
{
public:
    INT Revision;
    DECLARE_CLASS(UAnimNotify,UObject,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner ) {};
	virtual FString ExportToScript();
	// UObject interface.
	virtual void PostEditChange();
};


class ENGINE_API UAnimNotify_IdleSound : public UAnimNotify
{
public:
    class USound* Sound;
    FLOAT Volume;
    INT Radius;
    INT Random;
    class USound* IdleSound[3];
    DECLARE_CLASS(UAnimNotify_IdleSound,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
	// Load Sound
	virtual USound* LoadSound( TCHAR* Name );
	virtual USound* GetSound( INT ItemClassID );
};


class ENGINE_API UAnimNotify_MatSubAction : public UAnimNotify
{
public:
    class UMatSubAction* SubAction;
    DECLARE_CLASS(UAnimNotify_MatSubAction,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


struct UAnimNotify_Scripted_eventNotify_Parms
{
    class AActor* Owner;
};
class ENGINE_API UAnimNotify_Scripted : public UAnimNotify
{
public:
    void eventNotify(class AActor* Owner)
    {
        UAnimNotify_Scripted_eventNotify_Parms Parms;
        Parms.Owner=Owner;
        ProcessEvent(FindFunctionChecked(ENGINE_Notify),&Parms);
    }
    DECLARE_CLASS(UAnimNotify_Scripted,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_Script : public UAnimNotify
{
public:
    FName NotifyName;
    DECLARE_CLASS(UAnimNotify_Script,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

enum L2PawnSoundType
{
    LPST_GRASS              =0,
    LPST_LAND               =1,
    LPST_WATER              =2,
    LPST_ACTOR              =3,
    LPST_MAX                =4,
};

class ENGINE_API UAnimNotify_Sound : public UAnimNotify
{
public:
    class USound* Sound;
    FLOAT Volume;
    INT Radius;
    INT Random;
    class USound* DefaultWalkSound[3];
    class USound* DefaultRunSound[3];
    class USound* GrassWalkSound[3];
    class USound* GrassRunSound[3];
    class USound* WaterWalkSound[3];
    class USound* WaterRunSound[3];
    class USound* DefaultActorWalkSound[3];
    class USound* DefaultActorRunSound[3];
    DECLARE_CLASS(UAnimNotify_Sound,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
	// #ifdef __L2 // zodiac
	// Load Sound
	virtual USound *LoadSound(TCHAR *Name);
	virtual USound *GetSound(PMoveType MoveType, L2PawnSoundType type);
	void PostLoad();
	// #endif
};


class ENGINE_API UAnimNotify_SwimSound : public UAnimNotify
{
public:
    DECLARE_CLASS(UAnimNotify_SwimSound,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_DestroyEffect : public UAnimNotify
{
public:
    FName DestroyTag;
    BITFIELD bExpireParticles:1 GCC_PACK(4);
    DECLARE_CLASS(UAnimNotify_DestroyEffect,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_Effect : public UAnimNotify
{
public:
    class UClass* EffectClass;
    FName Bone;
    FVector OffsetLocation;
    FRotator OffsetRotation;
    BITFIELD Attach:1 GCC_PACK(4);
    FName Tag GCC_PACK(4);
    FLOAT DrawScale;
    FVector DrawScale3D;
    BITFIELD TrailCamera:1 GCC_PACK(4);
    BITFIELD IndependentRotation:1;
    FLOAT EffectScale GCC_PACK(4);
    class AActor* LastSpawnedEffect;
    DECLARE_CLASS(UAnimNotify_Effect,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );

#if defined(__L2)	// 2006/07/26 NeverDie
	virtual AActor* GetLastSpawnedEffect();
	virtual void SetLastSpawnedEffect( AActor* a_pLastSpawnedEffect );
#endif
};


class ENGINE_API UAnimNotify_AttackVoice : public UAnimNotify
{
public:
    FLOAT Volume;
    FLOAT Radius;
    INT Random;
    DECLARE_CLASS(UAnimNotify_AttackVoice,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_Channeling : public UAnimNotify
{
public:
    DECLARE_CLASS(UAnimNotify_Channeling,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_AttackPreShot : public UAnimNotify
{
public:
    DECLARE_CLASS(UAnimNotify_AttackPreShot,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_AttackShot : public UAnimNotify
{
public:
    INT TargetIndex;
    DECLARE_CLASS(UAnimNotify_AttackShot,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_AttackItem : public UAnimNotify
{
public:
    DECLARE_CLASS(UAnimNotify_AttackItem,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_ScreenFade : public UAnimNotify
{
public:
    FLOAT FadeOutDuration;
    FColor FadeOutColor;
    FLOAT BlackOutDuration;
    FLOAT FadeInDuration;
    DECLARE_CLASS(UAnimNotify_ScreenFade,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

enum EViewShakeType
{
    VST_DAMAGE              =0,
    VST_VIBRATION           =1,
    VST_USER                =2,
    VST_UP                  =3,
    VST_DOWN                =4,
    VST_UPDOWN              =5,
    VST_DOWNUP              =6,
    VST_MAX                 =7,
};

class ENGINE_API UAnimNotify_ViewShake : public UAnimNotify
{
public:
    BYTE ShakeType;
    FLOAT ShakeIntensity;
    FVector ShakeVector;
    FLOAT ShakeRange;
    INT ShakeCount;
    DECLARE_CLASS(UAnimNotify_ViewShake,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

enum L2PartialBoneScalerType
{
    LPBST_LINEAR            =0,
    LPBST_SIN_SOUT          =1,
    LPBST_SIN_FOUT          =2,
    LPBST_FIN_SOUT          =3,
    LPBST_MAX               =4,
};

class ENGINE_API UAnimNotify_BoneScale : public UAnimNotify
{
public:
    INT BoneIndex;
    FLOAT StartScale;
    FLOAT EndScale;
    FLOAT StartFrameIndex;
    FLOAT EndFrameIndex;
    BITFIELD ApplySubBones:1 GCC_PACK(4);
    BYTE BoneScalerType GCC_PACK(4);
    DECLARE_CLASS(UAnimNotify_BoneScale,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UMatObject : public UObject
{
public:
    DECLARE_CLASS(UMatObject,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMatObject)
};

enum ESAStatus
{
    SASTATUS_Waiting        =0,
    SASTATUS_Running        =1,
    SASTATUS_Ending         =2,
    SASTATUS_Expired        =3,
    SASTATUS_MAX            =4,
};

class ENGINE_API UMatSubAction : public UMatObject
{
public:
    FLOAT Delay;
    FLOAT Duration;
    class UTexture* Icon;
    BYTE Status;
    FStringNoInit Desc;
    FLOAT PctStarting;
    FLOAT PctEnding;
    FLOAT PctDuration;
    DECLARE_CLASS(UMatSubAction,UMatObject,0,Engine)
    #include "UMatSubAction.h"
};


class ENGINE_API USubActionSceneSpeed : public UMatSubAction
{
public:
    FRange SceneSpeed;
    DECLARE_CLASS(USubActionSceneSpeed,UMatSubAction,0,Engine)
    #include "USubActionSceneSpeed.h"
};


class ENGINE_API USubActionGameSpeed : public UMatSubAction
{
public:
    FRange GameSpeed;
    DECLARE_CLASS(USubActionGameSpeed,UMatSubAction,0,Engine)
    #include "USubActionGameSpeed.h"
};


class ENGINE_API USubActionOrientation : public UMatSubAction
{
public:
    FOrientation CamOrientation;
    DECLARE_CLASS(USubActionOrientation,UMatSubAction,0,Engine)
    #include "USubActionOrientation.h"
};


class ENGINE_API USubActionCameraShake : public UMatSubAction
{
public:
    FRangeVector Shake;
    DECLARE_CLASS(USubActionCameraShake,UMatSubAction,0,Engine)
    #include "USubActionCameraShake.h"
};


class ENGINE_API USubActionFOV : public UMatSubAction
{
public:
    FRange FOV;
    DECLARE_CLASS(USubActionFOV,UMatSubAction,0,Engine)
    #include "USubActionFOV.h"
};


class ENGINE_API USubActionTrigger : public UMatSubAction
{
public:
    FName EventName;
    DECLARE_CLASS(USubActionTrigger,UMatSubAction,0,Engine)
    #include "USubActionTrigger.h"
};


class ENGINE_API USubActionFade : public UMatSubAction
{
public:
    FColor FadeColor;
    BITFIELD bFadeOut:1 GCC_PACK(4);
    DECLARE_CLASS(USubActionFade,UMatSubAction,0,Engine)
    #include "USubActionFade.h"
};


class ENGINE_API UMatAction : public UMatObject
{
public:
    class AInterpolationPoint* IntPoint;
    FStringNoInit Comment;
    FLOAT Duration;
    TArrayNoInit<class UMatSubAction*> SubActions;
    BITFIELD bSmoothCorner:1 GCC_PACK(4);
    FVector StartControlPoint GCC_PACK(4);
    FVector EndControlPoint;
    BITFIELD bConstantPathVelocity:1 GCC_PACK(4);
    FLOAT PathVelocity GCC_PACK(4);
    FLOAT PathLength;
    TArrayNoInit<FVector> SampleLocations;
    FLOAT PctStarting;
    FLOAT PctEnding;
    FLOAT PctDuration;
    DECLARE_CLASS(UMatAction,UMatObject,0,Engine)
    #include "UMatAction.h"
};


class ENGINE_API UActionWarp : public UMatAction
{
public:
    DECLARE_CLASS(UActionWarp,UMatAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionWarp)
};


class ENGINE_API UActionPause : public UMatAction
{
public:
    DECLARE_CLASS(UActionPause,UMatAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionPause)
};

enum EPathStyle
{
    PATHSTYLE_Linear        =0,
    PATHSTYLE_Bezier        =1,
    PATHSTYLE_MAX           =2,
};

class ENGINE_API UActionMoveCamera : public UMatAction
{
public:
    BYTE PathStyle;
    DECLARE_CLASS(UActionMoveCamera,UMatAction,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionMoveCamera)
};

enum EMeshSectionMethod
{
    MSM_SmoothOnly          =0,
    MSM_RigidOnly           =1,
    MSM_Mixed               =2,
    MSM_SinglePiece         =3,
    MSM_ForcedRigid         =4,
    MSM_MAX                 =5,
};
enum EImpLightMode
{
    ILM_Unlit               =0,
    ILM_PseudoShaded        =1,
    ILM_Uniform             =2,
    ILM_MAX                 =3,
};
enum EImpDrawMode
{
    IDM_Normal              =0,
    IDM_Fading              =1,
    IDM_MAX                 =2,
};
enum EImpSpaceMode
{
    ISM_Sprite              =0,
    ISM_Fixed               =1,
    ISM_PivotVertical       =2,
    ISM_PivotHorizontal     =3,
    ISM_MAX                 =4,
};

class ENGINE_API UMeshObject : public UObject
{
public:
    DECLARE_CLASS(UMeshObject,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMeshObject)
};

enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_Unknown15            =21,
    IK_Unknown16            =22,
    IK_Unknown17            =23,
    IK_Unknown18            =24,
    IK_Unknown19            =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_Unknown3C            =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_UnknownA4            =164,
    IK_UnknownA5            =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_Unicode              =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_UnknownC1            =193,
    IK_UnknownC2            =194,
    IK_UnknownC3            =195,
    IK_UnknownC4            =196,
    IK_UnknownC5            =197,
    IK_UnknownC6            =198,
    IK_UnknownC7            =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_UnknownE0            =224,
    IK_UnknownE1            =225,
    IK_UnknownE2            =226,
    IK_UnknownE3            =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_JoySlider1           =234,
    IK_JoySlider2           =235,
    IK_MouseWheelUp         =236,
    IK_MouseWheelDown       =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_JoyX                 =240,
    IK_JoyY                 =241,
    IK_JoyZ                 =242,
    IK_JoyR                 =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};
enum EInputAction
{
    IST_None                =0,
    IST_Press               =1,
    IST_Hold                =2,
    IST_Release             =3,
    IST_Axis                =4,
    IST_MAX                 =5,
};

class ENGINE_API UInteractions : public UObject
{
public:
    DECLARE_CLASS(UInteractions,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteractions)
};


struct UInteractionMaster_eventProcess_Message_Parms
{
    FString Msg;
    FLOAT MsgLife;
    TArray<class UInteraction*> InteractionArray;
};
struct UInteractionMaster_eventProcess_Tick_Parms
{
    TArray<class UInteraction*> InteractionArray;
    FLOAT DeltaTime;
};
struct UInteractionMaster_eventProcess_PostRender_Parms
{
    TArray<class UInteraction*> InteractionArray;
    class UCanvas* Canvas;
};
struct UInteractionMaster_eventProcess_PreRender_Parms
{
    TArray<class UInteraction*> InteractionArray;
    class UCanvas* Canvas;
};
struct UInteractionMaster_eventProcess_KeyEvent_Parms
{
    TArray<class UInteraction*> InteractionArray;
    BYTE Key;
    BYTE Action;
    FLOAT Delta;
    BITFIELD ReturnValue;
};
struct UInteractionMaster_eventProcess_KeyType_Parms
{
    TArray<class UInteraction*> InteractionArray;
    BYTE Key;
    FString Unicode;
    BITFIELD ReturnValue;
};
struct UInteractionMaster_eventSetFocusTo_Parms
{
    class UInteraction* Inter;
    class UPlayer* ViewportOwner;
};
struct UInteractionMaster_eventRemoveInteraction_Parms
{
    class UInteraction* RemoveMe;
};
struct UInteractionMaster_eventAddInteraction_Parms
{
    FString InteractionName;
    class UPlayer* AttachTo;
    class UInteraction* ReturnValue;
};
class ENGINE_API UInteractionMaster : public UInteractions
{
public:
    class UClient* Client;
    class UInteraction* BaseMenu;
    class UInteraction* Console;
    TArrayNoInit<class UInteraction*> GlobalInteractions;
    BITFIELD bRequireRawJoystick:1 GCC_PACK(4);
    DECLARE_FUNCTION(execTravel);
    void eventProcess_Message(const FString& Msg, FLOAT MsgLife, TArray<class UInteraction*> InteractionArray)
    {
        UInteractionMaster_eventProcess_Message_Parms Parms;
        Parms.Msg=Msg;
        Parms.MsgLife=MsgLife;
        Parms.InteractionArray=InteractionArray;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Message),&Parms);
    }
    void eventProcess_Tick(TArray<class UInteraction*> InteractionArray, FLOAT DeltaTime)
    {
        UInteractionMaster_eventProcess_Tick_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Tick),&Parms);
    }
    void eventProcess_PostRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
    {
        UInteractionMaster_eventProcess_PostRender_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PostRender),&Parms);
    }
    void eventProcess_PreRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
    {
        UInteractionMaster_eventProcess_PreRender_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PreRender),&Parms);
    }
    BITFIELD eventProcess_KeyEvent(TArray<class UInteraction*> InteractionArray, BYTE& Key, BYTE& Action, FLOAT Delta)
    {
        UInteractionMaster_eventProcess_KeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionArray=InteractionArray;
        Parms.Key=Key;
        Parms.Action=Action;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyEvent),&Parms);
        Key=Parms.Key;
        Action=Parms.Action;
        return Parms.ReturnValue;
    }
    BITFIELD eventProcess_KeyType(TArray<class UInteraction*> InteractionArray, BYTE& Key, const FString& Unicode)
    {
        UInteractionMaster_eventProcess_KeyType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionArray=InteractionArray;
        Parms.Key=Key;
        Parms.Unicode=Unicode;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyType),&Parms);
        Key=Parms.Key;
        return Parms.ReturnValue;
    }
    void eventSetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner)
    {
        UInteractionMaster_eventSetFocusTo_Parms Parms;
        Parms.Inter=Inter;
        Parms.ViewportOwner=ViewportOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_SetFocusTo),&Parms);
    }
    void eventRemoveInteraction(class UInteraction* RemoveMe)
    {
        UInteractionMaster_eventRemoveInteraction_Parms Parms;
        Parms.RemoveMe=RemoveMe;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveInteraction),&Parms);
    }
    class UInteraction* eventAddInteraction(const FString& InteractionName, class UPlayer* AttachTo)
    {
        UInteractionMaster_eventAddInteraction_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionName=InteractionName;
        Parms.AttachTo=AttachTo;
        ProcessEvent(FindFunctionChecked(ENGINE_AddInteraction),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UInteractionMaster,UInteractions,0|CLASS_Transient,Engine)
    #include "UInteractionMaster.h"
};


struct UInteraction_eventInitialized_Parms
{
};
class ENGINE_API UInteraction : public UInteractions
{
public:
    BITFIELD bActive:1 GCC_PACK(4);
    BITFIELD bVisible:1;
    BITFIELD bRequiresTick:1;
    BITFIELD bNativeEvents:1;
    class UPlayer* ViewportOwner GCC_PACK(4);
    class UInteractionMaster* Master;
    DECLARE_FUNCTION(execScreenToWorld);
    DECLARE_FUNCTION(execWorldToScreen);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execInitialize);
    void eventInitialized()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Initialized),NULL);
    }
    DECLARE_CLASS(UInteraction,UInteractions,0,Engine)
    #include "UInteraction.h"
};


struct UBaseGUIController_eventSetRequiredGameResolution_Parms
{
    FString GameRes;
};
struct UBaseGUIController_eventNeedsMenuResolution_Parms
{
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventInitializeController_Parms
{
};
struct UBaseGUIController_eventCloseAll_Parms
{
    BITFIELD bCancel;
};
struct UBaseGUIController_eventCloseMenu_Parms
{
    BITFIELD bCanceled;
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventReplaceMenu_Parms
{
    FString NewMenuName;
    FString Param1;
    FString Param2;
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventOpenMenu_Parms
{
    FString NewMenuName;
    FString Param1;
    FString Param2;
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventOnAdminReply_Parms
{
    FString Reply;
};
class ENGINE_API UBaseGUIController : public UInteraction
{
public:
    class UMaterial* DefaultPens[3];
    FScriptDelegate __OnAdminReply__Delegate;
    void eventSetRequiredGameResolution(const FString& GameRes)
    {
        UBaseGUIController_eventSetRequiredGameResolution_Parms Parms;
        Parms.GameRes=GameRes;
        ProcessEvent(FindFunctionChecked(ENGINE_SetRequiredGameResolution),&Parms);
    }
    BITFIELD eventNeedsMenuResolution()
    {
        UBaseGUIController_eventNeedsMenuResolution_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_NeedsMenuResolution),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitializeController()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitializeController),NULL);
    }
    void eventCloseAll(BITFIELD bCancel)
    {
        UBaseGUIController_eventCloseAll_Parms Parms;
        Parms.bCancel=bCancel;
        ProcessEvent(FindFunctionChecked(ENGINE_CloseAll),&Parms);
    }
    BITFIELD eventCloseMenu(BITFIELD bCanceled)
    {
        UBaseGUIController_eventCloseMenu_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bCanceled=bCanceled;
        ProcessEvent(FindFunctionChecked(ENGINE_CloseMenu),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventReplaceMenu(const FString& NewMenuName, const FString& Param1, const FString& Param2)
    {
        UBaseGUIController_eventReplaceMenu_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewMenuName=NewMenuName;
        Parms.Param1=Param1;
        Parms.Param2=Param2;
        ProcessEvent(FindFunctionChecked(ENGINE_ReplaceMenu),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventOpenMenu(const FString& NewMenuName, const FString& Param1, const FString& Param2)
    {
        UBaseGUIController_eventOpenMenu_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewMenuName=NewMenuName;
        Parms.Param1=Param1;
        Parms.Param2=Param2;
        ProcessEvent(FindFunctionChecked(ENGINE_OpenMenu),&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnAdminReply(const FString& Reply)
    {
        UBaseGUIController_eventOnAdminReply_Parms Parms;
        Parms.Reply=Reply;
        ProcessDelegate(ENGINE_OnAdminReply,&__OnAdminReply__Delegate,&Parms);
    }
    DECLARE_CLASS(UBaseGUIController,UInteraction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UBaseGUIController)
};

#define UCONST_MaxHistory 16

class ENGINE_API UConsole : public UInteraction
{
public:
    BYTE ConsoleKey;
    INT HistoryTop;
    INT HistoryBot;
    INT HistoryCur;
    FStringNoInit TypedStr;
    FStringNoInit History[16];
    BITFIELD bTyping:1 GCC_PACK(4);
    BITFIELD bIgnoreKeys:1;
    DECLARE_CLASS(UConsole,UInteraction,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConsole)
};


struct UPlayerInput_eventPlayerInput_Parms
{
    FLOAT DeltaTime;
};
class ENGINE_API UPlayerInput : public UObject
{
public:
    BITFIELD bInvertMouse:1 GCC_PACK(4);
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bAdjustSampling:1;
    BYTE MouseSmoothingMode GCC_PACK(4);
    FLOAT MouseSmoothingStrength;
    FLOAT MouseSensitivity;
    FLOAT MouseSamplingTime;
    FLOAT MouseAccelThreshold;
    FLOAT SmoothedMouse[2];
    FLOAT ZeroTime[2];
    FLOAT SamplingTime[2];
    FLOAT MaybeTime[2];
    FLOAT OldSamples[4];
    INT MouseSamples[2];
    FLOAT DoubleClickTimer;
    FLOAT DoubleClickTime;
    void eventPlayerInput(FLOAT DeltaTime)
    {
        UPlayerInput_eventPlayerInput_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
    }
    DECLARE_CLASS(UPlayerInput,UObject,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPlayerInput)
};


class ENGINE_API UCheatManager : public UObject
{
public:
    FRotator LockedRotation;
    DECLARE_CLASS(UCheatManager,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCheatManager)
};


class ENGINE_API UI3DL2Listener : public UObject
{
public:
    FLOAT EnvironmentSize;
    FLOAT EnvironmentDiffusion;
    INT Room;
    INT RoomHF;
    INT RoomLF;
    FLOAT DecayTime;
    FLOAT DecayHFRatio;
    FLOAT DecayLFRatio;
    INT Reflections;
    FLOAT ReflectionsDelay;
    FVector ReflectionsPan;
    INT Reverb;
    FLOAT ReverbDelay;
    FVector ReverbPan;
    FLOAT EchoTime;
    FLOAT EchoDepth;
    FLOAT ModulationTime;
    FLOAT ModulationDepth;
    FLOAT RoomRolloffFactor;
    FLOAT AirAbsorptionHF;
    FLOAT HFReference;
    FLOAT LFReference;
    BITFIELD bDecayTimeScale:1 GCC_PACK(4);
    BITFIELD bReflectionsScale:1;
    BITFIELD bReflectionsDelayScale:1;
    BITFIELD bReverbScale:1;
    BITFIELD bReverbDelayScale:1;
    BITFIELD bEchoTimeScale:1;
    BITFIELD bModulationTimeScale:1;
    BITFIELD bDecayHFLimit:1;
    INT Environment GCC_PACK(4);
    INT Updated;
    DECLARE_CLASS(UI3DL2Listener,UObject,0,Engine)
    #include "UI3DL2Listener.h"
};


class ENGINE_API UExtraMeshData : public UObject
{
public:
    class AActor* Owner;
    class UMesh* ExtraMesh;
    class UMeshInstance* ExtraMeshInstance;
    class UMaterial* ExtraTex;
    INT ExtraBodyPart;
    DECLARE_CLASS(UExtraMeshData,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UExtraMeshData)
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    INT IdealPlayerCount;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    #include "ULevelSummary.h"
};


class ENGINE_API UReachSpec : public UObject
{
public:
    INT Distance;
    class ANavigationPoint* Start;
    class ANavigationPoint* End;
    INT CollisionRadius;
    INT CollisionHeight;
    INT reachFlags;
    INT MaxLandingVelocity;
    BYTE bPruned;
    BITFIELD bForced:1 GCC_PACK(4);
    DECLARE_CLASS(UReachSpec,UObject,0,Engine)
    #include "UReachSpec.h"
};


class ENGINE_API ULevelObject : public UObject
{
public:
    BITFIELD bDeleteMe:1 GCC_PACK(4);
    BITFIELD bSelected:1;
    BITFIELD bHidden:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bHiddenEdGroup:1;
    BITFIELD bLockUndelete:1;
    BITFIELD bLockLocation:1;
    BITFIELD bPendingDelete:1;
    BITFIELD bTempEditor:1;
    FName Group GCC_PACK(4);
    FVector Location;
    class UMaterial* Texture;
    FLOAT DrawScale;
    FPointRegion Region;
    class ULevel* SWXLevel;
    class ULevel* XLevel;
    class ULevelObject* Deleted;
    DECLARE_CLASS(ULevelObject,UObject,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULevelObject)
};

enum ASType1
{
    AST1_Always             =0,
    AST1_Day                =1,
    AST1_Night              =2,
    AST1_Water              =3,
    AST1_MAX                =4,
};

class ENGINE_API UAmbientSoundObject : public ULevelObject
{
public:
    BYTE AmbientSoundType;
    INT AmbientRandom;
    FLOAT AmbientSoundStartTime;
    class USound* AmbientSound;
    FLOAT SoundRadius;
    BYTE SoundVolume;
    BYTE SoundPitch;
    DECLARE_CLASS(UAmbientSoundObject,ULevelObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAmbientSoundObject)
};


class ENGINE_API UL2NTimeLight : public UObject
{
public:
    BITFIELD bLoaded:1 GCC_PACK(4);
    TArrayNoInit<FNTimeHSV> TerrainLight GCC_PACK(4);
    TArrayNoInit<FNTimeHSV> ActorLight;
    TArrayNoInit<FNTimeHSV> StaticMeshLight;
    TArrayNoInit<FNTimeHSV> BSPLight;
    DECLARE_CLASS(UL2NTimeLight,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UL2NTimeLight)
};


class ENGINE_API UL2NEnvLight : public UL2NTimeLight
{
public:
    TArrayNoInit<FNTimeColor> SkyColor;
    TArrayNoInit<INT> HazeColorIndex;
    TArrayNoInit<FNTimeColor> HazeColor;
    TArrayNoInit<INT> CloudColorIndex;
    TArrayNoInit<FNTimeColor> CloudColor;
    TArrayNoInit<FNTimeColor> StarColor;
    TArrayNoInit<FNTimeColor> SunColor;
    TArrayNoInit<FNTimeColor> MoonColor;
    TArrayNoInit<FNTimeColor> TerrainAmbient;
    TArrayNoInit<FNTimeColor> ActorAmbient;
    TArrayNoInit<FNTimeColor> StaticMeshAmbient;
    TArrayNoInit<FNTimeColor> BSPAmbient;
    TArrayNoInit<FNTimeScale> SunScale;
    TArrayNoInit<FNTimeScale> MoonScale;
    INT EnvType;
    DECLARE_CLASS(UL2NEnvLight,UL2NTimeLight,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UL2NEnvLight)
};

struct ENGINE_API FSkillActionInfo
{
    class USkillAction* Action;
    INT SpecificStage;
};


class ENGINE_API USkillVisualEffect : public UObject
{
public:
    FName Desc;
    TArrayNoInit<FSkillActionInfo> CastingActions;
    TArrayNoInit<FSkillActionInfo> ChannelingActions;
    TArrayNoInit<FSkillActionInfo> PreshotActions;
    TArrayNoInit<FSkillActionInfo> ShotActions;
    TArrayNoInit<FSkillActionInfo> ExplosionActions;
    FLOAT FlyingTime;
    DECLARE_CLASS(USkillVisualEffect,UObject,0,Engine)
	// trigger the actions	
	void TriggerTransientEffect(class APawn *Owner, class AActor *Target, INT SkillID);
	void TriggerCasting(class APawn *Owner, class AActor *Target);
	void TriggerChanneling(class APawn *Owner, class AActor *Target);
	void TriggerPreshot(class APawn *Owner);
	void TriggerShot(class APawn* Owner);
	void TriggerExplosion(class ANSkillProjectile *Projectile);
};


class ENGINE_API USkillAction : public UObject
{
public:
    class UClass* EffectClass;
    BITFIELD bOnMultiTarget:1 GCC_PACK(4);
    DECLARE_CLASS(USkillAction,UObject,0,Engine)
	virtual AEmitter* Notify( AActor *BaseActor, AActor* DestActor );
	// UObject interface.
	virtual void PostEditChange();
};


class ENGINE_API USkillAction_SwordTrail : public USkillAction
{
public:
    FLOAT DurationRatio;
    BITFIELD bRightHand:1 GCC_PACK(4);
    DECLARE_CLASS(USkillAction_SwordTrail,USkillAction,0,Engine)
	virtual AEmitter* Notify( AActor *BaseActor, AActor *DestActor);
	virtual void PostEditChange();
};

enum EAttachMethod
{
    EAM_None                =0,
    EAM_RH                  =1,
    EAM_LH                  =2,
    EAM_BoneSpecified       =3,
    EAM_AliasSpecified      =4,
    EAM_Trail               =5,
    EAM_RF                  =6,
    EAM_LF                  =7,
    EAM_MAX                 =8,
};

class ENGINE_API USkillAction_LocateEffect : public USkillAction
{
public:
    BYTE AttachOn;
    FName AttachBoneName;
    BITFIELD bAbsolute:1 GCC_PACK(4);
    FLOAT SpawnDelay GCC_PACK(4);
    BITFIELD bUseCharacterRotation:1 GCC_PACK(4);
    FVector offset GCC_PACK(4);
    BITFIELD bRelativeToCylinder:1 GCC_PACK(4);
    BITFIELD bSpawnOnTarget:1;
    BITFIELD bSizeScale:1;
    DECLARE_CLASS(USkillAction_LocateEffect,USkillAction,0,Engine)
	virtual AEmitter* Notify( AActor *BaseActor, AActor *DestActor);
	virtual void PostEditChange();
};


class ENGINE_API UKarmaParamsCollision : public UObject
{
public:
    INT KarmaData;
    FLOAT KScale;
    FVector KScale3D;
    FLOAT KFriction;
    FLOAT KRestitution;
    FLOAT KImpactThreshold;
    DECLARE_CLASS(UKarmaParamsCollision,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKarmaParamsCollision)
};


class ENGINE_API UKarmaParams : public UKarmaParamsCollision
{
public:
    INT KAng3;
    INT KTriList;
    FLOAT KLastVel;
    FLOAT KMass;
    FLOAT KLinearDamping;
    FLOAT KAngularDamping;
    FLOAT KBuoyancy;
    BITFIELD KStartEnabled:1 GCC_PACK(4);
    FVector KStartLinVel GCC_PACK(4);
    FVector KStartAngVel;
    BITFIELD bKNonSphericalInertia:1 GCC_PACK(4);
    FLOAT KActorGravScale GCC_PACK(4);
    FLOAT KVelDropBelowThreshold;
    BITFIELD bHighDetailOnly:1 GCC_PACK(4);
    BITFIELD bClientOnly:1;
    BITFIELD bKDoubleTickRate:1;
    BITFIELD bKStayUpright:1;
    BITFIELD bKAllowRotate:1;
    BITFIELD bDestroyOnSimError:1;
    DECLARE_CLASS(UKarmaParams,UKarmaParamsCollision,0,Engine)
#ifdef WITH_KARMA
    void PostEditChange();
#endif
};


class ENGINE_API UKarmaParamsSkel : public UKarmaParams
{
public:
    FStringNoInit KSkeleton;
    BITFIELD bKDoConvulsions:1 GCC_PACK(4);
    FRange KConvulseSpacing GCC_PACK(4);
    FVector KShotStart;
    FVector KShotEnd;
    FLOAT KShotStrength;
    BITFIELD bKImportantRagdoll:1 GCC_PACK(4);
    DECLARE_CLASS(UKarmaParamsSkel,UKarmaParams,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKarmaParamsSkel)
};


class ENGINE_API UKarmaParamsRBFull : public UKarmaParams
{
public:
    FLOAT KInertiaTensor[6];
    FVector KCOMOffset;
    DECLARE_CLASS(UKarmaParamsRBFull,UKarmaParams,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKarmaParamsRBFull)
};

#endif

AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,321,execCollidingActors);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,313,execDynamicActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execMoveCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,-1,execSuggestFallVelocity);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execPlaySoundOnVehicle);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,-1,execNDestroy);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAllMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execStopMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execUnClock);
AUTOGENERATE_FUNCTION(AActor,-1,execClock);
AUTOGENERATE_FUNCTION(AActor,-1,execKIsRagdollAvailable);
AUTOGENERATE_FUNCTION(AActor,-1,execKMakeRagdollAvailable);
AUTOGENERATE_FUNCTION(AActor,-1,execKRemoveAllBoneLifters);
AUTOGENERATE_FUNCTION(AActor,-1,execKRemoveLifterFromBone);
AUTOGENERATE_FUNCTION(AActor,-1,execKAddBoneLifter);
AUTOGENERATE_FUNCTION(AActor,-1,execKFreezeRagdoll);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetSkelMass);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetSkelVel);
AUTOGENERATE_FUNCTION(AActor,-1,execKEnableCollision);
AUTOGENERATE_FUNCTION(AActor,-1,execKDisableCollision);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetActorGravScale);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetActorGravScale);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetBlockKarma);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetStayUpright);
AUTOGENERATE_FUNCTION(AActor,-1,execKAddImpulse);
AUTOGENERATE_FUNCTION(AActor,-1,execKIsAwake);
AUTOGENERATE_FUNCTION(AActor,-1,execKWake);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetImpactThreshold);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetImpactThreshold);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetCOMPosition);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetCOMOffset);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetCOMOffset);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetRestitution);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetRestitution);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetFriction);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetFriction);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetDampingProps);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetDampingProps);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetInertiaTensor);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetInertiaTensor);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetMass);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetMass);
AUTOGENERATE_FUNCTION(AActor,-1,execKRBVecFromVector);
AUTOGENERATE_FUNCTION(AActor,-1,execKRBVecToVector);
AUTOGENERATE_FUNCTION(AActor,-1,execKDrawRigidBodyState);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetRigidBodyState);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetRBQuaternion);
AUTOGENERATE_FUNCTION(AActor,-1,execOnlyAffectPawns);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execDebugUnclock);
AUTOGENERATE_FUNCTION(AActor,-1,execDebugClock);
AUTOGENERATE_FUNCTION(AActor,-1,execDrawDebugLine);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRenderBoundingSphere);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimIsInGroup);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAnimParams);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneDirection);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneScale);
AUTOGENERATE_FUNCTION(AActor,-1,execLockRootMotion);
AUTOGENERATE_FUNCTION(AActor,-1,execAttachToBoneWithIndex);
AUTOGENERATE_FUNCTION(AActor,-1,execDetachFromBone);
AUTOGENERATE_FUNCTION(AActor,-1,execAttachToBone);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneCoordsWithBoneIndex);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneCoords);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendToAlpha);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendParams);
AUTOGENERATE_FUNCTION(AActor,-1,execBoneRefresh);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNotifyChannel);
AUTOGENERATE_FUNCTION(AActor,-1,execEnableChannelNotify);
AUTOGENERATE_FUNCTION(AActor,-1,execIsTweening);
AUTOGENERATE_FUNCTION(AActor,-1,execSetAnimFrame);
AUTOGENERATE_FUNCTION(AActor,-1,execFreezeAnimAt);
AUTOGENERATE_FUNCTION(AActor,-1,execHasBoneName);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAnimating);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetMeshName);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeRotation);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawType);
AUTOGENERATE_FUNCTION(AActor,-1,execSetStaticMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale3D);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execGetViewport);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execTrigger);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execSpawnParticle);
AUTOGENERATE_FUNCTION(UShadowBitmapMaterial,-1,execDestroy);
AUTOGENERATE_FUNCTION(AMarkProjector,-1,execUpdateDesireLocation);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAbandonProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachProjector);
AUTOGENERATE_FUNCTION(AShadowProjector,-1,execCheckVisible);
AUTOGENERATE_FUNCTION(AShadowProjector,-1,execUpdateLightInfo);
AUTOGENERATE_FUNCTION(ASecurity,-1,execNativePerform);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawPortal);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawTile);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execTextSize);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawText);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execSetSize);
AUTOGENERATE_FUNCTION(ASceneManager,-1,execGetTotalSceneTime);
AUTOGENERATE_FUNCTION(APawn,-1,execGetRefSkeletonNum);
AUTOGENERATE_FUNCTION(APawn,-1,execGetShieldItemSound);
AUTOGENERATE_FUNCTION(APawn,-1,execGetDefenseItemSound);
AUTOGENERATE_FUNCTION(APawn,-1,execSetRelativeCoords);
AUTOGENERATE_FUNCTION(APawn,-1,execPlayAnimUM);
AUTOGENERATE_FUNCTION(APawn,-1,execForceCrouch);
AUTOGENERATE_FUNCTION(APawn,-1,execReachedDestination);
AUTOGENERATE_FUNCTION(AEmitter,-1,execSetSizeScale);
AUTOGENERATE_FUNCTION(AEmitter,-1,execKill);
AUTOGENERATE_FUNCTION(UInteractionMaster,-1,execTravel);
AUTOGENERATE_FUNCTION(UInteraction,-1,execScreenToWorld);
AUTOGENERATE_FUNCTION(UInteraction,-1,execWorldToScreen);
AUTOGENERATE_FUNCTION(UInteraction,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UInteraction,-1,execInitialize);
AUTOGENERATE_FUNCTION(AVolume,-1,execEncompasses);
AUTOGENERATE_FUNCTION(AInspector,-1,execInspectorFunc006);
AUTOGENERATE_FUNCTION(AInspector,-1,execInspectorFunc005);
AUTOGENERATE_FUNCTION(AInspector,-1,execInspectorFunc004);
AUTOGENERATE_FUNCTION(AInspector,-1,execInspectorFunc003);
AUTOGENERATE_FUNCTION(AInspector,-1,execInspectorFunc002);
AUTOGENERATE_FUNCTION(AInspector,-1,execInspectorFunc001);
AUTOGENERATE_FUNCTION(APlayerController,-1,execChangeVoiceChatter);
AUTOGENERATE_FUNCTION(APlayerController,-1,execLeaveVoiceChat);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APlayerController,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APlayerController,-1,execServerValidationResponse);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientValidate);
AUTOGENERATE_FUNCTION(APlayerController,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerController,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSetViewTarget);
AUTOGENERATE_FUNCTION(APlayerController,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetServerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(AController,-1,execEndClimbLadder);
AUTOGENERATE_FUNCTION(AController,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(AController,-1,execInLatentExecution);
AUTOGENERATE_FUNCTION(AController,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(AController,531,execPickTarget);
AUTOGENERATE_FUNCTION(AController,530,execRemoveController);
AUTOGENERATE_FUNCTION(AController,529,execAddController);
AUTOGENERATE_FUNCTION(AController,540,execFindBestInventoryPath);
AUTOGENERATE_FUNCTION(AController,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(AController,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(AController,520,execactorReachable);
AUTOGENERATE_FUNCTION(AController,521,execpointReachable);
AUTOGENERATE_FUNCTION(AController,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(AController,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(AController,-1,execFindPathTowardNearest);
AUTOGENERATE_FUNCTION(AController,-1,execFindPathToIntercept);
AUTOGENERATE_FUNCTION(AController,517,execFindPathToward);
AUTOGENERATE_FUNCTION(AController,518,execFindPathTo);
AUTOGENERATE_FUNCTION(AController,533,execCanSee);
AUTOGENERATE_FUNCTION(AController,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(AController,508,execFinishRotation);
AUTOGENERATE_FUNCTION(AController,502,execMoveToward);
AUTOGENERATE_FUNCTION(AController,500,execMoveTo);
AUTOGENERATE_FUNCTION(APickup,-1,execRemoveFromNavigation);
AUTOGENERATE_FUNCTION(APickup,-1,execAddToNavigation);
AUTOGENERATE_FUNCTION(AAIController,510,execWaitToSeeEnemy);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DLine);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsDemoBuild);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsEntry);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execDetailChange);
AUTOGENERATE_FUNCTION(AKVehicle,-1,execGraphData);
AUTOGENERATE_FUNCTION(AKConstraint,-1,execKGetConstraintTorque);
AUTOGENERATE_FUNCTION(AKConstraint,-1,execKGetConstraintForce);
AUTOGENERATE_FUNCTION(AKConstraint,-1,execKUpdateConstraintParams);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileFlush);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execGetChecksum);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execWatermark);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execOpenLog);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetGMTRef);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetPlayerChecksum);
AUTOGENERATE_FUNCTION(AStatLog,-1,execLogMutator);
AUTOGENERATE_FUNCTION(AStatLog,-1,execInitialCheck);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBrowseRelativeLocalURL);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteWorldLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBatchLocal);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteSilentLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteLocalLogBatcher);
AUTOGENERATE_FUNCTION(AGameStats,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AGameStats,-1,execGetStatsIdentifier);
AUTOGENERATE_FUNCTION(AFileLog,-1,execLogf);
AUTOGENERATE_FUNCTION(AFileLog,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AFileLog,-1,execOpenLog);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#if __STATIC_LINK
#ifndef ENGINE_NATIVE_DEFS
#define ENGINE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(Engine,ADecoVolumeObject);
DECLARE_NATIVE_TYPE(Engine,AActor);
DECLARE_NATIVE_TYPE(Engine,ADecorationList);
DECLARE_NATIVE_TYPE(Engine,AKeypoint);
DECLARE_NATIVE_TYPE(Engine,AViewportWindowController);
DECLARE_NATIVE_TYPE(Engine,UParticleEmitter);
DECLARE_NATIVE_TYPE(Engine,UTrailEmitter);
DECLARE_NATIVE_TYPE(Engine,UTerrainMaterial);
DECLARE_NATIVE_TYPE(Engine,AInfo);
DECLARE_NATIVE_TYPE(Engine,AMovableStaticMeshActor);
DECLARE_NATIVE_TYPE(Engine,AStaticMeshActor);
DECLARE_NATIVE_TYPE(Engine,USpriteEmitter);
DECLARE_NATIVE_TYPE(Engine,USparkEmitter);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_IdleSound);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_MatSubAction);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_Scripted);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_Script);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_Sound);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_SwimSound);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_DestroyEffect);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_Effect);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_AttackVoice);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_Channeling);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_AttackPreShot);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_AttackShot);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_AttackItem);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_ScreenFade);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_ViewShake);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_BoneScale);
DECLARE_NATIVE_TYPE(Engine,UShadowBitmapMaterial);
DECLARE_NATIVE_TYPE(Engine,AMarkProjector);
DECLARE_NATIVE_TYPE(Engine,AProjector);
DECLARE_NATIVE_TYPE(Engine,AShadowProjector);
DECLARE_NATIVE_TYPE(Engine,ASecurity);
DECLARE_NATIVE_TYPE(Engine,UScriptedTexture);
DECLARE_NATIVE_TYPE(Engine,ALookTarget);
DECLARE_NATIVE_TYPE(Engine,USubActionSceneSpeed);
DECLARE_NATIVE_TYPE(Engine,UMatSubAction);
DECLARE_NATIVE_TYPE(Engine,UMatObject);
DECLARE_NATIVE_TYPE(Engine,USubActionGameSpeed);
DECLARE_NATIVE_TYPE(Engine,USubActionOrientation);
DECLARE_NATIVE_TYPE(Engine,USubActionCameraShake);
DECLARE_NATIVE_TYPE(Engine,USubActionFOV);
DECLARE_NATIVE_TYPE(Engine,USubActionTrigger);
DECLARE_NATIVE_TYPE(Engine,USubActionFade);
DECLARE_NATIVE_TYPE(Engine,AMatDemoActor);
DECLARE_NATIVE_TYPE(Engine,UActionWarp);
DECLARE_NATIVE_TYPE(Engine,UMatAction);
DECLARE_NATIVE_TYPE(Engine,UActionPause);
DECLARE_NATIVE_TYPE(Engine,UActionMoveCamera);
DECLARE_NATIVE_TYPE(Engine,UMeshObject);
DECLARE_NATIVE_TYPE(Engine,ASceneManager);
DECLARE_NATIVE_TYPE(Engine,URibbonEmitter);
DECLARE_NATIVE_TYPE(Engine,UProjectorMaterial);
DECLARE_NATIVE_TYPE(Engine,APawn);
DECLARE_NATIVE_TYPE(Engine,AAirEmitter);
DECLARE_NATIVE_TYPE(Engine,AEmitter);
DECLARE_NATIVE_TYPE(Engine,AWaterHitEmitter);
DECLARE_NATIVE_TYPE(Engine,UParticleMaterial);
DECLARE_NATIVE_TYPE(Engine,AMover);
DECLARE_NATIVE_TYPE(Engine,UMeshEmitter);
DECLARE_NATIVE_TYPE(Engine,UGlowModifier);
DECLARE_NATIVE_TYPE(Engine,UModifier);
DECLARE_NATIVE_TYPE(Engine,UOpacityModifier);
DECLARE_NATIVE_TYPE(Engine,UMaterialSequence);
DECLARE_NATIVE_TYPE(Engine,UMaterialSwitch);
DECLARE_NATIVE_TYPE(Engine,UFinalBlend);
DECLARE_NATIVE_TYPE(Engine,UVertexColor);
DECLARE_NATIVE_TYPE(Engine,UTexCoordSource);
DECLARE_NATIVE_TYPE(Engine,UTexModifier);
DECLARE_NATIVE_TYPE(Engine,UTexMatrix);
DECLARE_NATIVE_TYPE(Engine,UTexEnvMap);
DECLARE_NATIVE_TYPE(Engine,UTexOscillator);
DECLARE_NATIVE_TYPE(Engine,UTexOscillatorTriggered);
DECLARE_NATIVE_TYPE(Engine,UTexRotator);
DECLARE_NATIVE_TYPE(Engine,UTexScaler);
DECLARE_NATIVE_TYPE(Engine,UTexPanner);
DECLARE_NATIVE_TYPE(Engine,UTexPannerTriggered);
DECLARE_NATIVE_TYPE(Engine,UFadeColor);
DECLARE_NATIVE_TYPE(Engine,UConstantMaterial);
DECLARE_NATIVE_TYPE(Engine,UConstantColor);
DECLARE_NATIVE_TYPE(Engine,UCombiner);
DECLARE_NATIVE_TYPE(Engine,UShader);
DECLARE_NATIVE_TYPE(Engine,UL2ColorModifier);
DECLARE_NATIVE_TYPE(Engine,UColorModifier);
DECLARE_NATIVE_TYPE(Engine,UInteractionMaster);
DECLARE_NATIVE_TYPE(Engine,UInteractions);
DECLARE_NATIVE_TYPE(Engine,UBaseGUIController);
DECLARE_NATIVE_TYPE(Engine,UInteraction);
DECLARE_NATIVE_TYPE(Engine,UConsole);
DECLARE_NATIVE_TYPE(Engine,AL2SeamlessInfo);
DECLARE_NATIVE_TYPE(Engine,AFluidSurfaceOscillator);
DECLARE_NATIVE_TYPE(Engine,AFluidSurfaceInfo);
DECLARE_NATIVE_TYPE(Engine,UPlayerInput);
DECLARE_NATIVE_TYPE(Engine,UCheatManager);
DECLARE_NATIVE_TYPE(Engine,UCanvas);
DECLARE_NATIVE_TYPE(Engine,AL2Radar);
DECLARE_NATIVE_TYPE(Engine,UBeamEmitter);
DECLARE_NATIVE_TYPE(Engine,UI3DL2Listener);
DECLARE_NATIVE_TYPE(Engine,AEmitterLight);
DECLARE_NATIVE_TYPE(Engine,ALight);
DECLARE_NATIVE_TYPE(Engine,AVehicleRoutePoint);
DECLARE_NATIVE_TYPE(Engine,AVehicle);
DECLARE_NATIVE_TYPE(Engine,ASuperPointInfo);
DECLARE_NATIVE_TYPE(Engine,AServerPrimitive);
DECLARE_NATIVE_TYPE(Engine,AL2Float);
DECLARE_NATIVE_TYPE(Engine,ASpawnableStaticMeshActor);
DECLARE_NATIVE_TYPE(Engine,AL2Indicator);
DECLARE_NATIVE_TYPE(Engine,AAirVolume);
DECLARE_NATIVE_TYPE(Engine,AVolume);
DECLARE_NATIVE_TYPE(Engine,ABrush);
DECLARE_NATIVE_TYPE(Engine,AL2Alarm);
DECLARE_NATIVE_TYPE(Engine,AMusicVolume);
DECLARE_NATIVE_TYPE(Engine,ANMoon);
DECLARE_NATIVE_TYPE(Engine,ANSun);
DECLARE_NATIVE_TYPE(Engine,UExtraMeshData);
DECLARE_NATIVE_TYPE(Engine,AInspector);
DECLARE_NATIVE_TYPE(Engine,AL2Dice);
DECLARE_NATIVE_TYPE(Engine,AAmbientSound);
DECLARE_NATIVE_TYPE(Engine,ANpcPosInfo);
DECLARE_NATIVE_TYPE(Engine,ALocationInfo);
DECLARE_NATIVE_TYPE(Engine,ATerritoryInfo);
DECLARE_NATIVE_TYPE(Engine,AL2Pickup);
DECLARE_NATIVE_TYPE(Engine,ALineagePlayerController);
DECLARE_NATIVE_TYPE(Engine,APlayerController);
DECLARE_NATIVE_TYPE(Engine,AController);
DECLARE_NATIVE_TYPE(Engine,AEnvCreatureManagerInfo);
DECLARE_NATIVE_TYPE(Engine,ANMovableSunLight);
DECLARE_NATIVE_TYPE(Engine,ACarriedObject);
DECLARE_NATIVE_TYPE(Engine,AAvoidMarker);
DECLARE_NATIVE_TYPE(Engine,ATriggers);
DECLARE_NATIVE_TYPE(Engine,AJumpDest);
DECLARE_NATIVE_TYPE(Engine,ANavigationPoint);
DECLARE_NATIVE_TYPE(Engine,AJumpPad);
DECLARE_NATIVE_TYPE(Engine,AStationaryWeapons);
DECLARE_NATIVE_TYPE(Engine,APickup);
DECLARE_NATIVE_TYPE(Engine,AAntiPortalActor);
DECLARE_NATIVE_TYPE(Engine,AWeaponAttachment);
DECLARE_NATIVE_TYPE(Engine,AInventoryAttachment);
DECLARE_NATIVE_TYPE(Engine,ATeamInfo);
DECLARE_NATIVE_TYPE(Engine,AReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,AAutoDoor);
DECLARE_NATIVE_TYPE(Engine,ADoor);
DECLARE_NATIVE_TYPE(Engine,AAutoLadder);
DECLARE_NATIVE_TYPE(Engine,ALadder);
DECLARE_NATIVE_TYPE(Engine,ASmallNavigationPoint);
DECLARE_NATIVE_TYPE(Engine,ABlockingVolume);
DECLARE_NATIVE_TYPE(Engine,APotentialClimbWatcher);
DECLARE_NATIVE_TYPE(Engine,ALadderVolume);
DECLARE_NATIVE_TYPE(Engine,APhysicsVolume);
DECLARE_NATIVE_TYPE(Engine,ADefaultPhysicsVolume);
DECLARE_NATIVE_TYPE(Engine,ALineOfSightTrigger);
DECLARE_NATIVE_TYPE(Engine,AAIScript);
DECLARE_NATIVE_TYPE(Engine,ADamageType);
DECLARE_NATIVE_TYPE(Engine,AVehiclePart);
DECLARE_NATIVE_TYPE(Engine,AMutator);
DECLARE_NATIVE_TYPE(Engine,AAIController);
DECLARE_NATIVE_TYPE(Engine,AAmmunition);
DECLARE_NATIVE_TYPE(Engine,AInventory);
DECLARE_NATIVE_TYPE(Engine,APowerups);
DECLARE_NATIVE_TYPE(Engine,AAmmo);
DECLARE_NATIVE_TYPE(Engine,ULevelSummary);
DECLARE_NATIVE_TYPE(Engine,AGameReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,AInternetInfo);
DECLARE_NATIVE_TYPE(Engine,APlayerReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,ALiftExit);
DECLARE_NATIVE_TYPE(Engine,ALiftCenter);
DECLARE_NATIVE_TYPE(Engine,ASavedMove);
DECLARE_NATIVE_TYPE(Engine,AHUD);
DECLARE_NATIVE_TYPE(Engine,AWarpZoneMarker);
DECLARE_NATIVE_TYPE(Engine,ATrigger);
DECLARE_NATIVE_TYPE(Engine,AAIMarker);
DECLARE_NATIVE_TYPE(Engine,AInventorySpot);
DECLARE_NATIVE_TYPE(Engine,APlayerStart);
DECLARE_NATIVE_TYPE(Engine,ATeleporter);
DECLARE_NATIVE_TYPE(Engine,AWarpZoneInfo);
DECLARE_NATIVE_TYPE(Engine,AZoneInfo);
DECLARE_NATIVE_TYPE(Engine,AProjectile);
DECLARE_NATIVE_TYPE(Engine,ADecoration);
DECLARE_NATIVE_TYPE(Engine,AInterpolationPoint);
DECLARE_NATIVE_TYPE(Engine,AScout);
DECLARE_NATIVE_TYPE(Engine,APathNode);
DECLARE_NATIVE_TYPE(Engine,UReachSpec);
DECLARE_NATIVE_TYPE(Engine,ASkyZoneInfo);
DECLARE_NATIVE_TYPE(Engine,ACamera);
DECLARE_NATIVE_TYPE(Engine,AGameInfo);
DECLARE_NATIVE_TYPE(Engine,ALevelInfo);
DECLARE_NATIVE_TYPE(Engine,ANote);
DECLARE_NATIVE_TYPE(Engine,AWeapon);
DECLARE_NATIVE_TYPE(Engine,APolyMarker);
DECLARE_NATIVE_TYPE(Engine,AClipMarker);
DECLARE_NATIVE_TYPE(Engine,UAmbientSoundObject);
DECLARE_NATIVE_TYPE(Engine,ULevelObject);
DECLARE_NATIVE_TYPE(Engine,UL2NEnvLight);
DECLARE_NATIVE_TYPE(Engine,UL2NTimeLight);
DECLARE_NATIVE_TYPE(Engine,USkillVisualEffect);
DECLARE_NATIVE_TYPE(Engine,USkillAction_SwordTrail);
DECLARE_NATIVE_TYPE(Engine,USkillAction);
DECLARE_NATIVE_TYPE(Engine,USkillAction_LocateEffect);
DECLARE_NATIVE_TYPE(Engine,AL2NMover);
DECLARE_NATIVE_TYPE(Engine,ANSkillProjectile);
DECLARE_NATIVE_TYPE(Engine,ANProjectile);
DECLARE_NATIVE_TYPE(Engine,ANCubics);
DECLARE_NATIVE_TYPE(Engine,AKVehicle);
DECLARE_NATIVE_TYPE(Engine,AKTire);
DECLARE_NATIVE_TYPE(Engine,AKActor);
DECLARE_NATIVE_TYPE(Engine,UKarmaParamsSkel);
DECLARE_NATIVE_TYPE(Engine,UKarmaParams);
DECLARE_NATIVE_TYPE(Engine,UKarmaParamsCollision);
DECLARE_NATIVE_TYPE(Engine,UKarmaParamsRBFull);
DECLARE_NATIVE_TYPE(Engine,AKCarWheelJoint);
DECLARE_NATIVE_TYPE(Engine,AKConstraint);
DECLARE_NATIVE_TYPE(Engine,AKConeLimit);
DECLARE_NATIVE_TYPE(Engine,AKHinge);
DECLARE_NATIVE_TYPE(Engine,AKBSJoint);
DECLARE_NATIVE_TYPE(Engine,AStatLogFile);
DECLARE_NATIVE_TYPE(Engine,AStatLog);
DECLARE_NATIVE_TYPE(Engine,AGameStats);
DECLARE_NATIVE_TYPE(Engine,AFileLog);

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE \
	UNetPendingLevel::StaticClass(); \
	UPendingLevel::StaticClass(); \
	UNetDriver::StaticClass(); \
	UPackageMapLevel::StaticClass(); \
	UChannelDownload::StaticClass(); \
	UDownload::StaticClass(); \
	UDemoRecDriver::StaticClass(); \
	UDemoRecConnection::StaticClass(); \
	UNetConnection::StaticClass(); \
	UPlayer::StaticClass(); \
	UDemoPlayPendingLevel::StaticClass(); \
	UFileChannel::StaticClass(); \
	UChannel::StaticClass(); \
	UActorChannel::StaticClass(); \
	UControlChannel::StaticClass(); \
	ADecoVolumeObject::StaticClass(); \
	AActor::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAActorNative; \
	ADecorationList::StaticClass(); \
	AKeypoint::StaticClass(); \
	AViewportWindowController::StaticClass(); \
	UVertMeshEmitter::StaticClass(); \
	UParticleEmitter::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUParticleEmitterNative; \
	UVertMeshInstance::StaticClass(); \
	ULodMeshInstance::StaticClass(); \
	UMeshInstance::StaticClass(); \
	UPrimitive::StaticClass(); \
	UVertMesh::StaticClass(); \
	ULodMesh::StaticClass(); \
	UMesh::StaticClass(); \
	UTrailEmitter::StaticClass(); \
	UCubemap::StaticClass(); \
	UTexture::StaticClass(); \
	UBitmapMaterial::StaticClass(); \
	URenderedMaterial::StaticClass(); \
	UMaterial::StaticClass(); \
	UPalette::StaticClass(); \
	UTerrainMaterial::StaticClass(); \
	ATerrainInfo::StaticClass(); \
	AInfo::StaticClass(); \
	UTerrainPrimitive::StaticClass(); \
	UTerrainSector::StaticClass(); \
	AMovableStaticMeshActor::StaticClass(); \
	AStaticMeshActor::StaticClass(); \
	UStaticMeshInstance::StaticClass(); \
	UStaticMesh::StaticClass(); \
	USpriteEmitter::StaticClass(); \
	USparkEmitter::StaticClass(); \
	UExtraSkeletalMeshInstance::StaticClass(); \
	USkeletalMeshInstance::StaticClass(); \
	USubSkeletalMeshInstance::StaticClass(); \
	UAnimNotify_IdleSound::StaticClass(); \
	UAnimNotify::StaticClass(); \
	UAnimNotify_MatSubAction::StaticClass(); \
	UAnimNotify_Scripted::StaticClass(); \
	UAnimNotify_Script::StaticClass(); \
	UAnimNotify_Sound::StaticClass(); \
	UAnimNotify_SwimSound::StaticClass(); \
	UAnimNotify_DestroyEffect::StaticClass(); \
	UAnimNotify_Effect::StaticClass(); \
	UAnimNotify_AttackVoice::StaticClass(); \
	UAnimNotify_Channeling::StaticClass(); \
	UAnimNotify_AttackPreShot::StaticClass(); \
	UAnimNotify_AttackShot::StaticClass(); \
	UAnimNotify_AttackItem::StaticClass(); \
	UAnimNotify_ScreenFade::StaticClass(); \
	UAnimNotify_ViewShake::StaticClass(); \
	UAnimNotify_BoneScale::StaticClass(); \
	USkeletalMesh::StaticClass(); \
	UAnimation::StaticClass(); \
	UMeshAnimation::StaticClass(); \
	UShadowBitmapMaterial::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUShadowBitmapMaterialNative; \
	AMarkProjector::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAMarkProjectorNative; \
	AProjector::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAProjectorNative; \
	AShadowProjector::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAShadowProjectorNative; \
	ASecurity::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineASecurityNative; \
	UScriptedTexture::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUScriptedTextureNative; \
	ALookTarget::StaticClass(); \
	USubActionSceneSpeed::StaticClass(); \
	UMatSubAction::StaticClass(); \
	UMatObject::StaticClass(); \
	USubActionGameSpeed::StaticClass(); \
	USubActionOrientation::StaticClass(); \
	USubActionCameraShake::StaticClass(); \
	USubActionFOV::StaticClass(); \
	USubActionTrigger::StaticClass(); \
	USubActionFade::StaticClass(); \
	AMatDemoActor::StaticClass(); \
	UActionWarp::StaticClass(); \
	UMatAction::StaticClass(); \
	UActionPause::StaticClass(); \
	UActionMoveCamera::StaticClass(); \
	UMeshObject::StaticClass(); \
	ASceneManager::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineASceneManagerNative; \
	URibbonEmitter::StaticClass(); \
	USkinVertexBuffer::StaticClass(); \
	URenderResource::StaticClass(); \
	UIndexBuffer::StaticClass(); \
	UVertexBuffer::StaticClass(); \
	UVertexStreamBase::StaticClass(); \
	UVertexStreamPosNormTex::StaticClass(); \
	UVertexStreamUV::StaticClass(); \
	UVertexStreamCOLOR::StaticClass(); \
	UVertexStreamVECTOR::StaticClass(); \
	UProjectorMaterial::StaticClass(); \
	UProjectorPrimitive::StaticClass(); \
	APawn::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPawnNative; \
	AAirEmitter::StaticClass(); \
	AEmitter::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAEmitterNative; \
	AWaterHitEmitter::StaticClass(); \
	UParticleMaterial::StaticClass(); \
	UPackageCheckInfo::StaticClass(); \
	AMover::StaticClass(); \
	UModel::StaticClass(); \
	UMeshEmitter::StaticClass(); \
	UGlowModifier::StaticClass(); \
	UModifier::StaticClass(); \
	UUnderWaterMaterial::StaticClass(); \
	UWaterMaterial::StaticClass(); \
	UUnderWaterShader::StaticClass(); \
	UBumpShader::StaticClass(); \
	UOpacityModifier::StaticClass(); \
	UMaterialSequence::StaticClass(); \
	UMaterialSwitch::StaticClass(); \
	UFinalBlend::StaticClass(); \
	UVertexColor::StaticClass(); \
	UTexCoordSource::StaticClass(); \
	UTexModifier::StaticClass(); \
	UTexMatrix::StaticClass(); \
	UTexEnvMap::StaticClass(); \
	UTexOscillator::StaticClass(); \
	UTexOscillatorTriggered::StaticClass(); \
	UTexRotator::StaticClass(); \
	UTexScaler::StaticClass(); \
	UTexPanner::StaticClass(); \
	UTexPannerTriggered::StaticClass(); \
	UFadeColor::StaticClass(); \
	UConstantMaterial::StaticClass(); \
	UConstantColor::StaticClass(); \
	UCombiner::StaticClass(); \
	UShader::StaticClass(); \
	UL2ColorModifier::StaticClass(); \
	UColorModifier::StaticClass(); \
	UTexCoordMaterial::StaticClass(); \
	UProxyBitmapMaterial::StaticClass(); \
	ULevel::StaticClass(); \
	ULevelBase::StaticClass(); \
	UInteractionMaster::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUInteractionMasterNative; \
	UInteractions::StaticClass(); \
	UBaseGUIController::StaticClass(); \
	UInteraction::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUInteractionNative; \
	UConsole::StaticClass(); \
	UInput::StaticClass(); \
	AL2SeamlessInfo::StaticClass(); \
	UGameEngine::StaticClass(); \
	UEngine::StaticClass(); \
	UPolys::StaticClass(); \
	UFont::StaticClass(); \
	AFluidSurfaceOscillator::StaticClass(); \
	UFluidSurfacePrimitive::StaticClass(); \
	AFluidSurfaceInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAFluidSurfaceInfoNative; \
	UGlobalTempObjects::StaticClass(); \
	USaveReplayResourceCommandlet::StaticClass(); \
	UConvertOggCommandlet::StaticClass(); \
	UXMLConvertCommandlet::StaticClass(); \
	UScriptConvertCommandlet::StaticClass(); \
	UServerDataConvertCommandlet::StaticClass(); \
	UMasterMD5Commandlet::StaticClass(); \
	UServerCommandlet::StaticClass(); \
	URenderDevice::StaticClass(); \
	UConvexVolume::StaticClass(); \
	UPlayerInput::StaticClass(); \
	UCheatManager::StaticClass(); \
	UCanvas::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUCanvasNative; \
	AL2Radar::StaticClass(); \
	UL2Font::StaticClass(); \
	UL2TextureFactory::StaticClass(); \
	UClient::StaticClass(); \
	UHDREffect::StaticClass(); \
	UCameraEffect::StaticClass(); \
	UGlowEffect::StaticClass(); \
	UFadeBlackWhite::StaticClass(); \
	UBlackWhite::StaticClass(); \
	UUnderWaterEffect::StaticClass(); \
	UMotionBlur::StaticClass(); \
	UCameraOverlay::StaticClass(); \
	USubActionCameraEffect::StaticClass(); \
	UViewport::StaticClass(); \
	UBeamEmitter::StaticClass(); \
	UI3DL2Listener::StaticClass(); \
	UDummyAudio::StaticClass(); \
	UAudioSubsystem::StaticClass(); \
	USound::StaticClass(); \
	AEmitterLight::StaticClass(); \
	ALight::StaticClass(); \
	AVehicleRoutePoint::StaticClass(); \
	AVehicle::StaticClass(); \
	ASuperPointInfo::StaticClass(); \
	AServerPrimitive::StaticClass(); \
	AL2Float::StaticClass(); \
	ANLine::StaticClass(); \
	ASpawnableStaticMeshActor::StaticClass(); \
	AL2Indicator::StaticClass(); \
	AAirVolume::StaticClass(); \
	AVolume::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAVolumeNative; \
	ABrush::StaticClass(); \
	AL2Alarm::StaticClass(); \
	AMusicVolume::StaticClass(); \
	ANMoon::StaticClass(); \
	ANSun::StaticClass(); \
	UExtraMeshData::StaticClass(); \
	AInspector::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAInspectorNative; \
	AL2Dice::StaticClass(); \
	AAmbientSound::StaticClass(); \
	ANpcPosInfo::StaticClass(); \
	ALocationInfo::StaticClass(); \
	ATerritoryInfo::StaticClass(); \
	AL2Pickup::StaticClass(); \
	ALineagePlayerController::StaticClass(); \
	APlayerController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPlayerControllerNative; \
	AController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAControllerNative; \
	AEnvCreatureManagerInfo::StaticClass(); \
	ANMovableSunLight::StaticClass(); \
	ACarriedObject::StaticClass(); \
	AAvoidMarker::StaticClass(); \
	ATriggers::StaticClass(); \
	AJumpDest::StaticClass(); \
	ANavigationPoint::StaticClass(); \
	AJumpPad::StaticClass(); \
	AStationaryWeapons::StaticClass(); \
	APickup::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPickupNative; \
	AAntiPortalActor::StaticClass(); \
	AWeaponAttachment::StaticClass(); \
	AInventoryAttachment::StaticClass(); \
	ATeamInfo::StaticClass(); \
	AReplicationInfo::StaticClass(); \
	AAutoDoor::StaticClass(); \
	ADoor::StaticClass(); \
	AAutoLadder::StaticClass(); \
	ALadder::StaticClass(); \
	ASmallNavigationPoint::StaticClass(); \
	ABlockingVolume::StaticClass(); \
	APotentialClimbWatcher::StaticClass(); \
	ALadderVolume::StaticClass(); \
	APhysicsVolume::StaticClass(); \
	ADefaultPhysicsVolume::StaticClass(); \
	ALineOfSightTrigger::StaticClass(); \
	AAIScript::StaticClass(); \
	ADamageType::StaticClass(); \
	AVehiclePart::StaticClass(); \
	AMutator::StaticClass(); \
	AAIController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAAIControllerNative; \
	AAmmunition::StaticClass(); \
	AInventory::StaticClass(); \
	APowerups::StaticClass(); \
	AAmmo::StaticClass(); \
	ULevelSummary::StaticClass(); \
	AGameReplicationInfo::StaticClass(); \
	AInternetInfo::StaticClass(); \
	APlayerReplicationInfo::StaticClass(); \
	ALiftExit::StaticClass(); \
	ALiftCenter::StaticClass(); \
	ASavedMove::StaticClass(); \
	AHUD::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAHUDNative; \
	AWarpZoneMarker::StaticClass(); \
	ATrigger::StaticClass(); \
	AAIMarker::StaticClass(); \
	AInventorySpot::StaticClass(); \
	APlayerStart::StaticClass(); \
	ATeleporter::StaticClass(); \
	AWarpZoneInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAWarpZoneInfoNative; \
	AZoneInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAZoneInfoNative; \
	AProjectile::StaticClass(); \
	ADecoration::StaticClass(); \
	AInterpolationPoint::StaticClass(); \
	AScout::StaticClass(); \
	APathNode::StaticClass(); \
	UReachSpec::StaticClass(); \
	ASkyZoneInfo::StaticClass(); \
	ACamera::StaticClass(); \
	AGameInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAGameInfoNative; \
	ALevelInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineALevelInfoNative; \
	ANote::StaticClass(); \
	AWeapon::StaticClass(); \
	APolyMarker::StaticClass(); \
	AClipMarker::StaticClass(); \
	UAmbientSoundObject::StaticClass(); \
	ULevelObject::StaticClass(); \
	UOrcMove::StaticClass(); \
	UL2OrcMove::StaticClass(); \
	UNullRenderDevice::StaticClass(); \
	UL2NEnvManager::StaticClass(); \
	UL2NEnvLight::StaticClass(); \
	UL2NTimeLight::StaticClass(); \
	USkillVisualEffect::StaticClass(); \
	USkillAction_SwordTrail::StaticClass(); \
	USkillAction::StaticClass(); \
	USkillAction_LocateEffect::StaticClass(); \
	AL2NMover::StaticClass(); \
	ANSkillProjectile::StaticClass(); \
	ANProjectile::StaticClass(); \
	ANCubics::StaticClass(); \
	UL2NetHandler::StaticClass(); \
	AL2FogInfo::StaticClass(); \
	UL2ConsoleWnd::StaticClass(); \
	AKVehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKVehicleNative; \
	AKTire::StaticClass(); \
	AKActor::StaticClass(); \
	UKarmaParamsSkel::StaticClass(); \
	UKarmaParams::StaticClass(); \
	UKarmaParamsCollision::StaticClass(); \
	UKarmaParamsRBFull::StaticClass(); \
	UKMeshProps::StaticClass(); \
	AKCarWheelJoint::StaticClass(); \
	AKConstraint::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKConstraintNative; \
	AKConeLimit::StaticClass(); \
	AKHinge::StaticClass(); \
	AKBSJoint::StaticClass(); \
	UNetworkHandler::StaticClass(); \
	UDummySocket::StaticClass(); \
	UClientSocket::StaticClass(); \
	UAuthSocket::StaticClass(); \
	UPingSocket::StaticClass(); \
	AStatLogFile::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAStatLogFileNative; \
	AStatLog::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAStatLogNative; \
	AGameStats::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAGameStatsNative; \
	AFileLog::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAFileLogNative; \

#endif // Engine_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AActor) GEngineAActorNatives[] = 
{ 
	MAP_NATIVE(AActor,execMultiply_ColorFloat)
	MAP_NATIVE(AActor,execAdd_ColorColor)
	MAP_NATIVE(AActor,execMultiply_FloatColor)
	MAP_NATIVE(AActor,execSubtract_ColorColor)
	MAP_NATIVE(AActor,execCollidingActors)
	MAP_NATIVE(AActor,execVisibleCollidingActors)
	MAP_NATIVE(AActor,execVisibleActors)
	MAP_NATIVE(AActor,execRadiusActors)
	MAP_NATIVE(AActor,execTraceActors)
	MAP_NATIVE(AActor,execTouchingActors)
	MAP_NATIVE(AActor,execBasedActors)
	MAP_NATIVE(AActor,execChildActors)
	MAP_NATIVE(AActor,execDynamicActors)
	MAP_NATIVE(AActor,execAllActors)
	MAP_NATIVE(AActor,execMoveCacheEntry)
	MAP_NATIVE(AActor,execGetCacheEntry)
	MAP_NATIVE(AActor,execGetNextIntDesc)
	MAP_NATIVE(AActor,execGetNextInt)
	MAP_NATIVE(AActor,execGetURLMap)
	MAP_NATIVE(AActor,execGetNextSkin)
	MAP_NATIVE(AActor,execGetMapName)
	MAP_NATIVE(AActor,execSuggestFallVelocity)
	MAP_NATIVE(AActor,execPlayerCanSeeMe)
	MAP_NATIVE(AActor,execMakeNoise)
	MAP_NATIVE(AActor,execGetSoundDuration)
	MAP_NATIVE(AActor,execPlaySoundOnVehicle)
	MAP_NATIVE(AActor,execDemoPlaySound)
	MAP_NATIVE(AActor,execPlayOwnedSound)
	MAP_NATIVE(AActor,execPlaySound)
	MAP_NATIVE(AActor,execSetTimer)
	MAP_NATIVE(AActor,execDestroy)
	MAP_NATIVE(AActor,execSpawn)
	MAP_NATIVE(AActor,execFastTrace)
	MAP_NATIVE(AActor,execTrace)
	MAP_NATIVE(AActor,execNDestroy)
	MAP_NATIVE(AActor,execStopAllMusic)
	MAP_NATIVE(AActor,execStopMusic)
	MAP_NATIVE(AActor,execPlayMusic)
	MAP_NATIVE(AActor,execUnClock)
	MAP_NATIVE(AActor,execClock)
	MAP_NATIVE(AActor,execKIsRagdollAvailable)
	MAP_NATIVE(AActor,execKMakeRagdollAvailable)
	MAP_NATIVE(AActor,execKRemoveAllBoneLifters)
	MAP_NATIVE(AActor,execKRemoveLifterFromBone)
	MAP_NATIVE(AActor,execKAddBoneLifter)
	MAP_NATIVE(AActor,execKFreezeRagdoll)
	MAP_NATIVE(AActor,execKGetSkelMass)
	MAP_NATIVE(AActor,execKSetSkelVel)
	MAP_NATIVE(AActor,execKEnableCollision)
	MAP_NATIVE(AActor,execKDisableCollision)
	MAP_NATIVE(AActor,execKGetActorGravScale)
	MAP_NATIVE(AActor,execKSetActorGravScale)
	MAP_NATIVE(AActor,execKSetBlockKarma)
	MAP_NATIVE(AActor,execKSetStayUpright)
	MAP_NATIVE(AActor,execKAddImpulse)
	MAP_NATIVE(AActor,execKIsAwake)
	MAP_NATIVE(AActor,execKWake)
	MAP_NATIVE(AActor,execKGetImpactThreshold)
	MAP_NATIVE(AActor,execKSetImpactThreshold)
	MAP_NATIVE(AActor,execKGetCOMPosition)
	MAP_NATIVE(AActor,execKGetCOMOffset)
	MAP_NATIVE(AActor,execKSetCOMOffset)
	MAP_NATIVE(AActor,execKGetRestitution)
	MAP_NATIVE(AActor,execKSetRestitution)
	MAP_NATIVE(AActor,execKGetFriction)
	MAP_NATIVE(AActor,execKSetFriction)
	MAP_NATIVE(AActor,execKGetDampingProps)
	MAP_NATIVE(AActor,execKSetDampingProps)
	MAP_NATIVE(AActor,execKGetInertiaTensor)
	MAP_NATIVE(AActor,execKSetInertiaTensor)
	MAP_NATIVE(AActor,execKGetMass)
	MAP_NATIVE(AActor,execKSetMass)
	MAP_NATIVE(AActor,execKRBVecFromVector)
	MAP_NATIVE(AActor,execKRBVecToVector)
	MAP_NATIVE(AActor,execKDrawRigidBodyState)
	MAP_NATIVE(AActor,execKGetRigidBodyState)
	MAP_NATIVE(AActor,execKGetRBQuaternion)
	MAP_NATIVE(AActor,execOnlyAffectPawns)
	MAP_NATIVE(AActor,execSetPhysics)
	MAP_NATIVE(AActor,execFinishInterpolation)
	MAP_NATIVE(AActor,execDebugUnclock)
	MAP_NATIVE(AActor,execDebugClock)
	MAP_NATIVE(AActor,execDrawDebugLine)
	MAP_NATIVE(AActor,execGetRenderBoundingSphere)
	MAP_NATIVE(AActor,execAnimIsInGroup)
	MAP_NATIVE(AActor,execGetAnimParams)
	MAP_NATIVE(AActor,execSetBoneRotation)
	MAP_NATIVE(AActor,execSetBoneLocation)
	MAP_NATIVE(AActor,execSetBoneDirection)
	MAP_NATIVE(AActor,execSetBoneScale)
	MAP_NATIVE(AActor,execLockRootMotion)
	MAP_NATIVE(AActor,execAttachToBoneWithIndex)
	MAP_NATIVE(AActor,execDetachFromBone)
	MAP_NATIVE(AActor,execAttachToBone)
	MAP_NATIVE(AActor,execGetRootRotationDelta)
	MAP_NATIVE(AActor,execGetRootLocationDelta)
	MAP_NATIVE(AActor,execGetRootRotation)
	MAP_NATIVE(AActor,execGetRootLocation)
	MAP_NATIVE(AActor,execGetBoneCoordsWithBoneIndex)
	MAP_NATIVE(AActor,execGetBoneRotation)
	MAP_NATIVE(AActor,execGetBoneCoords)
	MAP_NATIVE(AActor,execAnimBlendToAlpha)
	MAP_NATIVE(AActor,execAnimBlendParams)
	MAP_NATIVE(AActor,execBoneRefresh)
	MAP_NATIVE(AActor,execLinkMesh)
	MAP_NATIVE(AActor,execLinkSkelAnim)
	MAP_NATIVE(AActor,execGetNotifyChannel)
	MAP_NATIVE(AActor,execEnableChannelNotify)
	MAP_NATIVE(AActor,execIsTweening)
	MAP_NATIVE(AActor,execSetAnimFrame)
	MAP_NATIVE(AActor,execFreezeAnimAt)
	MAP_NATIVE(AActor,execHasBoneName)
	MAP_NATIVE(AActor,execStopAnimating)
	MAP_NATIVE(AActor,execHasAnim)
	MAP_NATIVE(AActor,execFinishAnim)
	MAP_NATIVE(AActor,execIsAnimating)
	MAP_NATIVE(AActor,execTweenAnim)
	MAP_NATIVE(AActor,execLoopAnim)
	MAP_NATIVE(AActor,execPlayAnim)
	MAP_NATIVE(AActor,execGetMeshName)
	MAP_NATIVE(AActor,execSetOwner)
	MAP_NATIVE(AActor,execSetBase)
	MAP_NATIVE(AActor,execAutonomousPhysics)
	MAP_NATIVE(AActor,execMoveSmooth)
	MAP_NATIVE(AActor,execSetRelativeLocation)
	MAP_NATIVE(AActor,execSetRelativeRotation)
	MAP_NATIVE(AActor,execSetRotation)
	MAP_NATIVE(AActor,execSetLocation)
	MAP_NATIVE(AActor,execMove)
	MAP_NATIVE(AActor,execSetDrawType)
	MAP_NATIVE(AActor,execSetStaticMesh)
	MAP_NATIVE(AActor,execSetDrawScale3D)
	MAP_NATIVE(AActor,execSetDrawScale)
	MAP_NATIVE(AActor,execSetCollisionSize)
	MAP_NATIVE(AActor,execSetCollision)
	MAP_NATIVE(AActor,execSleep)
	MAP_NATIVE(AActor,execError)
	MAP_NATIVE(AActor,execGetViewport)
	MAP_NATIVE(AActor,execConsoleCommand)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AActor);

NATIVE_INFO(UParticleEmitter) GEngineUParticleEmitterNatives[] = 
{ 
	MAP_NATIVE(UParticleEmitter,execTrigger)
	MAP_NATIVE(UParticleEmitter,execSpawnParticle)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UParticleEmitter);

NATIVE_INFO(UShadowBitmapMaterial) GEngineUShadowBitmapMaterialNatives[] = 
{ 
	MAP_NATIVE(UShadowBitmapMaterial,execDestroy)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UShadowBitmapMaterial);

NATIVE_INFO(AMarkProjector) GEngineAMarkProjectorNatives[] = 
{ 
	MAP_NATIVE(AMarkProjector,execUpdateDesireLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AMarkProjector);

NATIVE_INFO(AProjector) GEngineAProjectorNatives[] = 
{ 
	MAP_NATIVE(AProjector,execDetachActor)
	MAP_NATIVE(AProjector,execAttachActor)
	MAP_NATIVE(AProjector,execAbandonProjector)
	MAP_NATIVE(AProjector,execDetachProjector)
	MAP_NATIVE(AProjector,execAttachProjector)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AProjector);

NATIVE_INFO(AShadowProjector) GEngineAShadowProjectorNatives[] = 
{ 
	MAP_NATIVE(AShadowProjector,execCheckVisible)
	MAP_NATIVE(AShadowProjector,execUpdateLightInfo)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AShadowProjector);

NATIVE_INFO(ASecurity) GEngineASecurityNatives[] = 
{ 
	MAP_NATIVE(ASecurity,execNativePerform)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ASecurity);

NATIVE_INFO(UScriptedTexture) GEngineUScriptedTextureNatives[] = 
{ 
	MAP_NATIVE(UScriptedTexture,execDrawPortal)
	MAP_NATIVE(UScriptedTexture,execDrawTile)
	MAP_NATIVE(UScriptedTexture,execTextSize)
	MAP_NATIVE(UScriptedTexture,execDrawText)
	MAP_NATIVE(UScriptedTexture,execSetSize)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UScriptedTexture);

NATIVE_INFO(ASceneManager) GEngineASceneManagerNatives[] = 
{ 
	MAP_NATIVE(ASceneManager,execGetTotalSceneTime)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ASceneManager);

NATIVE_INFO(APawn) GEngineAPawnNatives[] = 
{ 
	MAP_NATIVE(APawn,execGetRefSkeletonNum)
	MAP_NATIVE(APawn,execGetShieldItemSound)
	MAP_NATIVE(APawn,execGetDefenseItemSound)
	MAP_NATIVE(APawn,execSetRelativeCoords)
	MAP_NATIVE(APawn,execPlayAnimUM)
	MAP_NATIVE(APawn,execForceCrouch)
	MAP_NATIVE(APawn,execReachedDestination)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APawn);

NATIVE_INFO(AEmitter) GEngineAEmitterNatives[] = 
{ 
	MAP_NATIVE(AEmitter,execSetSizeScale)
	MAP_NATIVE(AEmitter,execKill)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AEmitter);

NATIVE_INFO(UInteractionMaster) GEngineUInteractionMasterNatives[] = 
{ 
	MAP_NATIVE(UInteractionMaster,execTravel)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UInteractionMaster);

NATIVE_INFO(UInteraction) GEngineUInteractionNatives[] = 
{ 
	MAP_NATIVE(UInteraction,execScreenToWorld)
	MAP_NATIVE(UInteraction,execWorldToScreen)
	MAP_NATIVE(UInteraction,execConsoleCommand)
	MAP_NATIVE(UInteraction,execInitialize)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UInteraction);

NATIVE_INFO(AFluidSurfaceInfo) GEngineAFluidSurfaceInfoNatives[] = 
{ 
	MAP_NATIVE(AFluidSurfaceInfo,execPling)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AFluidSurfaceInfo);

NATIVE_INFO(UCanvas) GEngineUCanvasNatives[] = 
{ 
	MAP_NATIVE(UCanvas,execDrawTextJustified)
	MAP_NATIVE(UCanvas,execDrawTileScaled)
	MAP_NATIVE(UCanvas,execDrawTileJustified)
	MAP_NATIVE(UCanvas,execDrawTileStretched)
	MAP_NATIVE(UCanvas,execWrapStringToArray)
	MAP_NATIVE(UCanvas,execDrawPortal)
	MAP_NATIVE(UCanvas,execTextSize)
	MAP_NATIVE(UCanvas,execDrawTextClipped)
	MAP_NATIVE(UCanvas,execDrawTileClipped)
	MAP_NATIVE(UCanvas,execDrawActor)
	MAP_NATIVE(UCanvas,execDrawTile)
	MAP_NATIVE(UCanvas,execDrawText)
	MAP_NATIVE(UCanvas,execStrLen)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UCanvas);

NATIVE_INFO(AVolume) GEngineAVolumeNatives[] = 
{ 
	MAP_NATIVE(AVolume,execEncompasses)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AVolume);

NATIVE_INFO(AInspector) GEngineAInspectorNatives[] = 
{ 
	MAP_NATIVE(AInspector,execInspectorFunc006)
	MAP_NATIVE(AInspector,execInspectorFunc005)
	MAP_NATIVE(AInspector,execInspectorFunc004)
	MAP_NATIVE(AInspector,execInspectorFunc003)
	MAP_NATIVE(AInspector,execInspectorFunc002)
	MAP_NATIVE(AInspector,execInspectorFunc001)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AInspector);

NATIVE_INFO(APlayerController) GEngineAPlayerControllerNatives[] = 
{ 
	MAP_NATIVE(APlayerController,execChangeVoiceChatter)
	MAP_NATIVE(APlayerController,execLeaveVoiceChat)
	MAP_NATIVE(APlayerController,execClientHearSound)
	MAP_NATIVE(APlayerController,execFindStairRotation)
	MAP_NATIVE(APlayerController,execServerValidationResponse)
	MAP_NATIVE(APlayerController,execClientValidate)
	MAP_NATIVE(APlayerController,execPasteFromClipboard)
	MAP_NATIVE(APlayerController,execCopyToClipboard)
	MAP_NATIVE(APlayerController,execGetDefaultURL)
	MAP_NATIVE(APlayerController,execUpdateURL)
	MAP_NATIVE(APlayerController,execClientTravel)
	MAP_NATIVE(APlayerController,execSetViewTarget)
	MAP_NATIVE(APlayerController,execResetKeyboard)
	MAP_NATIVE(APlayerController,execGetEntryLevel)
	MAP_NATIVE(APlayerController,execConsoleCommand)
	MAP_NATIVE(APlayerController,execGetServerNetworkAddress)
	MAP_NATIVE(APlayerController,execGetPlayerNetworkAddress)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APlayerController);

NATIVE_INFO(AController) GEngineAControllerNatives[] = 
{ 
	MAP_NATIVE(AController,execEndClimbLadder)
	MAP_NATIVE(AController,execStopWaiting)
	MAP_NATIVE(AController,execInLatentExecution)
	MAP_NATIVE(AController,execPickAnyTarget)
	MAP_NATIVE(AController,execPickTarget)
	MAP_NATIVE(AController,execRemoveController)
	MAP_NATIVE(AController,execAddController)
	MAP_NATIVE(AController,execFindBestInventoryPath)
	MAP_NATIVE(AController,execWaitForLanding)
	MAP_NATIVE(AController,execPickWallAdjust)
	MAP_NATIVE(AController,execactorReachable)
	MAP_NATIVE(AController,execpointReachable)
	MAP_NATIVE(AController,execEAdjustJump)
	MAP_NATIVE(AController,execFindRandomDest)
	MAP_NATIVE(AController,execFindPathTowardNearest)
	MAP_NATIVE(AController,execFindPathToIntercept)
	MAP_NATIVE(AController,execFindPathToward)
	MAP_NATIVE(AController,execFindPathTo)
	MAP_NATIVE(AController,execCanSee)
	MAP_NATIVE(AController,execLineOfSightTo)
	MAP_NATIVE(AController,execFinishRotation)
	MAP_NATIVE(AController,execMoveToward)
	MAP_NATIVE(AController,execMoveTo)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AController);

NATIVE_INFO(APickup) GEngineAPickupNatives[] = 
{ 
	MAP_NATIVE(APickup,execRemoveFromNavigation)
	MAP_NATIVE(APickup,execAddToNavigation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APickup);

NATIVE_INFO(AAIController) GEngineAAIControllerNatives[] = 
{ 
	MAP_NATIVE(AAIController,execWaitToSeeEnemy)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AAIController);

NATIVE_INFO(AHUD) GEngineAHUDNatives[] = 
{ 
	MAP_NATIVE(AHUD,execDraw3DLine)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AHUD);

NATIVE_INFO(AWarpZoneInfo) GEngineAWarpZoneInfoNatives[] = 
{ 
	MAP_NATIVE(AWarpZoneInfo,execUnWarp)
	MAP_NATIVE(AWarpZoneInfo,execWarp)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AWarpZoneInfo);

NATIVE_INFO(AZoneInfo) GEngineAZoneInfoNatives[] = 
{ 
	MAP_NATIVE(AZoneInfo,execZoneActors)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AZoneInfo);

NATIVE_INFO(AGameInfo) GEngineAGameInfoNatives[] = 
{ 
	MAP_NATIVE(AGameInfo,execParseKillMessage)
	MAP_NATIVE(AGameInfo,execGetNetworkNumber)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AGameInfo);

NATIVE_INFO(ALevelInfo) GEngineALevelInfoNatives[] = 
{ 
	MAP_NATIVE(ALevelInfo,execGetAddressURL)
	MAP_NATIVE(ALevelInfo,execIsDemoBuild)
	MAP_NATIVE(ALevelInfo,execGetLocalURL)
	MAP_NATIVE(ALevelInfo,execIsEntry)
	MAP_NATIVE(ALevelInfo,execDetailChange)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ALevelInfo);

NATIVE_INFO(AKVehicle) GEngineAKVehicleNatives[] = 
{ 
	MAP_NATIVE(AKVehicle,execGraphData)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKVehicle);

NATIVE_INFO(AKConstraint) GEngineAKConstraintNatives[] = 
{ 
	MAP_NATIVE(AKConstraint,execKGetConstraintTorque)
	MAP_NATIVE(AKConstraint,execKGetConstraintForce)
	MAP_NATIVE(AKConstraint,execKUpdateConstraintParams)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKConstraint);

NATIVE_INFO(AStatLogFile) GEngineAStatLogFileNatives[] = 
{ 
	MAP_NATIVE(AStatLogFile,execFileLog)
	MAP_NATIVE(AStatLogFile,execFileFlush)
	MAP_NATIVE(AStatLogFile,execGetChecksum)
	MAP_NATIVE(AStatLogFile,execWatermark)
	MAP_NATIVE(AStatLogFile,execCloseLog)
	MAP_NATIVE(AStatLogFile,execOpenLog)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AStatLogFile);

NATIVE_INFO(AStatLog) GEngineAStatLogNatives[] = 
{ 
	MAP_NATIVE(AStatLog,execGetMapFileName)
	MAP_NATIVE(AStatLog,execGetGMTRef)
	MAP_NATIVE(AStatLog,execGetPlayerChecksum)
	MAP_NATIVE(AStatLog,execLogMutator)
	MAP_NATIVE(AStatLog,execInitialCheck)
	MAP_NATIVE(AStatLog,execBrowseRelativeLocalURL)
	MAP_NATIVE(AStatLog,execExecuteWorldLogBatcher)
	MAP_NATIVE(AStatLog,execBatchLocal)
	MAP_NATIVE(AStatLog,execExecuteSilentLogBatcher)
	MAP_NATIVE(AStatLog,execExecuteLocalLogBatcher)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AStatLog);

NATIVE_INFO(AGameStats) GEngineAGameStatsNatives[] = 
{ 
	MAP_NATIVE(AGameStats,execGetMapFileName)
	MAP_NATIVE(AGameStats,execGetStatsIdentifier)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AGameStats);

NATIVE_INFO(AFileLog) GEngineAFileLogNatives[] = 
{ 
	MAP_NATIVE(AFileLog,execLogf)
	MAP_NATIVE(AFileLog,execCloseLog)
	MAP_NATIVE(AFileLog,execOpenLog)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AFileLog);

#endif // NATIVES_ONLY
#endif // __STATIC_LINK

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE(ADecoVolumeObject)
VERIFY_CLASS_SIZE(AActor)
VERIFY_CLASS_SIZE(ADecorationList)
VERIFY_CLASS_SIZE(AKeypoint)
VERIFY_CLASS_SIZE(AViewportWindowController)
VERIFY_CLASS_SIZE(UParticleEmitter)
VERIFY_CLASS_SIZE(UTrailEmitter)
VERIFY_CLASS_SIZE(UTerrainMaterial)
VERIFY_CLASS_SIZE(AInfo)
VERIFY_CLASS_SIZE(AMovableStaticMeshActor)
VERIFY_CLASS_SIZE(AStaticMeshActor)
VERIFY_CLASS_SIZE(USpriteEmitter)
VERIFY_CLASS_SIZE(USparkEmitter)
VERIFY_CLASS_SIZE(UAnimNotify_IdleSound)
VERIFY_CLASS_SIZE(UAnimNotify)
VERIFY_CLASS_SIZE(UAnimNotify_MatSubAction)
VERIFY_CLASS_SIZE(UAnimNotify_Scripted)
VERIFY_CLASS_SIZE(UAnimNotify_Script)
VERIFY_CLASS_SIZE(UAnimNotify_Sound)
VERIFY_CLASS_SIZE(UAnimNotify_SwimSound)
VERIFY_CLASS_SIZE(UAnimNotify_DestroyEffect)
VERIFY_CLASS_SIZE(UAnimNotify_Effect)
VERIFY_CLASS_SIZE(UAnimNotify_AttackVoice)
VERIFY_CLASS_SIZE(UAnimNotify_Channeling)
VERIFY_CLASS_SIZE(UAnimNotify_AttackPreShot)
VERIFY_CLASS_SIZE(UAnimNotify_AttackShot)
VERIFY_CLASS_SIZE(UAnimNotify_AttackItem)
VERIFY_CLASS_SIZE(UAnimNotify_ScreenFade)
VERIFY_CLASS_SIZE(UAnimNotify_ViewShake)
VERIFY_CLASS_SIZE(UAnimNotify_BoneScale)
VERIFY_CLASS_SIZE(UShadowBitmapMaterial)
VERIFY_CLASS_SIZE(AMarkProjector)
VERIFY_CLASS_SIZE(AProjector)
VERIFY_CLASS_SIZE(AShadowProjector)
VERIFY_CLASS_SIZE(ASecurity)
VERIFY_CLASS_SIZE(UScriptedTexture)
VERIFY_CLASS_SIZE(ALookTarget)
VERIFY_CLASS_SIZE(USubActionSceneSpeed)
VERIFY_CLASS_SIZE(UMatSubAction)
VERIFY_CLASS_SIZE(UMatObject)
VERIFY_CLASS_SIZE(USubActionGameSpeed)
VERIFY_CLASS_SIZE(USubActionOrientation)
VERIFY_CLASS_SIZE(USubActionCameraShake)
VERIFY_CLASS_SIZE(USubActionFOV)
VERIFY_CLASS_SIZE(USubActionTrigger)
VERIFY_CLASS_SIZE(USubActionFade)
VERIFY_CLASS_SIZE(AMatDemoActor)
VERIFY_CLASS_SIZE(UActionWarp)
VERIFY_CLASS_SIZE(UMatAction)
VERIFY_CLASS_SIZE(UActionPause)
VERIFY_CLASS_SIZE(UActionMoveCamera)
VERIFY_CLASS_SIZE(UMeshObject)
VERIFY_CLASS_SIZE(ASceneManager)
VERIFY_CLASS_SIZE(URibbonEmitter)
VERIFY_CLASS_SIZE(UProjectorMaterial)
VERIFY_CLASS_SIZE(APawn)
VERIFY_CLASS_SIZE(AAirEmitter)
VERIFY_CLASS_SIZE(AEmitter)
VERIFY_CLASS_SIZE(AWaterHitEmitter)
VERIFY_CLASS_SIZE(UParticleMaterial)
VERIFY_CLASS_SIZE(AMover)
VERIFY_CLASS_SIZE(UMeshEmitter)
VERIFY_CLASS_SIZE(UGlowModifier)
VERIFY_CLASS_SIZE(UModifier)
VERIFY_CLASS_SIZE(UOpacityModifier)
VERIFY_CLASS_SIZE(UMaterialSequence)
VERIFY_CLASS_SIZE(UMaterialSwitch)
VERIFY_CLASS_SIZE(UFinalBlend)
VERIFY_CLASS_SIZE(UVertexColor)
VERIFY_CLASS_SIZE(UTexCoordSource)
VERIFY_CLASS_SIZE(UTexModifier)
VERIFY_CLASS_SIZE(UTexMatrix)
VERIFY_CLASS_SIZE(UTexEnvMap)
VERIFY_CLASS_SIZE(UTexOscillator)
VERIFY_CLASS_SIZE(UTexOscillatorTriggered)
VERIFY_CLASS_SIZE(UTexRotator)
VERIFY_CLASS_SIZE(UTexScaler)
VERIFY_CLASS_SIZE(UTexPanner)
VERIFY_CLASS_SIZE(UTexPannerTriggered)
VERIFY_CLASS_SIZE(UFadeColor)
VERIFY_CLASS_SIZE(UConstantMaterial)
VERIFY_CLASS_SIZE(UConstantColor)
VERIFY_CLASS_SIZE(UCombiner)
VERIFY_CLASS_SIZE(UShader)
VERIFY_CLASS_SIZE(UL2ColorModifier)
VERIFY_CLASS_SIZE(UColorModifier)
VERIFY_CLASS_SIZE(UInteractionMaster)
VERIFY_CLASS_SIZE(UInteractions)
VERIFY_CLASS_SIZE(UBaseGUIController)
VERIFY_CLASS_SIZE(UInteraction)
VERIFY_CLASS_SIZE(UConsole)
VERIFY_CLASS_SIZE(AL2SeamlessInfo)
VERIFY_CLASS_SIZE(AFluidSurfaceOscillator)
VERIFY_CLASS_SIZE(UPlayerInput)
VERIFY_CLASS_SIZE(UCheatManager)
VERIFY_CLASS_SIZE(AL2Radar)
VERIFY_CLASS_SIZE(UBeamEmitter)
VERIFY_CLASS_SIZE(UI3DL2Listener)
VERIFY_CLASS_SIZE(AEmitterLight)
VERIFY_CLASS_SIZE(ALight)
VERIFY_CLASS_SIZE(AVehicleRoutePoint)
VERIFY_CLASS_SIZE(AVehicle)
VERIFY_CLASS_SIZE(ASuperPointInfo)
VERIFY_CLASS_SIZE(AServerPrimitive)
VERIFY_CLASS_SIZE(AL2Float)
VERIFY_CLASS_SIZE(ASpawnableStaticMeshActor)
VERIFY_CLASS_SIZE(AL2Indicator)
VERIFY_CLASS_SIZE(AAirVolume)
VERIFY_CLASS_SIZE(AVolume)
VERIFY_CLASS_SIZE(ABrush)
VERIFY_CLASS_SIZE(AL2Alarm)
VERIFY_CLASS_SIZE(AMusicVolume)
VERIFY_CLASS_SIZE(ANMoon)
VERIFY_CLASS_SIZE(ANSun)
VERIFY_CLASS_SIZE(UExtraMeshData)
VERIFY_CLASS_SIZE(AInspector)
VERIFY_CLASS_SIZE(AL2Dice)
VERIFY_CLASS_SIZE(AAmbientSound)
VERIFY_CLASS_SIZE(ANpcPosInfo)
VERIFY_CLASS_SIZE(ALocationInfo)
VERIFY_CLASS_SIZE(ATerritoryInfo)
VERIFY_CLASS_SIZE(AL2Pickup)
VERIFY_CLASS_SIZE(ALineagePlayerController)
VERIFY_CLASS_SIZE(APlayerController)
VERIFY_CLASS_SIZE(AController)
VERIFY_CLASS_SIZE(AEnvCreatureManagerInfo)
VERIFY_CLASS_SIZE(ANMovableSunLight)
VERIFY_CLASS_SIZE(ACarriedObject)
VERIFY_CLASS_SIZE(AAvoidMarker)
VERIFY_CLASS_SIZE(ATriggers)
VERIFY_CLASS_SIZE(AJumpDest)
VERIFY_CLASS_SIZE(ANavigationPoint)
VERIFY_CLASS_SIZE(AJumpPad)
VERIFY_CLASS_SIZE(AStationaryWeapons)
VERIFY_CLASS_SIZE(APickup)
VERIFY_CLASS_SIZE(AAntiPortalActor)
VERIFY_CLASS_SIZE(AWeaponAttachment)
VERIFY_CLASS_SIZE(AInventoryAttachment)
VERIFY_CLASS_SIZE(ATeamInfo)
VERIFY_CLASS_SIZE(AReplicationInfo)
VERIFY_CLASS_SIZE(AAutoDoor)
VERIFY_CLASS_SIZE(ADoor)
VERIFY_CLASS_SIZE(AAutoLadder)
VERIFY_CLASS_SIZE(ALadder)
VERIFY_CLASS_SIZE(ASmallNavigationPoint)
VERIFY_CLASS_SIZE(ABlockingVolume)
VERIFY_CLASS_SIZE(APotentialClimbWatcher)
VERIFY_CLASS_SIZE(ALadderVolume)
VERIFY_CLASS_SIZE(APhysicsVolume)
VERIFY_CLASS_SIZE(ADefaultPhysicsVolume)
VERIFY_CLASS_SIZE(ALineOfSightTrigger)
VERIFY_CLASS_SIZE(AAIScript)
VERIFY_CLASS_SIZE(ADamageType)
VERIFY_CLASS_SIZE(AVehiclePart)
VERIFY_CLASS_SIZE(AMutator)
VERIFY_CLASS_SIZE(AAIController)
VERIFY_CLASS_SIZE(AAmmunition)
VERIFY_CLASS_SIZE(AInventory)
VERIFY_CLASS_SIZE(APowerups)
VERIFY_CLASS_SIZE(AAmmo)
VERIFY_CLASS_SIZE(ULevelSummary)
VERIFY_CLASS_SIZE(AGameReplicationInfo)
VERIFY_CLASS_SIZE(AInternetInfo)
VERIFY_CLASS_SIZE(APlayerReplicationInfo)
VERIFY_CLASS_SIZE(ALiftExit)
VERIFY_CLASS_SIZE(ALiftCenter)
VERIFY_CLASS_SIZE(ASavedMove)
VERIFY_CLASS_SIZE(AHUD)
VERIFY_CLASS_SIZE(AWarpZoneMarker)
VERIFY_CLASS_SIZE(ATrigger)
VERIFY_CLASS_SIZE(AAIMarker)
VERIFY_CLASS_SIZE(AInventorySpot)
VERIFY_CLASS_SIZE(APlayerStart)
VERIFY_CLASS_SIZE(ATeleporter)
VERIFY_CLASS_SIZE(AWarpZoneInfo)
VERIFY_CLASS_SIZE(AZoneInfo)
VERIFY_CLASS_SIZE(AProjectile)
VERIFY_CLASS_SIZE(ADecoration)
VERIFY_CLASS_SIZE(AInterpolationPoint)
VERIFY_CLASS_SIZE(AScout)
VERIFY_CLASS_SIZE(APathNode)
VERIFY_CLASS_SIZE(UReachSpec)
VERIFY_CLASS_SIZE(ASkyZoneInfo)
VERIFY_CLASS_SIZE(ACamera)
VERIFY_CLASS_SIZE(AGameInfo)
VERIFY_CLASS_SIZE(ALevelInfo)
VERIFY_CLASS_SIZE(ANote)
VERIFY_CLASS_SIZE(AWeapon)
VERIFY_CLASS_SIZE(APolyMarker)
VERIFY_CLASS_SIZE(AClipMarker)
VERIFY_CLASS_SIZE(UAmbientSoundObject)
VERIFY_CLASS_SIZE(ULevelObject)
VERIFY_CLASS_SIZE(UL2NEnvLight)
VERIFY_CLASS_SIZE(UL2NTimeLight)
VERIFY_CLASS_SIZE(USkillVisualEffect)
VERIFY_CLASS_SIZE(USkillAction_SwordTrail)
VERIFY_CLASS_SIZE(USkillAction)
VERIFY_CLASS_SIZE(USkillAction_LocateEffect)
VERIFY_CLASS_SIZE(AL2NMover)
VERIFY_CLASS_SIZE(ANSkillProjectile)
VERIFY_CLASS_SIZE(ANProjectile)
VERIFY_CLASS_SIZE(ANCubics)
VERIFY_CLASS_SIZE(AKVehicle)
VERIFY_CLASS_SIZE(AKTire)
VERIFY_CLASS_SIZE(AKActor)
VERIFY_CLASS_SIZE(UKarmaParamsSkel)
VERIFY_CLASS_SIZE(UKarmaParams)
VERIFY_CLASS_SIZE(UKarmaParamsCollision)
VERIFY_CLASS_SIZE(UKarmaParamsRBFull)
VERIFY_CLASS_SIZE(AKCarWheelJoint)
VERIFY_CLASS_SIZE(AKConstraint)
VERIFY_CLASS_SIZE(AKConeLimit)
VERIFY_CLASS_SIZE(AKHinge)
VERIFY_CLASS_SIZE(AKBSJoint)
VERIFY_CLASS_SIZE(AStatLogFile)
VERIFY_CLASS_SIZE(AStatLog)
VERIFY_CLASS_SIZE(AGameStats)
VERIFY_CLASS_SIZE(AFileLog)
#endif // VERIFY_CLASS_SIZES
