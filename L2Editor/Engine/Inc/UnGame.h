/*=============================================================================
	UnGame.h: Unreal game class.
	Copyright 1997-1999 Epic Games, Inc. All Rights Reserved.

	Revision history:
		* Created by Tim Sweeney
=============================================================================*/

/*-----------------------------------------------------------------------------
	Unreal game engine.
-----------------------------------------------------------------------------*/

//
// The Unreal game engine.
//
class ENGINE_API UGameEngine : public UEngine
{
	DECLARE_CLASS(UGameEngine,UEngine,CLASS_Config|CLASS_Transient,Engine)

	// Variables.
	ULevel*					GLevel;
	ULevel*					GEntry;
	ULevel*					GSkyLevel;
	UPendingLevel*			GPendingLevel;
	FURL					LastURL;
	TArrayNoInit<FString>	ServerActors;
	TArrayNoInit<FString>	ServerPackages;

	TArrayNoInit<class UObject*>	DummyArray;
	class UObject*					DummyObject;
	INT								LastHitObject;
	BITFIELD						bClicked : 1 GCC_PACK(4);
	FLOAT							ClickedMouseX GCC_PACK(4);
	FLOAT							ClickedMouseY;
	FVector							ClickLocation;
	FPlane							ClickPlane;
	class AActor*					ClickActor;
	INT								StartTempNpcID;
	INT								EndTempNpcID;
	INT								CurrentTempNpcID;
	FLOAT							AvgFPS;
	FLOAT							LastDeltaTime;
	FLOAT							LastDeltaSeconds[30];
	INT								CurTickIndex;
	TArrayNoInit<FFWind>			Wind;
	TArrayNoInit<INT>				LoadingMap;
	TArrayNoInit<INT>				CommandMacro;
	INT								LandMark;
	BITFIELD						bUseUnderWaterEffect : 1 GCC_PACK(4);
	FLOAT							FadeTime GCC_PACK(4);
	BITFIELD						bFadeOut : 1 GCC_PACK(4);
	FLOAT							FadeElaspedTime GCC_PACK(4);
	BITFIELD						bFadeIn : 1 GCC_PACK(4);
	FColor							FadeColor GCC_PACK(4);
	INT								nFadeType;
	BITFIELD						bPlayerObserverMode : 1 GCC_PACK(4);
	FVector							TeleportLoc GCC_PACK(4);
	BITFIELD						bTimeCheck : 1 GCC_PACK(4);
	INT								RequestedTime GCC_PACK(4);
	INT								ElapsedTimeCheck;
	FLOAT							MusicMaxTime;
	FLOAT							DefaultMusicMaxTime;
	FLOAT							BlackOutDuration;
	FLOAT							FadeInTime;
	BITFIELD						bLazyMode : 1 GCC_PACK(4);
	INT								UnderWaterEffect GCC_PACK(4);
	BITFIELD						bAttachedUnderWaterEffect : 1 GCC_PACK(4);
	INT								InspectorCount GCC_PACK(4);
	INT								InspectorParams;
	class UClass*					InspectorClass;
	TArrayNoInit<class UObject*>	CameraEffects;
	INT								AuthData[4];
	BITFIELD						bConnectionClosed : 1 GCC_PACK(4);

	// Constructors.
	UGameEngine();

	// UObject interface.
	virtual void Serialize( FArchive& Ar );
	virtual void Destroy();

	// UEngine interface.
	virtual void Tick(FLOAT DeltaSeconds);
	virtual void Init();
	virtual	void Exit();
	virtual void Draw( UViewport* Viewport, UBOOL Blit=1, BYTE* HitData=NULL, INT* HitSize=NULL );
	virtual UBOOL Exec( const TCHAR* Cmd, FOutputDevice& Ar=*GLog );
	virtual void MouseDelta( UViewport*, DWORD, FLOAT, FLOAT );
	virtual void MousePosition( class UViewport*, DWORD, FLOAT, FLOAT );
	virtual void MouseWheel( UViewport* Viewport, DWORD Buttons, INT Delta );
	virtual void Click( UViewport*, DWORD, FLOAT, FLOAT );
	virtual void UnClick( UViewport*, DWORD, INT, INT );
	virtual void SetClientTravel( UPlayer* Viewport, const TCHAR* NextURL, UBOOL bItems, ETravelType TravelType );
	virtual INT ChallengeResponse( INT Challenge );
	virtual FLOAT GetMaxTickRate();
	void SetProgress(  const TCHAR* CmdStr, const TCHAR* Str1, const TCHAR* Str2, FLOAT Seconds = -1.f );

	// UGameEngine interface.
	virtual UBOOL Browse( FURL URL, const TMap<FString,FString>* TravelInfo, FString& Error );
	virtual ULevel* LoadMap( const FURL& URL, UPendingLevel* Pending, const TMap<FString,FString>* TravelInfo, FString& Error );
	virtual void SaveGame( INT Position );
	virtual void CancelPending();
	virtual void PaintProgress();
	virtual void UpdateConnectingMessage();
	virtual void BuildServerMasterMap( UNetDriver* NetDriver, ULevel* InLevel );
	virtual void NotifyLevelChange();
	
	virtual INT OnSearchOrc(char *);
	virtual INT OnVersionCheck();
	virtual INT OnMoveToLocation(User*, FVector, FVector);
	virtual INT OnMoveToLocationInVehicle(FVehicle *, User*, FVector, FVector);
	virtual INT OnMoveBackwardToLocation(User*, FVector, FVector);
	virtual INT OnMoveToPawn(User*, User*, INT, FVector);
	virtual INT OnValidateLocation(User*, FVector, INT);
	virtual INT OnValidateLocationInVehicle(FVehicle *, User*, FVector, INT);
	virtual INT OnCheckGeo(FVector);
	virtual INT OnFlyToLocation(User*, FVector, FVector, INT);
	virtual INT OnFlySelfDestination(User*, FVector);
	virtual INT OnEarthQuake(FVector, INT, INT, INT);
	virtual INT OnStartRotating(User*, INT, INT, INT);
	virtual INT OnFinishRotating(User*, INT, INT);
	virtual INT OnCharInfo(User*, FVector, INT, L2ParamStack&);
	virtual INT OnUserInfo(User*, FVector, INT, INT, INT, char, char);
	virtual INT OnAttack(User*, INT, INT, INT, INT, INT, FVector, INT);
	virtual INT OnAttack(User*, User*, INT, INT, INT, INT, INT, FVector, INT);
	virtual INT OnAttacked(User*, INT);
	virtual INT OnAttacked(User*, User*);
	virtual INT OnAttackCanceled(User*);
	virtual INT OnDie(User*, L2ParamStack&);
	virtual INT OnRide(User*, INT, INT, INT, FVector);
	virtual INT OnRevive(User*);
	virtual INT OnAttackOutofRange(User*);
	virtual INT OnAttackinCoolTime(User*);
	virtual INT OnAttackDeadTarget(User*);
	virtual INT OnAuthServerSelectSuccess();
	virtual INT OnAuthServerSelectFail(INT);
	virtual INT OnSpawnItem(Item*, FVector, FRotator);
	virtual INT OnDropItem(User*, Item*, FVector, FRotator);
	virtual INT OnDice(User*, INT, INT, FVector);
	virtual INT OnEquipItemPlaySound(INT);
	virtual INT OnGetItem(User*, Item*, FVector);
	virtual INT OnEquipItem(User*, Item*, INT);
	virtual INT OnUnequipItem(User*, Item*, INT);
	virtual INT OnClassUpdate(User*, INT);
	virtual INT OnLevelUpdate(User*, INT);
	virtual INT OnExpUpdate(User*, QWORD);
	virtual INT OnStrUpdate(User*, INT);
	virtual INT OnDexUpdate(User*, INT);
	virtual INT OnConUpdate(User*, INT);
	virtual INT OnINTUpdate(User*, INT);
	virtual INT OnWitUpdate(User*, INT);
	virtual INT OnMenUpdate(User*, INT);
	virtual INT OnHpUpdate(User*, INT);
	virtual INT OnMaxHpUpdate(User*, INT);
	virtual INT OnCpUpdate(User*, INT);
	virtual INT OnMaxCpUpdate(User*, INT);
	virtual INT OnMpUpdate(User*, INT);
	virtual INT OnMaxMpUpdate(User*, INT);
	virtual INT OnSPUpdate(User*, INT);
	virtual INT OnCarringWeightUpdate(User*, INT);
	virtual INT OnCarryWeightUpdate(User*, INT);
	virtual INT OnAttackRangeUpdate(User*, INT);
	virtual INT OnPhysicalAttack(User*, INT);
	virtual INT OnPhysicalAttackSpeed(User*, INT);
	virtual INT OnPhysicalDefense(User*, INT);
	virtual INT OnPhysicalAvoid(User*, INT);
	virtual INT OnHitRate(User*, INT);
	virtual INT OnCriticalRate(User*, INT);
	virtual INT OnMagicalAttack(User*, INT);
	virtual INT OnMagicCastingSpeed(User*, INT);
	virtual INT OnMagicDefense(User*, INT);
	virtual INT OnGuiltyUpdate(User*, INT);
	virtual INT OnCriminalRateUpdate(User*, INT);
	virtual INT OnNpcHtmlMessage(User*, TCHAR*, INT);
	virtual INT OnTutorialShowHtml(TCHAR*);
	virtual INT OnTutorialShowQuestionMark(INT);
	virtual INT OnTutorialEnableClientEvent(INT);
	virtual INT OnTutorialCloseHtml();
	virtual INT CheckTutorialClientEvent(INT);
	virtual INT OnShowRadar(INT, INT, INT, INT, INT);
	virtual INT OnDeleteRadar(INT, INT, INT);
	virtual INT OnStartSellList(INT, INT);
	virtual INT OnAddSellList(ItemInfo&);
	virtual INT OnStartBuyList(INT, INT);
	virtual INT OnAddBuyList(ItemInfo&);
	virtual INT OnStartPreviewList(INT, INT, INT);
	virtual INT OnAddPreviewList(ItemInfo&);
	virtual INT OnPreviewInfo(INT*);
	virtual INT OnStartManorSellList(INT, INT);
	virtual INT OnAddManorSellList(ItemInfo&);
	virtual INT OnStartManorBuyList(INT, INT);
	virtual INT OnAddManorBuyList(ItemInfo&);
	virtual INT OnStartDepositList(short, INT);
	virtual INT OnAddDepositList(ItemInfo&);
	virtual INT OnStartWithdrawList(short, INT);
	virtual INT OnAddWithdrawList(ItemInfo&);
	virtual INT OnDeleteUser(User*, INT, INT);
	virtual INT OnDeleteItem(Item*);
	virtual INT OnGMHide(INT);
	virtual INT OnNpcInfo(User*, FVector, INT, L2ParamStack&);
	virtual INT OnServerObjectInfo(User*, FVector, INT, INT, INT, INT);
	virtual INT OnActionFail();
	virtual INT OnTeleportToLocation(User*, FVector, INT);
	virtual INT OnTargetSelected(User*, INT, User*, Item*, FServerStaticObject*, FVector);
	virtual INT OnMyTargetSelected(User*, INT, Item*, FServerStaticObject*, INT);
	virtual INT OnTargetUnselected(User*, FVector, INT);
	virtual INT OnAutoAttackStart(User*);
	virtual INT OnAutoAttackStop(User*);
	virtual INT OnSocialAction(User*, INT);
	virtual INT OnChangeMoveType(User*, INT, INT);
	virtual INT OnChangeWaitType(User*, INT, FVector);
	virtual INT OnStopMove(User*, FVector, INT);
	virtual INT OnStopMoveInVehicle(FVehicle*, User*, FVector, INT);
	virtual INT OnStopMoveWithLocation(User*, FVector);
	virtual INT OnDoorInfo(L2ParamStack&, AActor**);
	virtual INT OnDoorStatusUpdate(L2ParamStack&, AActor*);
	virtual INT OnVehicleInfo(FVehicle*, FVector, INT);
	virtual INT OnDeleteVehicle(FVehicle*);
	virtual INT OnVehicleDeparture(FVehicle*, INT, INT, FVector);
	virtual INT OnVehicleCheckLocation(FVehicle*, FVector, INT);
	virtual INT OnGetOnVehicle(User*, FVehicle*, FVector);
	virtual INT OnGetOffVehicle(User*, FVehicle*, FVector);
	virtual INT OnSpecialCamera(User*, FLOAT, INT, INT, FLOAT, FLOAT, INT, INT, INT, INT, INT);
	virtual INT OnNormalCamera();
	virtual INT OnEventTrigger(INT, INT);
	virtual INT OnSkillRemainSec(User*, User*, INT, INT, INT, INT, FLOAT);
	virtual void OnAcceptLogOut();
	virtual INT CheckLogINType(INT);
	virtual void OnAcceptGameStart(INT);
	virtual void OnAcceptCharacterDelete(INT);
	virtual void OnAcceptNewCharacter(INT);
	virtual void OnAcceptCharacterCreate(INT);
	virtual void OnReceiveItemList(INT);
	virtual void OnReceiveUpdateItemList(INT, ItemInfo&);
	virtual void OnReceiveTradeStart(INT);
	virtual void OnReceiveAddTradeInventoryItem(ItemInfo&);
	virtual void OnReceiveAddTradeOwnItem(ItemInfo&);
	virtual void OnReceiveAddTradeOtherItem(ItemInfo&);
	virtual void OnReceiveTradeUpdate(INT, ItemInfo&);
	virtual void OnReceiveTradePressOtherOk();
	virtual void OnReceiveTradeDoneMsg(INT);
	virtual void OnReceiveCharacterSelectedPacket(INT, INT, INT, INT, void*, INT, INT*);
	virtual void AddRecommandedData(RecommandedDataStr);
	virtual void EndRecommandedData();
	virtual void AddInventoryItem(ItemInfo&);
	virtual void OnUpdatePlayerInfo(L2ParamStack&);
	virtual void OnServerClose(INT);
	virtual void ContinueServerClose();
	virtual void OnReceiveHtmlMessage(L2ParamStack&);
	virtual void OnReceiveUseSharedGroupItem(INT, INT, INT, INT);
	virtual void OnReceivePledgeExtendedInfo(PledgeInfo&);
	virtual void OnReceivePledgeInfo(L2ParamStack&);
	virtual void OnReceivePledgeInfoUpdate(PledgeInfo&);
	virtual void OnReceivePledgeSkillList(L2ParamStack&);
	virtual void OnReceivePledgeSkillAdd(L2ParamStack&);
	virtual void OnReceiveSetAcademyMaster(L2ParamStack&);
	virtual void OnReceivePledgePowerGradeList(L2ParamStack&);
	virtual void OnReceivePledgeMemberList();
	virtual void OnAddPledgeMember(L2ParamStack&);
	virtual void OnAddPledgeMemberMultiple(L2ParamStack&);
	virtual void OnUpdatePledgeMember(L2ParamStack&);
	virtual void OnDeletePledgeMember(TCHAR*);
	virtual void OnDeleteAllPledgeMember();
	virtual void OnReceiveCreatePledge(L2ParamStack&);
	virtual void OnImportCrestFile(INT, INT, INT, INT);
	virtual void OnMakeDDSCrestFile(INT, INT, unsigned char*, INT, INT);
	virtual void OnReceiveAskJoinPledge(L2ParamStack&);
	virtual void OnReceiveOustPledgeMember(L2ParamStack&);
	virtual void OnReceiveDismissPledge(L2ParamStack&);
	virtual void OnReceiveJoinPledge(L2ParamStack&);
	virtual void OnReceiveWidthdrawalPledge(L2ParamStack&);
	virtual void OnReceiveOustPledgeMessage(L2ParamStack&);
	virtual void OnReceiveDismissPledgeMessage(L2ParamStack&);
	virtual void OnReceiveStartPledgeWar(L2ParamStack&);
	virtual void OnReceiveReplyStartPledgeWar(L2ParamStack&);
	virtual void OnReceiveStopPledgeWar(L2ParamStack&);
	virtual void OnReceiveReplyStopPledgeWar(L2ParamStack&);
	virtual void OnReceiveSurrenderPledgeWar(L2ParamStack&);
	virtual void OnReceiveReplySurrenderPledgeWar(L2ParamStack&);
	virtual void OnReceiveSurrenderPersonally(L2ParamStack&);
	virtual void OnReceiveAskJoinParty(L2ParamStack&);
	virtual void OnReceiveJoinParty(L2ParamStack&);
	virtual void OnReceiveWithdrawalParty(L2ParamStack&);
	virtual void OnReceiveOustPartyMember(L2ParamStack&);
	virtual void OnReceiveOustPartyMessage(L2ParamStack&);
	virtual void OnReceiveDismissParty(L2ParamStack&);
	virtual void OnReceiveDismissPartyMessage(L2ParamStack&);
	virtual void OnReceiveWareHouseDonePacket(L2ParamStack&);
	virtual void OnReceivePledgePower(L2ParamStack&);
	virtual void OnReceivePledgeMemberInfo(L2ParamStack&);
	virtual void OnReceivePledgeWarList(L2ParamStack&);
	virtual void OnReceiveSubPledgeCreated(L2ParamStack&);
	virtual void OnReceivePledgeMyAuth(L2ParamStack&);
	virtual void OnReceiveAskJoinAlly(L2ParamStack&);
	virtual void OnReceiveDismissAlly(L2ParamStack&);
	virtual void OnReceiveJoinAlly(L2ParamStack&);
	virtual void OnReceiveOustAlly(L2ParamStack&);
	virtual void OnReceiveWithdrawAlly(L2ParamStack&);
	virtual void OnReceiveFriendAddRequestResult(L2ParamStack&);
	virtual void OnReceiveFriendAddRequest(L2ParamStack&);
	virtual void OnReceiveFriendAdd(L2ParamStack&);
	virtual void OnReceiveFriendRemove(L2ParamStack&);
	virtual void OnReceiveFriendList(L2ParamStack&);
	virtual void OnReceiveFriendStatus(L2ParamStack&);
	virtual void OnReceiveBlockList(L2ParamStack&);
	virtual void OnReceiveShortCutList();
	virtual void OnUpdateShortCutItem(INT);
	virtual void OnUpdatePetShortCutItem(INT);
	virtual void OnReceiveShortCutDelete(INT);
	virtual void OnReceiveMagicSkillListPacket(L2ParamStack&);
	virtual void OnSay2(L2ParamStack&);
	virtual void OnReceiveVersionCheck(L2ParamStack&);
	virtual void OnReceiveAbnormalStatus();
	virtual void AddAbnormalStatus(L2ParamStack&);
	virtual void OnReceiveEtcStatus();
	virtual void AddEtcStatus(L2ParamStack&);
	virtual void OnReceiveShortStatus();
	virtual void AddShortStatus(L2ParamStack&);
	virtual void OnReceiveQuestList();
	virtual void OnEndQuestList();
	virtual void AddQuestID(INT, INT);
	virtual void AddQuestItem(ItemInfo&);
	virtual void OnReceiveServerTime(INT);
	virtual void OnUpdateEquipItem(L2ParamStack&);
	virtual void OnPartyAddMemberPacket(L2ParamStack&);
	virtual void OnPartyUpdateMemberPacket(L2ParamStack&);
	virtual void OnPartyDeleteMemberPacket(L2ParamStack&);
	virtual void OnPartyDeleteAllPacket(L2ParamStack&);
	virtual void OnShowSkillWnd();
	virtual void OnShowMagicWnd();
	virtual void OnSkillListPacket(L2ParamStack&);
	virtual void OnMagicListPacket(L2ParamStack&);
	virtual void OnReceiveTradeDemand(L2ParamStack&);
	virtual void OnRestartResponse(L2ParamStack&);
	virtual void OnSetupGaugePacket(L2ParamStack&);
	virtual void OnShowboardPacket(bool, L2ParamStack&);
	virtual void OnSelectItemToEnchant(INT);
	virtual void OnReceiveEnchantResult(INT);
	virtual void OnReceiveAction(INT);
	virtual void OnShowTrainListWnd(L2ParamStack&);
	virtual void OnShowTrainInfoWnd(L2ParamStack&);
	virtual void AddAcquireSkillInfo(L2ParamStack&);
	virtual void AddAcquireSkillExtendedInfo(L2ParamStack&);
	virtual void OnShowQuestInfo(L2ParamStack&);
	virtual void OnShowQuestMark(L2ParamStack&);
	virtual void OnSendManorList(L2ParamStack*);
	virtual void OnShowSeedInfo(L2ParamStack*);
	virtual void OnShowCropInfo(L2ParamStack*);
	virtual void OnShowManorDefaultInfo(L2ParamStack*);
	virtual void OnShowSeedSetting(L2ParamStack*);
	virtual void OnShowCropSetting(L2ParamStack*);
	virtual void OnShowSellCropList(L2ParamStack*);
	virtual void OnShowProcureCropDetail(L2ParamStack*);
	virtual void OnHeroList(L2ParamStack*);
	virtual void OnOlympiadUserInfo(L2ParamStack&);
	virtual void OnOlympiadSpelledInfo(L2ParamStack&);
	virtual void OnOlympiadMode(char);
	virtual void OnOlympiadMatchEnd();
	virtual void OnExMailArrivedPacket();
	virtual void OnExStorageMaxCountPacket(L2ParamStack&);
	virtual void OnExOpenMPCC(L2ParamStack&);
	virtual void OnExCloseMPCC(L2ParamStack&);
	virtual void OnExAskJoinMPCC(L2ParamStack&);
	virtual void OnHideTrainWnd();
	virtual void UpdateChatWndStatus();
	virtual void OnShowPetStatusWnd(INT);
	virtual void OnShowPetPartyWnd(INT);
	virtual void OnHidePetWnd(INT);
	virtual void OnShowPetNameBtn(INT);
	virtual void OnReceivePetStatusInfo(INT, L2ParamStack&);
	virtual void OnReceivePetItemList();
	virtual void AddPetInventoryItem(ItemInfo&);
	virtual void UpdatePetInventoryItem(INT, ItemInfo&);
	virtual void OnGMViewCharacterInfo(User&);
	virtual void OnGMViewReceivePledgeInfo(PledgeInfo&);
	virtual void OnGMViewReceivePledgeMemberList();
	virtual void OnGMViewAddPledgeMember(L2ParamStack&);
	virtual void OnGMViewShowSkillWnd();
	virtual void OnGMViewSkillListPacket(L2ParamStack&);
	virtual void OnGMViewShowMagicWnd();
	virtual void OnGMViewMagicListPacket(L2ParamStack&);
	virtual void OnGMViewReceiveQuestList();
	virtual void OnGMViewReceiveQuestListEnd();
	virtual void GMViewAddQuestID(INT, INT);
	virtual void GMViewAddQuestItem(ItemInfo&);
	virtual void GMViewAddInventoryItem(ItemInfo&);
	virtual void OnGMViewStartWithdrawList(INT);
	virtual void OnGMViewAddWithdrawList(ItemInfo&);
	virtual void OnShowMinimap(INT);
	virtual void OnShowCalc(INT);
	virtual void OnReceiveRecipeBookItemList(INT, INT);
	virtual void AddRecipeBookItem(INT);
	virtual void ReceiveRecipeItemMakeInfo(L2ParamStack&);
	virtual void ReceiveRecipeShopManageList(INT, INT, INT);
	virtual void AddRecipeShopManageItem(INT, INT);
	virtual void AddRecipeShopRegisterdItem(INT, INT, INT);
	virtual void ReceiveRecipeShopSellList(INT, INT, INT, INT);
	virtual void AddRecipeShopSellItem(INT, INT, INT);
	virtual void ReceiveRecipeShopItemInfo(INT, INT, INT, INT, INT, INT);
	virtual void ReceiveMacroListInfo(char, char, MacroInfo, char, INT);
	virtual void ReceiveHennaEquipList(INT, INT);
	virtual void AddHennaEquipInfo(HennaInfo);
	virtual void ReceiveHennaItemInfo(HennaInfo, INT);
	virtual void ReceiveHennaInfo(HennaInfo, INT);
	virtual void AddHennaInfo(INT, INT);
	virtual void ReceiveHennaUnequipList(INT, INT);
	virtual void AddHennaUnequipInfo(HennaInfo);
	virtual void ReceiveHennaUnequipItemInfo(HennaInfo, INT);
	virtual void GMAddHennaInfo(INT, INT);
	virtual void GMReceiveHennaInfo(HennaInfo, INT);
	virtual void AddPackageToList(L2ParamStack&);
	virtual void AddSendableItemList(INT, INT, INT, ItemInfo&);
	virtual void OnReceiveShowPlaySceneINTerface();
	virtual void OnReceiveShowRefineryINTerface();
	virtual void OnReceiveShowRefineryCancelINTerface();
	virtual void OnReceiveConfirmTargetItemResult(INT, INT, INT);
	virtual void OnReceiveConfirmRefinerItemResult(INT, INT, INT, INT, INT);
	virtual void OnReceiveConfirmGemStoneResult(INT, INT, INT, INT, INT);
	virtual void OnReceiveRefineResult(INT, INT, INT);
	virtual void OnReceiveConfirmCancelItemResult(INT, INT, INT, INT, QWORD, INT);
	virtual void OnReceiveRefineCancelResult(INT);
	virtual void OnStartPrivateStoreManageList(L2ParamStack&);
	virtual void OnStartPrivateStoreList(L2ParamStack&);
	virtual void OnPrivateStoreManageList(ItemInfo&, ItemInfo&);
	virtual void OnPrivateStoreList(ItemInfo&);
	virtual void OnStartPrivateStoreBuyManageList(L2ParamStack&);
	virtual void OnStartPrivateStoreBuyList(L2ParamStack&);
	virtual void OnPrivateStoreBuyManageList(ItemInfo&, ItemInfo&);
	virtual void OnPrivateStoreBuyList(ItemInfo&);
	virtual void OnPrivateStoreBuyMsg(TCHAR*, INT);
	virtual void OnSkillCoolTimePacket(L2ParamStack&);
	virtual void OnSkillCoolTimeReset(L2ParamStack&);
	virtual void OnStartAllianceWar(L2ParamStack&);
	virtual void OnStopAllianceWar(L2ParamStack&);
	virtual void OnReceiveSiegeInfo(L2ParamStack&);
	virtual void OnReceiveSiegeAttackerList(L2ParamStack&);
	virtual void OnReceiveSiegeDefenderList(L2ParamStack&);
	virtual void OnAddSelectableTime(INT);
	virtual void OnEndSiegeAttackerlist();
	virtual void OnEndSiegeDefenderlist();
	virtual void ClearAttackerList();
	virtual void ClearDefenderList();
	virtual void OnEndItemList();
	virtual void OnSnoop(L2ParamStack&);
	virtual void OnObserverStartPacket(L2ParamStack&);
	virtual void OnObserverEndPacket(L2ParamStack&);
	virtual void OnChairSitPacket(L2ParamStack&);
	virtual void OnPledgePower(L2ParamStack&);
	virtual void OnINTerfacePlaySound(const TCHAR*);
	virtual void OnINTerfaceStopSound(FString const&);
	virtual void OnINTerfacePlayVoice(TCHAR*);
	virtual void OnPlaySound(L2ParamStack&);
	virtual INT OnStaticObjectInfo(L2ParamStack&, AActor**);
	virtual void OnDeleteStaticObject(FServerStaticObject*);
	virtual INT OnMoveToActor(User*, AActor*, INT, FVector);
	virtual void OnSetSSQStatus(L2ParamStack&);
	virtual void OnSetSSQPreStatus(L2ParamStack&);
	virtual void OnStartSSQMainEvent();
	virtual void OnSetSSQMainEvent(L2ParamStack&);
	virtual void OnSetSSQSealStatus(L2ParamStack&);
	virtual void OnSSQInfo(char, char);
	virtual void OnAgitInfo(INT, unsigned char const*);
	virtual void OnPetitionVote();
	virtual void OnReceiveMagicSkillUse(User*, INT, L2ParamStack&);
	virtual void OnReceiveMagicSkillUse(User*, User*, L2ParamStack&);
	virtual void OnReceiveMagicSkillCanceled(User*);
	virtual INT OnReceiveMagicSkillLaunched(User*, INT, INT, INT, INT);
	virtual INT OnReceiveMagicSkillLaunched(User*, User*, INT, INT, INT);
	virtual INT OnAssociatedAttack(User*, User*, INT, INT, INT, INT, INT, FVector, INT);
	virtual INT OnClientSetTime(L2ParamStack&);
	virtual void OnVehicleStartPacket(L2ParamStack&);
	virtual void OnRequestTimeCheckPacket(L2ParamStack&);
	virtual void OnCameraMode(INT);
	virtual void OnShowXMasSeal(INT);
	virtual void OnReceiveL2FriendList();
	virtual void OnAddL2Friend(INT, TCHAR*, INT, INT);
	virtual void OnEndL2FriendList();
	virtual void OnUpdateL2Friend(INT, INT, TCHAR*, INT, INT);
	virtual void OnUpdateL2FriendStatus(INT, TCHAR*, INT);
	virtual void OnReceiveL2FriendSay(INT, TCHAR*, TCHAR*);
	virtual void OnRegenStatus(INT, INT, INT, double);
	virtual void OnEventMatchObserver(INT, char, char, FString, FString, INT, INT, INT);
	virtual void OnEventMatchMessage(char, FString);
	virtual void OnEventMatchScore(INT, INT, INT);
	virtual void OnEventMatchTeamInfoStart(INT, char, INT);
	virtual void OnEventMatchTeamInfo(INT, INT, FString, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT);
	virtual void OnEventMatchTeamInfoEnd();
	virtual void OnEventMatchCreate(INT);
	virtual void OnEventMatchUserInfo(INT, FString, INT, INT, INT, INT, INT, INT, INT, INT);
	virtual void OnEventMatchSpellInfoStart(INT, INT, INT);
	virtual void OnEventMatchSpellInfo(INT, INT, INT, INT);
	virtual void OnEventMatchSpellInfoEnd();
	virtual void OnEventMatchTeamUnlocked(INT, char);
	virtual void OnEventMatchGMTest();
	virtual void OnFirecracker(APawn*, INT);
	virtual void OnColosseumFence(ColosseumFence*, enum ColosseumFenceState);
	virtual void OnListPartyWating(L2ParamStack&);
	virtual void OnPartyRoomInfo(L2ParamStack&);
	virtual void OnExPartyRoomMember(L2ParamStack&);
	virtual void OnExClosePartyRoom(L2ParamStack&);
	virtual void OnExManagePartyRoomMember(L2ParamStack&);
	virtual void OnStartPartyMatch();
	virtual void OnExAutoSoulShot(L2ParamStack&);
	virtual void OnExEventMatchManage(L2ParamStack&);
	virtual void OnExEventMatchManageAddMember(L2ParamStack&);
	virtual void OnFishingStart(APawn*, INT, FVector, INT, INT);
	virtual void OnFishingEnd(APawn*, unsigned char);
	virtual void OnFishingCombatStart(APawn*, L2ParamStack&);
	virtual void OnFishingHPRegen(APawn*, L2ParamStack&);
	virtual void OnExMultiPartyCommandChannelInfo(L2ParamStack&);
	virtual void OnExMultiPartyCommandChannelInfoAddMember(L2ParamStack&);
	virtual void OnExMultiPartyCommandChannelInfoAddPartyMember(L2ParamStack&);
	virtual void OnExMPCCPartyInfoUpdate(L2ParamStack&);
	virtual void OnExNeedToChangeName(L2ParamStack&);
	virtual void OnExPCCafePoINTInfo(L2ParamStack&);
	virtual void OnExSetCompassZoneCode(L2ParamStack&);
	virtual void OnExGetBossRecord(L2ParamStack&);
	virtual void OnExShowAdventurerGuideBook(L2ParamStack&);
	virtual void OnExShowScreenMessage(L2ParamStack&);
	virtual void OnExAskJoinPartyRoom(L2ParamStack&);
	virtual void OnExListPartyMatchingWaitingRoomStart(L2ParamStack&);
	virtual void OnExListPartyMatchingWaitingRoom(L2ParamStack&);
	virtual void OnExSetMpccRouting(L2ParamStack&);
	virtual void OnRedSky(INT);
	virtual void OnCursedWeaponList(TArray<INT>*);
	virtual void OnCursedWeaponLocation(TArray<INT>*, TArray<INT>*, class TArray<FVector>*);
	virtual void OnPlayAnimation(APawn*, INT, unsigned char, FName);
	virtual void OnDuelAskStart(L2ParamStack&);
	virtual void OnDuelReady(L2ParamStack&);
	virtual void OnDuelStart(L2ParamStack&);
	virtual void OnDuelEnd(L2ParamStack&);
	virtual void OnDuelUpdateUserInfo(L2ParamStack&);
	virtual void OnDuelEnemyRelation(L2ParamStack&);

	FString InitSpecial(const TCHAR*);
	ULevel* LoadLevel(INT, INT);
	ULevel* LoadMapThread(INT, INT);
	SEAMLESS_RESULT AdjustTerrain(FVector);
	FLOAT GetAverageDeltaSeconds();
	UBOOL CheckForRogues();
	INT EventLoadSWMap(INT, INT);
	INT FinishLoadMap();
	INT FinishLoadSWMap();
	INT FinishLoadTeleportMap(ULevel*);
	INT IsLimitContentForYoungUsers();
	INT LoadSWMap(FLOAT, FLOAT, FLOAT);
	INT LoadTeleportMap(INT, INT);
	INT PackageRevisionLevel();
	UBOOL ValidatePackage(const TCHAR* GUID, const TCHAR* MD5);
	void AddMD5(const TCHAR*, const TCHAR*, INT);
	void AdjustPawnLocation(APawn*, FVector);
	void AttachLevel(ULevel*, ULevel*, FVector*);
	void AuthorizeClient(ULevel* Level);
	void CheckPurgeLevel(FVector, INT);
	void DefaultMD5();
	void DetachLevel(ULevel*, INT, INT);
	void DetachLevelWithAllSubLevel(ULevel*);
	void EndLoadSWLevel(ULevel*);
	void FadeUpdate(FLOAT);
	void FindMouseTargetObject(UViewport*, class FCameraSceneNode*);
	void FinishRemain();
	void FixUpLevel();
	void GetSWMapXY(FVector, INT&, INT&);
	void GetSWMapXY(INT, INT, INT&, INT&);
	void InitClick();
	void L2CollectGarbage(DWORD);
	void L2EventTrigger(INT, INT);
	void L2PurgeGarbage();
	void L2SerializeRootSet(FArchive&, DWORD, DWORD);
	void L2ThrCollectGarbage(DWORD);
	void L2_Teleport(AActor*, FVector, INT, INT, INT);
	void ModifyGlobalClippingRange(FLOAT);
	void OnAddVIPItemList(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT);
	void OnAddVIPNeedItemList(INT, INT, INT, INT, INT, INT, INT, INT);
	void OnColosseumFenceTest(FVector, INT, INT, ColosseumFenceState);
	void OnGameGuardQuery(DWORD, DWORD, DWORD, DWORD, INT);
	void OnSetSummonRemaINTime(INT, INT);
	void OnSetVIPShopID(INT);
	void OnSpawnPc(INT);
	void OnVIPItemListEnd();
	void RenderCameraEffect(FCameraSceneNode*);
	void SaveMD5Database();
	void ScreenFadeBlink(FLOAT, FColor, FLOAT, FLOAT);
	void ScreenFadeDone(INT, INT);
	void ScreenFadeIn(FLOAT, INT);
	void ScreenFadeOut(FLOAT, FColor, INT);
	void ServerUpdateMD5();
	void SetLastDeltaSeconds(FLOAT);
	void StartCommandMacro(TCHAR*);
	void TickCommandMacro(FLOAT);
};

/*-----------------------------------------------------------------------------
	The End.
-----------------------------------------------------------------------------*/


