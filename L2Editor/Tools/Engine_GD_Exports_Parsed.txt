Classes:
	AAIController
	AAIMarker
	AAIScript
	AActor
	AAirEmitter
	AAirShip
	AAirVolume
	AAmbientEventActor
	AAmbientSound
	AAmbientVolume
	AAmmo
	AAmmunition
	AAntiPortalActor
	AAutoDoor
	AAutoLadder
	AAvoidMarker
	ABlockingVolume
	ABrush
	ACamera
	ACameraControlPawn
	ACameraEffectInfo
	ACameraVolume
	ACarriedObject
	AClipMarker
	AController
	ACustomizableStaticMeshActor
	ADamageType
	ADecoVolumeObject
	ADecoration
	ADecorationList
	ADefaultPhysicsVolume
	ADoor
	ADynamicLight
	AEmitter
	AEmitterLight
	AEnvCreatureManagerInfo
	AFileLog
	AFluidSurfaceInfo
	AFluidSurfaceOscillator
	AGameInfo
	AGameReplicationInfo
	AGameStats
	AHUD
	AInfo
	AInspector
	AInternetInfo
	AInterpolationPoint
	AInventory
	AInventoryAttachment
	AInventorySpot
	AJumpDest
	AJumpPad
	AKActor
	AKBSJoint
	AKCarWheelJoint
	AKConeLimit
	AKConstraint
	AKHinge
	AKTire
	AKVehicle
	AKeypoint
	AL2Alarm
	AL2CenterdDiamond
	AL2Dice
	AL2Float
	AL2Indicator
	AL2MovableStaticMeshActor
	AL2NMover
	AL2Pickup
	AL2Radar
	AL2SeamlessInfo
	ALadder
	ALadderVolume
	ALevelInfo
	ALiftCenter
	ALiftExit
	ALight
	ALineOfSightTrigger
	ALineagePlayerController
	ALocationInfo
	ALookTarget
	AMarkProjector
	AMatDemoActor
	AMovableStaticMeshActor
	AMover
	AMusicVolume
	AMutator
	ANAgathion
	ANCubics
	ANMoon
	ANMovableSunLight
	ANProjectile
	ANSkillProjectile
	ANSun
	ANavigationPoint
	ANote
	ANpcPosInfo
	AParticleProjector
	APathNode
	APawn
	APhysicsVolume
	APickup
	APlayerController
	APlayerReplicationInfo
	APlayerStart
	APolyMarker
	APotentialClimbWatcher
	APowerups
	AProjectedEmitter
	AProjectile
	AProjector
	AReplicationInfo
	ASavedMove
	ASceneManager
	AScout
	ASecurity
	AServerBlockingVolume
	AServerPrimitive
	AShadowProjector
	AShuttle
	AShuttleDoor
	AShuttleWall
	ASkyMeshActor
	ASkyRenderInfo
	ASkyZoneInfo
	ASmallNavigationPoint
	ASpawnableStaticMeshActor
	ASpawnedLight
	AStatLog
	AStatLogFile
	AStaticMeshActor
	AStationaryWeapons
	ASuperPointInfo
	ATeamInfo
	ATeleporter
	ATerrainInfo
	ATerritoryInfo
	ATrigger
	ATriggers
	AVehicle
	AVehicleMeshPart
	AVehiclePart
	AVehicleRoutePoint
	AVehicleServerPart
	AViewportWindowController
	AVolume
	AWarpZoneInfo
	AWarpZoneMarker
	AWaterHitEmitter
	AWeapon
	AWeaponAttachment
	AZoneInfo
	ActorFunc
	AutoClock
	BR_EventManager
	BR_GrpExchanger
	CAtmosphere
	CSceneManager
	CSun
	FActorSceneNode
	FAnywhereNpcMaker
	FAuxRenderTarget
	FBezierContPoint
	FBoneAdditionalEffect
	FCameraSceneNode
	FCanvasConsoleUtil
	FCanvasUtil
	FCommandMacro
	FConsoleMessage
	FDecoInfo
	FDecorationLayer
	FDepthOfField
	FDynamicActor
	FDynamicLight
	FEffectPawnLightParam
	FEngineStats
	FFlashData
	FGPUSkinVertexStream
	FHitCause
	FKeyValuePair
	FL2AdditionalEffectData
	FL2AlterAbnormalStatusManager
	FL2AlterSkillData
	FL2ArmorItemData
	FL2CharData
	FL2EnterEventData
	FL2EtcItemData
	FL2ExceptionMinimapData
	FL2GameData
	FL2MagicSkillData
	FL2NpcData
	FL2NpcSkillAnimData
	FL2PawnAnimContainer
	FL2PawnAnimData
	FL2PostEffectData
	FL2QuestMarkConditionData
	FL2ReplayManager
	FL2RideData
	FL2ScenePlayerData
	FL2ShuttleData
	FL2SkillSoundData
	FL2SkillSoundSourceData
	FL2StatisticData
	FL2TextAlignParser
	FL2VariationEffectData
	FL2VehiclePartsData
	FL2WeaponEnchantEffectData
	FL2WeaponItemData
	FLandMark
	FLevelSceneNode
	FLineBatcher
	FMaterialStageProperty
	FMatineeTools
	FMeshComponentData
	FMusicInfo
	FMusicItem
	FNCollisionInfo
	FNIllusionParam
	FNMagicInfo
	FNPawnLight
	FNPrimeActionParam
	FNetworkNotify
	FNpcItem
	FONTID
	FOutBunch
	FParser
	FPathBuilder
	FPcItem
	FPixelShaderFunction
	FPlayerResponseLine
	FPlayerSceneNode
	FPointRegion
	FPoly
	FProjectedRegionEffect
	FRawIndexBuffer
	FRebuildOptions
	FRebuildTools
	FRenderResource
	FRibbonPoint
	FSceneNode
	FScreenItem
	FServerResponseLine
	FShaderCache
	FShaderCode
	FShaderFunction
	FShaderProperty
	FSheathingInfo
	FSkinVertexStream
	FSkyParameter
	FSoundData
	FStaticMeshDecorationLayerData
	FStaticMeshSection
	FStats
	FTerrainMaterialLayer
	FTerrainTools
	FURL
	FVehiclePartInfo
	FVertexShaderFunction
	FWaveModInfo
	FWorldBuilder
	FZoneStateFog
	FontDrawInfo
	FontDrawInfoSection
	FontProperty
	HHitProxy
	HavokInterface
	L224HzController
	L224HzData
	L2EventManager
	L2VideoRecoder
	L2WeatherManager
	ServerInfoData
	ServerManager
	ServerTextureNameManager
	ThaiCharUtil
	UActionMoveCamera
	UActionPause
	UActionWarp
	UAmbientSoundObject
	UAmbientVolumeSound
	UAnimNotify
	UAnimNotify_AttackDamage
	UAnimNotify_AttackItem
	UAnimNotify_AttackPreShot
	UAnimNotify_AttackShot
	UAnimNotify_AttackVoice
	UAnimNotify_BoneScale
	UAnimNotify_CameraLocation
	UAnimNotify_Channeling
	UAnimNotify_DestroyEffect
	UAnimNotify_Effect
	UAnimNotify_IdleSound
	UAnimNotify_Illusion
	UAnimNotify_JumpDown
	UAnimNotify_JumpUp
	UAnimNotify_LaunchAccumulativeBeam
	UAnimNotify_Light
	UAnimNotify_MatSubAction
	UAnimNotify_PostEffect
	UAnimNotify_RandomSound
	UAnimNotify_ScreenFade
	UAnimNotify_Script
	UAnimNotify_Scripted
	UAnimNotify_SendCommandLine
	UAnimNotify_Sheathe
	UAnimNotify_Sound
	UAnimNotify_SwimSound
	UAnimNotify_ViewShake
	UAudioSubsystem
	UBaseGUIController
	UBeamEmitter
	UBitmapMaterial
	UBumpShader
	UCanvas
	UCheatManager
	UClient
	UColorMask
	UColorModifier
	UColorVariationMaterial
	UColorWheel
	UCombiner
	UComplementModifier
	UConsole
	UConstantColor
	UConstantMaterial
	UConvexVolume
	UCubemap
	UCustomMakedMaterial
	UDamageTextManager
	UDecoration
	UDepthEffect
	UDownload
	UEditorColorEffect
	UEngine
	UExtraMeshData
	UFadeColor
	UFinalBlend
	UFlashSubsystem
	UFont
	UFontManager
	UGFxFlash
	UGameEngine
	UGlowModifier
	UI3DL2Listener
	UIndexBuffer
	UInput
	UInteraction
	UInteractionMaster
	UInteractions
	UKMeshProps
	UKarmaParams
	UKarmaParamsCollision
	UKarmaParamsRBFull
	UKarmaParamsSkel
	UL2ColorModifier
	UL2ConsoleWnd
	UL2EffectEmitter
	UL2Font
	UL2NEnvLight
	UL2NEnvManager
	UL2NTimeLight
	UL2SceneInfo
	UL2SceneItem
	UL2SkillEffect
	ULevel
	ULevelObject
	ULevelSummary
	ULodMesh
	ULodMeshInstance
	UMaskTexture
	UMasterLevel
	UMatAction
	UMatObject
	UMatSubAction
	UMaterial
	UMaterialSequence
	UMaterialSwitch
	UMesh
	UMeshAnimation
	UMeshComponent
	UMeshContainer
	UMeshEmitter
	UMeshInstance
	UMeshObject
	UModel
	UModifier
	UNetConnection
	UNetDriver
	UNetworkHandler
	UOpacityModifier
	UPalette
	UParticleEmitter
	UParticleMaterial
	UPawnAliasMgr
	UPawnSheathingMgr
	UPlayer
	UPlayerInput
	UPolys
	UPostEffEnvManager
	UPrimitive
	UProjectorMaterial
	UProxyBitmapMaterial
	UReachSpec
	URealtimeGenerationTexture
	URenderDevice
	URenderedMaterial
	URibbonEmitter
	USSAOEffect
	UScriptedTexture
	UShader
	UShadowBitmapMaterial
	USimulationCollision
	USimulationCylinderCollision
	USimulationData
	USimulationMesh
	USimulationMeshInstance
	USimulationNotify
	USimulationSphereCollision
	USimulationSpringConstraint
	USkeletalMesh
	USkeletalMeshInstance
	USound
	USparkEmitter
	USpriteEmitter
	UStaticMesh
	USubActionCameraShake
	USubActionFOV
	USubActionFade
	USubActionGameSpeed
	USubActionOrientation
	USubActionSceneSpeed
	USubActionTrigger
	UTerrainMaterial
	UTerrainSector
	UTexCoordSource
	UTexEnvMap
	UTexMatrix
	UTexModifier
	UTexOscillator
	UTexOscillatorTriggered
	UTexPanner
	UTexPannerTriggered
	UTexRotator
	UTexScaler
	UTexture
	UTrailEmitter
	UUnderWaterShader
	UUserDefinableMaterial
	UVertMesh
	UVertMeshEmitter
	UVertMeshInstance
	UVertexBuffer
	UVertexColor
	UViewport
	UWaterMaterial
	User

Interfaces:
AAIController
	public: AAIController();
	public: AAIController(AAIController const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AcceptNearbyPath(AActor*);
	public: virtual void AdjustFromWall(FVector const&,AActor*);
	public: virtual void SetAdjustLocation(FVector const&);
	public: virtual ~AAIController();
	public: void eventGetDestination(APawn*);
	public: void eventGetSlaveDestination(APawn*);
	public: void eventOwnerPossess(APawn*);
	public: void execPollWaitToSeeEnemy(struct FFrame&,void* const);
	public: void execWaitToSeeEnemy(struct FFrame&,void* const);
AAIMarker
	public: AAIMarker();
	public: AAIMarker(AAIMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual ~AAIMarker();
AAIScript
	public: AAIScript();
	public: AAIScript(AAIScript const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual void ClearMarker();
	public: virtual ~AAIScript();
AActor
	public: AActor();
	public: AActor(AActor const&);
	public: AActor* GetAmbientLightingActor();
	public: AActor* GetHitActor();
	public: AActor* GetTopOwner();
	public: AActor* eventSpecialHandling(APawn*);
	public: DWORD eventEncroachingOn(AActor*);
	public: DWORD eventKUpdateState(struct _FKRigidBodyState&);
	public: DWORD eventPreTeleport(ATeleporter*);
	public: FCoords GetBoneCoordsWithBoneIndex(INT);
	public: FDynamicActor* GetActorRenderData();
	public: FDynamicActor* GetFinalActorRenderData();
	public: FLOAT GetClippingRange()const;
	public: FLOAT LifeFraction();
	public: FRotator GetViewRotation();
	public: FVector GetCylinderExtent();
	public: FVector SuggestFallVelocity(FVector const&,FVector const&,FLOAT,FLOAT,FLOAT,FLOAT);
	public: INT AttachToAdditionalSkeletalBone(AActor*,FName const&,USkeletalMeshInstance*,INT);
	public: INT AttachToBone(AActor*,FName,INT);
	public: INT AttachToBone(AActor*,INT,INT);
	public: INT DetachFromBone(AActor*);
	public: INT GetSpelledNEffectActorCnt()const;
	public: INT HasBoneName(FName);
	public: INT IsAnimating(INT);
	public: INT IsBasedOn(AActor const*)const;
	public: INT IsBlockedBy(AActor const*)const;
	public: INT IsBrush()const;
	public: INT IsEncroacher()const;
	public: INT IsHiddenEd();
	public: INT IsInOctree();
	public: INT IsInZone(AZoneInfo const*)const;
	public: INT IsJoinedTo(AActor const*)const;
	public: INT IsMovingBrush()const;
	public: INT IsOverlapping(AActor*,struct FCheckResult*);
	public: INT IsOwnedBy(AActor const*)const;
	public: INT IsStaticBrush()const;
	public: INT IsVolumeBrush()const;
	public: INT TestCanSeeMe(APlayerController*);
	public: INT fixedTurn(INT,INT,INT);
	public: INT moveSmooth(FVector const&);
	public: ULevel* GetLevel()const;
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char GetActorViewType()const;
	public: unsigned char GetDespawningAlpha();
	public: unsigned char GetSpawningAlpha();
	public: virtual AActor* AssociatedLevelGeometry();
	public: virtual AActor* GetProjectorBase();
	public: virtual AEmitter* GetEmitter();
	public: virtual ALight* GetLight();
	public: virtual APawn* GetPawn();
	public: virtual APawn* GetPlayerPawn()const;
	public: virtual APlayerController* GetTopPlayerController();
	public: virtual FCoords ToLocal()const;
	public: virtual FCoords ToWorld()const;
	public: virtual FDynamicLight* GetLightRenderData();
	public: virtual FLOAT GetAmbientVolume(FLOAT);
	public: virtual FLOAT GetDamageDist();
	public: virtual FLOAT GetNetPriority(AActor*,FLOAT,FLOAT);
	public: virtual FLOAT WorldLightRadius()const;
	public: virtual FMatrix BillBoardLocalToWorld(FRotator)const;
	public: virtual FMatrix CollisionToWorld();
	public: virtual FMatrix ConvertOrthMatrix(FMatrix,INT);
	public: virtual FMatrix LocalToWorld()const;
	public: virtual FMatrix WorldToLocal()const;
	public: virtual FName GetCapeBoneName();
	public: virtual FName GetHeadBoneName();
	public: virtual FName GetL2MovementEventName();
	public: virtual FName GetL2MovementTagName(INT);
	public: virtual FName GetLArmBoneName();
	public: virtual FName GetLHandBoneName();
	public: virtual FName GetLowbodyBoneName();
	public: virtual FName GetRArmBoneName();
	public: virtual FName GetRHandBoneName();
	public: virtual FName GetRootBoneName();
	public: virtual FName GetSecondHeadBoneName();
	public: virtual FName GetSpineBoneName();
	public: virtual FName GetWingBoneName();
	public: virtual FRotator FindSlopeRotation(FVector const&,FRotator);
	public: virtual FVector GetCollisionLocation();
	public: virtual FVector GetTrailerPrePivot();
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT CanBeAttacked();
	public: virtual INT CanBeTold();
	public: virtual INT CheckAnimFinished(INT);
	public: virtual INT CheckOwnerUpdated();
	public: virtual INT ClearBeastLightmapTexture(INT);
	public: virtual INT DestroyBeastLightmapTextures();
	public: virtual INT HasAssociatedLevelGeometry(AActor*);
	public: virtual INT HasSecondHeadBone();
	public: virtual INT IsAAmbientSound();
	public: virtual INT IsABrush();
	public: virtual INT IsAEmitter();
	public: virtual INT IsALight();
	public: virtual INT IsAMover();
	public: virtual INT IsAPawn();
	public: virtual INT IsAPlayerController();
	public: virtual INT IsAProjectile()const;
	public: virtual INT IsAVolume();
	public: virtual INT IsBroadcastObserverModeActor();
	public: virtual INT IsDamageAct();
	public: virtual INT IsLoaded();
	public: virtual INT IsModifiedTexture();
	public: virtual INT IsNeedTick();
	public: virtual INT IsNetRelevantFor(APlayerController*,AActor*,FVector const&);
	public: virtual INT IsObserverModeActor();
	public: virtual INT IsPendingKill();
	public: virtual INT IsPlayer();
	public: virtual INT IsRendered();
	public: virtual INT IsSameAnim();
	public: virtual INT IsSpineRotation();
	public: virtual INT PlayerControlled();
	public: virtual INT PostLoadProcess();
	public: virtual INT ProcessRemoteFunction(UFunction*,void*,struct FFrame*);
	public: virtual INT ShouldTickInEntry();
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual INT ShrinkCollision(AActor*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual UMaterial* GetCloakSkin(INT);
	public: virtual UMaterial* GetLeftArmSkin(INT);
	public: virtual UMaterial* GetLeftHandSkin(INT);
	public: virtual UMaterial* GetRightArmSkin(INT);
	public: virtual UMaterial* GetRightHandSkin(INT);
	public: virtual UMaterial* GetSkin(INT);
	public: virtual UMaterial* GetSubSkin(INT);
	public: virtual UMesh* GetCloakCoverMesh();
	public: virtual UMesh* GetCloakMesh();
	public: virtual UMesh* GetLeftArmMesh();
	public: virtual UMesh* GetLeftHandMesh();
	public: virtual UMesh* GetMesh();
	public: virtual UMesh* GetRightArmMesh();
	public: virtual UMesh* GetRightHandMesh();
	public: virtual UMesh* GetSubMesh(INT);
	public: virtual UMeshContainer* GetMeshContainer();
	public: virtual UMeshContainer* GetMeshContainer(bool);
	public: virtual UMeshInstance* GetCloakCoverMeshInstance();
	public: virtual UMeshInstance* GetCloakMeshInstance();
	public: virtual UMeshInstance* GetLeftArmMeshInstance();
	public: virtual UMeshInstance* GetLeftHandMeshInstance();
	public: virtual UMeshInstance* GetMeshInstance();
	public: virtual UMeshInstance* GetRightArmMeshInstance();
	public: virtual UMeshInstance* GetRightHandMeshInstance();
	public: virtual UMeshInstance* GetSubMeshInstance(INT);
	public: virtual UModifier* GetModifiedTextureMaterial();
	public: virtual UPrimitive* GetPrimitive();
	public: virtual USound* GetAttackItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetAttackVoiceSound(FLOAT);
	public: virtual USound* GetDamageSound(FLOAT&,FLOAT&);
	public: virtual USound* GetDefenseItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetShieldItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetStepSoundData();
	public: virtual struct FNMagicInfo* GetMagicInfo();
	public: virtual void AssociateAttackedNotify(APawn*,AActor*,INT,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void AttachL2MovementActor(AActor*);
	public: virtual void Attacked();
	public: virtual void AttackedNotify(APawn*,AActor*,INT,INT,INT);
	public: virtual void BoundProjectileVelocity();
	public: virtual void CheckForErrors();
	public: virtual void CheckSameAnim();
	public: virtual void ClearAlphaTexModifier();
	public: virtual void ClearL2Game();
	public: virtual void ClearMarker();
	public: virtual void ClearTexModifier();
	public: virtual void CreateSkin(FRenderInterface*);
	public: virtual void Destroy();
	public: virtual void FindBase();
	public: virtual void GainedChild(AActor*);
	public: virtual void GetTargetLocation(FVector const&,FVector&);
	public: virtual void InitExecution();
	public: virtual void InitMovement();
	public: virtual void L2EventCastleEffectShow();
	public: virtual void L2EventPlay(INT);
	public: virtual void L2EventShow(INT);
	public: virtual void L2Touch(AActor*);
	public: virtual void LostChild(AActor*);
	public: virtual void NetDirty(UProperty*);
	public: virtual void NotifyAnimEnd(INT);
	public: virtual void NotifyBump(AActor*);
	public: virtual void OnGetMouseFocus();
	public: virtual void OnLostMouseFocus();
	public: virtual void PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: virtual void PostBeginPlay();
	public: virtual void PostEditChange();
	public: virtual void PostEditLoad();
	public: virtual void PostEditMove();
	public: virtual void PostLoad();
	public: virtual void PostNetReceive();
	public: virtual void PostNetReceiveLocation();
	public: virtual void PostPath();
	public: virtual void PostRaytrace();
	public: virtual void PostRender();
	public: virtual void PostScriptDestroyed();
	public: virtual void PreNetReceive();
	public: virtual void PrePath();
	public: virtual void PreRaytrace();
	public: virtual void ProcessEvent(UFunction*,void*,void*);
	public: virtual void ProcessState(FLOAT);
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetActorViewType(enum EActorViewType,INT,unsigned char);
	public: virtual void SetAddTexModifier(FColor);
	public: virtual void SetAddTexModifier(unsigned char,unsigned char,unsigned char);
	public: virtual void SetAlphaTexModifier(unsigned char,INT);
	public: virtual void SetBase(AActor*,FVector,INT);
	public: virtual void SetCapeBoneName(FName);
	public: virtual void SetChangeColorTexModifier(unsigned char,unsigned char,unsigned char);
	public: virtual void SetCloakCoverMesh(UMesh*);
	public: virtual void SetCloakMesh(UMesh*);
	public: virtual void SetExAlphaTexModifier(unsigned char);
	public: virtual void SetHeadBoneName(FName);
	public: virtual void SetLArmBoneName(FName);
	public: virtual void SetLHandBoneName(FName);
	public: virtual void SetLeftArmMesh(UMesh*);
	public: virtual void SetLeftHandMesh(UMesh*);
	public: virtual void SetLowbodyBoneName(FName);
	public: virtual void SetMeshContainer(UMeshContainer*);
	public: virtual void SetMeshes(INT,FName,INT);
	public: virtual void SetOverlayDependAlphaTexModifier(unsigned char,unsigned char,unsigned char);
	public: virtual void SetOverlayTexModifier(unsigned char,unsigned char,unsigned char,unsigned char);
	public: virtual void SetRArmBoneName(FName);
	public: virtual void SetRHandBoneName(FName);
	public: virtual void SetRightArmMesh(UMesh*);
	public: virtual void SetRightHandMesh(UMesh*);
	public: virtual void SetSpineBoneName(FName);
	public: virtual void SetStaticMeshActorViewType(INT);
	public: virtual void SetSubMesh(INT,UMesh*);
	public: virtual void SetSubtractTexModifier(unsigned char,unsigned char,unsigned char);
	public: virtual void SetTexes(INT,FName,INT);
	public: virtual void SetVolumes();
	public: virtual void SetWingBoneName(FName);
	public: virtual void SetZone(INT,INT);
	public: virtual void SmoothHitWall(FVector,AActor*);
	public: virtual void Spawned();
	public: virtual void StartAnimPoll();
	public: virtual void TickAuthoritative(FLOAT);
	public: virtual void TickSimulated(FLOAT);
	public: virtual void TickSpecial(FLOAT);
	public: virtual void TickViewType(FLOAT);
	public: virtual void UpdateAnimation(FLOAT);
	public: virtual void UpdateRenderData();
	public: virtual void performPhysics(FLOAT);
	public: virtual void physFalling(FLOAT,INT);
	public: virtual void physL2Movement(FLOAT,INT);
	public: virtual void processHitWall(FVector,AActor*);
	public: virtual void processLanded(FVector,AActor*,FLOAT,INT);
	public: virtual void setPhysics(unsigned char,AActor*,FVector);
	public: virtual void stepUp(FVector const&,FVector const&,FVector,struct FCheckResult&);
	public: virtual ~AActor();
	public: void ActorSetTimer(FLOAT,INT);
	public: void AddSpelledNEffectActor(AActor*);
	public: void AttachProjector(AProjector*);
	public: void BeginTouch(AActor*);
	public: void CheckNoiseHearing(FLOAT);
	public: void ClearColorScaleFactor();
	public: void ClearRenderData();
	public: void ClearViewtype();
	public: void CompactAttached();
	public: void CreateMeshContainer();
	public: void DestroyMover();
	public: void DetachProjector(AProjector*);
	public: void EndTouch(AActor*,INT);
	public: void GetNetBuoyancy(FLOAT&,FLOAT&);
	public: void PlayReplicatedAnim();
	public: void ProcessDemoRecFunction(UFunction*,void*,struct FFrame*);
	public: void RemoveSpelledNEffectActor(AActor*);
	public: void ReplicateAnim(INT,FName,FLOAT,FLOAT,FLOAT,FLOAT,INT);
	public: void SetActorShadertype(enum EActorEffectType);
	public: void SetCollision(INT,INT,INT);
	public: void SetCollisionSize(FLOAT,FLOAT);
	public: void SetColorScaleFactor(unsigned char,unsigned char,unsigned char);
	public: void SetDrawScale(FLOAT);
	public: void SetDrawScale3D(FVector const&);
	public: void SetDrawType(enum EDrawType);
	public: void SetOverlayColor(unsigned char,unsigned char,unsigned char,unsigned char);
	public: void SetOwner(AActor*);
	public: void SetStaticMesh(UStaticMesh*);
	public: void TwoWallAdjust(FVector const&,FVector&,FVector&,FVector&,FLOAT);
	public: void UpdateFirstMeshComponent(struct FMeshComponentData&);
	public: void UpdateFirstMeshComponentByEditor(struct FMeshComponentData&,UMesh*);
	public: void UpdateOverlay(FLOAT);
	public: void UpdateRelativeRotation();
	public: void UpdateTimers(FLOAT);
	public: void eventAnimEnd(INT);
	public: void eventAttach(AActor*);
	public: void eventBaseChange();
	public: void eventBeginEvent();
	public: void eventBeginPlay();
	public: void eventBroadcastLocalizedMessage(UClass*,INT,APlayerReplicationInfo*,APlayerReplicationInfo*,UObject*);
	public: void eventBump(AActor*);
	public: void eventClearL2Game();
	public: void eventDemoPlaySound(USound*,unsigned char,FLOAT,DWORD,FLOAT,FLOAT,DWORD);
	public: void eventDestroyed();
	public: void eventDetach(AActor*);
	public: void eventEncroachedBy(AActor*);
	public: void eventEndEvent();
	public: void eventEndedRotation();
	public: void eventFalling();
	public: void eventFellOutOfWorld(unsigned char);
	public: void eventFinishedInterpolation();
	public: void eventGainedChild(AActor*);
	public: void eventGetEffTargetLocation(FVector&);
	public: void eventHitWall(FVector,AActor*);
	public: void eventKApplyForce(FVector&,FVector&);
	public: void eventKImpact(AActor*,FVector,FVector,FVector);
	public: void eventKSkelConvulse();
	public: void eventKVelDropBelow();
	public: void eventKilledBy(APawn*);
	public: void eventL2GameActionNotify(unsigned char);
	public: void eventLanded(FVector);
	public: void eventLostChild(AActor*);
	public: void eventNextSceneEvent(FName,FName,DWORD);
	public: void eventPhysicsVolumeChange(APhysicsVolume*);
	public: void eventPostBeginPlay();
	public: void eventPostNetBeginPlay();
	public: void eventPostNetReceive();
	public: void eventPostSetPawnResource();
	public: void eventPostTeleport(ATeleporter*);
	public: void eventPostTouch(AActor*);
	public: void eventPreBeginPlay();
	public: void eventRenderTexture(UScriptedTexture*);
	public: void eventSetInitialState();
	public: void eventTakeDamage(INT,APawn*,FVector,FVector,UClass*);
	public: void eventTick(FLOAT);
	public: void eventTimer();
	public: void eventTornOff();
	public: void eventTouch(AActor*);
	public: void eventTravelPostAccept();
	public: void eventTravelPreAccept();
	public: void eventTrigger(AActor*,APawn*);
	public: void eventTriggerEvent(FName,AActor*,APawn*);
	public: void eventUnTouch(AActor*);
	public: void eventUnTrigger(AActor*,APawn*);
	public: void eventUsedBy(APawn*);
	public: void eventZoneChange(AZoneInfo*);
	public: void execAdd_ColorColor(struct FFrame&,void* const);
	public: void execAllActors(struct FFrame&,void* const);
	public: void execAnimBlendParams(struct FFrame&,void* const);
	public: void execAnimBlendToAlpha(struct FFrame&,void* const);
	public: void execAnimIsInGroup(struct FFrame&,void* const);
	public: void execAttachToBone(struct FFrame&,void* const);
	public: void execAttachToBoneWithIndex(struct FFrame&,void* const);
	public: void execAutonomousPhysics(struct FFrame&,void* const);
	public: void execBasedActors(struct FFrame&,void* const);
	public: void execBoneRefresh(struct FFrame&,void* const);
	public: void execChildActors(struct FFrame&,void* const);
	public: void execClock(struct FFrame&,void* const);
	public: void execCollidingActors(struct FFrame&,void* const);
	public: void execConsoleCommand(struct FFrame&,void* const);
	public: void execDebugClock(struct FFrame&,void* const);
	public: void execDebugUnclock(struct FFrame&,void* const);
	public: void execDemoPlaySound(struct FFrame&,void* const);
	public: void execDestroy(struct FFrame&,void* const);
	public: void execDetachFromBone(struct FFrame&,void* const);
	public: void execDrawDebugLine(struct FFrame&,void* const);
	public: void execDynamicActors(struct FFrame&,void* const);
	public: void execEnableChannelNotify(struct FFrame&,void* const);
	public: void execError(struct FFrame&,void* const);
	public: void execFastTrace(struct FFrame&,void* const);
	public: void execFinishAnim(struct FFrame&,void* const);
	public: void execFinishInterpolation(struct FFrame&,void* const);
	public: void execFreezeAnimAt(struct FFrame&,void* const);
	public: void execGetAnimParams(struct FFrame&,void* const);
	public: void execGetBoneCoords(struct FFrame&,void* const);
	public: void execGetBoneCoordsWithBoneIndex(struct FFrame&,void* const);
	public: void execGetBoneRotation(struct FFrame&,void* const);
	public: void execGetCacheEntry(struct FFrame&,void* const);
	public: void execGetMapName(struct FFrame&,void* const);
	public: void execGetMeshName(struct FFrame&,void* const);
	public: void execGetNextInt(struct FFrame&,void* const);
	public: void execGetNextIntDesc(struct FFrame&,void* const);
	public: void execGetNextSkin(struct FFrame&,void* const);
	public: void execGetNotifyChannel(struct FFrame&,void* const);
	public: void execGetRenderBoundingSphere(struct FFrame&,void* const);
	public: void execGetRootLocation(struct FFrame&,void* const);
	public: void execGetRootLocationDelta(struct FFrame&,void* const);
	public: void execGetRootRotation(struct FFrame&,void* const);
	public: void execGetRootRotationDelta(struct FFrame&,void* const);
	public: void execGetSoundDuration(struct FFrame&,void* const);
	public: void execGetURLMap(struct FFrame&,void* const);
	public: void execGetViewport(struct FFrame&,void* const);
	public: void execHasAnim(struct FFrame&,void* const);
	public: void execHasBoneName(struct FFrame&,void* const);
	public: void execIsAnimating(struct FFrame&,void* const);
	public: void execIsTweening(struct FFrame&,void* const);
	public: void execKAddBoneLifter(struct FFrame&,void* const);
	public: void execKAddImpulse(struct FFrame&,void* const);
	public: void execKDisableCollision(struct FFrame&,void* const);
	public: void execKDrawRigidBodyState(struct FFrame&,void* const);
	public: void execKEnableCollision(struct FFrame&,void* const);
	public: void execKFreezeRagdoll(struct FFrame&,void* const);
	public: void execKGetActorGravScale(struct FFrame&,void* const);
	public: void execKGetCOMOffset(struct FFrame&,void* const);
	public: void execKGetCOMPosition(struct FFrame&,void* const);
	public: void execKGetDampingProps(struct FFrame&,void* const);
	public: void execKGetFriction(struct FFrame&,void* const);
	public: void execKGetImpactThreshold(struct FFrame&,void* const);
	public: void execKGetInertiaTensor(struct FFrame&,void* const);
	public: void execKGetMass(struct FFrame&,void* const);
	public: void execKGetRBQuaternion(struct FFrame&,void* const);
	public: void execKGetRestitution(struct FFrame&,void* const);
	public: void execKGetRigidBodyState(struct FFrame&,void* const);
	public: void execKGetSkelMass(struct FFrame&,void* const);
	public: void execKIsAwake(struct FFrame&,void* const);
	public: void execKIsRagdollAvailable(struct FFrame&,void* const);
	public: void execKMakeRagdollAvailable(struct FFrame&,void* const);
	public: void execKRBVecFromVector(struct FFrame&,void* const);
	public: void execKRBVecToVector(struct FFrame&,void* const);
	public: void execKRemoveAllBoneLifters(struct FFrame&,void* const);
	public: void execKRemoveLifterFromBone(struct FFrame&,void* const);
	public: void execKSetActorGravScale(struct FFrame&,void* const);
	public: void execKSetBlockKarma(struct FFrame&,void* const);
	public: void execKSetCOMOffset(struct FFrame&,void* const);
	public: void execKSetDampingProps(struct FFrame&,void* const);
	public: void execKSetFriction(struct FFrame&,void* const);
	public: void execKSetImpactThreshold(struct FFrame&,void* const);
	public: void execKSetInertiaTensor(struct FFrame&,void* const);
	public: void execKSetMass(struct FFrame&,void* const);
	public: void execKSetRestitution(struct FFrame&,void* const);
	public: void execKSetSkelVel(struct FFrame&,void* const);
	public: void execKSetStayUpright(struct FFrame&,void* const);
	public: void execKWake(struct FFrame&,void* const);
	public: void execLinkMesh(struct FFrame&,void* const);
	public: void execLinkSkelAnim(struct FFrame&,void* const);
	public: void execLockRootMotion(struct FFrame&,void* const);
	public: void execLoopAnim(struct FFrame&,void* const);
	public: void execMakeNoise(struct FFrame&,void* const);
	public: void execMove(struct FFrame&,void* const);
	public: void execMoveCacheEntry(struct FFrame&,void* const);
	public: void execMoveSmooth(struct FFrame&,void* const);
	public: void execMultiply_ColorFloat(struct FFrame&,void* const);
	public: void execMultiply_FloatColor(struct FFrame&,void* const);
	public: void execNDestroy(struct FFrame&,void* const);
	public: void execOnlyAffectPawns(struct FFrame&,void* const);
	public: void execPlayAnim(struct FFrame&,void* const);
	public: void execPlayLoopSound(struct FFrame&,void* const);
	public: void execPlayMusic(struct FFrame&,void* const);
	public: void execPlayOwnedSound(struct FFrame&,void* const);
	public: void execPlaySound(struct FFrame&,void* const);
	public: void execPlaySoundOnVehicle(struct FFrame&,void* const);
	public: void execPlayerCanSeeMe(struct FFrame&,void* const);
	public: void execPollFinishAnim(struct FFrame&,void* const);
	public: void execPollFinishInterpolation(struct FFrame&,void* const);
	public: void execPollSleep(struct FFrame&,void* const);
	public: void execRadiusActors(struct FFrame&,void* const);
	public: void execSetActorViewType(struct FFrame&,void* const);
	public: void execSetAlphaTexModifier(struct FFrame&,void* const);
	public: void execSetAnimFrame(struct FFrame&,void* const);
	public: void execSetBase(struct FFrame&,void* const);
	public: void execSetBoneDirection(struct FFrame&,void* const);
	public: void execSetBoneLocation(struct FFrame&,void* const);
	public: void execSetBoneRotation(struct FFrame&,void* const);
	public: void execSetBoneScale(struct FFrame&,void* const);
	public: void execSetCollision(struct FFrame&,void* const);
	public: void execSetCollisionSize(struct FFrame&,void* const);
	public: void execSetDrawScale(struct FFrame&,void* const);
	public: void execSetDrawScale3D(struct FFrame&,void* const);
	public: void execSetDrawType(struct FFrame&,void* const);
	public: void execSetLocation(struct FFrame&,void* const);
	public: void execSetOwner(struct FFrame&,void* const);
	public: void execSetPhysics(struct FFrame&,void* const);
	public: void execSetRelativeLocation(struct FFrame&,void* const);
	public: void execSetRelativeRotation(struct FFrame&,void* const);
	public: void execSetRotation(struct FFrame&,void* const);
	public: void execSetStaticMesh(struct FFrame&,void* const);
	public: void execSetTimer(struct FFrame&,void* const);
	public: void execSleep(struct FFrame&,void* const);
	public: void execSpawn(struct FFrame&,void* const);
	public: void execStopAllMusic(struct FFrame&,void* const);
	public: void execStopAnimating(struct FFrame&,void* const);
	public: void execStopMusic(struct FFrame&,void* const);
	public: void execStopSound(struct FFrame&,void* const);
	public: void execSubtract_ColorColor(struct FFrame&,void* const);
	public: void execSuggestFallVelocity(struct FFrame&,void* const);
	public: void execTouchingActors(struct FFrame&,void* const);
	public: void execTrace(struct FFrame&,void* const);
	public: void execTraceActors(struct FFrame&,void* const);
	public: void execTweenAnim(struct FFrame&,void* const);
	public: void execUnClock(struct FFrame&,void* const);
	public: void execVisibleActors(struct FFrame&,void* const);
	public: void execVisibleCollidingActors(struct FFrame&,void* const);
	public: void physNMover(FLOAT,INT);
	public: void physNProjectile(FLOAT,INT);
	public: void physProjectile(FLOAT,INT);
	public: void physRootMotion(FLOAT);
	public: void physTrailer(FLOAT);
	public: void physicsRotation(FLOAT);
	wchar_t const* const `public: INT IsBasedOn(AActor const*)const '::`3'::__FUNC_NAME__;
	wchar_t const* const `public: INT IsJoinedTo(AActor const*)const '::`3'::__FUNC_NAME__;
	wchar_t const* const `public: unsigned char GetDespawningAlpha()'::`3'::__FUNC_NAME__;
	wchar_t const* const `public: unsigned char GetSpawningAlpha()'::`3'::__FUNC_NAME__;
	wchar_t const* const `public: void TwoWallAdjust(FVector const&,FVector&,FVector&,FVector&,FLOAT)'::`3'::__FUNC_NAME__;
AAirEmitter
	protected: AAirEmitter();
	public: AAirEmitter(AAirEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAirEmitter();
	public: void eventForceKill();
	public: void eventSetAirVolume(AAirVolume*);
AAirShip
	public: AAirShip();
	public: AAirShip(AAirShip const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsLoaded();
	public: virtual ~AAirShip();
AAirVolume
	protected: AAirVolume();
	public: AAirVolume(AAirVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAirVolume();
AAmbientEventActor
	public: AAmbientEventActor();
	public: AAmbientEventActor(AAmbientEventActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Destroy();
	public: virtual void L2EventPlay(INT);
	public: virtual ~AAmbientEventActor();
AAmbientSound
	public: AAmbientSound();
	public: AAmbientSound(AAmbientSound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetAmbientVolume(FLOAT);
	public: virtual INT IsAAmbientSound();
	public: virtual void Destroy();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~AAmbientSound();
AAmbientVolume
	public: AAmbientVolume();
	public: AAmbientVolume(AAmbientVolume const&);
	public: INT CheckPriority(INT)const;
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAmbientVolume();
AAmmo
	protected: AAmmo();
	public: AAmmo(AAmmo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAmmo();
AAmmunition
	public: AAmmunition();
	public: AAmmunition(AAmmunition const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AAmmunition();
AAntiPortalActor
	protected: AAntiPortalActor();
	public: AAntiPortalActor(AAntiPortalActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAntiPortalActor();
AAutoDoor
	protected: AAutoDoor();
	public: AAutoDoor(AAutoDoor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAutoDoor();
AAutoLadder
	public: AAutoLadder();
	public: AAutoLadder(AAutoLadder const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual ~AAutoLadder();
AAvoidMarker
	protected: AAvoidMarker();
	public: AAvoidMarker(AAvoidMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAvoidMarker();
ABlockingVolume
	public: ABlockingVolume();
	public: ABlockingVolume(ABlockingVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual ~ABlockingVolume();
ABrush
	public: ABrush();
	public: ABrush(ABrush const&);
	public: FCoords OldToLocal()const;
	public: FCoords OldToWorld()const;
	public: FLOAT BuildCoords(FModelCoords*,FModelCoords*);
	public: FLOAT OldBuildCoords(FModelCoords*,FModelCoords*);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FCoords ToLocal()const;
	public: virtual FCoords ToWorld()const;
	public: virtual INT IsABrush();
	public: virtual UPrimitive* GetPrimitive();
	public: virtual void CheckForErrors();
	public: virtual void CopyPosRotScaleFrom(ABrush*);
	public: virtual void InitPosRotScale();
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual ~ABrush();
	wchar_t const* const `public: FLOAT BuildCoords(FModelCoords*,FModelCoords*)'::`3'::__FUNC_NAME__;
	wchar_t const* const `public: FLOAT OldBuildCoords(FModelCoords*,FModelCoords*)'::`3'::__FUNC_NAME__;
	wchar_t const* const `public: virtual void CopyPosRotScaleFrom(ABrush*)'::`3'::__FUNC_NAME__;
ACamera
	public: ACamera();
	public: ACamera(ACamera const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~ACamera();
ACameraControlPawn
	public: ACameraControlPawn();
	public: ACameraControlPawn(ACameraControlPawn const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ACameraControlPawn();
	public: void SetCameraResource();
ACameraEffectInfo
	public: ACameraEffectInfo();
	public: ACameraEffectInfo(ACameraEffectInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~ACameraEffectInfo();
ACameraVolume
	public: ACameraVolume();
	public: ACameraVolume(ACameraVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: static void __cdecl RecoverDefaultCameraSetting(ALineagePlayerController*);
	public: virtual ~ACameraVolume();
	public: void UpdateCamera(ALineagePlayerController*);
ACarriedObject
	public: ACarriedObject();
	public: ACarriedObject(ACarriedObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~ACarriedObject();
AClipMarker
	protected: AClipMarker();
	public: AClipMarker(AClipMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AClipMarker();
AController
	public: AActor* FindPath(FVector const&,AActor*,INT);
	public: AActor* HandleSpecial(AActor*);
	public: AActor* SetPath(INT);
	public: AController();
	public: AController(AController const&);
	public: DWORD LineOfSightTo(AActor*,INT);
	public: DWORD SeePawn(APawn*,INT);
	public: DWORD eventAllowDetourTo(ANavigationPoINT*);
	public: DWORD eventNotifyBump(AActor*);
	public: DWORD eventNotifyHeadVolumeChange(APhysicsVolume*);
	public: DWORD eventNotifyHitWall(FVector,AActor*);
	public: DWORD eventNotifyLanded(FVector);
	public: DWORD eventNotifyPhysicsVolumeChange(APhysicsVolume*);
	public: FLOAT eventDesireability(APickup*);
	public: INT CanHear(FVector const&,FLOAT,AActor*);
	public: INT CanHearSound(FVector const&,AActor*,FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* GetSelectedActor();
	public: virtual AActor* GetViewTarget();
	public: virtual INT AcceptNearbyPath(AActor*);
	public: virtual INT CheckAnimFinished(INT);
	public: virtual INT GetSelectedCreatureID();
	public: virtual INT HitWallNotify(FVector const&,AActor*);
	public: virtual INT IsBroadcastObserverMode();
	public: virtual INT IsObserverMode();
	public: virtual INT LocalPlayerController();
	public: virtual INT StopAtLedge();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual INT WantsLedgeCheck();
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void AdjustFromWall(FVector const&,AActor*);
	public: virtual void CheckHearSound(AActor*,INT,USound*,FVector const&,FLOAT,INT);
	public: virtual void ResetMusicControll();
	public: virtual void SetAdjustLocation(FVector const&);
	public: virtual void SetBroadcastObserverMode(INT);
	public: virtual void SetSelectedActor(AActor*);
	public: virtual void SetSelectedCreatureID(INT const&);
	public: virtual void SetVehicleStatus(INT);
	public: virtual void StartAnimPoll();
	public: virtual void StopMove();
	public: virtual ~AController();
	public: void AddFlyTo(FVector const&,FVector const&,INT,INT,INT);
	public: void AddMoveTo(FVector const&,FVector const&);
	public: void AddMoveToward(FVector const&,AActor*,FLOAT);
	public: void CheckEnemyVisible();
	public: void CheckFears();
	public: void ClearL2NetCommand();
	public: void FlyTo(FVector const&,INT,AActor*,FLOAT,FLOAT);
	public: void L2NetCommand(INT);
	public: void MoveBackTo(FVector const&,AActor*,FLOAT);
	public: void MoveTo(FVector const&,AActor*,FLOAT,AActor*,FVector*);
	public: void MoveToNotRotation(FVector const&,AActor*,FLOAT);
	public: void MoveToward(AActor*,AActor*,FLOAT);
	public: void PendingL2NetCommand();
	public: void SetRouteCache(ANavigationPoINT*,FLOAT,FLOAT);
	public: void ShowSelf();
	public: void StopMoveToward();
	public: void StopMoveWithLocation(FVector const&);
	public: void eventAIHearSound(AActor*,INT,USound*,FVector,FVector,DWORD);
	public: void eventEnemyNotVisible();
	public: void eventHearNoise(FLOAT,AActor*);
	public: void eventLongFall();
	public: void eventMayFall();
	public: void eventMonitoredPawnAlert();
	public: void eventNotifyHitMover(FVector,AMover*);
	public: void eventNotifyJumpApex();
	public: void eventNotifyMissedJump();
	public: void eventPrepareForMove(ANavigationPoINT*,UReachSpec*);
	public: void eventSeeMonster(APawn*);
	public: void eventSeePlayer(APawn*);
	public: void eventSetupSpecialPathAbilities();
	public: void eventSoakStop(FString const&);
	public: void execAddController(struct FFrame&,void* const);
	public: void execCanSee(struct FFrame&,void* const);
	public: void execEAdjustJump(struct FFrame&,void* const);
	public: void execEndClimbLadder(struct FFrame&,void* const);
	public: void execFindBestInventoryPath(struct FFrame&,void* const);
	public: void execFindPathTo(struct FFrame&,void* const);
	public: void execFindPathToIntercept(struct FFrame&,void* const);
	public: void execFindPathToward(struct FFrame&,void* const);
	public: void execFindPathTowardNearest(struct FFrame&,void* const);
	public: void execFindRandomDest(struct FFrame&,void* const);
	public: void execFinishRotation(struct FFrame&,void* const);
	public: void execInLatentExecution(struct FFrame&,void* const);
	public: void execLineOfSightTo(struct FFrame&,void* const);
	public: void execMoveTo(struct FFrame&,void* const);
	public: void execMoveToward(struct FFrame&,void* const);
	public: void execPickAnyTarget(struct FFrame&,void* const);
	public: void execPickTarget(struct FFrame&,void* const);
	public: void execPickWallAdjust(struct FFrame&,void* const);
	public: void execPollFinishRotation(struct FFrame&,void* const);
	public: void execPollMoveTo(struct FFrame&,void* const);
	public: void execPollMoveToward(struct FFrame&,void* const);
	public: void execPollWaitForLanding(struct FFrame&,void* const);
	public: void execRemoveController(struct FFrame&,void* const);
	public: void execStopWaiting(struct FFrame&,void* const);
	public: void execWaitForLanding(struct FFrame&,void* const);
	public: void execactorReachable(struct FFrame&,void* const);
	public: void execpoINTReachable(struct FFrame&,void* const);
ACustomizableStaticMeshActor
	public: ACustomizableStaticMeshActor();
	public: ACustomizableStaticMeshActor(ACustomizableStaticMeshActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~ACustomizableStaticMeshActor();
ADamageType
	protected: ADamageType();
	public: ADamageType(ADamageType const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ADamageType();
ADecoVolumeObject
	protected: ADecoVolumeObject();
	public: ADecoVolumeObject(ADecoVolumeObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ADecoVolumeObject();
ADecoration
	public: ADecoration();
	public: ADecoration(ADecoration const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void processLanded(FVector,AActor*,FLOAT,INT);
	public: virtual ~ADecoration();
ADecorationList
	protected: ADecorationList();
	public: ADecorationList(ADecorationList const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ADecorationList();
ADefaultPhysicsVolume
	protected: ADefaultPhysicsVolume();
	public: ADefaultPhysicsVolume(ADefaultPhysicsVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ADefaultPhysicsVolume();
ADoor
	public: ADoor();
	public: ADoor(ADoor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* AssociatedLevelGeometry();
	public: virtual INT HasAssociatedLevelGeometry(AActor*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual void FindBase();
	public: virtual void InitForPathFinding();
	public: virtual void PostPath();
	public: virtual void PostaddReachSpecs(APawn*);
	public: virtual void PrePath();
	public: virtual ~ADoor();
ADynamicLight
	public: ADynamicLight();
	public: ADynamicLight(ADynamicLight const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~ADynamicLight();
AEmitter
	public: AEmitter();
	public: AEmitter(AEmitter const&);
	public: FLOAT GetParticleMaxLifeTimeRange();
	public: INT CheckFirstSpawnParticle();
	public: INT SpawnEmitterLight();
	public: INT SpawnEmitterQuake();
	public: bool CheckLifeTime(FLOAT);
	public: bool IsUpdateSkippableEmitter();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AEmitter* GetEmitter();
	public: virtual FVector GetTrailerPrePivot();
	public: virtual INT CheckForProjectors();
	public: virtual INT IsAEmitter();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void ClearL2Game();
	public: virtual void Destroy();
	public: virtual void Initialize();
	public: virtual void Kill();
	public: virtual void L2EventShow(INT);
	public: virtual void NotifyAnimEnd(INT);
	public: virtual void PostScriptDestroyed();
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void Spawned();
	public: virtual ~AEmitter();
	public: void AddTickEmitter(UParticleEmitter*);
	public: void AdjustLifeForce(FLOAT);
	public: void AdjustparticleLife(FLOAT);
	public: void CheckActiveDistance(UParticleEmitter*);
	public: void EmitterRotation(FLOAT);
	public: void PostUpdate(FLOAT);
	public: void RemoveTickEmitter(UParticleEmitter*);
	public: void SetDelayed(FLOAT,INT,INT);
	public: void SetDisabled(INT,INT,INT);
	public: void SetMaxParticles(FLOAT);
	public: void SetOffsetScale(FLOAT);
	public: void SetOpacity(FLOAT);
	public: void SetOpacityRatio(FLOAT);
	public: void SetParticleLifeTimeRange(FLOAT);
	public: void SetParticleMaxParticles(FLOAT);
	public: void SetSizeScale(FLOAT);
	public: void SetSpeedRate(FLOAT);
	public: void SetSpeedScale(FLOAT);
	public: void Update(FLOAT);
	public: void execKill(struct FFrame&,void* const);
	public: void execSetSizeScale(struct FFrame&,void* const);
AEmitterLight
	public: AEmitterLight();
	public: AEmitterLight(AEmitterLight const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FDynamicLight* GetLightRenderData();
	public: virtual ~AEmitterLight();
AEnvCreatureManagerInfo
	public: AEnvCreatureManagerInfo();
	public: AEnvCreatureManagerInfo(AEnvCreatureManagerInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void PostBeginPlay();
	public: virtual void PostScriptDestroyed();
	public: virtual void SetInit(INT,FVector,FName,FLOAT,FLOAT,INT);
	public: virtual ~AEnvCreatureManagerInfo();
AFileLog
	protected: AFileLog();
	public: AFileLog(AFileLog const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AFileLog();
	public: void execCloseLog(struct FFrame&,void* const);
	public: void execLogf(struct FFrame&,void* const);
	public: void execOpenLog(struct FFrame&,void* const);
AFluidSurfaceInfo
	protected: AFluidSurfaceInfo();
	public: AFluidSurfaceInfo(AFluidSurfaceInfo const&);
	public: FVector GetVertexPosLocal(INT,INT);
	public: FVector GetVertexPosWorld(INT,INT);
	public: INT GetClampedBitmap(INT,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual UPrimitive* GetPrimitive();
	public: virtual void Destroy();
	public: virtual void PostEditChange();
	public: virtual void PostEditMove();
	public: virtual void PostLoad();
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void Spawned();
	public: virtual ~AFluidSurfaceInfo();
	public: void FillIndexBuffer(void*);
	public: void FillVertexBuffer(void*);
	public: void GetNearestIndex(FVector const&,INT&,INT&);
	public: void Init();
	public: void Pling(FVector const&,FLOAT,FLOAT);
	public: void PlingVertex(INT,INT,FLOAT);
	public: void RebuildClampedBitmap();
	public: void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: void SetClampedBitmap(INT,INT,INT);
	public: void SimpleFillIndexBuffer(void*);
	public: void SimpleFillVertexBuffer(void*);
	public: void UpdateOscillatorList();
	public: void UpdateSimulation(FLOAT);
	public: void execPling(struct FFrame&,void* const);
AFluidSurfaceOscillator
	public: AFluidSurfaceOscillator();
	public: AFluidSurfaceOscillator(AFluidSurfaceOscillator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Destroy();
	public: virtual void PostEditChange();
	public: virtual ~AFluidSurfaceOscillator();
	public: void UpdateOscillation(FLOAT);
AGameInfo
	protected: AGameInfo();
	public: AGameInfo(AGameInfo const&);
	public: APlayerController* eventL2NetLogin(FString const&,FString const&,FString&);
	public: APlayerController* eventLogin(FString const&,FString const&,FString&);
	public: FString eventGetBeaconText();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AGameInfo();
	public: void eventAcceptInventory(APawn*);
	public: void eventBroadcast(AActor*,FString const&,FName);
	public: void eventBroadcastLocalized(AActor*,UClass*,INT,APlayerReplicationInfo*,APlayerReplicationInfo*,UObject*);
	public: void eventDetailChange();
	public: void eventGameEnding();
	public: void eventInitGame(FString const&,FString&);
	public: void eventL2NetPostLogin(APlayerController*);
	public: void eventPostLogin(APlayerController*);
	public: void eventPreLogin(FString const&,FString const&,FString&,FString&);
	public: void eventSpawnDefaultPlayerPawn(AController*);
	public: void eventSpawnPlayerPawn(AController*,FString const&,FVector,FRotator);
	public: void execGetNetworkNumber(struct FFrame&,void* const);
	public: void execParseKillMessage(struct FFrame&,void* const);
AGameReplicationInfo
	public: AGameReplicationInfo();
	public: AGameReplicationInfo(AGameReplicationInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AGameReplicationInfo();
AGameStats
	protected: AGameStats();
	public: AGameStats(AGameStats const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AGameStats();
	public: void execGetMapFileName(struct FFrame&,void* const);
	public: void execGetStatsIdentifier(struct FFrame&,void* const);
AHUD
	protected: AHUD();
	public: AHUD(AHUD const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AHUD();
	public: void eventConnectFailure(FString const&,FString const&);
	public: void eventPostRender(UCanvas*);
	public: void eventShowUpgradeMenu();
	public: void eventWorldSpaceOverlays();
	public: void execDraw3DLine(struct FFrame&,void* const);
AInfo
	protected: AInfo();
	public: AInfo(AInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AInfo();
AInspector
	protected: AInspector();
	public: AInspector(AInspector const&);
	public: INT eventInspection(INT,INT,INT,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AInspector();
	public: void execInspectorFunc001(struct FFrame&,void* const);
	public: void execInspectorFunc002(struct FFrame&,void* const);
	public: void execInspectorFunc003(struct FFrame&,void* const);
	public: void execInspectorFunc004(struct FFrame&,void* const);
	public: void execInspectorFunc005(struct FFrame&,void* const);
	public: void execInspectorFunc006(struct FFrame&,void* const);
AInternetInfo
	protected: AInternetInfo();
	public: AInternetInfo(AInternetInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AInternetInfo();
AInterpolationPoint
	public: AInterpolationPoINT();
	public: AInterpolationPoINT(AInterpolationPoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual void PostEditMove();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~AInterpolationPoINT();
AInventory
	public: AInventory();
	public: AInventory(AInventory const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AInventory();
AInventoryAttachment
	protected: AInventoryAttachment();
	public: AInventoryAttachment(AInventoryAttachment const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AInventoryAttachment();
AInventorySpot
	public: AInventorySpot();
	public: AInventorySpot(AInventorySpot const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AInventorySpot* GetAInventorySpot();
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual ~AInventorySpot();
AJumpDest
	public: AJumpDest();
	public: AJumpDest(AJumpDest const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ReviewPath(APawn*);
	public: virtual void ClearPaths();
	public: virtual void SetupForcedPath(APawn*,UReachSpec*);
	public: virtual ~AJumpDest();
AJumpPad
	public: AJumpPad();
	public: AJumpPad(AJumpPad const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~AJumpPad();
AKActor
	public: AKActor();
	public: AKActor(AKActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Spawned();
	public: virtual ~AKActor();
AKBSJoint
	protected: AKBSJoINT();
	public: AKBSJoINT(AKBSJoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKBSJoINT();
AKCarWheelJoint
	public: AKCarWheelJoINT();
	public: AKCarWheelJoINT(AKCarWheelJoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKCarWheelJoINT();
AKConeLimit
	public: AKConeLimit();
	public: AKConeLimit(AKConeLimit const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKConeLimit();
AKConstraint
	public: AKConstraINT();
	public: AKConstraINT(AKConstraINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKConstraINT();
	public: void eventKForceExceed(FLOAT);
	public: void execKGetConstraINTForce(struct FFrame&,void* const);
	public: void execKGetConstraINTTorque(struct FFrame&,void* const);
	public: void execKUpdateConstraINTParams(struct FFrame&,void* const);
AKHinge
	public: AKHinge();
	public: AKHinge(AKHinge const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKHinge();
AKTire
	protected: AKTire();
	public: AKTire(AKTire const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKTire();
AKVehicle
	public: AKVehicle();
	public: AKVehicle(AKVehicle const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKVehicle();
	public: void eventKVehicleUpdateParams();
	public: void eventVehicleStateReceived();
	public: void execGraphData(struct FFrame&,void* const);
AKeypoint
	protected: AKeypoINT();
	public: AKeypoINT(AKeypoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKeypoINT();
AL2Alarm
	public: AL2Alarm();
	public: AL2Alarm(AL2Alarm const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AL2Alarm();
AL2CenterdDiamond
	public: AL2CenterdDiamond();
	public: AL2CenterdDiamond(AL2CenterdDiamond const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AL2CenterdDiamond();
	public: void RenderL2CenterdDiamond();
	public: void SetHeightRate(FLOAT);
	public: void SetRadiusRate(FLOAT);
	public: void SetSpeed(INT,FLOAT);
	public: void SetTexture(INT,FString const&);
	public: void SetWeight(INT,FLOAT);
AL2Dice
	public: AL2Dice();
	public: AL2Dice(AL2Dice const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AL2Dice();
AL2Float
	public: AL2Float();
	public: AL2Float(AL2Float const&);
	public: FName GetBattleAnimName();
	public: FName GetCurAnimName();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AL2Float();
AL2Indicator
	protected: AL2Indicator();
	public: AL2Indicator(AL2Indicator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AL2Indicator();
AL2MovableStaticMeshActor
	public: AL2MovableStaticMeshActor();
	public: AL2MovableStaticMeshActor(AL2MovableStaticMeshActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FName GetL2MovementTagName(INT);
	public: virtual FRotator GetNextRotation(FLOAT);
	public: virtual FVector CalcCurrent(FVector&,FVector&);
	public: virtual FVector GetNextScale(FLOAT);
	public: virtual FVector GetNextTranslation(FLOAT);
	public: virtual void AttachL2MovementActor(AActor*);
	public: virtual void InitMovement();
	public: virtual void InitMovement(FLOAT);
	public: virtual void PostEditChange();
	public: virtual void PostEditMove();
	public: virtual void physL2Movement(FLOAT,INT);
	public: virtual ~AL2MovableStaticMeshActor();
AL2NMover
	public: AL2NMover();
	public: AL2NMover(AL2NMover const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsEnded();
	public: virtual INT IsEnded(AActor**);
	public: virtual INT IsPaused();
	public: virtual INT IsStarted();
	public: virtual INT MoveTick(FLOAT);
	public: virtual void AddMoveTarget(AActor*,INT);
	public: virtual void AddMoveTarget(FVector const&);
	public: virtual void MovePause();
	public: virtual void MovePlay();
	public: virtual void MoveStart(FLOAT,INT);
	public: virtual void MoveStop();
	public: virtual void PostScriptDestroyed();
	public: virtual ~AL2NMover();
AL2Pickup
	public: AL2Pickup();
	public: AL2Pickup(AL2Pickup const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void FindBase();
	public: virtual void LostChild(AActor*);
	public: virtual void PostScriptDestroyed();
	public: virtual ~AL2Pickup();
AL2Radar
	protected: AL2Radar();
	public: AL2Radar(AL2Radar const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AL2Radar();
AL2SeamlessInfo
	public: AL2SeamlessInfo();
	public: AL2SeamlessInfo(AL2SeamlessInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AL2SeamlessInfo();
ALadder
	public: ALadder();
	public: ALadder(ALadder const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ProscribedPathTo(ANavigationPoINT*);
	public: virtual void ClearPaths();
	public: virtual void InitForPathFinding();
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~ALadder();
ALadderVolume
	public: ALadderVolume();
	public: ALadderVolume(ALadderVolume const&);
	public: FVector FindCenter();
	public: FVector FindTop(FVector);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~ALadderVolume();
ALevelInfo
	public: AAirVolume* GetAirVolume(FVector,AActor*,INT);
	public: AAirVolume* L2GetAirVolume(FVector,AActor*,INT);
	public: ACameraVolume* GetCameraVolume(FVector,AActor*,INT);
	public: ACameraVolume* L2GetCameraVolume(FVector,AActor*,INT);
	public: ALevelInfo();
	public: ALevelInfo(ALevelInfo const&);
	public: AMusicVolume* GetMusicVolume(FVector,AActor*,INT);
	public: AMusicVolume* L2GetMusicVolume(FVector,AActor*,INT);
	public: APhysicsVolume* GetDefaultPhysicsVolume();
	public: APhysicsVolume* GetPhysicsVolume(FVector,AActor*,INT);
	public: APhysicsVolume* L2GetPhysicsVolume(FVector,AActor*,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void CheckForErrors();
	public: virtual void PostNetReceive();
	public: virtual void PreNetReceive();
	public: virtual void SetVolumes();
	public: virtual void SetZone(INT,INT);
	public: virtual ~ALevelInfo();
	public: void eventFillPrecacheMaterialsArray();
	public: void eventFillPrecacheStaticMeshesArray();
	public: void eventServerTravel(FString const&,DWORD);
	public: void execDetailChange(struct FFrame&,void* const);
	public: void execGetAddressURL(struct FFrame&,void* const);
	public: void execGetLocalURL(struct FFrame&,void* const);
	public: void execIsDemoBuild(struct FFrame&,void* const);
	public: void execIsEntry(struct FFrame&,void* const);
ALiftCenter
	public: ALiftCenter();
	public: ALiftCenter(ALiftCenter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void FindBase();
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~ALiftCenter();
ALiftExit
	protected: ALiftExit();
	public: ALiftExit(ALiftExit const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ALiftExit();
ALight
	public: ALight();
	public: ALight(ALight const&);
	public: FLOAT WorldCoronaLightRadius()const;
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ALight* GetLight();
	public: virtual FDynamicLight* GetLightRenderData();
	public: virtual FLOAT WorldLightRadius()const;
	public: virtual INT IsALight();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~ALight();
ALineOfSightTrigger
	public: ALineOfSightTrigger();
	public: ALineOfSightTrigger(ALineOfSightTrigger const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void TickAuthoritative(FLOAT);
	public: virtual ~ALineOfSightTrigger();
	public: void eventPlayerSeesMe(APlayerController*);
ALineagePlayerController
	private: FVector GetCamearDir(INT,FRotator&);
	private: INT CheckRotation(INT);
	private: INT GetCurrentKeyboardTurningDir();
	private: INT GetYaw(INT);
	private: INT ShouldApplySmoothCameraMovement(FVector const&)const;
	private: void MoveCharacter(INT);
	private: void StopCharacter();
	public: ALineagePlayerController();
	public: ALineagePlayerController(ALineagePlayerController const&);
	public: FNViewShake* AddViewShakeState(INT,FLOAT,FLOAT,FLOAT,FLOAT,FVector,FVector,FVector,FVector,FLOAT,FLOAT,AActor*,FLOAT,FLOAT,FLOAT);
	public: FVector GetVelocity(INT,INT);
	public: FVector RotationToLocationWithDist(FRotator,FVector,FLOAT);
	public: FVector ViewToLocationWithDist(FVector,FVector,FLOAT);
	public: INT CanSendMovingPacket(INT);
	public: INT IntToShort(INT);
	public: INT IsBlockRotation(FRotator,FVector,FLOAT,INT);
	public: INT IsCamCutSceneMode()const;
	public: INT IsKeyboardTurning();
	public: INT IsMouseTargetMove();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT HitWallNotify(FVector const&,AActor*);
	public: virtual INT IsBroadcastObserverMode();
	public: virtual INT IsObserverMode();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void CalcBehindView(FVector*,FRotator*);
	public: virtual void CalcVolumeCamera(FVector*,FRotator*);
	public: virtual void PlayerCalcView(AActor*,FVector*,FRotator*);
	public: virtual void PostScriptDestroyed();
	public: virtual void ResetMusicControll();
	public: virtual void SetBroadcastObserverMode(INT);
	public: virtual void SetRequestedItemMusic(wchar_t*,FLOAT,bool);
	public: virtual void SetRequestedServerMusic(wchar_t*,FLOAT);
	public: virtual void SetRequestedServerVoice(wchar_t*,FLOAT,INT);
	public: virtual void SetSelectedCreatureID(INT const&);
	public: virtual void SetVehicleStatus(INT);
	public: virtual void SetViewTarget(AActor*);
	public: virtual void StopMove();
	public: virtual ~ALineagePlayerController();
	public: void CalculateZoomCamera(FVector const&);
	public: void ClearElasticCamera();
	public: void DisableCameraManuallyRotationg(INT);
	public: void ElasticCameraTick(FLOAT);
	public: void InvalidateZoneName();
	public: void JoypadMovingTick();
	public: void KeyboardMovingEnd(INT);
	public: void KeyboardMovingStart(INT);
	public: void KeyboardMovingTick();
	public: void KeyboardTurningCheck();
	public: void KeyboardTurningTick(FLOAT);
	public: void PermanentMoveCheck();
	public: void PermanentMoveEnd();
	public: void PermanentMoveStart();
	public: void PermanentMovingTick();
	public: void PullElasticCamera(FLOAT,FLOAT);
	public: void ReleaseElasticCamera(FLOAT);
	public: void ReleaseSpecialViewTarget();
	public: void ResetJoypadMoving(FLOAT,FLOAT);
	public: void ResetKeyboardMoving(INT,INT);
	public: void SaveSetting(FVector const*,FRotator const*,FVector const&,FVector const&);
	public: void SetFixedDefaultCameraNo(INT,INT);
	public: void SetFixedDefaultGroupNo(INT,INT);
	public: void SetSpecialViewTarget(AActor*,FLOAT,FRotator,FLOAT,FLOAT,FRotator,INT,INT,INT,FLOAT);
	public: void SetupNpcZoomCamImmediate();
	public: void ShakeView(FVector&,FRotator&);
	public: void SpecialViewTick(FLOAT);
	public: void StartNpcZoomInCam(FVector const&,FLOAT);
	public: void StartNpcZoomOutCam();
	public: void UpdateMovingPendTime(FLOAT);
	public: void UpdateShakeState(FLOAT);
ALocationInfo
	protected: ALocationInfo();
	public: ALocationInfo(ALocationInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ALocationInfo();
ALookTarget
	protected: ALookTarget();
	public: ALookTarget(ALookTarget const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ALookTarget();
AMarkProjector
	protected: AMarkProjector();
	public: AMarkProjector(AMarkProjector const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AMarkProjector();
	public: void execUpdateDesireLocation(struct FFrame&,void* const);
AMatDemoActor
	protected: AMatDemoActor();
	public: AMatDemoActor(AMatDemoActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AMatDemoActor();
AMovableStaticMeshActor
	public: AMovableStaticMeshActor();
	public: AMovableStaticMeshActor(AMovableStaticMeshActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FName GetL2MovementTagName(INT);
	public: virtual void AttachL2MovementActor(AActor*);
	public: virtual void InitMovement();
	public: virtual void PostEditChange();
	public: virtual void physL2Movement(FLOAT,INT);
	public: virtual ~AMovableStaticMeshActor();
AMover
	public: AMover();
	public: AMover(AMover const&);
	public: USound* GetBrokenSound(FLOAT&,FLOAT&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT CanBeAttacked();
	public: virtual INT IsAMover();
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual USound* GetAttackItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetAttackVoiceSound(FLOAT);
	public: virtual USound* GetDamageSound(FLOAT&,FLOAT&);
	public: virtual USound* GetDefenseItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetShieldItemSound(FLOAT&,FLOAT&);
	public: virtual void AssociateAttackedNotify(APawn*,AActor*,INT,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void AttackedNotify(APawn*,AActor*,INT,INT,INT);
	public: virtual void ClearMarker();
	public: virtual void PostEditChange();
	public: virtual void PostEditMove();
	public: virtual void PostLoad();
	public: virtual void PostNetReceive();
	public: virtual void PostRaytrace();
	public: virtual void PreNetReceive();
	public: virtual void PreRaytrace();
	public: virtual void SetBrushRaytraceKey();
	public: virtual void SetWorldRaytraceKey();
	public: virtual void Spawned();
	public: virtual void performPhysics(FLOAT);
	public: virtual ~AMover();
	public: void GetTargetLocation(FVector,FVector&);
	public: void eventKeyFrameReached();
	public: void physMovingBrush(FLOAT);
AMusicVolume
	public: AMusicVolume();
	public: AMusicVolume(AMusicVolume const&);
	public: INT HasNightMusic()const;
	public: INT HasZoneMusic()const;
	public: INT IsValidZoneMusicID(INT,INT&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AMusicVolume();
AMutator
	protected: AMutator();
	public: AMutator(AMutator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AMutator();
ANAgathion
	public: ANAgathion();
	public: ANAgathion(ANAgathion const&);
	public: FName GetSpecialAnimName();
	public: FName GetSpecialIdleAnimName();
	public: INT IsMasterMoving()const;
	public: INT IsMasterPlayWaiting()const;
	public: INT UpdateMovementAnimationWhenAttached();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void Destroy();
	public: virtual void UpdateMovementAnimation(FLOAT);
	public: virtual ~ANAgathion();
	public: void AdjustPosition(FLOAT);
	public: void GetMovementState();
	public: void PlaySpecialAnimation();
	public: void SetSpeed();
ANCubics
	public: ANCubics();
	public: ANCubics(ANCubics const&);
	public: FVector GetVelocity(APawn*,FLOAT);
	public: INT GetMovementState(APawn*);
	public: INT NCubicSkillProcess(APawn*,FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual struct FNMagicInfo* GetMagicInfo();
	public: virtual void Initialize();
	public: virtual void PostScriptDestroyed();
	public: virtual ~ANCubics();
	public: void NCubicRotation(FLOAT);
	public: void NCubicSkillInit(APawn*,APawn*,INT);
ANMoon
	public: ANMoon();
	public: ANMoon(ANMoon const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~ANMoon();
ANMovableSunLight
	public: ANMovableSunLight();
	public: ANMovableSunLight(ANMovableSunLight const&);
	public: FVector GetSunLightDirection(FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~ANMovableSunLight();
ANProjectile
	public: AActor* GetTargetActor();
	public: ANProjectile();
	public: ANProjectile(ANProjectile const&);
	public: FLOAT PrepareInterpolation(INT,FVector);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT NProjectileHitTarget(FVector,AActor*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual struct FNMagicInfo* GetMagicInfo();
	public: virtual void Destroy();
	public: virtual void PostScriptDestroyed();
	public: virtual void Spawned();
	public: virtual void TargetDestroyNotify(AActor*);
	public: virtual void processHitWall(FVector,AActor*);
	public: virtual ~ANProjectile();
	public: void SetTargetActor(AActor*);
	public: void eventPreshotNotify(APawn*);
	public: void eventShotNotify();
ANSkillProjectile
	public: ANSkillProjectile();
	public: ANSkillProjectile(ANSkillProjectile const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT NProjectileHitTarget(FVector,AActor*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void Destroy();
	public: virtual void PostBeginPlay();
	public: virtual void PostScriptDestroyed();
	public: virtual void TargetDestroyNotify(AActor*);
	public: virtual void processHitWall(FVector,AActor*);
	public: virtual ~ANSkillProjectile();
	public: void SetSkillID(INT);
ANSun
	public: ANSun();
	public: ANSun(ANSun const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~ANSun();
ANavigationPoint
	public: ANavigationPoINT();
	public: ANavigationPoINT(ANavigationPoINT const&);
	public: DWORD eventAccept(AActor*,AActor*);
	public: DWORD eventSuggestMovePreparation(APawn*);
	public: FLOAT eventDetourWeight(APawn*,FLOAT);
	public: INT CanReach(ANavigationPoINT*,FLOAT);
	public: INT FindAlternatePath(UReachSpec*,INT);
	public: INT PrunePaths();
	public: INT ShouldBeBased();
	public: INT eventSpecialCost(APawn*,UReachSpec*);
	public: UReachSpec* GetReachSpecTo(ANavigationPoINT*);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AInventorySpot* GetAInventorySpot();
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual INT ProscribedPathTo(ANavigationPoINT*);
	public: virtual INT ReviewPath(APawn*);
	public: virtual void CheckForErrors();
	public: virtual void CheckSymmetry(ANavigationPoINT*);
	public: virtual void ClearForPathFinding();
	public: virtual void ClearPaths();
	public: virtual void Destroy();
	public: virtual void FindBase();
	public: virtual void InitForPathFinding();
	public: virtual void PostEditMove();
	public: virtual void PostaddReachSpecs(APawn*);
	public: virtual void SetupForcedPath(APawn*,UReachSpec*);
	public: virtual void Spawned();
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~ANavigationPoINT();
	public: void CleanUpPruned();
ANote
	public: ANote();
	public: ANote(ANote const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void CheckForErrors();
	public: virtual ~ANote();
ANpcPosInfo
	protected: ANpcPosInfo();
	public: ANpcPosInfo(ANpcPosInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ANpcPosInfo();
AParticleProjector
	public: AParticleProjector();
	public: AParticleProjector(AParticleProjector const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void CalcMatrix();
	public: virtual void ClearL2Game();
	public: virtual void Destroy();
	public: virtual ~AParticleProjector();
APathNode
	public: APathNode();
	public: APathNode(APathNode const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT ReviewPath(APawn*);
	public: virtual void CheckSymmetry(ANavigationPoINT*);
	public: virtual ~APathNode();
APawn
	private: FLOAT Swim(FVector&,struct FCheckResult&);
	private: FNAbnormalStat* AddAbnormalStateToList(FNAbnormalStat*);
	private: FVector findWaterLine(FVector const&,FVector const&);
	private: INT CheckQuestMarkEffectAboutCompletePreLevel(struct FL2QuestData const&)const;
	private: INT CheckQuestMarkEffectAboutCompletePreQuest(struct FL2QuestData const&)const;
	private: INT CheckQuestMarkEffectAboutFilterRaceAndClass(INT,INT,struct FL2QuestMarkConditionData const&)const;
	private: INT CheckQuestMarkEffectAboutRequireItems(struct FL2QuestData const&)const;
	private: INT CheckQuestMarkEffectAboutValidUserClass(INT,struct FL2QuestData const&)const;
	private: INT CheckQuestMarkEffectAboutValidUserLevel(INT,struct FL2QuestData const&)const;
	private: INT CreateCuriousHouseWinnerEffect();
	private: INT CreateHeroEffect();
	private: INT FindMaximumQuestPriority()const;
	private: INT GetEventAttackItemClassID(INT);
	private: INT GetPriorityOfQuestData(struct FL2QuestData const&,INT)const;
	private: INT GetQuestMarkEffectType(INT)const;
	private: INT IsNeedToShowQuestMarkEffect(INT)const;
	private: INT IsNeedToShowTutorialQuestMarkEffect(INT)const;
	private: INT Pick3DWallAdjust(FVector const&);
	private: INT checkFloor(FVector const&,struct FCheckResult&);
	private: INT findNewFloor(FVector const&,FLOAT,FLOAT,INT);
	private: struct FNAction* GetFlyMoveAction();
	private: void CheckAbnormalVisualEffect(FLOAT);
	private: void CheckAppendixEffect();
	private: void CheckCuriousHouseWinnerEffect();
	private: void CheckCursedWeaponEffect();
	private: void CheckEnchantedWeaponEffect();
	private: void CheckHeroEffect();
	private: void CreateEnchantEffectParticle(enum EWeaponEffectSlot,INT,INT,struct FL2WeaponEnchantEffectData*);
	private: void CreateEnchantEffectRadiance(enum EWeaponEffectSlot,INT,INT,struct FL2WeaponEnchantEffectData*);
	private: void CreateEnchantEffectRing(enum EWeaponEffectSlot,INT,INT,struct FL2WeaponEnchantEffectData*);
	private: void CreateEnchantEffectSwordFlow(enum EWeaponEffectSlot,INT,INT,struct FL2WeaponEnchantEffectData*);
	private: void LoadWeaponEnchantEffect(struct FL2WeaponEnchantEffectData*,INT);
	private: void SetDblCasting(INT);
	private: void SpawnEnchantEffects(struct FL2WeaponEnchantEffectData*,enum EWeaponEffectSlot,INT);
	private: void SpiderstepUp(FVector const&,FVector,struct FCheckResult&);
	protected: void calcVelocity(FVector const&,FLOAT,FLOAT,FLOAT,INT,INT,INT);
	public: AEmitter* SpawnBoneAttachedEffect(FName const&,FName const&);
	public: ANAgathion* GetAgathion()const;
	public: ANProjectile* SetRangedAttackConsumeItem(INT);
	public: ANavigationPoINT* CheckDetour(ANavigationPoINT*,ANavigationPoINT*,INT);
	public: ANavigationPoINT* breadthPathTo(FLOAT (__cdecl*)(ANavigationPoINT*,APawn*,FLOAT),ANavigationPoINT*,INT,FLOAT*,INT);
	public: APawn();
	public: APawn(APawn const&);
	public: APawn* GetCharPawn();
	public: APawn* RiderEnd(FVector);
	public: APawn* RiderEnter(INT,INT,INT,FVector);
	public: FLOAT GetAtk01AnimRate();
	public: FLOAT GetAtk02AnimRate();
	public: FLOAT GetAtk03AnimRate();
	public: FLOAT GetAtkDownAnimRate();
	public: FLOAT GetAtkUpAnimRate();
	public: FLOAT GetAttackEffFrame();
	public: FLOAT GetAttackEndEffFrame();
	public: FLOAT GetAttackItemSoundFrame();
	public: FLOAT GetAttackRange();
	public: FLOAT GetCastLongAnimRate();
	public: FLOAT GetCastMidAnimRate();
	public: FLOAT GetCastShortAnimRate();
	public: FLOAT GetCastShortEndAnimRate();
	public: FLOAT GetCurAnimFrame(INT);
	public: FLOAT GetCurAnimRate(INT);
	public: FLOAT GetCurMoveAnimRate();
	public: FLOAT GetCurSpeed(INT);
	public: FLOAT GetMagicFriendAnimRate();
	public: FLOAT GetMagicNoTargetAnimRate();
	public: FLOAT GetMagicShotAnimRate();
	public: FLOAT GetMagicThrowAnimRate();
	public: FLOAT GetMaxSpeed();
	public: FLOAT GetPlayRateForTime(FName,FLOAT);
	public: FLOAT GetRunAnimRate();
	public: FLOAT GetShieldAtkAnimRate();
	public: FLOAT GetSitAnimRate();
	public: FLOAT GetSocialAnimDuration(INT);
	public: FLOAT GetSpAtk01AnimRate();
	public: FLOAT GetSpAtk02AnimRate();
	public: FLOAT GetSpAtk03AnimRate();
	public: FLOAT GetSpAtk04AnimRate();
	public: FLOAT GetStandAnimRate();
	public: FLOAT GetThrowAnimRate();
	public: FLOAT GetWalkAnimRate();
	public: FLOAT findPathToward(AActor*,FVector,FLOAT (__cdecl*)(ANavigationPoINT*,APawn*,FLOAT),FLOAT,INT);
	public: FNPawnLight* AddPawnLight(FVector const&,FRotator,INT);
	public: FName GetAirBindAnimName();
	public: FName GetAirBindFloatAnimName();
	public: FName GetAirBindHitAnimName();
	public: FName GetAirBindSinkAnimName();
	public: FName GetAirBindWaitAnimName();
	public: FName GetAir_Archer_ShotAnimname();
	public: FName GetAir_Bowgun_ShotAnimname();
	public: FName GetAir_Magic_Shot_AAnimname();
	public: FName GetAir_Magic_Shot_BAnimname();
	public: FName GetAir_Melee_Shot_AAnimname();
	public: FName GetAir_Melee_Shot_BAnimname();
	public: FName GetAir_common_LoopAnimname();
	public: FName GetAir_common_ShotAnimname();
	public: FName GetAtk01AnimName();
	public: FName GetAtk02AnimName();
	public: FName GetAtk03AnimName();
	public: FName GetAtkDownAnimName();
	public: FName GetAtkUpAnimName();
	public: FName GetAtkWaitAnimName();
	public: FName GetAttachBoneName(enum WeaponMeshAttachSide);
	public: FName GetAwakenAnimName();
	public: FName GetBJumpAnimName();
	public: FName GetBackDashAnimName();
	public: FName GetCASTEND_BAnimName();
	public: FName GetCASTEND_CAnimName();
	public: FName GetCASTEND_DAnimName();
	public: FName GetCASTEND_EAnimName();
	public: FName GetCASTEND_FAnimName();
	public: FName GetCASTEND_GAnimName();
	public: FName GetCASTEND_HAnimName();
	public: FName GetCASTEND_IAnimName();
	public: FName GetCASTEND_JAnimName();
	public: FName GetCASTmid_BAnimName();
	public: FName GetCASTmid_CAnimName();
	public: FName GetCASTmid_DAnimName();
	public: FName GetCASTmid_EAnimName();
	public: FName GetCASTmid_FAnimName();
	public: FName GetCASTmid_GAnimName();
	public: FName GetCASTmid_HAnimName();
	public: FName GetCASTmid_IAnimName();
	public: FName GetCASTmid_JAnimName();
	public: FName GetCastEnd2AnimName();
	public: FName GetCastEndAnimName();
	public: FName GetCastEndAnimNameA();
	public: FName GetCastLong2AnimName();
	public: FName GetCastLongAnimName();
	public: FName GetCastLongAnimNameA();
	public: FName GetCastMid2AnimName();
	public: FName GetCastMidAnimName();
	public: FName GetCastMidAnimNameA();
	public: FName GetCastShort2AnimName();
	public: FName GetCastShortAnimName();
	public: FName GetCastShortAnimNameA();
	public: FName GetCast_Air_DragAnimName();
	public: FName GetCast_Air_LoopAnimName();
	public: FName GetCast_Air_ShotAnimName();
	public: FName GetChairSitAnimName();
	public: FName GetChairStandAnimName();
	public: FName GetChairWaitAnimName();
	public: FName GetChargeAnimName();
	public: FName GetCurAnimName(INT);
	public: FName GetCurAtkAnimName();
	public: FName GetCurMoveAnimName();
	public: FName GetCurPhysicalSkillDamageAnimName();
	public: FName GetCurTurnAnimName();
	public: FName GetCurWaitAnimName();
	public: FName GetDCDragLoop_LAnimName();
	public: FName GetDCDragLoop_RAnimName();
	public: FName GetDCDragStart_LAnimName();
	public: FName GetDCDragStart_RAnimName();
	public: FName GetDCLoopLeftAnimName();
	public: FName GetDCLoopRightAnimName();
	public: FName GetDCShotLeftAnimName();
	public: FName GetDCShotRightAnimName();
	public: FName GetDamageAnimName();
	public: FName GetDamageFlyAnimName();
	public: FName GetDashAnimName();
	public: FName GetDashImpactAnimName();
	public: FName GetDashWaitAnimName();
	public: FName GetDash_HitAnimName();
	public: FName GetDblCastLeftShotAnimName();
	public: FName GetDblCastLoopAnimName();
	public: FName GetDblCastRightShotAnimName();
	public: FName GetDeathAnimName();
	public: FName GetDeathStandAnimName();
	public: FName GetDeathWaitAnimName();
	public: FName GetDefenceAnimName();
	public: FName GetDodgeAnimName();
	public: FName GetDrag_CastAnimName();
	public: FName GetDrag_IdleAnimName();
	public: FName GetDrag_LoopAnimName();
	public: FName GetDrag_ShotAnimName();
	public: FName GetEnchantedWeaponEffectFlow(FVector&,FLOAT&,FLOAT&,INT);
	public: FName GetExAtk01AnimName();
	public: FName GetExAtk02AnimName();
	public: FName GetExAtk03AnimName();
	public: FName GetExAtk04AnimName();
	public: FName GetExAtk05AnimName();
	public: FName GetExAtk06AnimName();
	public: FName GetExAtk07AnimName();
	public: FName GetExAtk08AnimName();
	public: FName GetExAtk09AnimName();
	public: FName GetExAtk10AnimName();
	public: FName GetExAtk11AnimName();
	public: FName GetExAtk12AnimName();
	public: FName GetExAtk13AnimName();
	public: FName GetExAtk14AnimName();
	public: FName GetExAtk15AnimName();
	public: FName GetExAtk16AnimName();
	public: FName GetExAtk17AnimName();
	public: FName GetExAtk18AnimName();
	public: FName GetExAtk19AnimName();
	public: FName GetExAtk20AnimName();
	public: FName GetExAtk21AnimName();
	public: FName GetExAtk22AnimName();
	public: FName GetExAtk23AnimName();
	public: FName GetExAtk24AnimName();
	public: FName GetExAtk25AnimName();
	public: FName GetExAtk26AnimName();
	public: FName GetExAtk27AnimName();
	public: FName GetExAtk28AnimName();
	public: FName GetExAtk29AnimName();
	public: FName GetExAtk30AnimName();
	public: FName GetExAtk31AnimName();
	public: FName GetExAtk32AnimName();
	public: FName GetExAtk33AnimName();
	public: FName GetExAtk34AnimName();
	public: FName GetExAtk35AnimName();
	public: FName GetExAtk36AnimName();
	public: FName GetExAtk37AnimName();
	public: FName GetExAtk38AnimName();
	public: FName GetExAtk39AnimName();
	public: FName GetExAtk40AnimName();
	public: FName GetExAtk41AnimName();
	public: FName GetExAtk42AnimName();
	public: FName GetExAtk43AnimName();
	public: FName GetExAtk44AnimName();
	public: FName GetExAtk45AnimName();
	public: FName GetFallAnimName();
	public: FName GetFishControlAnimName();
	public: FName GetFishEndAnimName();
	public: FName GetFishPullAnimName();
	public: FName GetFishStartAnimName();
	public: FName GetFishWaitAnimName();
	public: FName GetFishingControlAnimName();
	public: FName GetFishingEndAnimName();
	public: FName GetFishingPullAnimName();
	public: FName GetFishingStartAnimName();
	public: FName GetFishingWaitAnimName();
	public: FName GetFlyMoveAnimName();
	public: FName GetFlyMove_AutoAnimName();
	public: FName GetFlyMove_AutoAnimName(INT);
	public: FName GetFlyMove_JumpAnimName();
	public: FName GetFlyMove_JumpAnimName(INT);
	public: FName GetFlyMove_LandAnimName();
	public: FName GetFlyMove_MoveAnimName();
	public: FName GetFlyMove_MoveAnimName(INT);
	public: FName GetGlideAnimName();
	public: FName GetHide_AAnimName();
	public: FName GetHovering_WaitAnimName();
	public: FName GetJumpAnimName();
	public: FName GetKnock_BackAnimName();
	public: FName GetKnock_Back_KickAnimname();
	public: FName GetKnock_DownAnimName();
	public: FName GetKnock_Down_AppoINT_BowAnimname();
	public: FName GetKnock_Down_AppoINT_CrossbowAnimname();
	public: FName GetKnock_Down_DownatkAnimname();
	public: FName GetKnock_Down_HitAnimName();
	public: FName GetKnock_Down_SpinatkAnimname();
	public: FName GetKnock_Down_StandupAnimName();
	public: FName GetKnock_Down_waitAnimName();
	public: FName GetLeftShoulderBoneName();
	public: FName GetLeftUpperArmBoneName();
	public: FName GetMagicFriendAnimName();
	public: FName GetMagicNoTargetAnimName();
	public: FName GetMagicNoTargetAnimNameA();
	public: FName GetMagicNotarget_BAnimName();
	public: FName GetMagicNotarget_CAnimName();
	public: FName GetMagicNotarget_DAnimName();
	public: FName GetMagicNotarget_EAnimName();
	public: FName GetMagicNotarget_FAnimName();
	public: FName GetMagicNotarget_GAnimName();
	public: FName GetMagicNotarget_HAnimName();
	public: FName GetMagicNotarget_IAnimName();
	public: FName GetMagicNotarget_JAnimName();
	public: FName GetMagicShotAnimName();
	public: FName GetMagicShotAnimNameA();
	public: FName GetMagicShot_BAnimName();
	public: FName GetMagicShot_CAnimName();
	public: FName GetMagicShot_DAnimName();
	public: FName GetMagicShot_EAnimName();
	public: FName GetMagicShot_FAnimName();
	public: FName GetMagicShot_GAnimName();
	public: FName GetMagicShot_HAnimName();
	public: FName GetMagicShot_IAnimName();
	public: FName GetMagicThrowAnimName();
	public: FName GetMagicThrowAnimNameA();
	public: FName GetMagicThrow_BAnimName();
	public: FName GetMagicThrow_CAnimName();
	public: FName GetMagicThrow_DAnimName();
	public: FName GetMagicThrow_EAnimName();
	public: FName GetMagicThrow_FAnimName();
	public: FName GetMagicThrow_GAnimName();
	public: FName GetMagicThrow_HAnimName();
	public: FName GetMagicThrow_IAnimName();
	public: FName GetNpcSocialAnimName();
	public: FName GetPainActionAnimName();
	public: FName GetPcSocialAnimName();
	public: FName GetPicItemAnimName();
	public: FName GetRandomAtkAnimName();
	public: FName GetRiderAtkAnimName();
	public: FName GetRiderDeathAnimName();
	public: FName GetRiderDeathWaitAnimName();
	public: FName GetRiderRunAnimName();
	public: FName GetRiderWaitAnimName();
	public: FName GetRightShoulderBoneName();
	public: FName GetRightUpperArmBoneName();
	public: FName GetRiseAnimName();
	public: FName GetRunAnimName();
	public: FName GetS_MagicNotarget_BAnimName();
	public: FName GetS_MagicNotarget_CAnimName();
	public: FName GetS_MagicNotarget_DAnimName();
	public: FName GetS_MagicNotarget_EAnimName();
	public: FName GetS_MagicThrow_BAnimName();
	public: FName GetS_MagicThrow_CAnimName();
	public: FName GetS_Magicshot_BAnimName();
	public: FName GetS_Magicshot_CAnimName();
	public: FName GetS_Magicshot_DAnimName();
	public: FName GetS_Magicshot_EAnimName();
	public: FName GetSet_AAnimName();
	public: FName GetSheathingAnimName();
	public: FName GetShieldAtkAnimName();
	public: FName GetShieldWaitAnimName();
	public: FName GetSitAnimName();
	public: FName GetSitDeathAnimName();
	public: FName GetSitDeathWaitAnimName();
	public: FName GetSitWaitAnimName();
	public: FName GetSocialAnimName(INT);
	public: FName GetSocialCannonAnimName();
	public: FName GetSocialOperateAnimName();
	public: FName GetSocial_JobAnimName();
	public: FName GetSpAtk01AnimName();
	public: FName GetSpAtk02AnimName();
	public: FName GetSpAtk03AnimName();
	public: FName GetSpAtk04AnimName();
	public: FName GetSpAtk05AnimName();
	public: FName GetSpAtk06AnimName();
	public: FName GetSpAtk07AnimName();
	public: FName GetSpAtk08AnimName();
	public: FName GetSpAtk09AnimName();
	public: FName GetSpAtk10AnimName();
	public: FName GetSpAtk11AnimName();
	public: FName GetSpAtk12AnimName();
	public: FName GetSpAtk13AnimName();
	public: FName GetSpAtk14AnimName();
	public: FName GetSpAtk15AnimName();
	public: FName GetSpAtk16AnimName();
	public: FName GetSpAtk17AnimName();
	public: FName GetSpAtk18AnimName();
	public: FName GetSpAtk19AnimName();
	public: FName GetSpAtk20AnimName();
	public: FName GetSpAtk21AnimName();
	public: FName GetSpAtk22AnimName();
	public: FName GetSpAtk23AnimName();
	public: FName GetSpAtk24AnimName();
	public: FName GetSpAtk25AnimName();
	public: FName GetSpAtk26AnimName();
	public: FName GetSpAtk27AnimName();
	public: FName GetSpAtk28AnimName();
	public: FName GetSpAtk_loop01AnimName();
	public: FName GetSpAtk_loop02AnimName();
	public: FName GetSpAtk_ready01AnimName();
	public: FName GetSpAtk_ready02AnimName();
	public: FName GetSpAtk_shot01AnimName();
	public: FName GetSpAtk_shot02AnimName();
	public: FName GetSpecialSocial1AnimName();
	public: FName GetSpecialSocial2AnimName();
	public: FName GetSpecialSocial3AnimName();
	public: FName GetStandAnimName();
	public: FName GetStunAnimName();
	public: FName GetSwimAnimName();
	public: FName GetSwimAttackWaitAnimName();
	public: FName GetSwimDeathAnimName();
	public: FName GetSwimDeathWaitAnimName();
	public: FName GetSwimWaitAnimName();
	public: FName GetThrowAnimName();
	public: FName GetTurnAnimName();
	public: FName GetVariationWeaponEffect(FVector&,FLOAT&,FLOAT&,INT);
	public: FName GetWaitAnimName();
	public: FName GetWait_shotAnimName();
	public: FName GetWalkAnimName();
	public: FName GetWalk_CatAnimName();
	public: FName GetWeapon_InAnimName();
	public: FName GetWeapon_OutAnimName();
	public: FVector CheckForLedges(FVector const&,FVector const&,FVector const&,INT&,INT&);
	public: FVector GetCustomHairColor();
	public: FVector GetNewWeaponScale()const;
	public: FVector NewFallVelocity(FVector const&,FVector const&,FLOAT);
	public: FVector SuggestJumpVelocity(FVector const&,FLOAT,FLOAT);
	public: INT Action_Attack(AActor*);
	public: INT Action_Attack(AActor*,INT,INT,INT,INT,INT,INT,INT);
	public: INT AddNCubic(INT);
	public: INT AdjustLandPosition();
	public: INT CacheNetRelevancy(INT,APlayerController*,AActor*);
	public: INT CanCrouchWalk(FVector const&,FVector const&);
	public: INT CheckAbnormalState(INT);
	public: INT CheckAtkConsumeItem();
	public: INT CheckConditionValidQuestMarkEffect(struct User*,struct FL2QuestData const&,struct FL2QuestMarkConditionData const*)const;
	public: INT CheckCubicSkill(INT);
	public: INT CheckWaistRotation();
	public: INT CreateTutorialQuestMarkEffect();
	public: INT DeleteTutorialQuestMarkEffect();
	public: INT GetAliasString(FString const&,FString&);
	public: INT GetAtkShotNum(FName);
	public: INT GetAtkType(FName);
	public: INT GetNpcSocialHideLeftWeapon(INT);
	public: INT GetNpcSocialHideRightWeapon(INT);
	public: INT GetPcSocialHideLeftWeapon(INT);
	public: INT GetPcSocialHideRightWeapon(INT);
	public: INT GetSheathing()const;
	public: INT HasVariationOptionItem()const;
	public: INT InitSkillAnimTime(struct FNMagicInfo*);
	public: INT IsAnonyMousPawn();
	public: INT IsAprilFoolEvent();
	public: INT IsAttackIntend();
	public: INT IsAttacking()const;
	public: INT IsBigHead(FLOAT&);
	public: INT IsCameraWalkingMode();
	public: INT IsCuriousHouseWinner();
	public: INT IsDblCasting()const;
	public: INT IsEnableFaceRotation();
	public: INT IsEquipRangeAttackItem()const;
	public: INT IsEventEnchantedWeaponEffect()const;
	public: INT IsFreezingCauseOfAVE();
	public: INT IsFreezingCauseOfObjectType()const;
	public: INT IsHairEffect();
	public: INT IsHitByWall(struct FCheckResult&);
	public: INT IsHumanControlled();
	public: INT IsLocallyControlled();
	public: INT IsMe()const;
	public: INT IsNpcForm()const;
	public: INT IsPlayingCastAnim();
	public: INT IsRequireLoadEnchantEffect(INT const&)const;
	public: INT IsRide()const;
	public: INT IsShowEnchantedWeaponEffect(INT const&)const;
	public: INT IsVariationEffectEnabled();
	public: INT L2walkReachable(FVector const&,FLOAT);
	public: INT OnAirShip()const;
	public: INT PickWallAdjust(FVector);
	public: INT PrimeActionIs(enum NActionList)const;
	public: INT Reachable(FVector const&,AActor*);
	public: INT ReachedDestination(FVector,AActor*);
	public: INT RefreshQuestMark();
	public: INT SetSkillAnim(struct FNMagicInfo*);
	public: INT UpdateAbnormalState(FLOAT);
	public: INT ValidAnchor();
	public: INT actorReachable(AActor*,INT,INT);
	public: INT calcMoveFlags();
	public: INT flyReachable(FVector const&,INT,AActor*);
	public: INT jumpReachable(FVector const&,INT,AActor*);
	public: INT ladderReachable(FVector const&,INT,AActor*);
	public: INT moveToward(FVector const&,AActor*);
	public: INT poINTReachable(FVector const&,INT);
	public: INT swimReachable(FVector const&,INT,AActor*);
	public: INT walkReachable(FVector const&,INT,AActor*);
	public: UPawnSheathingMgr* GetSheathingMgr();
	public: USound* GetBootsSound();
	public: bool IsExistingAbnormalVisualEffectType(INT);
	public: enum ETestMoveResult FindBestJump(FVector const&);
	public: enum ETestMoveResult FindJumpUp(FVector const&);
	public: enum ETestMoveResult HitGoal(AActor*);
	public: enum ETestMoveResult L2walkMove(FVector const&,struct FCheckResult&,FLOAT,FLOAT);
	public: enum ETestMoveResult flyMove(FVector const&,AActor*,FLOAT);
	public: enum ETestMoveResult jumpLanding(FVector,INT);
	public: enum ETestMoveResult swimMove(FVector const&,AActor*,FLOAT);
	public: enum ETestMoveResult walkMove(FVector,struct FCheckResult&,AActor*,FLOAT);
	public: enum FlyMoveState GetFlyMoveType();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FL2PawnAnimData const* GetAnimData();
	public: struct FMeshAnimSeq* FindSeq(FName);
	public: struct FNMagicInfo* GetMagicInfo(enum MagicInfoSlot);
	public: virtual APawn* GetPawn();
	public: virtual APawn* GetPlayerPawn()const;
	public: virtual FLOAT GetDamageDist();
	public: virtual FLOAT GetNetPriority(AActor*,FLOAT,FLOAT);
	public: virtual FName GetCapeBoneName();
	public: virtual FName GetHeadBoneName();
	public: virtual FName GetLArmBoneName();
	public: virtual FName GetLHandBoneName();
	public: virtual FName GetLowbodyBoneName();
	public: virtual FName GetRArmBoneName();
	public: virtual FName GetRHandBoneName();
	public: virtual FName GetRootBoneName();
	public: virtual FName GetSecondHeadBoneName();
	public: virtual FName GetSpineBoneName();
	public: virtual FName GetWingBoneName();
	public: virtual FRotator FindSlopeRotation(FVector const&,FRotator);
	public: virtual INT CanBeAttacked();
	public: virtual INT CanBeTold();
	public: virtual INT CheckOwnerUpdated();
	public: virtual INT HasSecondHeadBone();
	public: virtual INT HurtByVolume(AActor*);
	public: virtual INT IsAPawn();
	public: virtual INT IsBroadcastObserverModeActor();
	public: virtual INT IsDamageAct();
	public: virtual INT IsLoaded();
	public: virtual INT IsNetRelevantFor(APlayerController*,AActor*,FVector const&);
	public: virtual INT IsObserverModeActor();
	public: virtual INT IsPlayer();
	public: virtual INT IsRendered();
	public: virtual INT IsSameAnim();
	public: virtual INT IsSpineRotation();
	public: virtual INT PlayAnim(INT,FName,FLOAT,FLOAT,INT,INT,INT);
	public: virtual INT PlayerControlled();
	public: virtual INT PostLoadProcess();
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual UMesh* GetMesh();
	public: virtual UMeshInstance* GetMeshInstance();
	public: virtual USound* GetAttackItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetAttackVoiceSound(FLOAT);
	public: virtual USound* GetDamageSound(FLOAT&,FLOAT&);
	public: virtual USound* GetDefenseItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetShieldItemSound(FLOAT&,FLOAT&);
	public: virtual struct FNMagicInfo* GetMagicInfo();
	public: virtual void AssociateAttackedNotify(APawn*,AActor*,INT,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void Attacked();
	public: virtual void AttackedNotify(APawn*,AActor*,INT,INT,INT);
	public: virtual void CheckForErrors();
	public: virtual void CheckSameAnim();
	public: virtual void ClearL2Game();
	public: virtual void CreateSkin(FRenderInterface*);
	public: virtual void Destroy();
	public: virtual void LostChild(AActor*);
	public: virtual void MoveToLocation(FVector const&,FVector,AActor*,FVector*);
	public: virtual void NotifyAnimEnd(INT);
	public: virtual void NotifyBump(AActor*);
	public: virtual void OnGetMouseFocus();
	public: virtual void OnLostMouseFocus();
	public: virtual void PostBeginPlay();
	public: virtual void PostNetReceive();
	public: virtual void PostNetReceiveLocation();
	public: virtual void PostRender();
	public: virtual void PostScriptDestroyed();
	public: virtual void PreNetReceive();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetBase(AActor*,FVector,INT);
	public: virtual void SetCapeBoneName(FName);
	public: virtual void SetHeadBoneName(FName);
	public: virtual void SetLArmBoneName(FName);
	public: virtual void SetLHandBoneName(FName);
	public: virtual void SetLowbodyBoneName(FName);
	public: virtual void SetRArmBoneName(FName);
	public: virtual void SetRHandBoneName(FName);
	public: virtual void SetSpineBoneName(FName);
	public: virtual void SetVolumes();
	public: virtual void SetWingBoneName(FName);
	public: virtual void SetZone(INT,INT);
	public: virtual void SmoothHitWall(FVector,AActor*);
	public: virtual void Spawned();
	public: virtual void TickMoveInVehicle(FLOAT);
	public: virtual void TickSimulated(FLOAT);
	public: virtual void TickSpecial(FLOAT);
	public: virtual void UpdateAnimation(FLOAT);
	public: virtual void UpdateMovementAnimation(FLOAT);
	public: virtual void UpdateRenderData();
	public: virtual void performPhysics(FLOAT);
	public: virtual void physFalling(FLOAT,INT);
	public: virtual void physFlying(FLOAT,INT);
	public: virtual void physicsRotation(FLOAT,FVector const&);
	public: virtual void processHitWall(FVector,AActor*);
	public: virtual void processLanded(FVector,AActor*,FLOAT,INT);
	public: virtual void stepUp(FVector const&,FVector const&,FVector,struct FCheckResult&);
	public: virtual ~APawn();
	public: void AddAbnormalVisualEffectType(INT);
	public: void AddAppendixEffect(enum AppendixVisualEffectBitType);
	public: void AddAssociatedActorNotify(enum MagicInfoSlot,INT,INT,AActor*,INT);
	public: void AddChannelingActorID(INT,FName);
	public: void AddMonsterRaceMgr(INT,INT,INT*,FVector const&,FVector const&,INT);
	public: void AdjustHeroWeapon();
	public: void AttackStop();
	public: void CheckCubicStatus(short,short*);
	public: void ClearAbnormalVisualEffectType();
	public: void ClearHandBlending(INT);
	public: void ClearMagic();
	public: void ClearSerpentine();
	public: void CreateOverHeadAlarm(INT);
	public: void Crouch(INT);
	public: void DeSpawnExitEvent();
	public: void DeleteAbnormalVisualEffectType(INT);
	public: void DeleteAgathion(INT);
	public: void DeleteAllAbnormalState();
	public: void DeleteAllAppendixEffect();
	public: void DeleteAllChannelingEffect();
	public: void DeleteAllCursedWeaponEffect();
	public: void DeleteAllNCubic();
	public: void DeleteAllPawnLight();
	public: void DeleteAllWeaponEffect();
	public: void DeleteAppendixEffect(enum AppendixVisualEffectBitType);
	public: void DeleteDecoEffect();
	public: void DeleteHungerEffect();
	public: void DeleteNCubic(INT);
	public: void DeleteOverHeadAlarm();
	public: void DestroyBoneAttachedEffect();
	public: void DestroyEffectActors();
	public: void DestroyNSkillProjectileActorsInTargetSpelledEffect();
	public: void DestroyPawnLights();
	public: void DisableFaceRotation();
	public: void DisableSpineRotation();
	public: void EnableFaceRotation();
	public: void EnableSpineRotation();
	public: void FaceRotation(FRotator,FLOAT);
	public: void FarMoveToBaseCenter(FLOAT);
	public: void GetDoubleCastingShotAnimName(FName&,FName&);
	public: void GetEnchantEffectParticleData(FVector&,FLOAT&,INT);
	public: void GetEnchantEffectRadianceScale(FVector&,FVector&,INT);
	public: void GetEnchantEffectRingData(FVector&,FVector&,INT);
	public: void InitAnimData();
	public: void InitBoneScaler();
	public: void InitDecoEffect();
	public: void LoadAnimData(FName);
	public: void LoadDefaultMesh();
	public: void MagicCancel();
	public: void MagicProcess(FLOAT);
	public: void MagicProcessDoubleCasting(FLOAT);
	public: void MagicProcessSingleCasting(FLOAT);
	public: void MagicStop();
	public: void NActionAnimEnd();
	public: void NActionProcess(FLOAT);
	public: void NActionStop();
	public: void NPrimeActionEnd();
	public: void NotifyDie();
	public: void PlayAgathionAnimSkill();
	public: void PlayDoubleCastingFirstShotAnim();
	public: void PlayDoubleCastingSecondShotAnim();
	public: void PlaySheathingAnimation(INT);
	public: void PlaySkillSound(AActor*,AActor*,INT);
	public: void ProcessAnimNotifyAttackShot(FString const&);
	public: void ProcessAnimNotifySheathe();
	public: void ProcessDesireRotation(struct FNMagicInfo*);
	public: void ProcessFaceRotation(FLOAT);
	public: void ProcessIllusion(FLOAT);
	public: void ProcessNPCSocialAction(enum SocialActionTypeEnum);
	public: void ProcessNameBlinkForGuiltyUser(FLOAT,INT);
	public: void ProcessPCSocialAction(enum SocialActionTypeEnum,INT);
	public: void ProcessPendingActions(FLOAT);
	public: void RangedAttackProcess(FLOAT);
	public: void ReSetBoneAttachedAdditionalEffect();
	public: void RemoveChannelingActorID(INT);
	public: void RemoveMeFromAssociatedActorsSpelledEffect();
	public: void RemoveMeFromMagicTargetsSpelledEffect(struct FNMagicInfo*);
	public: void ResetGauge();
	public: void SetAgathion(INT,INT,FVector);
	public: void SetAgathionVisible(INT);
	public: void SetAnchor(ANavigationPoINT*);
	public: void SetCubicVisible(INT);
	public: void SetCustomHairColor(FLOAT,FLOAT,FLOAT);
	public: void SetCustomHairColor(INT,INT,INT);
	public: void SetDriver(INT,APawn*);
	public: void SetFlyMoveType(enum FlyMoveState);
	public: void SetForcedLodModel(INT);
	public: void SetLastNecRot(FRotator const&);
	public: void SetLobbyWaitAnimName(wchar_t*);
	public: void SetPrimeActionID(enum NActionList);
	public: void SetPrimeActionTarget(AActor*);
	public: void SetRelativeCoords(AActor*);
	public: void SetRotationRate(FRotator const&);
	public: void SetSheathing(INT);
	public: void SetSkillAnimNameInfo(FName const&,struct FNMagicInfo*);
	public: void SetToNULLIfHavePoINTerToThisEmitter(AEmitter*);
	public: void SetToNullPawnLightOwner(AActor*);
	public: void SetUseDefaultMesh(INT);
	public: void SetVehicle(INT,INT const&);
	public: void SetWeaponHiding(INT,INT);
	public: void SetbUpdateMovementAnim(INT);
	public: void ShotAttackProcess(FLOAT);
	public: void SkillEffectFinalize(struct FNMagicInfo*);
	public: void SpawnEnterEvent();
	public: void SpawnIllusion(INT);
	public: void SpelledTargetDestroyNotify(AActor*);
	public: void SpineRotation(FLOAT);
	public: void StartJump(FVector const&,enum FlyMoveState);
	public: void StartJump(enum FlyMoveState);
	public: void StartMove(FVector const&,FVector const&,enum FlyMoveState);
	public: void StartMove(FVector const&,enum FlyMoveState);
	public: void StartNewSerpentine(FVector const&,FVector const&);
	public: void StopFlyMove();
	public: void StopSpellSound(struct FNMagicInfo*);
	public: void SwapController(APawn*);
	public: void SwordAttackProcess(FLOAT);
	public: void ThrowAttackProcess(FLOAT);
	public: void TickMoveInShuttle(FLOAT);
	public: void TickOnAirShip();
	public: void UltimateSkillNotify(INT);
	public: void UnCrouch(INT);
	public: void UpdateAutoTargetPendingTime(FLOAT);
	public: void UpdateBoneAttachedAdditionalEffect();
	public: void UpdateBubbles(FLOAT,FVector const&);
	public: void UpdateFootRotation(FLOAT);
	public: void UpdateMeshSound(FName,FName,FLOAT,FLOAT);
	public: void UpdatePawnLights(FLOAT);
	public: void UpdateWaistRotation(FLOAT);
	public: void UpdateWaterHitEffect(APhysicsVolume*);
	public: void UpdateWaterHitEffectMovement(FLOAT);
	public: void UseCustomHairColor(INT);
	public: void WaistRotation(FRotator,FLOAT,INT);
	public: void ZeroMovementAlpha(INT,INT,FLOAT);
	public: void eventAnimBegin(FName);
	public: void eventAssociateAttackedNotify(APawn*,AActor*,INT,INT,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD);
	public: void eventAttachShadowProjector();
	public: void eventAttackedNotify(APawn*,AActor*,INT,DWORD,DWORD);
	public: void eventBreathTimer();
	public: void eventChangeAnimation();
	public: void eventChangePawnState(INT);
	public: void eventClientMessage(FString const&,FName);
	public: void eventDestroyShadowProjector();
	public: void eventEndCrouch(FLOAT);
	public: void eventHeadVolumeChange(APhysicsVolume*);
	public: void eventModifyVelocity(FLOAT,FVector);
	public: void eventNotifyDie();
	public: void eventPlayDying(UClass*,FVector);
	public: void eventPlayFalling();
	public: void eventPlayJump();
	public: void eventPlayLandingAnimation(FLOAT);
	public: void eventSetAnimAction(FName);
	public: void eventSetHeadScale(FLOAT);
	public: void eventSetWalking(DWORD);
	public: void eventStartCrouch(FLOAT);
	public: void eventStopPlayFiring();
	public: void eventUpdateEyeHeight(FLOAT);
	public: void execAddHungerEffect(struct FFrame&,void* const);
	public: void execForceCrouch(struct FFrame&,void* const);
	public: void execGetAtkWaitAnimName(struct FFrame&,void* const);
	public: void execGetDeathWaitAnimName(struct FFrame&,void* const);
	public: void execGetDefenseItemSound(struct FFrame&,void* const);
	public: void execGetRefSkeletonNum(struct FFrame&,void* const);
	public: void execGetRunAnimName(struct FFrame&,void* const);
	public: void execGetShieldItemSound(struct FFrame&,void* const);
	public: void execGetSitWaitAnimName(struct FFrame&,void* const);
	public: void execGetSwimAttackWaitAnimName(struct FFrame&,void* const);
	public: void execGetSwimWaitAnimName(struct FFrame&,void* const);
	public: void execGetWaitAnimName(struct FFrame&,void* const);
	public: void execGetWalkAnimName(struct FFrame&,void* const);
	public: void execIsMeshLoaded(struct FFrame&,void* const);
	public: void execPlayAnimUM(struct FFrame&,void* const);
	public: void execReachedDestination(struct FFrame&,void* const);
	public: void execRemoveHungerEffect(struct FFrame&,void* const);
	public: void execSetRelativeCoords(struct FFrame&,void* const);
	public: void execSetWeaponHide(struct FFrame&,void* const);
	public: void physFollowing(FLOAT);
	public: void physLadder(FLOAT,INT);
	public: void physNMover(FLOAT,INT);
	public: void physSlide(FLOAT,INT);
	public: void physSpider(FLOAT,INT);
	public: void physSwimming(FLOAT,INT);
	public: void physWalking(FLOAT,INT);
	public: void rotateToward(AActor*,FVector);
	public: void setMoveTimer(FLOAT);
	public: void startNewPhysics(FLOAT,INT);
	public: void startSwimming(FVector const&,FVector const&,FLOAT,FLOAT,INT);
	public: wchar_t* GetQuestMarkEffectName(INT);
	wchar_t const* const `public: INT IsPlayingCastAnim()'::`3'::__FUNC_NAME__;
APhysicsVolume
	public: APhysicsVolume();
	public: APhysicsVolume(APhysicsVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void SetZone(INT,INT);
	public: virtual ~APhysicsVolume();
	public: void eventActorEnteredVolume(AActor*);
	public: void eventActorLeavingVolume(AActor*);
	public: void eventGetHitEffectName(FName&,FName&);
	public: void eventPawnEnteredVolume(APawn*);
	public: void eventPawnLeavingVolume(APawn*);
	public: void eventPhysicsChangedFor(AActor*);
APickup
	public: APickup();
	public: APickup(APickup const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void CheckForErrors();
	public: virtual void ClearMarker();
	public: virtual ~APickup();
	public: void execAddToNavigation(struct FFrame&,void* const);
	public: void execRemoveFromNavigation(struct FFrame&,void* const);
APlayerController
	public: APlayerController();
	public: APlayerController(APlayerController const&);
	public: DWORD eventRemoveCameraEffect(UCameraEffect*);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* GetViewTarget();
	public: virtual INT IsAPlayerController();
	public: virtual INT IsNetRelevantFor(APlayerController*,AActor*,FVector const&);
	public: virtual INT LocalPlayerController();
	public: virtual INT StopAtLedge();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual INT WantsLedgeCheck();
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual UCheatManager* GetCheatManager();
	public: virtual UPlayerInput* GetPlayerInput();
	public: virtual void CheckHearSound(AActor*,INT,USound*,FVector const&,FLOAT,INT);
	public: virtual void PlayerCalcView(AActor*,FVector*,FRotator*);
	public: virtual void PostScriptDestroyed();
	public: virtual void SetCheatManager(UCheatManager*);
	public: virtual void SetPlayerInput(UPlayerInput*);
	public: virtual void SetRequestedItemMusic(wchar_t*,FLOAT,bool);
	public: virtual void SetRequestedServerMusic(wchar_t*,FLOAT);
	public: virtual void SetRequestedServerVoice(wchar_t*,FLOAT,INT);
	public: virtual ~APlayerController();
	public: void SetPlayer(UPlayer*);
	public: void eventAddCameraEffect(UCameraEffect*,DWORD);
	public: void eventAddCheatManager();
	public: void eventClientCloseMenu(DWORD,DWORD);
	public: void eventClientHearSound(AActor*,INT,USound*,FVector,FVector,DWORD);
	public: void eventClientMessage(FString const&,FName);
	public: void eventClientOpenMenu(FString const&,DWORD,FString const&,FString const&);
	public: void eventClientSetViewTarget(AActor*);
	public: void eventClientTravel(FString const&,unsigned char,DWORD);
	public: void eventClientValidate(FString const&);
	public: void eventInitInputSystem();
	public: void eventPlayerCalcView(AActor*&,FVector&,FRotator&);
	public: void eventPlayerTick(FLOAT);
	public: void eventPreClientTravel();
	public: void eventReceiveLocalizedMessage(UClass*,INT,APlayerReplicationInfo*,APlayerReplicationInfo*,UObject*);
	public: void eventServerChangeVoiceChatter(APlayerController*,INT,INT,DWORD);
	public: void eventServerGetVoiceChatters(APlayerController*);
	public: void eventServerValidationResponse(FString const&);
	public: void eventSetProgressMessage(INT,FString const&,FColor);
	public: void eventSetProgressTime(FLOAT);
	public: void eventTeamMessage(APlayerReplicationInfo*,FString const&,FName);
	public: void execChangeVoiceChatter(struct FFrame&,void* const);
	public: void execClientHearSound(struct FFrame&,void* const);
	public: void execClientTravel(struct FFrame&,void* const);
	public: void execClientValidate(struct FFrame&,void* const);
	public: void execConsoleCommand(struct FFrame&,void* const);
	public: void execCopyToClipboard(struct FFrame&,void* const);
	public: void execFindStairRotation(struct FFrame&,void* const);
	public: void execGetDefaultURL(struct FFrame&,void* const);
	public: void execGetEntryLevel(struct FFrame&,void* const);
	public: void execGetPlayerNetworkAddress(struct FFrame&,void* const);
	public: void execGetServerNetworkAddress(struct FFrame&,void* const);
	public: void execIsPawnViewMode(struct FFrame&,void* const);
	public: void execLeaveVoiceChat(struct FFrame&,void* const);
	public: void execPasteFromClipboard(struct FFrame&,void* const);
	public: void execResetKeyboard(struct FFrame&,void* const);
	public: void execServerValidationResponse(struct FFrame&,void* const);
	public: void execSetViewTarget(struct FFrame&,void* const);
	public: void execUpdateURL(struct FFrame&,void* const);
APlayerReplicationInfo
	public: APlayerReplicationInfo();
	public: APlayerReplicationInfo(APlayerReplicationInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void PostNetReceive();
	public: virtual ~APlayerReplicationInfo();
	public: void eventClientNameChange();
	public: void eventUpdateCharacter();
APlayerStart
	public: APlayerStart();
	public: APlayerStart(APlayerStart const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~APlayerStart();
APolyMarker
	protected: APolyMarker();
	public: APolyMarker(APolyMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~APolyMarker();
APotentialClimbWatcher
	protected: APotentialClimbWatcher();
	public: APotentialClimbWatcher(APotentialClimbWatcher const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~APotentialClimbWatcher();
APowerups
	public: APowerups();
	public: APowerups(APowerups const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~APowerups();
AProjectedEmitter
	public: AProjectedEmitter();
	public: AProjectedEmitter(AProjectedEmitter const&);
	public: INT GetLODLevel(UViewport*);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void ClearL2Game();
	public: virtual void Destroy();
	public: virtual void PostBeginPlay();
	public: virtual void PostEditChange();
	public: virtual void PostEditMove();
	public: virtual void PostLoad();
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual ~AProjectedEmitter();
	public: void CalculateBoundingVolumeValues();
	public: void CreateParticleProjector();
	public: void CreateRenderTexture();
	public: void DeleteRenderTexture();
	public: void DestroyParticleProjector();
	public: void SetRenderTargetSize(UViewport*);
AProjectile
	public: AProjectile();
	public: AProjectile(AProjectile const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsAProjectile()const;
	public: virtual INT ShrinkCollision(AActor*);
	public: virtual void BoundProjectileVelocity();
	public: virtual ~AProjectile();
AProjector
	public: AProjector();
	public: AProjector(AProjector const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual UPrimitive* GetPrimitive();
	public: virtual void Abandon();
	public: virtual void Attach();
	public: virtual void CalcMatrix();
	public: virtual void Destroy();
	public: virtual void Detach(INT);
	public: virtual void PostEditChange();
	public: virtual void PostEditLoad();
	public: virtual void PostEditMove();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void TickSpecial(FLOAT);
	public: virtual void UpdateParticleMaterial(UParticleMaterial*,INT);
	public: virtual ~AProjector();
	public: void RenderWireframe(FRenderInterface*);
	public: void execAbandonProjector(struct FFrame&,void* const);
	public: void execAttachActor(struct FFrame&,void* const);
	public: void execAttachProjector(struct FFrame&,void* const);
	public: void execDetachActor(struct FFrame&,void* const);
	public: void execDetachProjector(struct FFrame&,void* const);
AReplicationInfo
	public: AReplicationInfo();
	public: AReplicationInfo(AReplicationInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AReplicationInfo();
ASavedMove
	protected: ASavedMove();
	public: ASavedMove(ASavedMove const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASavedMove();
ASceneManager
	public: ASceneManager();
	public: ASceneManager(ASceneManager const&);
	public: FLOAT GetActionPctFromScenePct(FLOAT);
	public: FLOAT GetTotalSceneTime();
	public: UMatAction* GetActionFromPct(FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void CheckForErrors();
	public: virtual void PostBeginPlay();
	public: virtual void PostEditChange();
	public: virtual ~ASceneManager();
	public: void ChangeOrientation(struct FOrientation);
	public: void CleanupPreviewActors();
	public: void DeletePathSamples();
	public: void InitializePreviewActors();
	public: void PreparePath();
	public: void RefreshSubActions(FLOAT);
	public: void SceneEnded();
	public: void SceneStarted();
	public: void SetCurrentTime(FLOAT);
	public: void SetSceneStartTime();
	public: void UpdatePreviewActors(FLOAT);
	public: void UpdateViewerFromPct(FLOAT);
	public: void eventSceneEnded();
	public: void eventSceneStarted(ALevelInfo*);
	public: void execGetTotalSceneTime(struct FFrame&,void* const);
AScout
	public: AScout();
	public: AScout(AScout const&);
	public: INT findStart(FVector);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT HurtByVolume(AActor*);
	public: virtual ~AScout();
	public: void InitForPathing();
ASecurity
	public: ASecurity();
	public: ASecurity(ASecurity const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASecurity();
	public: void eventServerCallback(INT,FString const&);
	public: void execNativePerform(struct FFrame&,void* const);
AServerBlockingVolume
	protected: AServerBlockingVolume();
	public: AServerBlockingVolume(AServerBlockingVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AServerBlockingVolume();
AServerPrimitive
	public: AServerPrimitive();
	public: AServerPrimitive(AServerPrimitive const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AServerPrimitive();
AShadowProjector
	protected: AShadowProjector();
	public: AShadowProjector(AShadowProjector const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AShadowProjector();
	public: void execCheckVisible(struct FFrame&,void* const);
	public: void execUpdateLightInfo(struct FFrame&,void* const);
AShuttle
	public: AShuttle();
	public: AShuttle(AShuttle const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetCurSpeed(INT);
	public: virtual INT IsLoaded();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void physFlying(FLOAT,INT);
	public: virtual ~AShuttle();
	public: void eventOnClose();
	public: void eventOnOpen();
AShuttleDoor
	public: AShuttleDoor();
	public: AShuttleDoor(AShuttleDoor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FVector GetCollisionLocation();
	public: virtual FVector GetCylinderExtent();
	public: virtual INT IsLoaded();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AShuttleDoor();
	public: void execClose(struct FFrame&,void* const);
	public: void execOpen(struct FFrame&,void* const);
AShuttleWall
	public: AShuttleWall();
	public: AShuttleWall(AShuttleWall const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FVector GetCollisionLocation();
	public: virtual FVector GetCylinderExtent();
	public: virtual INT IsLoaded();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AShuttleWall();
ASkyMeshActor
	protected: ASkyMeshActor();
	public: ASkyMeshActor(ASkyMeshActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASkyMeshActor();
ASkyRenderInfo
	public: ASkyRenderInfo();
	public: ASkyRenderInfo(ASkyRenderInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void Destroy();
	public: virtual ~ASkyRenderInfo();
ASkyZoneInfo
	protected: ASkyZoneInfo();
	public: ASkyZoneInfo(ASkyZoneInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASkyZoneInfo();
ASmallNavigationPoint
	protected: ASmallNavigationPoINT();
	public: ASmallNavigationPoINT(ASmallNavigationPoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASmallNavigationPoINT();
ASpawnableStaticMeshActor
	public: ASpawnableStaticMeshActor();
	public: ASpawnableStaticMeshActor(ASpawnableStaticMeshActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void OnGetMouseFocus();
	public: virtual void OnLostMouseFocus();
	public: virtual ~ASpawnableStaticMeshActor();
ASpawnedLight
	public: ASpawnedLight();
	public: ASpawnedLight(ASpawnedLight const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void Spawned();
	public: virtual ~ASpawnedLight();
AStatLog
	protected: AStatLog();
	public: AStatLog(AStatLog const&);
	public: FString eventGetLocalLogFileName();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AStatLog();
	public: void eventLogGameSpecial(FString const&,FString const&);
	public: void eventLogGameSpecial2(FString const&,FString const&,FString const&);
	public: void execBatchLocal(struct FFrame&,void* const);
	public: void execBrowseRelativeLocalURL(struct FFrame&,void* const);
	public: void execExecuteLocalLogBatcher(struct FFrame&,void* const);
	public: void execExecuteSilentLogBatcher(struct FFrame&,void* const);
	public: void execExecuteWorldLogBatcher(struct FFrame&,void* const);
	public: void execGetGMTRef(struct FFrame&,void* const);
	public: void execGetMapFileName(struct FFrame&,void* const);
	public: void execGetPlayerChecksum(struct FFrame&,void* const);
	public: void execInitialCheck(struct FFrame&,void* const);
	public: void execLogMutator(struct FFrame&,void* const);
AStatLogFile
	protected: AStatLogFile();
	public: AStatLogFile(AStatLogFile const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AStatLogFile();
	public: void execCloseLog(struct FFrame&,void* const);
	public: void execFileFlush(struct FFrame&,void* const);
	public: void execFileLog(struct FFrame&,void* const);
	public: void execGetChecksum(struct FFrame&,void* const);
	public: void execOpenLog(struct FFrame&,void* const);
	public: void execWatermark(struct FFrame&,void* const);
AStaticMeshActor
	public: AStaticMeshActor();
	public: AStaticMeshActor(AStaticMeshActor const&);
	public: INT GetZoneRenderState();
	public: INT HasDecoLayer()const;
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ClearBeastLightmapTexture(INT);
	public: virtual INT DestroyBeastLightmapTextures();
	public: virtual USound* GetStepSoundData();
	public: virtual void PostEditChange();
	public: virtual void PostEditLoad();
	public: virtual ~AStaticMeshActor();
	public: void UpdateDecorationLighting(FColor const&);
AStationaryWeapons
	public: AStationaryWeapons();
	public: AStationaryWeapons(AStationaryWeapons const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void PostNetReceive();
	public: virtual ~AStationaryWeapons();
	public: void eventActivated();
	public: void eventDeactivated();
ASuperPointInfo
	private: void UpdateCollisionInfo();
	public: ASuperPoINTInfo();
	public: ASuperPoINTInfo(ASuperPoINTInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual void PostEditLoad();
	public: virtual ~ASuperPoINTInfo();
ATeamInfo
	public: ATeamInfo();
	public: ATeamInfo(ATeamInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~ATeamInfo();
ATeleporter
	public: ATeleporter();
	public: ATeleporter(ATeleporter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~ATeleporter();
ATerrainInfo
	public: ATerrainInfo();
	public: ATerrainInfo(ATerrainInfo const&);
	public: FBox GetSelectedVerticesBounds();
	public: FColor GetTextureColor(INT,INT,UTexture*);
	public: FCoords GetLayerToMap(INT);
	public: FLOAT GetLayerXScaleToHeightmap(INT);
	public: FLOAT GetLayerYScaleToHeightmap(INT);
	public: FVector GetSafeDirectionForIntMap(INT);
	public: FVector GetVertexNormal(INT,INT);
	public: FVector HeightmapToWorld(FVector const&);
	public: FVector MakeVertex2DWithLayerPos(INT,INT,INT);
	public: FVector Vertices(INT);
	public: FVector Vertices(INT,INT);
	public: FVector WorldToHeightmap(FVector const&);
	public: INT GetClosestTilePos(INT,FVector const&,FVector*,INT*,INT*);
	public: INT GetClosestVertex(FVector const&,FVector*,INT*,INT*);
	public: INT GetDecoLayerAlpha(FVector,INT,FLOAT);
	public: INT GetEdgeTurnBitmap(INT,INT);
	public: INT GetEdgeTurnBitmapOrig(INT,INT);
	public: INT GetGlobalVertex(INT,INT);
	public: INT GetLayerHeight(INT);
	public: INT GetLayerWidth(INT);
	public: INT GetQuadVisibilityBitmap(INT,INT);
	public: INT GetQuadVisibilityBitmapOrig(INT,INT);
	public: INT GetShadowMapIndex(FLOAT);
	public: INT LineCheck(struct FCheckResult&,FVector const&,FVector const&,FVector const&,DWORD,INT);
	public: INT LineCheckWithQuad(INT,INT,struct FCheckResult&,FVector const&,FVector const&,FVector const&,DWORD,INT);
	public: INT PoINTCheck(struct FCheckResult&,FVector const&,FVector const&,INT);
	public: INT SelectVertex(FVector const&);
	public: INT SelectVertexX(INT,INT);
	public: INT UseLightmap();
	public: UMaterial* GetQuadDomMaterialBitmap(INT,INT);
	public: UTerrainSector* GetSector(INT)const;
	public: bool SetLightmapTextureSize(INT,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*);
	public: unsigned char GetLayerAlphaWithMaskPos(INT,INT,INT,UTexture*);
	public: unsigned short GetHeightmap(INT,INT);
	public: virtual INT ClearBeastLightmapTexture(INT);
	public: virtual INT DestroyBeastLightmapTextures();
	public: virtual UPrimitive* GetPrimitive();
	public: virtual void CheckForErrors();
	public: virtual void Destroy();
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~ATerrainInfo();
	public: void CalcCoords();
	public: void CalcLayerTexCoords();
	public: void CheckComputeDataOnLoad();
	public: void ClearDecorations();
	public: void ClearTerrain();
	public: void CombineLayerWeights();
	public: void ConvertHeightmapFormat();
	public: void InterpolateGlobalIntensityMap(struct FTerrainIntensityMap&,struct FTerrainIntensityMap const&,struct FTerrainIntensityMap const&,FLOAT,FLOAT);
	public: void MakeIntensityMap();
	public: void MoveVertices(FLOAT);
	public: void PrecomputeLayerWeights();
	public: void Render(FLevelSceneNode*,FRenderInterface*,FVisibilityInterface*,FDynamicLight**,INT,struct FProjectorRenderInfo**,INT);
	public: void RenderDecorations(FLevelSceneNode*,FRenderInterface*,FVisibilityInterface*);
	public: void RenderEditorSWTerrain(FLevelSceneNode*,FRenderInterface*,FVisibilityInterface*);
	public: void ResetMove();
	public: void SWUpdate(FLOAT,INT,INT,INT,INT,INT);
	public: void SWUpdateTriangles(INT,INT,INT,INT,INT);
	public: void SelectVerticesInBox(FBox&);
	public: void SetEdgeTurnBitmap(INT,INT,INT);
	public: void SetEditorSWTerrain(INT);
	public: void SetEndVertexZ(ATerrainInfo*);
	public: void SetHeightmap(INT,INT,unsigned short);
	public: void SetHoriEdge(ATerrainInfo*);
	public: void SetLayerAlpha(FLOAT,FLOAT,INT,unsigned char,UTexture*);
	public: void SetLayerAlphaWithMaskPos(INT,INT,INT,unsigned char);
	public: void SetQuadVisibilityBitmap(INT,INT,INT);
	public: void SetTextureColor(INT,INT,UTexture*,FColor&);
	public: void SetTimeForIndex(INT);
	public: void SetVertiEdge(ATerrainInfo*);
	public: void SetupSectors();
	public: void SoftDeselect();
	public: void SoftSelect(FLOAT,FLOAT);
	public: void SoftSelectNeighbor(ATerrainInfo*,FLOAT,FLOAT);
	public: void ToggleShowMapBug();
	public: void Update(FLOAT,INT,INT,INT,INT,INT);
	public: void UpdateDecorationLighting(INT*,INT);
	public: void UpdateDecorations(INT);
	public: void UpdateFromSelectedVertices();
	public: void UpdateShadow(INT*,INT);
	public: void UpdateShadow(UTerrainSector**,INT);
	public: void UpdateTriangles(INT,INT,INT,INT,INT);
	public: void UpdateVTGroup();
	public: void UpdateVertices(FLOAT,INT,INT,INT,INT);
	wchar_t const* const `public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*)'::`29'::__FUNC_NAME__;
	wchar_t const* const `public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*)'::`3'::__FUNC_NAME__;
	wchar_t const* const `public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*)'::`34'::__FUNC_NAME__;
	wchar_t const* const `public: unsigned short GetHeightmap(INT,INT)'::`3'::__FUNC_NAME__;
	wchar_t const* const `public: void SetHeightmap(INT,INT,unsigned short)'::`3'::__FUNC_NAME__;
ATerritoryInfo
	private: void UpdateCollisionInfo();
	public: ATerritoryInfo();
	public: ATerritoryInfo(ATerritoryInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual void PostEditLoad();
	public: virtual ~ATerritoryInfo();
ATrigger
	protected: ATrigger();
	public: ATrigger(ATrigger const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ATrigger();
ATriggers
	protected: ATriggers();
	public: ATriggers(ATriggers const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ATriggers();
AVehicle
	public: AVehicle();
	public: AVehicle(AVehicle const&);
	public: enum EVehicleType GetType();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FVector GetDriverLocation();
	public: virtual INT IsLoaded();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void UpdateDriver(APawn*);
	public: virtual void UpdateSound(FLOAT);
	public: virtual void physFlying(FLOAT,INT);
	public: virtual ~AVehicle();
	public: void ClearParts();
	public: void SetDriverPawn(INT,APawn*,FVector,INT);
	public: void eventOnBoost();
	public: void eventOnDriverIn(INT);
	public: void eventOnDriverOut();
	public: void eventOnMoveDown();
	public: void eventOnMoveUp();
	public: void eventOnStart();
	public: void eventOnStop();
	public: void eventOnTurning();
AVehicleMeshPart
	protected: AVehicleMeshPart();
	public: AVehicleMeshPart(AVehicleMeshPart const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AVehicleMeshPart();
	public: void eventOnBoost();
	public: void eventOnDriverIn(INT);
	public: void eventOnDriverOut();
	public: void eventOnMoveDown();
	public: void eventOnMoveUp();
	public: void eventOnStart();
	public: void eventOnStop();
	public: void eventOnTurning();
AVehiclePart
	protected: AVehiclePart();
	public: AVehiclePart(AVehiclePart const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AVehiclePart();
	public: void eventOnBoost();
	public: void eventOnDriverIn(INT);
	public: void eventOnDriverOut();
	public: void eventOnMoveDown();
	public: void eventOnMoveUp();
	public: void eventOnStart();
	public: void eventOnStop();
	public: void eventOnTurning();
AVehicleRoutePoint
	public: AVehicleRoutePoINT();
	public: AVehicleRoutePoINT(AVehicleRoutePoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~AVehicleRoutePoINT();
AVehicleServerPart
	protected: AVehicleServerPart();
	public: AVehicleServerPart(AVehicleServerPart const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AVehicleServerPart();
	public: void eventOnBoost();
	public: void eventOnDriverIn(INT);
	public: void eventOnDriverOut();
	public: void eventOnMoveDown();
	public: void eventOnMoveUp();
	public: void eventOnStart();
	public: void eventOnStop();
	public: void eventOnTurning();
AViewportWindowController
	public: AViewportWindowController();
	public: AViewportWindowController(AViewportWindowController const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AViewportWindowController();
	public: void CalcView(FVector&,FRotator&,FLOAT);
	public: void SetCalcStep(INT);
	public: void SetCameraEffectType(INT);
AVolume
	public: AVolume();
	public: AVolume(AVolume const&);
	public: INT Encompasses(FVector);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsAVolume();
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual void PostBeginPlay();
	public: virtual void SetVolumes();
	public: virtual ~AVolume();
	public: void execEncompasses(struct FFrame&,void* const);
AWarpZoneInfo
	public: AWarpZoneInfo();
	public: AWarpZoneInfo(AWarpZoneInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual ~AWarpZoneInfo();
	public: void eventForceGenerate();
	public: void eventGenerate();
	public: void execUnWarp(struct FFrame&,void* const);
	public: void execWarp(struct FFrame&,void* const);
AWarpZoneMarker
	public: AWarpZoneMarker();
	public: AWarpZoneMarker(AWarpZoneMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~AWarpZoneMarker();
AWaterHitEmitter
	protected: AWaterHitEmitter();
	public: AWaterHitEmitter(AWaterHitEmitter const&);
	public: FLOAT eventGetSpawnRate(FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AWaterHitEmitter();
AWeapon
	public: AWeapon();
	public: AWeapon(AWeapon const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AWeapon();
AWeaponAttachment
	public: AWeaponAttachment();
	public: AWeaponAttachment(AWeaponAttachment const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void PostNetReceive();
	public: virtual ~AWeaponAttachment();
	public: void eventThirdPersonEffects();
AZoneInfo
	public: AZoneInfo();
	public: AZoneInfo(AZoneInfo const&);
	public: INT GetCurZoneRenderState();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~AZoneInfo();
	public: void ChangeZoneState(INT);
	public: void eventActorEntered(AActor*);
	public: void eventActorLeaving(AActor*);
	public: void execZoneActors(struct FFrame&,void* const);
ActorFunc
	public: ActorFunc();
	public: ActorFunc(ActorFunc const&);
AutoClock
	public: AutoClock(DWORD*);
	public: AutoClock(INT*);
	public: ~AutoClock();
BR_EventManager
	public: BR_Event* GetEvent(INT);
	public: BR_EventManager();
	public: BR_EventManager(BR_EventManager const&);
	public: INT EndEvent(INT);
	public: INT GetEventInfo(INT,INT,void*);
	public: INT GetShowEventUI();
	public: INT PauseEvent(INT,bool);
	public: INT StartEvent(INT);
	public: bool Initialize();
	public: bool ProcessEventStatePacket(INT,INT,INT,INT,INT,INT,INT,wchar_t* const,wchar_t* const);
	public: virtual ~BR_EventManager();
	public: void Tick(FLOAT);
BR_GrpExchanger
	protected: bool ChangeNPC();
	protected: bool Load();
	protected: void ChangeNPCInfo(struct FL2NpcData*,struct FL2NpcData*);
	public: BR_GrpExchanger();
	public: BR_GrpExchanger(BR_GrpExchanger const&);
	public: bool Initialize();
	public: bool LoadAndChangeNPC();
	public: double GetHeightOffset(INT);
	public: virtual ~BR_GrpExchanger();
CAtmosphere
	private: void CalculateMieCoeff();
	private: void CalculateRayleighCoeff();
	public: CAtmosphere();
	public: FLOAT GetDirectionalityFactor();
	public: FVector GetBetaMie();
	public: FVector GetBetaMieTheta();
	public: FVector GetBetaRay();
	public: FVector GetBetaRayTheta();
	public: void SetDirectionalityFactor(FLOAT);
	public: void SetMieFactor(FLOAT);
	public: void SetRayFactor(FLOAT);
	public: void SetTurbidity(FLOAT);
	public: ~CAtmosphere();
CSceneManager
	private: CSceneManager();
	private: virtual ~CSceneManager();
	public: CAtmosphere* GetAtmosphere();
	public: CSceneManager(CSceneManager const&);
	public: CSun* GetSun();
CSun
	public: CSun(FLOAT,FLOAT,FLOAT);
	public: FLOAT GetIntensity();
	public: FVector& GetColor();
	public: FVector& GetDirection();
	public: void ComputeAttenuation();
	public: void SetIntensity(FLOAT);
	public: void SetPosition(FLOAT);
	public: void SetPosition(FLOAT,FLOAT);
	public: void SetTurbidity(FLOAT);
	public: ~CSun();
FActorSceneNode
	public: FActorSceneNode(FActorSceneNode const&);
	public: FActorSceneNode(UViewport*,FRenderTarget*,AActor*,AActor*,FVector const&,FRotator const&,FLOAT);
	public: virtual FActorSceneNode* GetActorSceneNode();
	public: virtual void Render(FRenderInterface*);
	public: virtual ~FActorSceneNode();
FAnywhereNpcMaker
	public: FAnywhereNpcMaker();
	public: FAnywhereNpcMaker(struct FAnywhereNpcMaker const&);
	public: ~FAnywhereNpcMaker();
FAuxRenderTarget
	public: FAuxRenderTarget(FAuxRenderTarget const&);
	public: FAuxRenderTarget(INT,INT,enum ETextureFormat,INT);
	public: virtual INT GetFirstMip();
	public: virtual INT GetHeight();
	public: virtual INT GetNumMips();
	public: virtual INT GetRevision();
	public: virtual INT GetWidth();
	public: virtual enum ETexClampMode GetUClamp();
	public: virtual enum ETexClampMode GetVClamp();
	public: virtual enum ETextureFormat GetFormat();
	public: virtual ~FAuxRenderTarget();
FBezierContPoint
	public: FBezierContPoINT();
FBoneAdditionalEffect
	public: FBoneAdditionalEffect();
FCameraSceneNode
	public: FCameraSceneNode(FCameraSceneNode const&);
	public: FCameraSceneNode(UViewport*,FRenderTarget*,AActor*,FVector const&,FRotator const&,FLOAT);
	public: virtual FCameraSceneNode* GetCameraSceneNode();
	public: virtual void Render(FRenderInterface*);
	public: virtual void UpdateMatrices();
	public: virtual ~FCameraSceneNode();
FCanvasConsoleUtil
	public: FCanvasConsoleUtil(FCanvasConsoleUtil const&);
	public: FCanvasConsoleUtil(FRenderTarget*,FRenderInterface*,enum EVertexShader,enum EPixelShader);
	public: virtual ~FCanvasConsoleUtil();
FCanvasUtil
	public: FCanvasUtil();
	public: FCanvasUtil(FCanvasUtil const&);
	public: FCanvasUtil(FRenderTarget*,FRenderInterface*,enum EVertexShader,enum EPixelShader);
	public: INT DrawString(INT,INT,INT,wchar_t const*,UFont*,FColor);
	public: INT EndCapture(UTexture*,INT,INT,INT,INT,INT);
	public: INT GetVertexNum();
	public: static FAuxRenderTarget* __cdecl GetCaptureRenderTarget();
	public: static void __cdecl StaticExit();
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetStreamData(void*);
	public: virtual ~FCanvasUtil();
	public: void AddVertex(FVector const&,FColor const&,FLOAT,FLOAT);
	public: void BeginPrimitive(enum EPrimitiveType,UMaterial*);
	public: void ClearRotation();
	public: void ClearVertices();
	public: void DrawCompassTile(FVector,FVector,FVector,FVector,UMaterial*);
	public: void DrawLine(FLOAT,FLOAT,FLOAT,FLOAT,FColor,INT);
	public: void DrawPoINT(FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FColor);
	public: void DrawRect(FLOAT,FLOAT,FLOAT,FLOAT,FColor);
	public: void DrawTile(FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,UMaterial*,FColor const&);
	public: void EmptyVertices();
	public: void Flush();
	public: void SetAxisAngleRotation(FVector,FLOAT,INT,INT);
	public: void SetPixelShader(enum EPixelShader);
	public: void SetRotation(FRotator,INT,INT);
	public: void SetSize(INT,INT);
	public: void SetVertexShader(enum EVertexShader);
	public: void StartCapture();
FCommandMacro
	public: FCommandMacro(UGameEngine*,unsigned char*,INT);
	public: INT IsFinished();
	public: INT IsWaiting(FLOAT);
	public: INT TagCommand();
	public: unsigned char* GetToken();
	public: void RunCommand();
	public: ~FCommandMacro();
FConsoleMessage
	public: FConsoleMessage();
	public: FConsoleMessage(struct FConsoleMessage const&);
	public: ~FConsoleMessage();
FDecoInfo
	public: FDecoInfo();
	public: FDecoInfo(struct FDecoInfo const&);
FDecorationLayer
	public: FDecorationLayer();
	public: FDecorationLayer(struct FDecorationLayer const&);
	public: ~FDecorationLayer();
FDepthOfField
	private: FDepthOfField();
	private: virtual ~FDepthOfField();
	public: FDepthOfField(FDepthOfField const&);
	public: FLOAT GetEndDistance()const;
	public: FLOAT GetFocus()const;
	public: FLOAT GetStartDistance()const;
	public: INT IsPaused()const;
	public: void Pause();
	public: void Resume();
	public: void SetEndDistance(FLOAT);
	public: void SetFocusActor(AActor const*);
	public: void SetFocusDistance(FLOAT);
	public: void SetFocusLocation(FVector const&);
	public: void SetFocusPlayer();
	public: void SetStartDistance(FLOAT);
FDynamicActor
	public: FDynamicActor(AActor*);
	public: FDynamicActor(FDynamicActor const&);
	public: INT CheckTranslucentRenderPriority(INT,FVector const&,FLOAT);
	public: INT IsUseStencilAlpha(FLevelSceneNode*,INT)const;
	public: void DrawChat(FLevelSceneNode*,FRenderInterface*,FVector,INT);
	public: void Render(FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT);
	public: void RenderStencilAlphaActor(FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*);
	public: void Update();
	public: ~FDynamicActor();
	wchar_t const* const `public: INT CheckTranslucentRenderPriority(INT,FVector const&,FLOAT)'::`3'::__FUNC_NAME__;
FDynamicLight
	public: FColor SampleLight(FVector const&,FVector const&,enum ELightColorType);
	public: FDynamicLight(AEmitterLight*);
	public: FDynamicLight(ALight*);
	public: FDynamicLight(FDynamicLight const&);
	public: FLOAT GetDirectIntensity(FVector const&);
	public: FLOAT SampleIntensity(FVector const&,FVector const&);
	public: FPlane GetLightColor(enum ELightColorType);
	public: FVector GetVertexLightmapColor(INT,FPlane const&,FVector const&)const;
	public: void SetLightColor(FPlane,enum ELightColorType);
	public: void Update();
FEffectPawnLightParam
	public: FEffectPawnLightParam();
	public: FEffectPawnLightParam(struct FEffectPawnLightParam const&);
FEngineStats
	public: FEngineStats();
	public: void Destroy();
	public: void Init();
FFlashData
	public: FFlashData(FFlashData const&);
	public: FFlashData(UGFxFlash*);
	public: ~FFlashData();
FGPUSkinVertexStream
	public: FGPUSkinVertexStream();
	public: FGPUSkinVertexStream(FGPUSkinVertexStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetStreamData(void*);
	public: virtual ~FGPUSkinVertexStream();
FHitCause
	public: FHitCause(FHitObserver*,UViewport*,DWORD,FLOAT,FLOAT);
FKeyValuePair
	public: FKeyValuePair();
	public: FKeyValuePair(struct FKeyValuePair const&);
	public: ~FKeyValuePair();
FL2AdditionalEffectData
	public: FL2AdditionalEffectData();
	public: FL2AdditionalEffectData(struct FL2AdditionalEffectData const&);
	public: void Serialize(FArchive&);
	public: ~FL2AdditionalEffectData();
FL2AlterAbnormalStatusManager
	private: void ClearList();
	private: void MakeList();
	public: FL2AlterAbnormalStatusList const& GetAlterAbnormalStatusList(enum ObjectType)const;
	public: FL2AlterAbnormalStatusManager();
	public: FL2AlterAbnormalStatusManager(FL2AlterAbnormalStatusManager const&);
	public: INT GetAlterAbnormalStatusNum()const;
	public: enum ObjectType ConvertStringToObjectType(FString const&)const;
	public: void AddAbnormalStatus(enum ObjectType,INT,INT);
	public: void Initialize();
	public: void Release();
	public: ~FL2AlterAbnormalStatusManager();
FL2AlterSkillData
	public: FL2AlterSkillData();
	public: void Serialize(FArchive&);
FL2ArmorItemData
	public: FL2ArmorItemData();
	public: FL2ArmorItemData(FL2ArmorItemData const&);
	public: FName GetExMeshName(INT,INT);
	public: FName GetExTexName(INT,INT);
	public: virtual FName GetMeshName(INT,INT);
	public: virtual FName GetTexName(INT,INT);
	public: virtual INT GetTexNum(INT);
	public: void CheckResource(INT,INT);
	public: void Serialize(FArchive&);
	public: ~FL2ArmorItemData();
FL2CharData
	public: FL2CharData();
	public: FL2CharData(struct FL2CharData const&);
	public: void CheckResource(INT,INT,INT);
	public: void Serialize(FArchive&);
	public: ~FL2CharData();
FL2EnterEventData
	public: FL2EnterEventData();
	public: FL2EnterEventData(struct FL2EnterEventData const&);
	public: void CheckResource(INT,INT,INT);
	public: void Serialize(FArchive&);
	public: ~FL2EnterEventData();
FL2EtcItemData
	public: FL2EtcItemData();
	public: FL2EtcItemData(FL2EtcItemData const&);
	public: virtual FName GetMeshName(INT,INT);
	public: virtual FName GetTexName(INT,INT);
	public: virtual INT GetTexNum(INT);
	public: void CheckResource(INT,INT);
	public: void Serialize(FArchive&);
	public: ~FL2EtcItemData();
FL2ExceptionMinimapData
	public: FL2ExceptionMinimapData();
	public: FL2ExceptionMinimapData(struct FL2ExceptionMinimapData const&);
	public: void Serialize(FArchive&);
	public: ~FL2ExceptionMinimapData();
FL2GameData
	private: FZoneNameInfo* processGetZoneNameInfo(INT,INT,INT);
	private: INT CheckSafePackage(FArchive&);
	private: INT IsSameStatisticTypeSibling(struct FL2StatisticData const&)const;
	private: INT LoadL2DataTxt(FString const&,FL2DataManager*,bool);
	private: void LoadL2DataBin(FString const&,FL2DataManager*);
	private: void MakeSafePackage(FArchive&);
	private: void SaveL2DataBin(FString const&,FL2DataManager*,INT);
	public: FAgitInfo* GetAgitInfo(INT);
	public: FL2GameData();
	public: FL2GameData(FL2GameData const&);
	public: FL2ItemDataBase* GetItemData(INT);
	public: FL2ItemStatData* GetItemStatData(INT);
	public: FName GetDualCastTypeData(FString const&,enum MagicInfoSlot);
	public: FString GetBinFileName(FString const&);
	public: FString GetCmdStringByActionID(INT);
	public: FString GetItemSetEffect(INT,INT,INT)const;
	public: FString GetTextFileName(FString const&);
	public: FString GetTitleNameOfStatisticData(INT,FString const&)const;
	public: FZoneNameInfo* GetInvalidZoneNameInfo()const;
	public: FZoneNameInfo* GetZoneNameInfo(INT,INT,INT,FLOAT);
	public: INT AbnormalDefaultEffectDataLoad(INT);
	public: INT ActionDataLoad(INT);
	public: INT AdditionalEffectDataLoad(INT);
	public: INT AdditionalEffectDataLoadAdditional();
	public: INT AdditionalItemgrpDataLoad(INT);
	public: INT AdditionalNpcPartsDataLoad(INT);
	public: INT AlterSkillDataLoad(INT);
	public: INT AnimationComboLoad(INT);
	public: INT ArmorItemDataLoad(INT);
	public: INT ArmorItemDataLoadAdditional();
	public: INT CastleNameDataLoad(INT);
	public: INT CharCreateDataLoad(INT);
	public: INT CharDataLoad(INT);
	public: INT ClassInfoLoad(INT);
	public: INT ClientDataLoad(INT);
	public: INT CommandDataLoad(INT);
	public: INT CreditLoad(INT);
	public: INT DualCastTypeDataLoad(INT);
	public: INT DynamicContentDataLoad(INT);
	public: INT EnterEventDataLoad(INT);
	public: INT EtcItemDataLoad(INT);
	public: INT EtcItemDataLoadAdditional();
	public: INT EulaLoad(INT);
	public: INT EventContentDataLoad(INT);
	public: INT EventContentGoalDataLoad(INT);
	public: INT ExceptionMinimapDataLoad(INT);
	public: INT FlyMoveNameLoad(INT);
	public: INT GameTipDataLoad(INT);
	public: INT GetAgitAccessoryInfo(INT,INT);
	public: INT GetCommandType(wchar_t const*);
	public: INT GetCommandTypeFromAction(wchar_t const*);
	public: INT GetCurrentZoneID()const;
	public: INT GetCurrentZoneIDInScript()const;
	public: INT GetGameTipDataCount();
	public: INT GetItemNameClass(INT);
	public: INT GetItemPopMsgNum(INT);
	public: INT GetItemSetEnchantCount(INT);
	public: INT GetRangedConsumeItemIndex(INT,INT);
	public: INT GetSetItemFirstID(INT,INT,INT);
	public: INT GetSetItemNum(INT,INT);
	public: INT GetTextInformation(FArchive*,unsigned char**,INT&,INT);
	public: INT GetZoneID(FLOAT,FLOAT,FLOAT);
	public: INT GetZoneID(FVector);
	public: INT GoodsIconDataLoad(INT);
	public: INT HairAcceLocDataLoad(INT);
	public: INT HennaDataLoad(INT);
	public: INT HuntingZoneDataLoad(INT);
	public: INT IDCNameLoad(INT);
	public: INT InstantZoneDataLoad(INT);
	public: INT IsRaidStatisticData(INT,INT)const;
	public: INT ItemNameDataLoad(INT);
	public: INT ItemStatDataLoad(INT);
	public: INT L224hzSchemaLoad(INT);
	public: INT Load(INT);
	public: INT Load(INT,FString&);
	public: INT LogonDataLoad(INT);
	public: INT MSGrpDataLoad(INT);
	public: INT MSGrpDataLoadAdditional();
	public: INT MSItemNameDataLoad(INT);
	public: INT MantleExceptionDataLoad(INT);
	public: INT MusicDataLoad(INT);
	public: INT NpcGrpDataLoadAdditional();
	public: INT NpcGrpLoad(INT);
	public: INT NpcNameDataLoad(INT);
	public: INT NpcSkillAnimDataLoad(INT);
	public: INT NpcStringLoad(INT);
	public: INT ObsceneDataLoad(INT);
	public: INT PartsAbNormalVisualEffectDataLoad(INT);
	public: INT PawnAnimDataLoad(INT);
	public: INT PostEffectDataLoad(INT);
	public: INT ProductDataLoad(INT);
	public: INT QuestDataLoad(INT);
	public: INT QuestMarkConditionDataLoad(INT);
	public: INT RaidDataLoad(INT);
	public: INT RecipeDataLoad(INT);
	public: INT RideDataLoad(INT);
	public: INT ScenePlayerDataLoad(INT);
	public: INT ServerDataCreate(INT);
	public: INT ServerDataLoad(INT);
	public: INT ServerNameLoad(INT);
	public: INT ShortcutDataLoad(INT);
	public: INT ShuttleDataLoad(INT);
	public: INT SkillConditionDataLoad(INT);
	public: INT SkillSndDataLoad(INT);
	public: INT SkillSndSrcDataLoad(INT);
	public: INT StaticObjectInfoLoad(INT);
	public: INT StatisticDataLoad(INT);
	public: INT SymbolInfoLoad(INT);
	public: INT SysStringLoad(INT);
	public: INT SystemMsgFormatLoad(INT);
	public: INT TransformDataLoad(INT);
	public: INT UsmMovieDataLoad(INT);
	public: INT VariationEffectDataLoad(INT);
	public: INT VariationOptionDataLoad(INT);
	public: INT VehiclePartsDataLoad(INT);
	public: INT WarningNoticeLoad(INT);
	public: INT WeaponEnchantEffectDataLoad(INT);
	public: INT WeaponItemDataLoad(INT);
	public: INT WeaponItemDataLoadAdditional();
	public: INT ZoneNameListLoad(INT);
	public: INT const GetCharDataMeshInfo(FString const&,enum RaceType&,enum ClassType&,enum ESexType&)const;
	public: INT const GetItemSetEffectCount(INT,INT)const;
	public: INT const GetNpcSummonGrade(INT);
	public: INT const GetNpcSummonMaxCount(INT);
	public: INT const GetNpcSummonSort(INT);
	public: INT const GetRequirementSetPeaceCount(INT,INT,INT)const;
	public: UMaterial* GetAgitWallPaper(INT);
	public: UTexture* GetSymbolTextureFromAlias(wchar_t*);
	public: UTexture* GetZoneNameTexture(INT,INT);
	public: bool IsExistSetItem(INT,INT,INT);
	public: struct DynamicContentData const* GetDynamicContentData(INT,INT);
	public: struct EventContentData const* GetEventContentData(INT,INT);
	public: struct EventContentGoalData const* GetEventContentGoalData(INT);
	public: struct FL2AlterSkillData const& GetAlterSkillData(INT)const;
	public: struct FL2AlterSkillData* GetAlterSkillData(INT,INT);
	public: struct FL2AnimationCombo const* GetAnimationCombo(FName);
	public: struct FL2CastleData* GetCastleData(INT);
	public: struct FL2ClientData* GetClientData(INT);
	public: struct FL2EnterEventData* GetEnterEventData(INT);
	public: struct FL2EnterEventData* GetExitEventData(INT);
	public: struct FL2GameTipData* GetGameTipData(INT);
	public: struct FL2HennaData* GetHennaData(INT);
	public: struct FL2HuntingZoneData* GetHuntingZoneData(INT);
	public: struct FL2InstantZoneData* GetInstantZoneData(INT);
	public: struct FL2MSConditionData* GetMSConditionData(INT,INT);
	public: struct FL2MagicSkillCommandData* GetMSCommandData(wchar_t*);
	public: struct FL2MagicSkillData* GetMSData(INT,INT);
	public: struct FL2NpcSkillAnimData* GetNpcSkillAnimData(INT,INT);
	public: struct FL2PawnAnimData const* GetPawnAnimData(FName);
	public: struct FL2PostEffectData* GetPostEffectData(INT);
	public: struct FL2QuestData* GetQuestData(INT,INT);
	public: struct FL2QuestMarkConditionData* GetQuestMarkConditionData(INT,INT);
	public: struct FL2RaidData* GetRaidData(INT);
	public: struct FL2RecipeData* GetRecipeDataBy2Condition(INT,INT);
	public: struct FL2RecipeData* GetRecipeDataByIndex(INT);
	public: struct FL2RecipeData* GetRecipeDataByProductID(INT);
	public: struct FL2RecipeData* GetRecipeDataByRecipeID(INT);
	public: struct FL2RideData* GetRideData(INT);
	public: struct FL2ScenePlayerData* GetScenePlayerData(INT);
	public: struct FL2ServerData* GetServerData(INT);
	public: struct FL2ShortcutData* GetShortcutData(INT);
	public: struct FL2ShuttleData* GetShuttleData(INT);
	public: struct FL2SkillSoundData* GetSkillSoundData(INT,INT);
	public: struct FL2SkillSoundSourceData* GetSkillSoundSourceData(INT);
	public: struct FL2StatisticData const& GetRootOfStatisticData()const;
	public: struct FL2StatisticData const& GetStatisticData(INT)const;
	public: struct FL2StatisticData const& GetStatisticData(INT,INT)const;
	public: struct FL2TransformData* GetTransformData(INT,INT);
	public: struct FL2UsmMovieData* GetUsmMovieData(INT);
	public: struct FL2VariationEffectData* GetVariationEffectData(INT,INT,INT,INT);
	public: struct FL2VariationOptionData* GetVariationOptionData(INT);
	public: struct FL2VehiclePartsData* GetVehiclePartsData(INT);
	public: struct FL2WeaponEnchantEffectData* GetWeaponEnchantEffectData(enum CrystalType,INT,INT);
	public: struct FPartsAbNormalVisualEffectDataInfo* GetPartsDataToAbnormalVisualEffect(INT);
	public: virtual ~FL2GameData();
	public: void AbnormalDefaultEffectDataClear();
	public: void AbnormalDefaultEffectDataSave(INT);
	public: void ActionDataClear();
	public: void ActionDataSave(INT);
	public: void AddAgitInfo(INT,unsigned char*);
	public: void AdditionalEffectDataClear();
	public: void AdditionalEffectDataSave(INT);
	public: void AdditionalItemgrpDataSave(INT);
	public: void AdditionalNpcPartsDataSave(INT);
	public: void AlterSkillDataClear();
	public: void AlterSkillDataSave(INT);
	public: void AnimationComboClear();
	public: void AnimationComboSave(INT);
	public: void ArmorItemDataSave(INT);
	public: void CastleNameDataClear();
	public: void CastleNameDataSave(INT);
	public: void ChangeAgitData(INT,INT,unsigned char);
	public: void CharCreateDataSave(INT);
	public: void CharDataClear();
	public: void CharDataSave(INT);
	public: void ClassInfoClear();
	public: void ClassInfoSave(INT);
	public: void Clear();
	public: void ClearAgitInfo();
	public: void ClearHairAcceLocData();
	public: void ClearStaticObjectInfo();
	public: void ClearZoneNameInfo();
	public: void ClientDataClear();
	public: void ClientDataSave(INT);
	public: void CommandDataClear();
	public: void CommandDataSave(INT);
	public: void CommandStringClear();
	public: void CommandStringLoad(INT);
	public: void CreditSave(INT);
	public: void DeleteAgitInfo(INT);
	public: void DualCastTypeDataClear();
	public: void DualCastTypeDataSave(INT);
	public: void DynamicContentDataClear();
	public: void DynamicContentDataSave(INT);
	public: void EnterEventDataClear();
	public: void EnterEventDataSave(INT);
	public: void EtcItemDataSave(INT);
	public: void EulaClear();
	public: void EulaSave(INT);
	public: void EventContentDataClear();
	public: void EventContentDataSave(INT);
	public: void EventContentGoalDataClear();
	public: void EventContentGoalDataSave(INT);
	public: void ExceptionMinimapDataClear();
	public: void ExceptionMinimapDataSave(INT);
	public: void FlyMoveNameDataClear();
	public: void FlyMoveNameSave(INT);
	public: void GameTipDataClear();
	public: void GameTipDataSave(INT);
	public: void GoodsIconDataClear();
	public: void GoodsIconDataSave(INT);
	public: void HairAcceLocDataSave(INT);
	public: void HennaDataClear();
	public: void HennaDataSave(INT);
	public: void HuntingZoneDataClear();
	public: void HuntingZoneDataSave(INT);
	public: void IDCNameClear();
	public: void IDCNameSave(INT);
	public: void Init();
	public: void InstantZoneDataClear();
	public: void InstantZoneDataSave(INT);
	public: void ItemDataClear();
	public: void ItemDataSave(INT);
	public: void ItemNameDataClear();
	public: void ItemNameDataSave(INT);
	public: void ItemStatDataClear();
	public: void ItemStatDataSave(INT);
	public: void L224hzSchemaSave(INT);
	public: void LogonDataSave(INT);
	public: void MSCommandDataClear();
	public: void MSCommandDataLoad(INT);
	public: void MSConditionDataClear();
	public: void MSGrpDataSave(INT);
	public: void MSItemDataClear();
	public: void MSItemDataSave(INT);
	public: void MSItemNameDataClear();
	public: void MSItemNameDataSave(INT);
	public: void MantleExceptionDataClear();
	public: void MantleExceptionDataSave(INT);
	public: void MusicDataClear();
	public: void MusicDataSave(INT);
	public: void NewItemAdd();
	public: void NpcDataClear();
	public: void NpcDataSave(INT);
	public: void NpcGrpSave(INT);
	public: void NpcNameDataClear();
	public: void NpcNameDataSave(INT);
	public: void NpcPartsDataClear();
	public: void NpcSkillAnimDataClear();
	public: void NpcSkillAnimDataSave(INT);
	public: void NpcStringClear();
	public: void NpcStringSave(INT);
	public: void ObsceneDataClear();
	public: void ObsceneDataSave(INT);
	public: void PartsAbNormalVisualEffectDataClear();
	public: void PartsAbNormalVisualEffectDataSave(INT);
	public: void PawnAnimDataClear();
	public: void PawnAnimDataSave(INT);
	public: void PostEffectDataClear();
	public: void PostEffectDataSave(INT);
	public: void ProductDataClear();
	public: void ProductDataSave(INT);
	public: void QuestDataClear();
	public: void QuestDataSave(INT);
	public: void QuestMarkConditionDataClear();
	public: void QuestMarkConditionDataSave(INT);
	public: void RaidDataClear();
	public: void RaidDataSave(INT);
	public: void RecipeDataClear();
	public: void RecipeDataSave(INT);
	public: void RideDataClear();
	public: void RideDataSave(INT);
	public: void Save(INT);
	public: void Save(INT,FString&);
	public: void ScenePlayerDataClear();
	public: void ScenePlayerDataSave(INT);
	public: void ServerDataClear();
	public: void ServerDataSave(INT);
	public: void ServerNameClear();
	public: void ServerNameSave(INT);
	public: void SetAgitWallPaper(INT,UMaterial*);
	public: void ShortcutDataClear();
	public: void ShortcutDataSave(INT);
	public: void ShuttleDataClear();
	public: void ShuttleDataSave(INT);
	public: void SkillConditionDataSave(INT);
	public: void SkillSndDataClear();
	public: void SkillSndDataSave(INT);
	public: void SkillSndSrcDataClear();
	public: void SkillSndSrcDataSave(INT);
	public: void SoulShotDataClear();
	public: void SoulShotDataLoad();
	public: void StaticObjectInfoSave(INT);
	public: void StatisticDataClear();
	public: void StatisticDataSave(INT);
	public: void SymbolInfoClear();
	public: void SymbolInfoSave(INT);
	public: void SysStringClear();
	public: void SysStringSave(INT);
	public: void SystemMsgFormatClear();
	public: void SystemMsgFormatSave(INT);
	public: void TransformDataClear();
	public: void TransformDataSave(INT);
	public: void UpdateItemStatData(INT);
	public: void UsmMovieDataClear();
	public: void UsmMovieDataSave(INT);
	public: void VariationEffectDataClear();
	public: void VariationEffectDataSave(INT);
	public: void VariationOptionDataClear();
	public: void VariationOptionDataSave(INT);
	public: void VehiclePartsDataClear();
	public: void VehiclePartsDataSave(INT);
	public: void WarningNoticeClear();
	public: void WarningNoticeSave(INT);
	public: void WeaponEnchantEffectDataClear();
	public: void WeaponEnchantEffectDataSave(INT);
	public: void WeaponItemDataSave(INT);
	public: void ZoneNameListSave(INT);
	public: wchar_t const* FindFlyMoveName(INT,INT);
	public: wchar_t const* GetItemAdditionalName(INT);
	public: wchar_t const* GetItemDescription(INT);
	public: wchar_t const* GetItemName(INT);
	public: wchar_t const* GetItemSetEnchantEffect(INT);
	public: wchar_t const* GetMusicName(INT);
	public: wchar_t const* GetMusicNameSequence(INT,INT&);
	public: wchar_t const* GetNpcIconName(INT);
	public: wchar_t const* GetNpcName(INT);
	public: wchar_t const* GetStaticObjectName(INT);
	public: wchar_t const* GetStepSoundName(INT);
	public: wchar_t* GetCurrentZoneName();
	public: wchar_t* GetZoneName(FLOAT,FLOAT,FLOAT);
	public: wchar_t* GetZoneName(FVector);
	public: wchar_t* GetZoneName(INT);
FL2MagicSkillData
	public: FL2MagicSkillData();
	public: FL2MagicSkillData(struct FL2MagicSkillData const&);
	public: INT IsMagicAlterSkill()const;
	public: INT IsMagicToChangeByAttribute();
	public: INT IsMixMagicToggle();
	public: INT IsResistCast()const;
	public: void Serialize(FArchive&,INT);
	public: wchar_t* GetDescription();
	public: wchar_t* GetIconName();
	public: wchar_t* GetName();
	public: ~FL2MagicSkillData();
FL2NpcData
	public: FL2NpcData();
	public: FL2NpcData(struct FL2NpcData const&);
	public: FString GetName()const;
	public: FString GetNpcIconName()const;
	public: L2FName GetMeshName()const;
	public: bool HasProperQuest(INT,INT);
	public: void CheckResource(INT,INT,INT);
	public: void Serialize(FArchive&,INT);
	public: ~FL2NpcData();
FL2NpcSkillAnimData
	public: FL2NpcSkillAnimData();
	public: FL2NpcSkillAnimData(struct FL2NpcSkillAnimData const&);
	public: void CheckResource(INT,INT);
	public: void Serialize(FArchive&);
	public: ~FL2NpcSkillAnimData();
FL2PawnAnimContainer
	public: FL2PawnAnimContainer();
	public: FL2PawnAnimContainer(FL2PawnAnimContainer const&);
	public: void Init();
	public: void SetAnim(struct FL2PawnAnimData&,L2FName,enum EAnimIndex,INT);
	public: void SetFloat(struct FL2PawnAnimData&,FLOAT,enum EAnimIndex,INT);
	public: void SetInt(struct FL2PawnAnimData&,INT,enum EAnimIndex,INT);
	public: ~FL2PawnAnimContainer();
FL2PawnAnimData
	public: FL2PawnAnimData();
FL2PostEffectData
	public: FL2PostEffectData();
	public: void Serialize(FArchive&);
FL2QuestMarkConditionData
	public: FL2QuestMarkConditionData();
	public: FL2QuestMarkConditionData(struct FL2QuestMarkConditionData const&);
	public: INT CheckRaceThenClass(INT,INT)const;
	public: void Serialize(FArchive&);
	public: ~FL2QuestMarkConditionData();
FL2ReplayManager
	private: FString ImportLoadingTex();
	private: INT CameraInstructionBinLoad(INT);
	private: INT CameraInstructionSave();
	private: INT CameraInstructionTxtLoad(INT);
	private: INT EndPublicLoad();
	private: INT IsValidInstruction(INT);
	private: INT Load();
	private: INT PacketInstructionBinLoad(INT);
	private: INT PacketInstructionSave();
	private: INT PacketInstructionTxtLoad(INT);
	private: INT PrepareLoad();
	private: INT PublicModeLoad();
	private: INT PublicModeSave();
	private: INT ResourceListSave();
	private: INT ResourceLoad(INT);
	private: void CriticalError(wchar_t const*);
	private: void MakeUseCameraActionTable();
	private: void MakeUsePacketTable();
	private: void ProceedStep();
	private: void PublicModeLoadError(INT);
	private: void SetCameraPosition();
	private: void SetClientTime();
	public: FL2ReplayManager(FL2ReplayManager const&);
	public: FL2ReplayManager(INT);
	public: FLOAT GetPlaySpeed();
	public: INT AddCameraActionData(enum EInputKey,enum EInputAction,FLOAT);
	public: INT DrawName();
	public: INT GetState();
	public: INT GetStep();
	public: INT InputEvent(enum EInputKey,enum EInputAction,FLOAT);
	public: INT IsDiscardedBM();
	public: INT IsPaused();
	public: INT IsPublicMode();
	public: INT IsSaveState();
	public: INT OnPublicLoad(FString,INT,INT);
	public: INT ResourceSave();
	public: INT RewriteCameraInst();
	public: INT Save();
	public: INT SetSceneName(FString const&);
	public: INT UseBGM();
	public: INT UseBinCameraInst();
	public: INT UseCameraInst();
	public: INT UseChatData();
	public: double GetStartTime();
	public: void AddCurrentUsingPackageNames();
	public: void AddMapName(INT,INT);
	public: void AddMusicName(FString const&,INT);
	public: void AddPacketData(struct NetworkPacket*);
	public: void AddSceneName(FString,INT);
	public: void Clear(INT);
	public: void OnSaveStart();
	public: void OnSaveStartStop();
	public: void OnSaveStop();
	public: void PrepareSave(FString);
	public: void ResetBMData();
	public: void SetBGM(INT,FString);
	public: void SetCameraInstMode(INT);
	public: void SetDrawName(INT);
	public: void SetLoadingTexName(FString);
	public: void SetPublicMode(INT);
	public: void SetRewriteCameraInst(INT);
	public: void SetState(INT);
	public: void SetUseBGM(INT);
	public: void SetUseBinCameraInst(INT);
	public: void SetUseChatData(INT);
	public: void StopPlaying();
	public: void Tick(FLOAT);
	public: void UpdateBMFrameTime(double);
	public: wchar_t* GetBMScore();
	public: ~FL2ReplayManager();
FL2RideData
	public: FL2RideData();
	public: void Serialize(FArchive&);
FL2ScenePlayerData
	public: FL2ScenePlayerData();
	public: void Serialize(FArchive&);
FL2ShuttleData
	public: FL2ShuttleData();
	public: FL2ShuttleData(struct FL2ShuttleData const&);
	public: void Serialize(FArchive&);
	public: ~FL2ShuttleData();
FL2SkillSoundData
	public: FL2SkillSoundData();
	public: void CheckResource(INT);
	public: void Serialize(FArchive&);
FL2SkillSoundSourceData
	public: FL2SkillSoundSourceData();
	public: void Serialize(FArchive&);
FL2StatisticData
	private: __INT64 const& ConvertHourUnit(__INT64&)const;
	private: __INT64 const& ConvertMinuteUnit(__INT64&)const;
	public: FL2StatisticData();
	public: FL2StatisticData(struct FL2StatisticData const&);
	public: INT IsLeaf()const;
	public: INT IsRoot()const;
	public: __INT64 const& ConvertUnit(__INT64&)const;
	public: void Serialize(FArchive&);
	public: ~FL2StatisticData();
FL2TextAlignParser
	private: FString DivideTokenWithWidth(wchar_t*,INT);
	private: INT GetWordWidth(wchar_t*);
	private: UCanvas* GetCanvas();
	private: void GetNextTokenBuffer();
	public: FL2TextAlignParser();
	public: FL2TextAlignParser(FL2TextAlignParser const&);
	public: FL2TextAlignParser(wchar_t const*,FONTID&,DWORD,INT,INT);
	public: INT GetSpaceWidth();
	public: void Clear();
	public: void Destroy();
	public: void SetParserParam(wchar_t const*,FONTID&,DWORD,INT,INT);
	public: void SetWidthParam(DWORD);
	public: void SetWordWrap(INT);
	public: wchar_t const* GetLineBuffer(INT&);
	public: ~FL2TextAlignParser();
FL2VariationEffectData
	public: FL2VariationEffectData();
	public: FL2VariationEffectData(struct FL2VariationEffectData const&);
	public: void CheckResource(INT);
	public: void Serialize(FArchive&);
	public: ~FL2VariationEffectData();
FL2VehiclePartsData
	public: FL2VehiclePartsData();
	public: FL2VehiclePartsData(struct FL2VehiclePartsData const&);
	public: void CheckResource(INT,INT);
	public: void Serialize(FArchive&);
	public: ~FL2VehiclePartsData();
FL2WeaponEnchantEffectData
	public: FL2WeaponEnchantEffectData();
	public: FL2WeaponEnchantEffectData(struct FL2WeaponEnchantEffectData const&);
	public: void Serialize(FArchive&);
	public: ~FL2WeaponEnchantEffectData();
FL2WeaponItemData
	public: FL2WeaponItemData();
	public: FL2WeaponItemData(FL2WeaponItemData const&);
	public: FLOAT GetEnchantedEffectScale(INT);
	public: FLOAT GetEnchantedEffectVel(INT);
	public: FLOAT GetEnchantedParticleScale(INT);
	public: FName GetEnchantedEffect(INT);
	public: FName GetMeshName(INT);
	public: FName GetRoughMesh(INT);
	public: FName GetTexName(INT);
	public: FName GetVariationIconTexName(INT);
	public: FVector GetEnchantedEffectOffset(INT);
	public: FVector GetEnchantedParticleOffset(INT);
	public: FVector GetEnchantedRingOffset(INT);
	public: FVector GetEnchantedRingScale(INT);
	public: FVector GetRoughMeshOffset(INT);
	public: FVector GetRoughMeshScale(INT);
	public: INT GetMeshTexNum(INT);
	public: INT GetTexNum();
	public: INT GetVariationEffectType(INT);
	public: void CheckResource(INT,INT);
	public: void Serialize(FArchive&);
	public: ~FL2WeaponItemData();
FLandMark
	public: FLandMark(APawn*);
	public: FLandMark(FLandMark const&);
	public: INT IsLandMarkVisible();
	public: virtual ~FLandMark();
	public: void AddLandMark(FVector,FVector,INT);
	public: void DeleteLandMark(INT);
	public: void SetOwner(APawn*);
	public: void ToggleShowingKeyboardMovingLandMark();
	public: void Update(FLOAT);
	public: void UpdateKeyboardMovingLandMarkByClient(FVector);
	public: void UpdateKeyboardMovingLandMarkByServer(FVector,FVector);
FLevelSceneNode
	public: FLevelSceneNode(FLevelSceneNode const&);
	public: FLevelSceneNode(FLevelSceneNode*,INT,FMatrix);
	public: FLevelSceneNode(UViewport*,FRenderTarget*);
	public: virtual FConvexVolume GetViewFrustum();
	public: virtual FLevelSceneNode* GetLevelSceneNode();
	public: virtual INT FilterActor(AActor*);
	public: virtual INT FilterActorDynamic(AActor*);
	public: virtual INT FilterAttachment(AActor*);
	public: virtual INT FilterLevelObject(ULevelObject*);
	public: virtual INT FilterProjector(AProjector*);
	public: virtual INT UseStencilAlpha();
	public: virtual void Render(FRenderInterface*);
	public: virtual ~FLevelSceneNode();
FLineBatcher
	public: FLineBatcher(FLineBatcher const&);
	public: FLineBatcher(FRenderInterface*,INT);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetStreamData(void*);
	public: virtual ~FLineBatcher();
	public: void DrawBox(FBox const&,FColor);
	public: void DrawCircle(FVector const&,FVector const&,FVector const&,FColor,FLOAT,INT);
	public: void DrawConvexVolume(FConvexVolume const&,FColor);
	public: void DrawCylinder(FRenderInterface*,FVector const&,FVector const&,FVector const&,FVector const&,FColor,FLOAT,FLOAT,INT);
	public: void DrawCylinder(FRenderInterface*,FVector const&,FVector const&,FVector const&,FVector const&,FColor,FLOAT,FLOAT,INT,INT);
	public: void DrawCylinder(FVector const&,FVector const&,FColor,FLOAT,INT);
	public: void DrawDirectionalArrow(FVector const&,FRotator const&,FColor,FLOAT);
	public: void DrawLine(FVector const&,FVector const&,FColor);
	public: void DrawPoINT(FSceneNode*,FVector const&,FColor);
	public: void DrawSphere(FVector const&,FColor,FLOAT,INT);
	public: void Flush(DWORD);
FMaterialStageProperty
	public: FMaterialStageProperty();
	public: FMaterialStageProperty(FMaterialStageProperty const&);
	public: INT GetTexModifierMatrix(FLOAT,FMatrix&);
	public: UBitmapMaterial* GetMaterial(UPackage*);
	public: void Serialize(FArchive&);
	public: void SetMaterial(UBitmapMaterial*);
	public: ~FMaterialStageProperty();
FMatineeTools
	public: ASceneManager* GetCurrent();
	public: ASceneManager* SetCurrent(UEngine*,ULevel*,ASceneManager*);
	public: ASceneManager* SetCurrent(UEngine*,ULevel*,FString);
	public: FMatineeTools();
	public: FMatineeTools(FMatineeTools const&);
	public: FString GetOrientationDesc(INT);
	public: INT GetActionIdx(ASceneManager*,UMatAction*);
	public: INT GetPathStyle(UMatAction*);
	public: INT GetSubActionIdx(UMatSubAction*);
	public: UMatAction* GetCurrentAction();
	public: UMatAction* GetNextAction(ASceneManager*,UMatAction*);
	public: UMatAction* GetNextMovementAction(ASceneManager*,UMatAction*);
	public: UMatAction* GetPrevAction(ASceneManager*,UMatAction*);
	public: UMatAction* SetCurrentAction(UMatAction*);
	public: UMatSubAction* GetCurrentSubAction();
	public: UMatSubAction* SetCurrentSubAction(UMatSubAction*);
	public: virtual ~FMatineeTools();
	public: void Init();
FMeshComponentData
	public: FMeshComponentData();
	public: FMeshComponentData(struct FMeshComponentData const&);
	public: ~FMeshComponentData();
FMusicInfo
	public: FMusicInfo();
	public: void CheckResource(INT);
	public: void Serialize(FArchive&);
	public: ~FMusicInfo();
FMusicItem
	public: FMusicItem();
	public: FMusicItem(struct FMusicItem const&);
	public: ~FMusicItem();
FNCollisionInfo
	public: FNCollisionInfo();
FNIllusionParam
	public: FNIllusionParam();
FNMagicInfo
	public: AActor* GetTargetActor();
	public: FNMagicInfo();
	public: FNMagicInfo(struct FNMagicInfo const&);
	public: INT GetAssociatedActorCnt()const;
	public: INT IsAntarasSkill()const;
	public: INT IsCastingMultiShotSkill()const;
	public: INT IsNormalDrain()const;
	public: INT IsProjectileSkill()const;
	public: INT IsTimeToStartCasting()const;
	public: INT IsWorking()const;
	public: INT SkillsTargetNeedNotAttacker()const;
	public: void AddAssociatedActor(AActor*);
	public: void CastingEffect(APawn*,FLOAT);
	public: void Clear(INT);
	public: void EmptyAssociatedActor();
	public: void PlayAnimation(APawn*,INT);
	public: void PlayRumbleSelf(FLOAT);
	public: void ProcessCasting(FLOAT,APawn*,FLOAT);
	public: void ProcessPendingNotify(APawn*);
	public: void RemoveAssociatedActor(AActor*);
	public: void SetAnimName(INT,INT,FName const&,FName const&,FName const&);
	public: void SetTargetActor(AActor*);
	public: ~FNMagicInfo();
	wchar_t const* const `public: INT IsProjectileSkill()const '::`3'::__FUNC_NAME__;
FNPawnLight
	public: AActor* GetOwner()const;
	public: FColor SampleLight(FVector,FVector);
	public: FLOAT GetIntensity(FLOAT);
	public: FLOAT SampleIntensity(FVector,FVector);
	public: FNPawnLight(AActor*);
	public: FNPawnLight(FNPawnLight const&);
	public: FVector GetDirection();
	public: FVector GetPosition();
	public: INT Update(FLOAT);
	public: virtual ~FNPawnLight();
	public: void Init(INT,FVector,FRotator,unsigned char,unsigned char,FPlane,FLOAT,FLOAT,unsigned char);
	public: void SetOwner(AActor*);
FNPrimeActionParam
	public: FNPrimeActionParam();
	public: FNPrimeActionParam(struct FNPrimeActionParam const&);
	public: ~FNPrimeActionParam();
FNetworkNotify
	public: FNetworkNotify();
	public: FNetworkNotify(FNetworkNotify const&);
FNpcItem
	public: FNpcItem();
	public: FNpcItem(struct FNpcItem const&);
	public: ~FNpcItem();
FONTID
	public: FONTID();
	public: FONTID(unsigned INT);
	public: bool IsValid()const;
	public: unsigned INT GetValue()const;
	public: void Set(unsigned INT);
	public: void SetInvalid();
FOutBunch
	public: FOutBunch();
	public: FOutBunch(FOutBunch const&);
	public: FOutBunch(UChannel*,INT);
	public: virtual ~FOutBunch();
FParser
	private: INT IsSeperator(wchar_t);
	private: wchar_t* GetToken();
	public: FParser();
	public: FParser(FParser const&);
	public: INT GetCurPosition();
	public: virtual ~FParser();
	public: void SetSperator(wchar_t*);
	public: wchar_t* GetNextToken();
	public: wchar_t* GetRemainStr();
	public: wchar_t* SetString(wchar_t*);
FPathBuilder
	private: ANavigationPoINT* newPath(FVector);
	private: INT TestReach(FVector,FVector);
	private: INT TestWalk(FVector,struct FCheckResult,FLOAT);
	private: INT ValidNode(ANavigationPoINT*,AActor*);
	private: INT createPaths();
	private: void FindBlockingNormal(FVector&);
	private: void Pass2From(FVector,FVector,FLOAT);
	private: void SetPathCollision(INT);
	private: void getScout();
	private: void testPathsFrom(FVector);
	private: void testPathwithRadius(FVector,FLOAT);
	public: INT buildPaths(ULevel*);
	public: INT removePaths(ULevel*);
	public: void ReviewPaths(ULevel*);
	public: void defineChangedPaths(ULevel*);
	public: void definePaths(ULevel*);
	public: void undefinePaths(ULevel*);
FPcItem
	public: FPcItem();
	public: FPcItem(struct FPcItem const&);
	public: ~FPcItem();
FPixelShaderFunction
	public: FPixelShaderFunction();
	public: FPixelShaderFunction(enum EPSFBloom);
	public: FPixelShaderFunction(enum EPSFCommon);
	public: FPixelShaderFunction(enum EPSFEmitter);
	public: FPixelShaderFunction(enum EPSFGaussianFilter);
	public: FPixelShaderFunction(enum EPSFSSAO);
	public: FPixelShaderFunction(enum EPSFShadowMap);
	public: FPixelShaderFunction(enum EPSFVertexLight);
	public: enum EPixelShader GetPixelShader()const;
FPlayerResponseLine
	public: FPlayerResponseLine();
	public: FPlayerResponseLine(struct FPlayerResponseLine const&);
	public: ~FPlayerResponseLine();
FPlayerSceneNode
	public: FPlayerSceneNode(FPlayerSceneNode const&);
	public: FPlayerSceneNode(UViewport*,FRenderTarget*,AActor*,FVector const&,FRotator const&,FLOAT);
	public: static FAuxRenderTarget* __cdecl GetRefractionBkTex(UViewport*);
	public: static FAuxRenderTarget* __cdecl GetRefractionParticlesTex(UViewport*);
	public: virtual FPlayerSceneNode* GetPlayerSceneNode();
	public: virtual void Render(FRenderInterface*);
	public: virtual ~FPlayerSceneNode();
FPointRegion
	public: FPoINTRegion();
	public: FPoINTRegion(AZoneInfo*);
	public: FPoINTRegion(AZoneInfo*,INT,unsigned char);
FPoly
	public: FLOAT Area();
	public: FPoly();
	public: FVector GetTextureSize();
	public: INT CalcNormal(INT);
	public: INT DoesLineIntersect(FVector,FVector,FVector*);
	public: INT Faces(FPoly const&)const;
	public: INT Finalize(INT);
	public: INT Fix();
	public: INT IsBackfaced(FVector const&)const;
	public: INT IsCoplanar(FPoly const&)const;
	public: INT OnPlane(FVector);
	public: INT OnPoly(FVector);
	public: INT RemoveColinears();
	public: INT Split(FVector const&,FVector const&,INT);
	public: INT SplitWithNode(UModel const*,INT,FPoly*,FPoly*,INT)const;
	public: INT SplitWithPlane(FVector const&,FVector const&,FPoly*,FPoly*,INT)const;
	public: INT SplitWithPlaneFast(FPlane,FPoly*,FPoly*)const;
	public: void Init();
	public: void InsertVertex(INT,FVector);
	public: void Reverse();
	public: void SplitInHalf(FPoly*);
	public: void Transform(FModelCoords const&,FVector const&,FVector const&,FLOAT);
FProjectedRegionEffect
	public: FProjectedRegionEffect();
	public: void CreateProjectedRegionEffect(FString,FVector,AActor*);
	public: void DestroyProjectedRegionEffect();
	public: void HideProjectedRegionEffect();
	public: void SetProjRegionEffectLocation(FVector);
	public: void SetProjRegionEffectSize(FLOAT);
	public: void ShowProjectedRegionEffect();
	public: ~FProjectedRegionEffect();
FRawIndexBuffer
	public: FRawIndexBuffer();
	public: FRawIndexBuffer(FRawIndexBuffer const&);
	public: virtual INT GetIndexSize();
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT Stripify();
	public: virtual void CacheOptimize();
	public: virtual void GetContents(void*);
	public: virtual ~FRawIndexBuffer();
FRebuildOptions
	public: FRebuildOptions();
	public: FRebuildOptions(FRebuildOptions const&);
	public: FString GetName();
	public: void Init();
	public: ~FRebuildOptions();
FRebuildTools
	public: FRebuildOptions* GetCurrent();
	public: FRebuildOptions* GetFromName(FString);
	public: FRebuildOptions* Save(FString);
	public: FRebuildTools();
	public: FRebuildTools(FRebuildTools const&);
	public: INT GetIdxFromName(FString);
	public: void Delete(FString);
	public: void Init();
	public: void SetCurrent(FString);
	public: void Shutdown();
	public: ~FRebuildTools();
FRenderResource
	public: FRenderResource();
	public: FRenderResource(FRenderResource const&);
	public: virtual unsigned __INT64 GetCacheId();
	public: virtual ~FRenderResource();
FRibbonPoint
	public: FRibbonPoINT();
FSceneNode
	public: FPlane Project(FVector const&);
	public: FSceneNode(FSceneNode const&);
	public: FSceneNode(FSceneNode*);
	public: FSceneNode(UViewport*,FRenderTarget*);
	public: FVector Deproject(FPlane const&);
	public: virtual FActorSceneNode* GetActorSceneNode();
	public: virtual FCameraSceneNode* GetCameraSceneNode();
	public: virtual FLevelSceneNode* GetLevelSceneNode();
	public: virtual FMirrorSceneNode* GetMirrorSceneNode();
	public: virtual FPlayerSceneNode* GetPlayerSceneNode();
	public: virtual FSceneNode* GetLodSceneNode();
	public: virtual FSkySceneNode* GetSkySceneNode();
	public: virtual FWarpZoneSceneNode* GetWarpZoneSceneNode();
	public: virtual FWaterSheetSceneNode* GetWaterSheetSceneNode();
	public: virtual INT IsPrecaching()const;
	public: virtual ~FSceneNode();
FScreenItem
	public: FScreenItem();
	public: FScreenItem(struct FScreenItem const&);
	public: ~FScreenItem();
FServerResponseLine
	public: FServerResponseLine();
	public: FServerResponseLine(struct FServerResponseLine const&);
	public: ~FServerResponseLine();
FShaderCache
	public: FShaderCache();
	public: FShaderCache(FShaderCache const&);
	public: virtual ~FShaderCache();
FShaderCode
	public: FShaderCode();
	public: FShaderCode(FShaderCode const&);
	public: virtual void Serialize(FArchive&);
	public: ~FShaderCode();
FShaderFunction
	protected: FShaderFunction(INT);
	public: INT GetShaderFunctionValue()const;
FShaderProperty
	public: FShaderProperty();
	public: FShaderProperty(FShaderProperty const&);
	public: INT GetStageCount()const;
	public: TSmartPtr<FMaterialStageProperty> GetStage(INT);
	public: void AddTexModifier(INT,FString const&);
	public: void Clear();
	public: void Serialize(FArchive&);
	public: void SetMaterial(INT,UBitmapMaterial*);
	public: void SetStageCount(INT);
	public: ~FShaderProperty();
FSheathingInfo
	public: FSheathingInfo();
FSkinVertexStream
	public: FSkinVertexStream();
	public: FSkinVertexStream(FSkinVertexStream const&);
	public: virtual FVertexPool* GetStaticVertexPool();
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual INT SetOwner(FVertexStream*);
	public: virtual void GetStreamData(void*);
	public: virtual void SetStaticVertexPool(FVertexPool*);
	public: virtual ~FSkinVertexStream();
FSkyParameter
	public: FSkyParameter();
	public: FSkyParameter(struct FSkyParameter const&);
	public: ~FSkyParameter();
FSoundData
	public: FLOAT GetPeriod();
	public: FSoundData(FSoundData const&);
	public: FSoundData(USound*);
	public: virtual void Load();
	public: virtual void Unload();
	public: void Empty(INT);
	public: void Realloc(INT);
	public: ~FSoundData();
FStaticMeshDecorationLayerData
	public: FStaticMeshDecorationLayerData();
	public: FStaticMeshDecorationLayerData(struct FStaticMeshDecorationLayerData const&);
	public: ~FStaticMeshDecorationLayerData();
FStaticMeshSection
	public: FStaticMeshSection();
	public: FStaticMeshSection(FStaticMeshSection const&);
	public: ~FStaticMeshSection();
FStats
	public: FStats();
	public: FStats(FStats const&);
	public: INT RegisterStats(enum EStatsType,enum EStatsDataType,FString const&,FString const&,enum EStatsUnit);
	public: void CalcMovingAverage(INT,DWORD);
	public: void Clear();
	public: void Release();
	public: void Render(UViewport*,UEngine*);
	public: void UIEvent(INT,INT);
	public: void UIEventClear();
	public: void UpdateString(FString&,INT);
	public: ~FStats();
FTerrainMaterialLayer
	public: FTerrainMaterialLayer();
	public: ~FTerrainMaterialLayer();
FTerrainTools
	public: ATerrainInfo* GetCurrentTerrainInfo();
	public: FString GetExecFromBrushName(FString&);
	public: FTerrainTools();
	public: FTerrainTools(FTerrainTools const&);
	public: INT GetAdjust();
	public: INT GetInnerRadius();
	public: INT GetMirrorAxis();
	public: INT GetOuterRadius();
	public: INT GetStrength();
	public: INT L2GetHeightmap(INT,INT,FLOAT&);
	public: virtual ~FTerrainTools();
	public: void AdjustAlignedActors();
	public: void FindActorsToAlign();
	public: void Init();
	public: void SetAdjust(INT);
	public: void SetCurrentBrush(INT);
	public: void SetCurrentTerrainInfo(ATerrainInfo*);
	public: void SetInnerRadius(INT);
	public: void SetMirrorAxis(INT);
	public: void SetOuterRadius(INT);
	public: void SetStrength(INT);
	public: void ShutDown();
FURL
	public: FString String(INT)const;
	public: FURL(FURL const&);
	public: FURL(FURL*,wchar_t const*,enum ETravelType);
	public: FURL(wchar_t const*);
	public: INT HasOption(wchar_t const*)const;
	public: INT IsInternal()const;
	public: INT IsLocalInternal()const;
	public: INT IsMapName(wchar_t const*)const;
	public: static void __cdecl StaticExit();
	public: static void __cdecl StaticInit();
	public: void AddOption(wchar_t const*);
	public: void LoadURLConfig(wchar_t const*,wchar_t const*);
	public: void SaveURLConfig(wchar_t const*,wchar_t const*,wchar_t const*)const;
	public: wchar_t const* GetOption(wchar_t const*,wchar_t const*)const;
	public: ~FURL();
FVehiclePartInfo
	public: FVehiclePartInfo();
FVertexShaderFunction
	public: FVertexShaderFunction();
	public: FVertexShaderFunction(enum EVSFCommon);
	public: FVertexShaderFunction(enum EVSFEmitter);
	public: FVertexShaderFunction(enum EVSFShadowMap);
	public: FVertexShaderFunction(enum EVSFVertexLight);
	public: enum EVertexShader GetVertexShader()const;
FWaveModInfo
	public: DWORD Pad16Bit(DWORD);
	public: FWaveModInfo();
	public: void HalveData();
	public: void HalveReduce16to8();
	public: void NoiseGateFilter();
	public: void Reduce16to8();
FWorldBuilder
	private: INT TestReach(FVector&,FVector const&,FLOAT)const;
	private: enum ETestMoveResult TestMove(FVector&,FVector const&,struct FCheckResult&)const;
	private: enum ETestMoveResult TestWalk(FVector&,FVector const&,FLOAT,FLOAT)const;
	private: void getScout();
	public: FWorldBuilder();
	public: INT buildWorldStructure(ULevel*,wchar_t*,UViewport*,INT,INT);
	public: INT testWorldStructure(ULevel*,wchar_t*,UViewport*,INT,INT);
	public: void ComboPostProcessing(UViewport*);
	public: void FindReachable();
	public: void SetInitialPoINTs();
FZoneStateFog
	public: FZoneStateFog();
FontDrawInfo
	public: FontDrawInfo();
	public: FontDrawInfo(FONTID const&,DWORD,INT,enum EFontLineType,FLOAT,INT);
	public: void CopyOnlyValid(FontDrawInfo const&);
FontDrawInfoSection
	public: FontDrawInfoSection();
FontProperty
	public: FontProperty();
	public: FontProperty(FontProperty const&);
HHitProxy
	public: HHitProxy();
	public: HHitProxy(struct HHitProxy const&);
	public: virtual AActor* GetActor();
	public: virtual INT IsA(wchar_t const*)const;
	public: virtual void Click(struct FHitCause const&);
	public: virtual wchar_t const* GetName()const;
HavokInterface
	public: HavokInterface();
	public: HavokInterface(HavokInterface const&);
L224HzController
	private: void ConsumePacket();
	public: INT IsValidExcutable();
	public: INT Recv(char*,INT);
	public: INT Send(char*);
	public: INT Send(char*,INT);
	public: L224HzController();
	public: L224HzController(L224HzController const&);
	public: bool ConnetTo24Hz();
	public: bool EstablishConnection();
	public: bool Get24HzPath(FString&);
	public: bool Has24HzBeenInstalled();
	public: bool Launch24Hz();
	public: virtual ~L224HzController();
	public: void ClearSocketThread();
	public: void NotifyAlreadyConnected();
	public: void NotifyDisconnection();
	public: void ProcessInstall();
	public: void RequestWebSessionID();
	public: void Tick(FLOAT);
L224HzData
	public: L224HzData();
	public: L224HzData(L224HzData const&);
	public: ~L224HzData();
L2EventManager
	public: L2EventManager();
	public: L2EventManager(L2EventManager const&);
	public: L2HalloweenEvent* GetHalloweenEvent();
	public: virtual ~L2EventManager();
L2VideoRecoder
	private: void ApplySetting(enum BCAP_PRESET);
	public: INT ToggleVideoCapture(struct IDirect3DDevice9*);
	public: INT Work();
	public: L2VideoRecoder();
	public: L2VideoRecoder(L2VideoRecoder const&);
	public: bool IsCapturing();
	public: bool IsRemainDiskSpace();
	public: void OpenCaptureDirectory();
	public: void SetCaptureResolution(INT,INT);
	public: void SetHighQuality();
	public: void SetLowQuality();
	public: ~L2VideoRecoder();
L2WeatherManager
	public: L2WeatherManager();
	public: L2WeatherManager(L2WeatherManager const&);
	public: virtual ~L2WeatherManager();
	public: void ChangeWindDirection(FVector&);
	public: void CreateRain(FString&,FString&,INT);
	public: void CreateSnow(FString&,FString&,INT);
	public: void DeleteRain();
	public: void DeleteSnow();
	public: void RenderWeather(FRenderInterface*);
	public: void SetRainMeshScale(FVector&);
	public: void SetRainParticleNum(FLOAT);
	public: void SetRainSpeed(FLOAT);
	public: void SetRainWeight(FLOAT);
	public: void SetSnowMeshScale(FVector&);
	public: void SetSnowParticleNum(FLOAT);
	public: void SetSnowSpeed(FLOAT);
	public: void SetSnowWeight(FLOAT);
	public: void SetWeatherType(INT);
	public: void TickDirection(FLOAT);
ServerInfoData
	public: DWORD GetServerPing();
	public: FColor const GetServerStateColor();
	public: FString const GetServerStateString();
	public: FString const& GetServerName();
	public: FString const& GetServerNumber();
	public: INT GetAgeLimit();
	public: INT GetCharacterNum();
	public: INT GetCurrentUser();
	public: INT GetLimitUser();
	public: INT GetServerID();
	public: INT GetServerIP();
	public: INT GetServerPort();
	public: INT IsPKEnableServer();
	public: INT IsServerInspecting();
	public: ServerInfoData();
	public: ServerInfoData(ServerInfoData const&);
	public: bool IsBroadServer()const;
	public: bool IsCreateRestrictServer()const;
	public: bool IsEventServer()const;
	public: bool IsFreeServer()const;
	public: bool IsNewServer()const;
	public: bool IsOutOfOrderServer();
	public: bool IsRelaxServer()const;
	public: bool IsTestServer()const;
	public: enum ServerType GetServerRepresentType()const;
	public: void SetAgeLimit(INT);
	public: void SetCharacterNum(INT);
	public: void SetCurrentUser(INT);
	public: void SetLimitUser(INT);
	public: void SetPkFlag(INT);
	public: void SetRegionCode(INT);
	public: void SetServerID(INT);
	public: void SetServerIP(INT);
	public: void SetServerPing(DWORD);
	public: void SetServerPort(INT);
	public: void SetServerStatus(INT);
	public: void SetServerType(INT);
	public: void SetTobeDeleteCharNum(INT);
	public: wchar_t const* GetAgeLimitText();
	public: ~ServerInfoData();
ServerManager
	public: FString& GetLastLoginID();
	public: INT GetLastConnectServerID();
	public: INT GetWarnType();
	public: INT IsBadUser();
	public: INT IsForbiddenServer(INT);
	public: INT getcard_key();
	public: INT getuID();
	public: ServerInfoData* GetServerInfoData(INT);
	public: ServerManager();
	public: ServerManager(ServerManager const&);
	public: TMap<INT,ServerInfoData*>& GetServerDataMap();
	public: virtual ~ServerManager();
	public: void AddServerInfoData(INT,ServerInfoData*);
	public: void ClearServerData();
	public: void SetForbiddenServerFlag(unsigned char*);
	public: void SetLastConnectServerID(INT);
	public: void SetLastLoginID(FString&);
	public: void SetSecurityCardInfo(INT,INT);
	public: void SetServerCharacterNum(INT,INT);
	public: void SetServerPing(INT,DWORD);
	public: void SetServerTobeDeleteCharNum(INT,INT);
	public: void SetWarnType(INT);
	public: void SortRecommandServer();
	wchar_t const* const `public: void SetForbiddenServerFlag(unsigned char*)'::`3'::__FUNC_NAME__;
ServerTextureNameManager
	public: FString& GetAgeTexName15();
	public: FString& GetAgeTexName18();
	public: FString& GetCreateRestrictServerTexName();
	public: FString& GetEventServerTexName();
	public: FString& GetFreeServerTexName();
	public: FString& GetNewServerTexName();
	public: FString& GetRelaxServerTexName();
	public: ServerTextureNameManager();
	public: ServerTextureNameManager(ServerTextureNameManager const&);
	public: virtual ~ServerTextureNameManager();
ThaiCharUtil
	public: static DWORD __cdecl GetThaiCharType(wchar_t);
UActionMoveCamera
	protected: UActionMoveCamera();
	public: UActionMoveCamera(UActionMoveCamera const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UActionMoveCamera();
UActionPause
	protected: UActionPause();
	public: UActionPause(UActionPause const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UActionPause();
UActionWarp
	protected: UActionWarp();
	public: UActionWarp(UActionWarp const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UActionWarp();
UAmbientSoundObject
	public: INT GetZonePlayState();
	public: UAmbientSoundObject();
	public: UAmbientSoundObject(UAmbientSoundObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetAmbientVolume(FLOAT);
	public: virtual INT IsAAmbientSoundObject();
	public: virtual void Destroy();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*);
	public: virtual ~UAmbientSoundObject();
UAmbientVolumeSound
	public: INT CheckPossibility()const;
	public: INT CheckTime(INT)const;
	public: INT IsLoop()const;
	public: INT IsWaiting()const;
	public: UAmbientVolumeSound();
	public: UAmbientVolumeSound(UAmbientVolumeSound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UAmbientVolumeSound();
UAnimNotify
	public: UAnimNotify();
	public: UAnimNotify(UAnimNotify const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString ExportToScript();
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual void PostEditChange();
	public: virtual ~UAnimNotify();
UAnimNotify_AttackDamage
	public: UAnimNotify_AttackDamage();
	public: UAnimNotify_AttackDamage(UAnimNotify_AttackDamage const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_AttackDamage();
UAnimNotify_AttackItem
	public: UAnimNotify_AttackItem();
	public: UAnimNotify_AttackItem(UAnimNotify_AttackItem const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_AttackItem();
UAnimNotify_AttackPreShot
	public: UAnimNotify_AttackPreShot();
	public: UAnimNotify_AttackPreShot(UAnimNotify_AttackPreShot const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_AttackPreShot();
UAnimNotify_AttackShot
	public: UAnimNotify_AttackShot();
	public: UAnimNotify_AttackShot(UAnimNotify_AttackShot const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_AttackShot();
UAnimNotify_AttackVoice
	public: UAnimNotify_AttackVoice();
	public: UAnimNotify_AttackVoice(UAnimNotify_AttackVoice const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_AttackVoice();
UAnimNotify_BoneScale
	public: UAnimNotify_BoneScale();
	public: UAnimNotify_BoneScale(UAnimNotify_BoneScale const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_BoneScale();
UAnimNotify_CameraLocation
	public: UAnimNotify_CameraLocation();
	public: UAnimNotify_CameraLocation(UAnimNotify_CameraLocation const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_CameraLocation();
UAnimNotify_Channeling
	public: UAnimNotify_Channeling();
	public: UAnimNotify_Channeling(UAnimNotify_Channeling const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_Channeling();
UAnimNotify_DestroyEffect
	public: UAnimNotify_DestroyEffect();
	public: UAnimNotify_DestroyEffect(UAnimNotify_DestroyEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_DestroyEffect();
UAnimNotify_Effect
	public: UAnimNotify_Effect();
	public: UAnimNotify_Effect(UAnimNotify_Effect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* GetLastSpawnedEffect();
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual void SetLastSpawnedEffect(AActor*);
	public: virtual ~UAnimNotify_Effect();
UAnimNotify_IdleSound
	public: UAnimNotify_IdleSound();
	public: UAnimNotify_IdleSound(UAnimNotify_IdleSound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual USound* GetSound(INT);
	public: virtual USound* LoadSound(wchar_t const*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_IdleSound();
UAnimNotify_Illusion
	public: UAnimNotify_Illusion();
	public: UAnimNotify_Illusion(UAnimNotify_Illusion const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_Illusion();
UAnimNotify_JumpDown
	public: UAnimNotify_JumpDown();
	public: UAnimNotify_JumpDown(UAnimNotify_JumpDown const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_JumpDown();
UAnimNotify_JumpUp
	public: UAnimNotify_JumpUp();
	public: UAnimNotify_JumpUp(UAnimNotify_JumpUp const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_JumpUp();
UAnimNotify_LaunchAccumulativeBeam
	public: UAnimNotify_LaunchAccumulativeBeam();
	public: UAnimNotify_LaunchAccumulativeBeam(UAnimNotify_LaunchAccumulativeBeam const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_LaunchAccumulativeBeam();
UAnimNotify_Light
	public: UAnimNotify_Light();
	public: UAnimNotify_Light(UAnimNotify_Light const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_Light();
UAnimNotify_MatSubAction
	public: UAnimNotify_MatSubAction();
	public: UAnimNotify_MatSubAction(UAnimNotify_MatSubAction const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_MatSubAction();
UAnimNotify_PostEffect
	public: UAnimNotify_PostEffect();
	public: UAnimNotify_PostEffect(UAnimNotify_PostEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_PostEffect();
UAnimNotify_RandomSound
	public: UAnimNotify_RandomSound();
	public: UAnimNotify_RandomSound(UAnimNotify_RandomSound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_RandomSound();
UAnimNotify_ScreenFade
	public: UAnimNotify_ScreenFade();
	public: UAnimNotify_ScreenFade(UAnimNotify_ScreenFade const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_ScreenFade();
UAnimNotify_Script
	public: UAnimNotify_Script();
	public: UAnimNotify_Script(UAnimNotify_Script const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_Script();
UAnimNotify_Scripted
	public: UAnimNotify_Scripted();
	public: UAnimNotify_Scripted(UAnimNotify_Scripted const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_Scripted();
	public: void eventNotify(AActor*);
UAnimNotify_SendCommandLine
	public: UAnimNotify_SendCommandLine();
	public: UAnimNotify_SendCommandLine(UAnimNotify_SendCommandLine const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_SendCommandLine();
UAnimNotify_Sheathe
	public: UAnimNotify_Sheathe();
	public: UAnimNotify_Sheathe(UAnimNotify_Sheathe const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_Sheathe();
UAnimNotify_Sound
	public: UAnimNotify_Sound();
	public: UAnimNotify_Sound(UAnimNotify_Sound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual USound* GetSound(enum PMoveType,enum L2PawnSoundType);
	public: virtual USound* LoadSound(wchar_t const*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual void PostLoad();
	public: virtual ~UAnimNotify_Sound();
UAnimNotify_SwimSound
	public: UAnimNotify_SwimSound();
	public: UAnimNotify_SwimSound(UAnimNotify_SwimSound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_SwimSound();
UAnimNotify_ViewShake
	public: UAnimNotify_ViewShake();
	public: UAnimNotify_ViewShake(UAnimNotify_ViewShake const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_ViewShake();
UAudioSubsystem
	protected: UAudioSubsystem();
	public: UAudioSubsystem(UAudioSubsystem const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual void CleanUp();
	public: virtual ~UAudioSubsystem();
UBaseGUIController
	protected: UBaseGUIController();
	public: DWORD eventCloseMenu(DWORD);
	public: DWORD eventNeedsMenuResolution();
	public: DWORD eventOpenMenu(FString const&,FString const&,FString const&);
	public: DWORD eventReplaceMenu(FString const&,FString const&,FString const&);
	public: UBaseGUIController(UBaseGUIController const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UBaseGUIController();
	public: void delegateOnAdminReply(FString const&);
	public: void eventCloseAll(DWORD);
	public: void eventInitializeController();
	public: void eventSetRequiredGameResolution(FString const&);
UBeamEmitter
	public: UBeamEmitter();
	public: UBeamEmitter(UBeamEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsUpdateSkippableParticle();
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual void Scale(FLOAT);
	public: virtual void UpdateActorHitList();
	public: virtual ~UBeamEmitter();
UBitmapMaterial
	public: UBitmapMaterial();
	public: UBitmapMaterial(UBitmapMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual double GetLastUpdateTime();
	public: virtual void SetClampMode(enum ETexClampMode,enum ETexClampMode);
	public: virtual ~UBitmapMaterial();
UBumpShader
	public: INT MakeBumpRawData(unsigned char*,INT,INT,unsigned char);
	public: UBumpShader();
	public: UBumpShader(UBumpShader const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual void Destroy();
	public: virtual void Modify();
	public: virtual void PostLoad();
	public: virtual ~UBumpShader();
	public: void RefreshBumpRawData();
UCanvas
	FName const `public: void eventReset()'::`2'::reset;
	`public: void eventReset()'::`2'::`local static guard'{2}';
	private: INT ClipRect(INT,INT,INT,INT,INT&,INT&,INT&,INT&);
	private: INT UpdateClipArea(INT&,INT&,INT&,INT&,FLOAT&,FLOAT&,FLOAT&,FLOAT&);
	private: INT UpdateClipAreaFloat(FLOAT&,FLOAT&,FLOAT&,FLOAT&,FLOAT&,FLOAT&,FLOAT&,FLOAT&);
	private: void WrappedPrINT(enum ERenderStyle,INT&,INT&,UFont*,FLOAT,FLOAT,INT,wchar_t const*);
	protected: UCanvas();
	public: INT DrawCharacter(wchar_t,INT,INT,INT,INT,INT,INT,FontDrawInfo&,INT,INT);
	public: INT DrawThaiCharacter(struct ThaiCharacter,INT,INT,FontDrawInfo&,INT);
	public: INT EndCapture(UTexture*,INT,INT,INT,INT,INT);
	public: INT GetCharBitmapSize(struct tagSIZE&,wchar_t,FONTID const&);
	public: INT GetCharSizeTTF(struct tagSIZE&,wchar_t,FONTID const&);
	public: INT GetGlyphInfo(struct UFontManager::GlyphInfo&,wchar_t,FONTID const&);
	public: INT GetTextSizeTTF(struct tagSIZE&,wchar_t const*,FontDrawInfo const*,INT,INT);
	public: INT SetViewportWindowParam(INT,INT,INT,AActor*,FVector,FRotator,FLOAT);
	public: UCanvas(UCanvas const&);
	public: UTexture* GetRotatedTexture(UTexture*,INT,INT,FVector,FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual DWORD DrawSpecialDigit(INT,INT,INT,INT,DWORD,wchar_t const*,UTexture*,unsigned char);
	public: virtual UMaterial* GetViewportSceneTexture(INT);
	public: virtual void ClippedPrINT(UFont*,FLOAT,FLOAT,INT,wchar_t const*);
	public: virtual void ClippedStrLen(UFont*,FLOAT,FLOAT,INT&,INT&,wchar_t const*);
	public: virtual void Destroy();
	public: virtual void DestroyFont(INT);
	public: virtual void Draw3DCoordText(FLevelSceneNode*,FRenderInterface*,FVector,DWORD,wchar_t*,UTexture*,INT,INT,enum L2FontType,INT);
	public: virtual void DrawActor(INT,INT,AActor*,FLOAT);
	public: virtual void DrawBox(INT,INT,INT,INT,FColor const&);
	public: virtual void DrawBrightenTexture(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,DWORD);
	public: virtual void DrawBrightenTile(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane);
	public: virtual void DrawCameraSceneNode();
	public: virtual void DrawCameraSceneNode(INT,INT,INT,INT,INT);
	public: virtual void DrawChatting(FVector,DWORD,wchar_t*,INT,INT,enum L2FontType,INT,INT,INT,DWORD);
	public: virtual void DrawDepthBar(FLevelSceneNode*,FRenderInterface*,FVector,DWORD,DWORD,INT,FLOAT,bool);
	public: virtual void DrawIcon(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane);
	public: virtual void DrawLine(INT,INT,INT,INT,DWORD,INT);
	public: virtual void DrawMaterial(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UMaterial* const,FColor const&,INT);
	public: virtual void DrawMaterial(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UMaterial* const,unsigned char,INT);
	public: virtual void DrawMaterialWithMask(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UMaterial* const,UMaterial* const,unsigned char,INT);
	public: virtual void DrawPattern(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane);
	public: virtual void DrawRecordMark();
	public: virtual void DrawRect(INT,INT,INT,INT,DWORD);
	public: virtual void DrawRotateTextureWithMask(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,UTexture*,FLOAT,unsigned char,bool);
	public: virtual void DrawStretchedTex(FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,unsigned char);
	public: virtual void DrawStretchedTex(FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,bool,unsigned char);
	public: virtual void DrawTexture(FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,unsigned char,bool);
	public: virtual void DrawTexture(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,FColor const&,INT);
	public: virtual void DrawTexture(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,unsigned char,INT);
	public: virtual void DrawTextureFloat(FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,unsigned char,bool);
	public: virtual void DrawTile(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FColor const&,INT,INT);
	public: virtual void DrawTileBound(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT);
	public: virtual void DrawTileJustified(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,unsigned char);
	public: virtual void DrawTileScaleBound(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT);
	public: virtual void DrawTileScaled(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT);
	public: virtual void DrawTileStretched(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT);
	public: virtual void DrawTileWithMask(UMaterial*,UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane,INT);
	public: virtual void DrawTileZTest(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane,INT);
	public: virtual void Init(UViewport*);
	public: virtual void LoadFont(INT,wchar_t*,wchar_t*);
	public: virtual void ReleaseClip();
	public: virtual void SetClip(INT,INT,INT,INT);
	public: virtual void Update();
	public: virtual void __cdecl DrawTextJustified(unsigned char,FLOAT,FLOAT,FLOAT,FLOAT,wchar_t const*,...);
	public: virtual void __cdecl WrappedPrINTf(UFont*,FLOAT,FLOAT,INT,wchar_t const*,...);
	public: virtual void __cdecl WrappedPrINTf(UFont*,INT,wchar_t const*,...);
	public: virtual void __cdecl WrappedStrLenf(UFont*,FLOAT,FLOAT,INT&,INT&,wchar_t const*,...);
	public: virtual void __cdecl WrappedStrLenf(UFont*,INT&,INT&,wchar_t const*,...);
	public: virtual ~UCanvas();
	public: void CaptureSplit9Textures();
	public: void ClearRotation();
	public: void DeleteViewportWindowParam(INT);
	public: void Draw3DCoordText(FVector,DWORD,wchar_t*,UTexture*,INT,INT);
	public: void DrawActor(AActor*,INT,INT,FLOAT);
	public: void DrawCharacterViewportSceneNode(APawn*,FVector,FRotator,INT,INT,INT,INT,INT,UTexture*,unsigned char);
	public: void DrawChattingBackground(FVector,struct tagSIZE,DWORD);
	public: void DrawMinimapLoc(INT,INT,UMaterial*,unsigned char);
	public: void DrawQuestArrow();
	public: void DrawRadarBack(FColor);
	public: void DrawRadarEtc();
	public: void DrawRadarTarget(INT,INT);
	public: void DrawUnit(INT,INT,FString const&,DWORD,unsigned char);
	public: void EndTextAnim();
	public: void GetUnitSize(struct tagSIZE&,FString const&);
	public: void HandleResolutionChange();
	public: void ImportCrestFile(INT,INT,INT,INT);
	public: void MakeBMPToDXT1(wchar_t*,wchar_t*,INT&,INT);
	public: void MakeDDSCrestFile(INT,INT,unsigned char*,INT);
	public: void MakeTGAToDXT3(wchar_t*,wchar_t*,INT&,INT,INT,INT);
	public: void ModifyViewportWindowParam(INT,AActor*,FVector,FRotator,FLOAT);
	public: void SetAxisAngleRotation(FVector,FLOAT,INT,INT);
	public: void SetRotation(FRotator,INT,INT);
	public: void SetTextAnim(bool,FLOAT);
	public: void StartCapture();
	public: void StartTextAnim();
	public: void eventReset();
	public: void execDrawActor(struct FFrame&,void* const);
	public: void execDrawPortal(struct FFrame&,void* const);
	public: void execDrawText(struct FFrame&,void* const);
	public: void execDrawTextClipped(struct FFrame&,void* const);
	public: void execDrawTextJustified(struct FFrame&,void* const);
	public: void execDrawTile(struct FFrame&,void* const);
	public: void execDrawTileClipped(struct FFrame&,void* const);
	public: void execDrawTileJustified(struct FFrame&,void* const);
	public: void execDrawTileScaled(struct FFrame&,void* const);
	public: void execDrawTileStretched(struct FFrame&,void* const);
	public: void execStrLen(struct FFrame&,void* const);
	public: void execTextSize(struct FFrame&,void* const);
	public: void execWrapStringToArray(struct FFrame&,void* const);
UCheatManager
	protected: UCheatManager();
	public: UCheatManager(UCheatManager const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UCheatManager();
UClient
	public: INT GetTextureLODBias(enum ELODSet);
	public: UClient();
	public: UClient(UClient const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual void Destroy();
	public: virtual void Flush(INT);
	public: virtual void Init(UEngine*);
	public: virtual void PostEditChange();
	public: virtual void RestoreGamma();
	public: virtual void Serialize(FArchive&);
	public: virtual void UpdateGamma();
	public: virtual ~UClient();
	public: void StaticConstructor();
UColorMask
	public: UColorMask();
	public: UColorMask(UColorMask const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual ~UColorMask();
UColorModifier
	protected: UColorModifier();
	public: UColorModifier(UColorModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UColorModifier();
UColorVariationMaterial
	public: UColorVariationMaterial();
	public: UColorVariationMaterial(UColorVariationMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsTransparent();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual ~UColorVariationMaterial();
UColorWheel
	public: UColorWheel();
	public: UColorWheel(UColorWheel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~UColorWheel();
UCombiner
	public: UCombiner();
	public: UCombiner(UCombiner const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetSortingLevel();
	public: virtual INT IsLoaded();
	public: virtual INT IsTransparent();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual INT RequiresSorting();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual ~UCombiner();
UComplementModifier
	public: UComplementModifier();
	public: UComplementModifier(UComplementModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UComplementModifier();
	public: void SetAlphaComplement(DWORD);
	public: void SetColorComplement(DWORD);
UConsole
	protected: UConsole();
	public: UConsole(UConsole const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UConsole();
UConstantColor
	public: UConstantColor();
	public: UConstantColor(UConstantColor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FColor GetColor(FLOAT);
	public: virtual ~UConstantColor();
UConstantMaterial
	public: UConstantMaterial();
	public: UConstantMaterial(UConstantMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FColor GetColor(FLOAT);
	public: virtual ~UConstantMaterial();
UConvexVolume
	public: UConvexVolume();
	public: UConvexVolume(UConvexVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UConvexVolume();
UCubemap
	public: UCubemap();
	public: UCubemap(UCubemap const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual void Destroy();
	public: virtual ~UCubemap();
UCustomMakedMaterial
	public: UCustomMakedMaterial();
	public: UCustomMakedMaterial(UCustomMakedMaterial const&);
	public: UCustomMakedMaterial(UUserDefinableMaterial*);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual ~UCustomMakedMaterial();
	public: void AddPreDefineTexture(FName);
	public: void SetUserDefinableMaterial(UUserDefinableMaterial*);
UDamageTextManager
	protected: virtual void Destroy();
	public: INT ChangeDamageText(DWORD const&,struct FDamageTextUpdateInfo&);
	public: INT HaveDamageTextPawnID(INT);
	public: INT IsDamageTextAvailable();
	public: INT PendDamageText(INT,struct User*,__INT64 const&,enum EDTValueType,unsigned INT);
	public: INT RemoveDamageTextPawnID(INT);
	public: INT RemoveDamageTexts(INT);
	public: INT ShowDamageText(struct FDamageTextUpdateInfo&);
	public: INT ShowDamageText(struct User*,__INT64 const&,enum EDTValueType,unsigned INT,INT);
	public: UDamageTextManager();
	public: UDamageTextManager(UDamageTextManager const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UDamageTextManager();
	public: void AddDamageTextPawnID(INT);
	public: void ApplyOptionToDamageText(struct FDamageTextUpdateInfo&);
	public: void GetDamageTextOption();
	public: void MoveAllDamageTexts();
UDecoration
	private: UDecoration();
	public: UDecoration(UDecoration const&);
	public: virtual ~UDecoration();
	public: void Clear();
	public: void Render(FLevelSceneNode*,FRenderInterface*);
UDepthEffect
	private: UDepthEffect();
	private: virtual ~UDepthEffect();
	private: void Initialize();
	public: INT PauseRender(FRenderInterface*);
	public: INT PreRender(FSceneNode*,FRenderInterface*);
	public: UDepthEffect(UDepthEffect const&);
	public: UProxyBitmapMaterial* GetDepthTexture(FRenderInterface*);
	public: UProxyBitmapMaterial* GetNormalTexture(FRenderInterface*);
	public: void PostRender(FRenderInterface*);
	public: void ResumeRender(FRenderInterface*);
UDownload
	protected: UDownload();
	public: UDownload(UDownload const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT TrySkipFile();
	public: virtual void Destroy();
	public: virtual void DownloadDone();
	public: virtual void DownloadError(wchar_t const*);
	public: virtual void ReceiveData(unsigned char*,INT);
	public: virtual void ReceiveFile(UNetConnection*,INT,wchar_t const*,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual void Tick();
	public: virtual ~UDownload();
	public: void StaticConstructor();
UEditorColorEffect
	private: UEditorColorEffect();
	private: virtual ~UEditorColorEffect();
	public: UEditorColorEffect(UEditorColorEffect const&);
	public: void PostRender(UViewport* const,FRenderInterface* const);
	public: void PreRender(UViewport* const,FRenderInterface*);
UEngine
	public: UEngine();
	public: UEngine(UEngine const&);
	public: UL2ConsoleWnd* GetConsolePoINTer();
	public: static UClass* __cdecl StaticClass();
	public: virtual FLOAT GetMaxTickRate();
	public: virtual INT ChallengeResponse(INT);
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual INT InputEvent(UViewport*,enum EInputKey,enum EInputAction,FLOAT,INT);
	public: virtual INT IsCameraFreeFromManager();
	public: virtual INT IsFilterOutsideAmbientSound();
	public: virtual INT IsFilterOutsideEffectSound();
	public: virtual INT IsL2Shader()const;
	public: virtual INT IsPlayingScene();
	public: virtual INT IsPlayingSceneForced();
	public: virtual INT Key(UViewport*,enum EInputKey,wchar_t);
	public: virtual INT edcamMode(UViewport*);
	public: virtual INT edcamMouseControl(UViewport*);
	public: virtual INT edcamTerrainBrush();
	public: virtual void Destroy();
	public: virtual void EdCallback(DWORD,INT,DWORD);
	public: virtual void Exit();
	public: virtual void Flush(INT);
	public: virtual void Init(INT);
	public: virtual void RestoreGamma();
	public: virtual void Serialize(FArchive&);
	public: virtual void SetL2HDREffectType(INT);
	public: virtual void SetL2Shader(INT);
	public: virtual void SetProgress(wchar_t const*,wchar_t const*,FLOAT);
	public: virtual void UpdateGamma();
	public: virtual void edDrawAxisIndicator(FSceneNode*);
	public: virtual void edSetClickLocation(FVector&);
	public: virtual ~UEngine();
	public: void InitAudio();
	public: void InitFlash(UViewport* const);
	public: void ResumeDraw();
	public: void SetEnglishCountry(INT);
	public: void StaticConstructor();
	public: void StopDraw();
UExtraMeshData
	public: UExtraMeshData();
	public: UExtraMeshData(UExtraMeshData const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UExtraMeshData();
UFadeColor
	public: UFadeColor();
	public: UFadeColor(UFadeColor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FColor GetColor(FLOAT);
	public: virtual ~UFadeColor();
UFinalBlend
	public: UFinalBlend();
	public: UFinalBlend(UFinalBlend const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetSortingLevel();
	public: virtual INT GetValidated();
	public: virtual INT IsTransparent();
	public: virtual INT RequiresSorting();
	public: virtual void PostEditChange();
	public: virtual void SetValidated(INT);
	public: virtual ~UFinalBlend();
UFlashSubsystem
	protected: UFlashSubsystem();
	public: UFlashSubsystem(UFlashSubsystem const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual ~UFlashSubsystem();
UFont
	public: UFont();
	public: UFont(UFont const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UFont();
	public: wchar_t RemapChar(wchar_t);
UFontManager
	protected: virtual void Destroy();
	public: DWORD GetDefaultColor()const;
	public: FONTID CreateFontFace(FString const&,FString const&,INT,INT,FontProperty const*);
	public: FONTID GetDefaultFontID()const;
	public: FONTID GetFont(FString const&)const;
	public: FString GetFontName(FONTID const&);
	public: INT GetGlyph(wchar_t,FONTID,struct FontTextureInfo const&,UTexture*,struct GlyphInfo&)const;
	public: INT GetGlyphSize(wchar_t,FONTID,struct tagSIZE&)const;
	public: INT GetHeight(FONTID)const;
	public: INT GetLineGap(FONTID const&);
	public: INT GetMaxHeight(FONTID)const;
	public: INT GetUnderLineOffset(FONTID const&);
	public: INT IsValidFONTID(FONTID const&);
	public: INT SetDefault(FString const&,DWORD);
	public: UFontManager();
	public: UFontManager(UFontManager const&);
	public: UTexture* GetFontCache(FONTID,wchar_t,FontCacheItem&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UFontManager();
	public: void Clean();
	public: void ClearFontCache();
	public: void DestroyFontCache();
	public: void Init();
	public: void InitFontCache();
	public: void SetDPI(INT);
	public: void SetLineGap(FONTID const&,INT);
	public: void SetUnderLineOffset(FONTID const&,INT);
UGFxFlash
	public: UGFxFlash();
	public: UGFxFlash(UGFxFlash const&);
	public: static INT __cdecl IsValidFileExt(FString const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Destroy();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~UGFxFlash();
UGameEngine
	FCriticalSection `public: FCriticalSection& getLoadingMapCS()'::`2'::LoadingMapCS;
	`public: FCriticalSection& getLoadingMapCS()'::`2'::`local static guard'{2}';
	private: void SetEffectCR();
	public: FColor GetColorVariationColor()const;
	public: FCriticalSection& getLoadingMapCS();
	public: FLOAT GetAverageDeltaSeconds();
	public: FLOAT GetTerrainClippingRange();
	public: FString InitSpecial(wchar_t const*);
	public: FVector GetScreenCoordFromWorldLoc(FLOAT,FLOAT,FLOAT);
	public: INT CheckForRogues();
	public: INT EventLoadSWMap(INT,INT);
	public: INT FinishLoadMap(ULevel*);
	public: INT FinishLoadSWMap();
	public: INT FinishLoadTeleportMap(ULevel*);
	public: INT HaveDamageTextPawnID(INT);
	public: INT IsActorDrawed(FDynamicActor const*);
	public: INT IsFirstRunClient();
	public: INT IsInTerrainClippingRange(FVector const&);
	public: INT IsLimitContentForYoungUsers();
	public: INT LoadSWMap(FLOAT,FLOAT,FLOAT);
	public: INT LoadTeleportMap(INT,INT);
	public: INT NeedNotRender(struct User*,struct User*);
	public: INT PackageRevisionLevel();
	public: INT RemoveDamageTextPawnID(INT);
	public: INT ValidatePackage(wchar_t const*,wchar_t const*);
	public: INT const IsUseHDRRenderEffect()const;
	public: UDamageTextManager* GetDamageTextManager();
	public: UFontManager* GetFontManager();
	public: UGameEngine();
	public: UGameEngine(UGameEngine const&);
	public: ULevel* LoadLevel(INT,INT);
	public: ULevel* LoadMapThread(INT,INT);
	public: UViewport* OpenInitialViewport(FURL&);
	public: enum SEAMLESS_RESULT AdjustTerrain(FVector,INT);
	public: static UClass* __cdecl StaticClass();
	public: static UL2SkillEffect* __cdecl GetSkillEffect(INT);
	public: static UL2SkillEffect* __cdecl GetSkillEffect(wchar_t const*);
	public: static UL2SkillEffect* __cdecl LoadSkillEffect(FString const&);
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetMaxTickRate();
	public: virtual FString GetShuttleMeshName(INT);
	public: virtual INT AddShuttleDoor(struct FShuttle const*,struct FDoorInfo&);
	public: virtual INT AddShuttleWall(struct FShuttle const*);
	public: virtual INT Browse(FURL,TMap<FString,FString> const*,FString&);
	public: virtual INT ChallengeResponse(INT);
	public: virtual INT CheckLoginType(INT);
	public: virtual INT CheckTutorialClientEvent(INT);
	public: virtual INT ControlShuttleDoor(struct FShuttle*,struct FDoorInfo&);
	public: virtual INT CreateURL(wchar_t const*);
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual INT IsCameraFreeFromManager();
	public: virtual INT IsEscapableScene();
	public: virtual INT IsFilterOutsideAmbientSound();
	public: virtual INT IsFilterOutsideEffectSound();
	public: virtual INT IsPlayingScene();
	public: virtual INT IsPlayingSceneByPlayer();
	public: virtual INT IsPlayingSceneForced();
	public: virtual INT OnActionFail(enum EActionFailType);
	public: virtual INT OnAddBuyList(struct ItemInfo&);
	public: virtual INT OnAddDepositList(struct ItemInfo&);
	public: virtual INT OnAddManorBuyList(struct ItemInfo&);
	public: virtual INT OnAddManorSellList(struct ItemInfo&);
	public: virtual INT OnAddPreviewList(struct ItemInfo&);
	public: virtual INT OnAddSellList(struct ItemInfo&);
	public: virtual INT OnAddWithdrawList(struct ItemInfo&);
	public: virtual INT OnAirShipInfo(struct FVehicle*,struct User*,FVector,INT,INT,INT,INT);
	public: virtual INT OnAssociatedAttack(struct User*,struct User*,INT,INT,INT,INT,INT,FVector,INT);
	public: virtual INT OnAttack(struct User*,INT,INT,INT,INT,INT,FVector const&,INT);
	public: virtual INT OnAttack(struct User*,struct User*,INT,INT,INT,INT,INT,FVector const&,INT,FVector);
	public: virtual INT OnAttackCanceled(struct User*);
	public: virtual INT OnAttackDeadTarget(struct User*);
	public: virtual INT OnAttackOutofRange(struct User*);
	public: virtual INT OnAttackRangeUpdate(struct User*,INT);
	public: virtual INT OnAttacked(struct User*,INT);
	public: virtual INT OnAttacked(struct User*,struct User*);
	public: virtual INT OnAttackinCoolTime(struct User*);
	public: virtual INT OnAuthServerSelectFail(INT);
	public: virtual INT OnAuthServerSelectSuccess();
	public: virtual INT OnAutoAttackStart(struct User*);
	public: virtual INT OnAutoAttackStop(struct User*);
	public: virtual INT OnCarringWeightUpdate(struct User*,INT);
	public: virtual INT OnCarryWeightUpdate(struct User*,INT);
	public: virtual INT OnChangeMoveType(struct User*,INT,INT);
	public: virtual INT OnChangeWaitType(struct User*,INT,FVector);
	public: virtual INT OnCharInfo(struct User*,FVector const&,INT,L2ParamStack&);
	public: virtual INT OnCheckGeo(FVector const&);
	public: virtual INT OnClassUpdate(struct User*,INT);
	public: virtual INT OnClientSetTime(L2ParamStack&);
	public: virtual INT OnCompareFreeServerData(char*);
	public: virtual INT OnConUpdate(struct User*,INT);
	public: virtual INT OnCpUpdate(struct User*,struct User*,INT,INT);
	public: virtual INT OnCriminalRateUpdate(struct User*,INT);
	public: virtual INT OnCriticalRate(struct User*,INT);
	public: virtual INT OnDeleteItem(struct Item*);
	public: virtual INT OnDeleteRadar(INT,INT,INT);
	public: virtual INT OnDeleteShuttle(struct FShuttle*);
	public: virtual INT OnDeleteUser(struct User*,INT,INT);
	public: virtual INT OnDeleteVehicle(struct FVehicle*);
	public: virtual INT OnDexUpdate(struct User*,INT);
	public: virtual INT OnDice(struct User*,INT,INT,FVector);
	public: virtual INT OnDie(struct User*,L2ParamStack&,bool);
	public: virtual INT OnDoorInfo(L2ParamStack&,AActor**);
	public: virtual INT OnDoorStatusUpdate(L2ParamStack&,AActor*);
	public: virtual INT OnDropItem(struct User*,struct Item*,FVector,FRotator);
	public: virtual INT OnEarthQuake(FVector const&,INT,INT,INT);
	public: virtual INT OnEquipItem(struct User*,struct Item*,INT);
	public: virtual INT OnEquipItemPlaySound(struct User*,struct User*,INT,INT);
	public: virtual INT OnEventTrigger(INT,INT);
	public: virtual INT OnExpUpdate(struct User*,__INT64);
	public: virtual INT OnFinishRotating(struct User*,struct FVehicle*,INT,INT);
	public: virtual INT OnFlySelfDestination(struct User*,FVector const&);
	public: virtual INT OnFlyToLocation(struct User*,FVector const&,FVector const&,INT,INT,INT);
	public: virtual INT OnGMHide(INT);
	public: virtual INT OnGetItem(struct User*,struct Item*,FVector);
	public: virtual INT OnGetOffShuttle(struct User*,struct FShuttle*,FVector);
	public: virtual INT OnGetOffVehicle(struct User*,struct FVehicle*,FVector);
	public: virtual INT OnGetOnShuttle(struct User*,struct FShuttle*,FVector);
	public: virtual INT OnGetOnVehicle(struct User*,struct FVehicle*,FVector);
	public: virtual INT OnGuiltyUpdate(struct User*,INT);
	public: virtual INT OnHitRate(struct User*,INT);
	public: virtual INT OnHpUpdate(struct User*,struct User*,INT,INT);
	public: virtual INT OnIntUpdate(struct User*,INT);
	public: virtual INT OnJumpToLocation(struct User*,FVector const&,FVector const&);
	public: virtual INT OnLevelUpdate(struct User*,INT);
	public: virtual INT OnMTLInShuttle(struct User*,struct FShuttle*,FVector,FVector);
	public: virtual INT OnMagicAvoid(struct User*,INT);
	public: virtual INT OnMagicCastingSpeed(struct User*,INT);
	public: virtual INT OnMagicCriticalRate(struct User*,INT);
	public: virtual INT OnMagicDefense(struct User*,INT);
	public: virtual INT OnMagicHitRate(struct User*,INT);
	public: virtual INT OnMagicalAttack(struct User*,INT);
	public: virtual INT OnMaxCpUpdate(struct User*,INT);
	public: virtual INT OnMaxHpUpdate(struct User*,INT);
	public: virtual INT OnMaxMpUpdate(struct User*,INT);
	public: virtual INT OnMenUpdate(struct User*,INT);
	public: virtual INT OnMoveBackwardToLocation(struct User*,FVector const&,FVector const&);
	public: virtual INT OnMoveToActor(struct User*,AActor*,INT,FVector);
	public: virtual INT OnMoveToLocation(struct User*,FVector const&,FVector const&);
	public: virtual INT OnMoveToLocationAirShip(struct FVehicle*,FVector,FVector);
	public: virtual INT OnMoveToLocationInVehicle(struct FVehicle*,struct User*,FVector const&,FVector const&);
	public: virtual INT OnMoveToPawn(struct User*,struct User*,INT,FVector const&,FVector);
	public: virtual INT OnMpUpdate(struct User*,struct User*,INT,INT);
	public: virtual INT OnMyTargetSelected(struct User*,INT,struct Item*,struct FServerStaticObject*,struct FVehicle*,INT);
	public: virtual INT OnNormalCamera();
	public: virtual INT OnNpcHtmlMessage(struct User*,wchar_t*,INT,INT);
	public: virtual INT OnNpcQuestHtmlMessage(struct User*,wchar_t*,INT);
	public: virtual INT OnPhysicalAttack(struct User*,INT);
	public: virtual INT OnPhysicalAttackSpeed(struct User*,INT);
	public: virtual INT OnPhysicalAvoid(struct User*,INT);
	public: virtual INT OnPhysicalDefense(struct User*,INT);
	public: virtual INT OnPreviewInfo(INT*);
	public: virtual INT OnReceiveMagicSkillLaunched(struct User*,INT,INT,INT,INT,INT);
	public: virtual INT OnReceiveMagicSkillLaunched(struct User*,struct User*,INT,INT,INT,INT);
	public: virtual INT OnRevive(struct User*);
	public: virtual INT OnRide(struct User*,INT,INT,INT,FVector);
	public: virtual INT OnSPUpdate(struct User*,INT);
	public: virtual INT OnSearchOrc(char*);
	public: virtual INT OnServerObjectInfo(struct User*,FVector,INT,INT,INT,INT);
	public: virtual INT OnShowRadar(INT,INT,INT,INT,INT);
	public: virtual INT OnShuttleMove(struct FShuttle*,INT,INT,FVector);
	public: virtual INT OnSkillRemainSec(struct User*,struct User*,INT,INT,INT,INT,FLOAT);
	public: virtual INT OnSocialAction(struct User*,enum SocialActionTypeEnum,INT);
	public: virtual INT OnSpawnItem(struct Item*,FVector,FRotator);
	public: virtual INT OnSpecialCamera(struct FVehicle*,FLOAT,INT,INT,FLOAT,FLOAT,FRotator,INT,INT,INT,FLOAT);
	public: virtual INT OnSpecialCamera(struct User*,FLOAT,INT,INT,FLOAT,FLOAT,FRotator,INT,INT,INT,FLOAT);
	public: virtual INT OnStartBuyList(__INT64,INT,INT);
	public: virtual INT OnStartDepositList(short,__INT64,INT);
	public: virtual INT OnStartManorBuyList(__INT64,INT,INT);
	public: virtual INT OnStartManorSellList(__INT64,INT);
	public: virtual INT OnStartPreviewList(INT,__INT64,INT);
	public: virtual INT OnStartRotating(struct User*,struct FVehicle*,INT,INT,INT);
	public: virtual INT OnStartSellList(INT);
	public: virtual INT OnStartWithdrawList(short,__INT64,INT);
	public: virtual INT OnStaticObjectInfo(struct FServerStaticObject*,INT,INT,INT,INT,INT,INT);
	public: virtual INT OnStopMove(struct User*,FVector,INT);
	public: virtual INT OnStopMoveAirShip(struct FVehicle*,FVector,INT);
	public: virtual INT OnStopMoveInShuttle(struct User*,struct FShuttle*,FVector,INT);
	public: virtual INT OnStopMoveInVehicle(struct FVehicle*,struct User*,FVector,INT);
	public: virtual INT OnStopMoveWithLocation(struct User*,FVector);
	public: virtual INT OnStrUpdate(struct User*,INT);
	public: virtual INT OnTargetSelected(struct User*,INT,struct User*,struct Item*,struct FServerStaticObject*,FVector);
	public: virtual INT OnTargetUnselected(struct User*,FVector,INT);
	public: virtual INT OnTeleportToLocation(struct User*,FVector,INT,INT);
	public: virtual INT OnTeleportToLocationActivate();
	public: virtual INT OnTutorialCloseHtml();
	public: virtual INT OnTutorialEnableClientEvent(INT);
	public: virtual INT OnTutorialShowHtml(INT,wchar_t*);
	public: virtual INT OnTutorialShowQuestionMark(INT);
	public: virtual INT OnUltimateSkillPoINTUpdate(struct User&,INT);
	public: virtual INT OnUnequipItem(struct User*,struct Item*,INT);
	public: virtual INT OnUserInfo(struct User*,FVector,INT,INT,INT,char,char);
	public: virtual INT OnValidateLocation(struct User*,FVector const&,INT);
	public: virtual INT OnValidateLocationInShuttle(struct User*,struct FShuttle*,FVector,INT);
	public: virtual INT OnValidateLocationInVehicle(struct FVehicle*,struct User*,FVector,INT);
	public: virtual INT OnValidateShuttleLocation(struct FShuttle*,FVector,INT);
	public: virtual INT OnVehicleCheckLocation(struct FVehicle*,FVector,INT);
	public: virtual INT OnVehicleDeparture(struct FVehicle*,INT,INT,FVector);
	public: virtual INT OnVehicleInfo(struct FVehicle*,FVector,INT);
	public: virtual INT OnVersionCheck();
	public: virtual INT OnWitUpdate(struct User*,INT);
	public: virtual INT PendDamageText(INT,struct User*,__INT64 const&,enum EDTValueType,unsigned INT);
	public: virtual INT ShowDamageText(struct FDamageTextUpdateInfo&);
	public: virtual INT ShowDamageText(struct User*,__INT64 const&,enum EDTValueType,unsigned INT,INT);
	public: virtual INT SpawnCameraControlPawn(FVector&,INT,wchar_t const*,FLOAT);
	public: virtual ULevel* LoadMap(FURL const&,UPendingLevel*,TMap<FString,FString> const*,FString&);
	public: virtual void AddAcquireSkillExtendedInfo(L2ParamStack&);
	public: virtual void AddAcquireSkillInfo(L2ParamStack&);
	public: virtual void AddHennaEquipInfo(struct HennaInfo);
	public: virtual void AddHennaInfo(INT,INT);
	public: virtual void AddHennaUnequipInfo(struct HennaInfo);
	public: virtual void AddInventoryItem(struct ItemInfo&);
	public: virtual void AddPackageToList(L2ParamStack&);
	public: virtual void AddPetInventoryItem(struct ItemInfo&);
	public: virtual void AddQuestID(INT,INT);
	public: virtual void AddQuestItem(struct ItemInfo&);
	public: virtual void AddRecipeBookItem(INT);
	public: virtual void AddRecipeShopManageItem(INT,INT);
	public: virtual void AddRecipeShopRegisterdItem(INT,INT,__INT64);
	public: virtual void AddRecipeShopSellItem(INT,INT,__INT64);
	public: virtual void AddSendableItemList(INT,INT,__INT64,struct ItemInfo&);
	public: virtual void BuildServerMasterMap(UNetDriver*,ULevel*);
	public: virtual void CancelPending();
	public: virtual void ClearAttackerList();
	public: virtual void ClearDefenderList();
	public: virtual void Click(UViewport*,DWORD,FLOAT,FLOAT);
	public: virtual void ContinueServerClose();
	public: virtual void Destroy();
	public: virtual void Draw(UViewport*,INT,unsigned char*,INT*);
	public: virtual void EndRecommandedData();
	public: virtual void Exit();
	public: virtual void GMAddHennaInfo(INT,INT);
	public: virtual void GMReceiveHennaInfo(struct HennaInfo,INT);
	public: virtual void GMViewAddInventoryItem(struct ItemInfo&);
	public: virtual void GMViewAddQuestID(INT,INT);
	public: virtual void GMViewAddQuestItem(struct ItemInfo&);
	public: virtual void GetDamageTextOption();
	public: virtual void Init(INT);
	public: virtual void MouseDelta(UViewport*,DWORD,FLOAT,FLOAT);
	public: virtual void MousePosition(UViewport*,DWORD,FLOAT,FLOAT);
	public: virtual void MouseWheel(UViewport*,DWORD,INT);
	public: virtual void NotifyLevelChange();
	public: virtual void OnAcceptCharacterCreate(INT);
	public: virtual void OnAcceptCharacterDelete(INT);
	public: virtual void OnAcceptGameStart(INT);
	public: virtual void OnAcceptLogOut();
	public: virtual void OnAcceptNewCharacter(INT);
	public: virtual void OnAddBlockOnBlockList(L2ParamStack&);
	public: virtual void OnAddL2Friend(L2ParamStack&);
	public: virtual void OnAddPledgeMember(L2ParamStack&);
	public: virtual void OnAddSelectableTime(INT);
	public: virtual void OnAgitInfo(INT,unsigned char const*);
	public: virtual void OnAirStateOff();
	public: virtual void OnAirStateOn();
	public: virtual void OnBeginBlockList();
	public: virtual void OnCameraMode(INT);
	public: virtual void OnChairSitPacket(L2ParamStack&);
	public: virtual void OnColosseumFence(struct ColosseumFence*,enum ColosseumFenceState);
	public: virtual void OnCuriousHouseObserveMode(INT);
	public: virtual void OnDeleteStaticObject(struct FServerStaticObject*);
	public: virtual void OnDuelAskStart(L2ParamStack&);
	public: virtual void OnDuelEnd(L2ParamStack&);
	public: virtual void OnDuelEnemyRelation(L2ParamStack&);
	public: virtual void OnDuelReady(L2ParamStack&);
	public: virtual void OnDuelStart(L2ParamStack&);
	public: virtual void OnDuelUpdateUserInfo(L2ParamStack&);
	public: virtual void OnEndBlockList();
	public: virtual void OnEndL2FriendList();
	public: virtual void OnEndQuestList();
	public: virtual void OnEndSiegeAttackerlist();
	public: virtual void OnEndSiegeDefenderlist();
	public: virtual void OnEventMatchCreate(INT);
	public: virtual void OnEventMatchGMTest();
	public: virtual void OnEventMatchMessage(char,FString const&);
	public: virtual void OnEventMatchScore(INT,INT,INT);
	public: virtual void OnEventMatchSpellInfo(INT,INT,INT,INT);
	public: virtual void OnEventMatchSpellInfoEnd();
	public: virtual void OnEventMatchSpellInfoStart(INT,INT,INT);
	public: virtual void OnEventMatchTeamInfo(INT,INT,FString const&,INT,INT,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void OnEventMatchTeamInfoEnd();
	public: virtual void OnEventMatchTeamInfoStart(INT,char,INT);
	public: virtual void OnEventMatchTeamUnlocked(INT,char);
	public: virtual void OnEventMatchUserInfo(INT,FString const&,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void OnExAskJoinMPCC(L2ParamStack&);
	public: virtual void OnExAskJoinPartyRoom(L2ParamStack&);
	public: virtual void OnExAutoSoulShot(L2ParamStack&);
	public: virtual void OnExCloseMPCC(L2ParamStack&);
	public: virtual void OnExClosePartyRoom(L2ParamStack&);
	public: virtual void OnExConfirmAddingPostFriend(L2ParamStack&);
	public: virtual void OnExEventMatchManage(L2ParamStack&);
	public: virtual void OnExEventMatchManageAddMember(L2ParamStack&);
	public: virtual void OnExGetBossRecord(L2ParamStack&);
	public: virtual void OnExListPartyMatchingWaitingRoom(L2ParamStack&);
	public: virtual void OnExListPartyMatchingWaitingRoomStart(L2ParamStack&);
	public: virtual void OnExMPCCPartyInfoUpdate(L2ParamStack&);
	public: virtual void OnExMailArrivedPacket();
	public: virtual void OnExManagePartyRoomMember(L2ParamStack&);
	public: virtual void OnExMultiPartyCommandChannelInfo(L2ParamStack&);
	public: virtual void OnExMultiPartyCommandChannelInfoAddMember(L2ParamStack&);
	public: virtual void OnExMultiPartyCommandChannelInfoAddPartyMember(L2ParamStack&);
	public: virtual void OnExOpenMPCC(L2ParamStack&);
	public: virtual void OnExPCCafePoINTInfo(L2ParamStack&);
	public: virtual void OnExPartyRoomMember(L2ParamStack&);
	public: virtual void OnExReceiveShowPostFriend(L2ParamStack&);
	public: virtual void OnExSetCompassZoneCode(L2ParamStack&);
	public: virtual void OnExSetMpccRouting(L2ParamStack&);
	public: virtual void OnExShowAdventurerGuideBook(L2ParamStack&);
	public: virtual void OnExShowScreenMessage(L2ParamStack&);
	public: virtual void OnExShowScreenMessageNPCString(L2ParamStack&);
	public: virtual void OnExShowTrace(FVector,short,INT);
	public: virtual void OnExStorageMaxCountPacket(L2ParamStack&);
	public: virtual void OnFirecracker(APawn*,INT);
	public: virtual void OnFishingCombatStart(APawn*,L2ParamStack&);
	public: virtual void OnFishingEnd(APawn*,unsigned char);
	public: virtual void OnFishingHPRegen(APawn*,L2ParamStack&);
	public: virtual void OnFishingStart(APawn*,INT,FVector,INT,INT);
	public: virtual void OnGMViewAddPledgeMember(L2ParamStack&);
	public: virtual void OnGMViewAddWithdrawList(struct ItemInfo&);
	public: virtual void OnGMViewCharacterInfo(struct User&);
	public: virtual void OnGMViewMagicListPacket(L2ParamStack&);
	public: virtual void OnGMViewReceivePledgeInfo(struct PledgeInfo&);
	public: virtual void OnGMViewReceivePledgeMemberList();
	public: virtual void OnGMViewReceiveQuestList();
	public: virtual void OnGMViewReceiveQuestListEnd();
	public: virtual void OnGMViewShowMagicWnd();
	public: virtual void OnGMViewShowSkillWnd();
	public: virtual void OnGMViewStartWithdrawList(__INT64);
	public: virtual void OnHeroList(L2ParamStack*);
	public: virtual void OnHidePetWnd(INT);
	public: virtual void OnHideTrainWnd();
	public: virtual void OnImportCrestFile(INT,INT,INT,INT);
	public: virtual void OnInterfacePlaySound(wchar_t const*);
	public: virtual void OnInterfacePlaySoundWithFadeMusic(wchar_t const*,FLOAT,FLOAT);
	public: virtual void OnInterfacePlayVoice(wchar_t*);
	public: virtual void OnInterfaceStopSound(FString const&)const;
	public: virtual void OnKeyMapping(unsigned char*,INT);
	public: virtual void OnListPartyWating(L2ParamStack&);
	public: virtual void OnMagicListPacket(L2ParamStack&);
	public: virtual void OnMakeDDSCrestFile(INT,INT,unsigned char*,INT);
	public: virtual void OnObserverEndPacket(L2ParamStack&);
	public: virtual void OnObserverStartPacket(L2ParamStack&);
	public: virtual void OnOlympiadMatchEnd();
	public: virtual void OnOlympiadMode(char);
	public: virtual void OnOlympiadSpelledInfo(L2ParamStack&);
	public: virtual void OnOlympiadUserInfo(L2ParamStack&);
	public: virtual void OnPartyDeleteAllPacket(L2ParamStack&);
	public: virtual void OnPartyDeleteMemberPacket(L2ParamStack&);
	public: virtual void OnPartyRoomInfo(L2ParamStack&);
	public: virtual void OnPartyUpdateMemberPacket(L2ParamStack&);
	public: virtual void OnPetitionVote();
	public: virtual void OnPlayAnimation(APawn*,INT,unsigned char,FName);
	public: virtual void OnPlaySound(L2ParamStack&);
	public: virtual void OnPledgePower(L2ParamStack&);
	public: virtual void OnPrivateStoreBuyList(struct ItemInfo&);
	public: virtual void OnPrivateStoreBuyManageList(struct ItemInfo&,struct ItemInfo&);
	public: virtual void OnPrivateStoreBuyMsg(wchar_t*,INT);
	public: virtual void OnPrivateStoreList(struct ItemInfo&);
	public: virtual void OnPrivateStoreManageList(struct ItemInfo&,struct ItemInfo&);
	public: virtual void OnReceiveAction(INT);
	public: virtual void OnReceiveAddTradeInventoryItem(struct ItemInfo&);
	public: virtual void OnReceiveAddTradeOtherItem(struct ItemInfo&);
	public: virtual void OnReceiveAddTradeOwnItem(struct ItemInfo&);
	public: virtual void OnReceiveAskJoinAlly(L2ParamStack&);
	public: virtual void OnReceiveAskJoinParty(L2ParamStack&);
	public: virtual void OnReceiveBlockList(L2ParamStack&);
	public: virtual void OnReceiveCharacterSelectedPacket(INT,INT,INT,INT,void*,INT,INT*);
	public: virtual void OnReceiveConfirmCancelItemResult(INT,INT,INT,INT,__INT64,INT);
	public: virtual void OnReceiveConfirmGemStoneResult(INT,INT,__INT64,__INT64,INT);
	public: virtual void OnReceiveConfirmRefinerItemResult(INT,INT,INT,__INT64,INT);
	public: virtual void OnReceiveConfirmTargetItemResult(INT,INT,INT);
	public: virtual void OnReceiveCreatePledge(L2ParamStack&);
	public: virtual void OnReceiveDismissAlly(L2ParamStack&);
	public: virtual void OnReceiveDismissParty(L2ParamStack&);
	public: virtual void OnReceiveDismissPartyMessage(L2ParamStack&);
	public: virtual void OnReceiveDismissPledge(L2ParamStack&);
	public: virtual void OnReceiveFriendAdd(L2ParamStack&);
	public: virtual void OnReceiveFriendAddRequest(L2ParamStack&);
	public: virtual void OnReceiveFriendAddRequestResult(L2ParamStack&);
	public: virtual void OnReceiveFriendList(L2ParamStack&);
	public: virtual void OnReceiveFriendRemove(L2ParamStack&);
	public: virtual void OnReceiveHtmlMessage(L2ParamStack&);
	public: virtual void OnReceiveJoinAlly(L2ParamStack&);
	public: virtual void OnReceiveJoinParty(L2ParamStack&);
	public: virtual void OnReceiveJoinPledge(L2ParamStack&);
	public: virtual void OnReceiveL2FriendList();
	public: virtual void OnReceiveL2FriendSay(INT,wchar_t*,wchar_t*);
	public: virtual void OnReceiveMagicSkillCanceled(struct User*);
	public: virtual void OnReceiveMagicSkillListPacket(L2ParamStack&);
	public: virtual void OnReceiveMagicSkillUse(struct User*,INT,L2ParamStack&);
	public: virtual void OnReceiveMagicSkillUse(struct User*,struct User*,L2ParamStack&);
	public: virtual void OnReceiveOustAlly(L2ParamStack&);
	public: virtual void OnReceiveOustPartyMember(L2ParamStack&);
	public: virtual void OnReceiveOustPartyMessage(L2ParamStack&);
	public: virtual void OnReceiveOustPledgeMember(L2ParamStack&);
	public: virtual void OnReceiveOustPledgeMessage(L2ParamStack&);
	public: virtual void OnReceivePetItemList();
	public: virtual void OnReceivePetStatusInfo(L2ParamStack&);
	public: virtual void OnReceivePledgeMemberInfo(L2ParamStack&);
	public: virtual void OnReceivePledgeMemberList();
	public: virtual void OnReceivePledgeMyAuth(L2ParamStack&);
	public: virtual void OnReceivePledgePower(L2ParamStack&);
	public: virtual void OnReceivePledgePowerGradeList(L2ParamStack&);
	public: virtual void OnReceivePledgeSkillAdd(L2ParamStack&);
	public: virtual void OnReceivePledgeSkillList(L2ParamStack&);
	public: virtual void OnReceivePledgeSkillRemove(L2ParamStack&);
	public: virtual void OnReceivePledgeWarList(L2ParamStack&);
	public: virtual void OnReceiveQuestList();
	public: virtual void OnReceiveRecipeBookItemList(INT,INT);
	public: virtual void OnReceiveRefineCancelResult(INT);
	public: virtual void OnReceiveRefineResult(INT,INT,INT);
	public: virtual void OnReceiveReplyStartPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveReplyStopPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveReplySurrenderPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveServerTime(INT);
	public: virtual void OnReceiveSetAcademyMaster(L2ParamStack&);
	public: virtual void OnReceiveShortCutDelete(INT);
	public: virtual void OnReceiveShortCutList();
	public: virtual void OnReceiveShowRefineryCancelInterface();
	public: virtual void OnReceiveShowRefineryInterface();
	public: virtual void OnReceiveSiegeAttackerList(L2ParamStack&);
	public: virtual void OnReceiveSiegeDefenderList(L2ParamStack&);
	public: virtual void OnReceiveSiegeInfo(L2ParamStack&);
	public: virtual void OnReceiveStartPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveStopPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveSubPledgeCreated(L2ParamStack&);
	public: virtual void OnReceiveSummonStatusInfo(L2ParamStack&);
	public: virtual void OnReceiveSurrenderPersonally(L2ParamStack&);
	public: virtual void OnReceiveSurrenderPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveTradeDemand(L2ParamStack&);
	public: virtual void OnReceiveTradeDoneMsg(INT);
	public: virtual void OnReceiveTradePressOtherOk();
	public: virtual void OnReceiveTradeStart(INT);
	public: virtual void OnReceiveTradeUpdate(INT,struct ItemInfo&);
	public: virtual void OnReceiveUpdateItemList(INT,struct ItemInfo&);
	public: virtual void OnReceiveUseSharedGroupItem(INT,INT,INT,INT);
	public: virtual void OnReceiveVersionCheck(L2ParamStack&);
	public: virtual void OnReceiveWareHouseDonePacket(L2ParamStack&);
	public: virtual void OnReceiveWidthdrawalPledge(L2ParamStack&);
	public: virtual void OnReceiveWithdrawAlly(L2ParamStack&);
	public: virtual void OnReceiveWithdrawalParty(L2ParamStack&);
	public: virtual void OnRedSky(INT);
	public: virtual void OnRegenStatus(INT,INT,INT,double);
	public: virtual void OnRestartResponse(L2ParamStack&);
	public: virtual void OnSSQInfo(char,char);
	public: virtual void OnSelectItemToEnchant(INT);
	public: virtual void OnServerClose(INT);
	public: virtual void OnSetSSQMainEvent(L2ParamStack&);
	public: virtual void OnSetSSQPreStatus(L2ParamStack&);
	public: virtual void OnSetSSQSealStatus(L2ParamStack&);
	public: virtual void OnSetSSQStatus(L2ParamStack&);
	public: virtual void OnSetupGaugePacket(L2ParamStack&);
	public: virtual void OnShowCropInfo(L2ParamStack*);
	public: virtual void OnShowCropSetting(L2ParamStack*);
	public: virtual void OnShowMagicWnd();
	public: virtual void OnShowManorDefaultInfo(L2ParamStack*);
	public: virtual void OnShowPetNameBtn(INT);
	public: virtual void OnShowPetPartyWnd(INT);
	public: virtual void OnShowPetStatusWnd(INT,INT);
	public: virtual void OnShowProcureCropDetail(L2ParamStack*);
	public: virtual void OnShowQuestInfo(L2ParamStack&);
	public: virtual void OnShowSeedInfo(L2ParamStack*);
	public: virtual void OnShowSeedSetting(L2ParamStack*);
	public: virtual void OnShowSellCropList(L2ParamStack*);
	public: virtual void OnShowTrainInfoWnd(L2ParamStack&);
	public: virtual void OnShowTrainListWnd(L2ParamStack&);
	public: virtual void OnShowboardPacket(bool,L2ParamStack&);
	public: virtual void OnSkillCoolTimePacket(L2ParamStack&);
	public: virtual void OnSkillCoolTimeReset(L2ParamStack&);
	public: virtual void OnSnoop(L2ParamStack&);
	public: virtual void OnSpawnEmitter(APawn*,APawn*,INT);
	public: virtual void OnStartAllianceWar(L2ParamStack&);
	public: virtual void OnStartPartyMatch();
	public: virtual void OnStartPrivateStoreBuyList(L2ParamStack&);
	public: virtual void OnStartPrivateStoreBuyManageList(L2ParamStack&);
	public: virtual void OnStartPrivateStoreList(L2ParamStack&);
	public: virtual void OnStartPrivateStoreManageList(L2ParamStack&);
	public: virtual void OnStartSSQMainEvent();
	public: virtual void OnStopAllianceWar(L2ParamStack&);
	public: virtual void OnSuccessNewCharacter();
	public: virtual void OnUpdateL2Friend(INT,INT,wchar_t*,INT,INT);
	public: virtual void OnUpdateL2FriendStatus(INT,wchar_t*,INT);
	public: virtual void OnUpdatePetShortCutItem(INT);
	public: virtual void OnUpdatePlayerInfo(L2ParamStack&);
	public: virtual void OnUpdatePledgeMember(L2ParamStack&);
	public: virtual void OnUpdateShortCutItem(INT);
	public: virtual void OnUpdateShortCutList();
	public: virtual void OnVehicleStartPacket(L2ParamStack&);
	public: virtual void PaINTProgress();
	public: virtual void ReceiveHennaEquipList(__INT64,INT);
	public: virtual void ReceiveHennaInfo(struct HennaInfo,INT);
	public: virtual void ReceiveHennaItemInfo(struct HennaInfo,__INT64);
	public: virtual void ReceiveHennaUnequipItemInfo(struct HennaInfo,__INT64);
	public: virtual void ReceiveHennaUnequipList(__INT64,INT);
	public: virtual void ReceiveRecipeItemMakeInfo(L2ParamStack&);
	public: virtual void ReceiveRecipeShopItemInfo(INT,INT,INT,INT,INT,__INT64);
	public: virtual void ReceiveRecipeShopManageList(INT,INT,INT);
	public: virtual void ReceiveRecipeShopSellList(INT,INT,INT,__INT64);
	public: virtual void ReleaseTransform(struct User*,FVector,INT);
	public: virtual void SaveGame(INT);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetCameraFocus(FLOAT);
	public: virtual void SetClientTravel(UPlayer*,wchar_t const*,INT,enum ETravelType);
	public: virtual void SetL2HDREffectType(INT);
	public: virtual void SetL2Shader(INT);
	public: virtual void SetObserveMode(INT);
	public: virtual void SetProgress(wchar_t const*,wchar_t const*,FLOAT);
	public: virtual void Tick(FLOAT);
	public: virtual void UnClick(UViewport*,DWORD,INT,INT);
	public: virtual void UpdateConnectingMessage();
	public: virtual void UpdatePetInventoryItem(INT,struct ItemInfo&);
	public: virtual ~UGameEngine();
	public: void AddMD5(wchar_t const*,wchar_t const*,INT);
	public: void AdjustPawnLocation(APawn*,FVector const&);
	public: void ApplyVideoOption();
	public: void AttachLevel(ULevel*,FVector*);
	public: void AuthorizeClient(ULevel*);
	public: void CheckPurgeLevel(FVector,INT);
	public: void CreateReplayManager();
	public: void DefaultMD5();
	public: void DetachLevel(ULevel*);
	public: void EndLoadSWLevel(ULevel*);
	public: void FadeUpdate(FLOAT);
	public: void FindMouseTargetObject(UViewport*,FCameraSceneNode*);
	public: void FinishRemain();
	public: void FixUpLevel();
	public: void GetBuildData(FString&);
	public: void GetSWMapCenter(INT,INT,INT&,INT&);
	public: void GetSWMapXY(FVector const&,INT&,INT&);
	public: void GetSWMapXY(INT,INT,INT&,INT&);
	public: void InitClick();
	public: void InitConsole();
	public: void InitConsoleForReplayMode();
	public: void InitViewportRelatedOptions();
	public: void L2CastleEventTrigger();
	public: void L2CollectGarbage(DWORD);
	public: void L2EventTrigger(INT,INT);
	public: void L2PurgeGarbage();
	public: void L2SerializeRootSet(FArchive&,DWORD,DWORD);
	public: void L2ThrCollectGarbage(DWORD);
	public: void L2_Teleport(AActor*,FVector,INT,INT,INT);
	public: void ModifyGlobalClippingRange(FLOAT);
	public: void NPCTowardPlayer(struct User*,INT);
	public: void OnAddMultiSellInputItemInfo(INT,struct ItemInfo const&,INT);
	public: void OnAddMultiSellOutputItemInfo(INT,struct ItemInfo const&,INT);
	public: void OnColosseumFenceTest(FVector,INT,INT,enum ColosseumFenceState);
	public: void OnGameGuardQuery(DWORD,DWORD,DWORD,DWORD,INT);
	public: void OnMultiSellInfoListBegin(INT,INT);
	public: void OnMultiSellInfoListEnd(INT);
	public: void OnSetL2FogInfo(INT,bool);
	public: void OnSetMultiSellResultItemInfo(INT,INT,struct ItemInfo const&,INT);
	public: void OnSetSummonRemainTime(INT,INT);
	public: void OnSpawnDefaultPc();
	public: void OnSpawnPc(INT);
	public: void PlayForceFeedBack(INT,FLOAT);
	public: void PlaySceneManager(INT,INT);
	public: void PlaySceneManager(UL2SceneInfo*,INT);
	public: void ProcessImediateSkill(APawn*,APawn*,struct FL2MagicSkillData*);
	public: void ReCreateProjectedTargetRegionEffect(APawn*);
	public: void RemoveCubemaps();
	public: void RenderCameraEffect(FCameraSceneNode*);
	public: void RequestEnterWorld();
	public: void RequestHardWareInfo();
	public: void SaveMD5Database();
	public: void ScreenFadeBlink(FLOAT,FColor,FLOAT,FLOAT);
	public: void ScreenFadeDone(INT,enum EFadeType);
	public: void ScreenFadeIn(FLOAT,enum EFadeType);
	public: void ScreenFadeOut(FLOAT,FColor,enum EFadeType);
	public: void ServerUpdateMD5();
	public: void SetColorVariationColor(FColor const&);
	public: void SetEffectDetail(INT);
	public: void SetFXAAEffect(INT,INT);
	public: void SetGlowRenderEffect(INT);
	public: void SetGodRayEffect(INT);
	public: void SetHDRRenderEffect(INT);
	public: void SetHSVConversionEffect(INT);
	public: void SetLastDeltaSeconds(FLOAT);
	public: void SetMotionBlurEffect(INT);
	public: void SetPostEffect(INT,INT);
	public: void SetRGBConversionEffect(INT);
	public: void SetResolution(INT,INT);
	public: void SetYCbCrConversionEffect(INT);
	public: void Setg_levelsToNULL();
	public: void StartCommandMacro(wchar_t*);
	public: void StopSceneManager();
	public: void SwitchCameraMode(struct User const*);
	public: void TalkNPC(wchar_t const*);
	public: void TickCommandMacro(FLOAT);
	public: void TurnOffCameraMode();
	public: void TurnOnCameraMode(struct User const*);
	wchar_t const* const `public: void GetSWMapXY(FVector const&,INT&,INT&)'::`3'::__FUNC_NAME__;
	wchar_t const* const `public: void GetSWMapXY(INT,INT,INT&,INT&)'::`3'::__FUNC_NAME__;
UGlowModifier
	public: UGlowModifier();
	public: UGlowModifier(UGlowModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT RequiresSortingEx(FDynamicActor*);
	public: virtual ~UGlowModifier();
UI3DL2Listener
	public: UI3DL2Listener();
	public: UI3DL2Listener(UI3DL2Listener const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~UI3DL2Listener();
UIndexBuffer
	public: UIndexBuffer();
	public: UIndexBuffer(UIndexBuffer const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UIndexBuffer();
UInput
	private: static wchar_t const* __cdecl StaticConfigName();
	protected: virtual FLOAT* FindAxisName(AActor*,wchar_t const*)const;
	protected: virtual unsigned char* FindButtonName(AActor*,wchar_t const*)const;
	public: FLOAT GetInputDelta();
	public: INT ExecL2Test(wchar_t const*,FOutputDevice&);
	public: UInput();
	public: UInput(UInput const&);
	public: enum EInputAction GetInputAction();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: static void __cdecl StaticInitInput();
	public: unsigned char ArrowKeyDown();
	public: unsigned char KeyDown(INT);
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual INT FindKeyName(wchar_t const*,enum EInputKey&)const;
	public: virtual INT PreProcess(enum EInputKey,enum EInputAction,FLOAT);
	public: virtual INT Process(FOutputDevice&,enum EInputKey,enum EInputAction,FLOAT);
	public: virtual void DirectAxis(enum EInputKey,FLOAT,FLOAT);
	public: virtual void ExecInputCommands(wchar_t const*,FOutputDevice&);
	public: virtual void Init(UViewport*);
	public: virtual void ReadInput(FLOAT,FOutputDevice&);
	public: virtual void ResetInput();
	public: virtual void Serialize(FArchive&);
	public: virtual wchar_t const* GetKeyName(enum EInputKey)const;
	public: virtual wchar_t const* GetLocalizedKeyName(enum EInputKey)const;
	public: virtual ~UInput();
	public: void ExecJoyPad(wchar_t const*);
	public: void SetInputAction(enum EInputAction,FLOAT);
	public: void StaticConstructor();
UInteraction
	public: UInteraction();
	public: UInteraction(UInteraction const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT NativeKeyEvent(unsigned char&,unsigned char&,FLOAT);
	public: virtual INT NativeKeyType(unsigned char&,wchar_t);
	public: virtual void NativeMessage(FString,FLOAT);
	public: virtual void NativePostRender(UCanvas*);
	public: virtual void NativePreRender(UCanvas*);
	public: virtual void NativeTick(FLOAT);
	public: virtual ~UInteraction();
	public: void eventInitialized();
	public: void execConsoleCommand(struct FFrame&,void* const);
	public: void execInitialize(struct FFrame&,void* const);
	public: void execScreenToWorld(struct FFrame&,void* const);
	public: void execWorldToScreen(struct FFrame&,void* const);
UInteractionMaster
	public: INT Exec(wchar_t const*,FOutputDevice&);
	public: INT MasterProcessKeyEvent(enum EInputKey,enum EInputAction,FLOAT);
	public: INT MasterProcessKeyType(enum EInputKey,wchar_t);
	public: UInteraction* eventAddInteraction(FString const&,UPlayer*);
	public: UInteractionMaster();
	public: UInteractionMaster(UInteractionMaster const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UInteractionMaster();
	public: void DisplayCopyright();
	public: void MasterProcessMessage(FString const&,FLOAT);
	public: void MasterProcessPostRender(UCanvas*);
	public: void MasterProcessPreRender(UCanvas*);
	public: void MasterProcessTick(FLOAT);
	public: void eventRemoveInteraction(UInteraction*);
	public: void eventSetFocusTo(UInteraction*,UPlayer*);
	public: void execTravel(struct FFrame&,void* const);
UInteractions
	protected: UInteractions();
	public: UInteractions(UInteractions const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UInteractions();
UKMeshProps
	public: UKMeshProps();
	public: UKMeshProps(UKMeshProps const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UKMeshProps();
	wchar_t const* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
UKarmaParams
	public: UKarmaParams();
	public: UKarmaParams(UKarmaParams const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UKarmaParams();
UKarmaParamsCollision
	protected: UKarmaParamsCollision();
	public: UKarmaParamsCollision(UKarmaParamsCollision const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UKarmaParamsCollision();
UKarmaParamsRBFull
	protected: UKarmaParamsRBFull();
	public: UKarmaParamsRBFull(UKarmaParamsRBFull const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UKarmaParamsRBFull();
UKarmaParamsSkel
	protected: UKarmaParamsSkel();
	public: UKarmaParamsSkel(UKarmaParamsSkel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UKarmaParamsSkel();
UL2ColorModifier
	protected: UL2ColorModifier();
	public: UL2ColorModifier(UL2ColorModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UL2ColorModifier();
UL2ConsoleWnd
	public: INT IsShowRadarTime();
	public: UL2ConsoleWnd();
	public: UL2ConsoleWnd(UL2ConsoleWnd const&);
	public: enum L2ConsoleState GetState();
	public: static UClass* __cdecl StaticClass();
	public: virtual void L2KeyRemapping(unsigned INT&,unsigned INT&,long&);
	public: virtual void MoveCameraByState(enum L2ConsoleState,enum L2ConsoleState);
	public: virtual void PlayIntroMusic();
	public: virtual void RestoreLobbyMusic();
	public: virtual void StopIntroMusic();
	public: virtual ~UL2ConsoleWnd();
	public: void SetShowRadarTime(INT);
	public: void SetState(enum L2ConsoleState);
UL2EffectEmitter
	public: AEmitter* SpawnAttachLocation(ULevel*,AActor*,APawn*,struct FNMagicInfo*);
	public: AEmitter* SpawnAttachNone(ULevel*,AActor*,AActor*,AActor*,APawn*,ANSkillProjectile*,enum ESkillType,FRotator const&,FVector const&);
	public: AEmitter* SpawnEffectEmitter(ULevel*,AActor*,AActor*,AActor*,APawn*,ANSkillProjectile*,struct FNMagicInfo*,FRotator const&,FVector const&,INT);
	public: FLOAT GetPawnEffectScaleFactor(AActor*);
	public: FName GetAttachBoneName(AActor*);
	public: FRotator CalcSpawnRotation(AActor*,AActor*,ANSkillProjectile*);
	public: FVector CalcRelativeOffset(AActor*,FRotator const&);
	public: FVector GetPawnEffectOffset(AActor*);
	public: INT AttachToAdditionalSkeletalBone(AEmitter*,FName const&,USkeletalMeshInstance*,AActor*,FVector const&);
	public: INT AttachToBone(AEmitter*,FName const&,AActor*,FVector const&);
	public: INT AvailableOffsetRange(FVector const&);
	public: INT AvailableScaleRange(FLOAT);
	public: INT IsBoneAttach()const;
	public: UClass* GetEffectClass();
	public: UL2EffectEmitter();
	public: UL2EffectEmitter(UL2EffectEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AEmitter* SpawnAccumulativeEffectFromSkeletalMesh(APawn*,FName const&,USkeletalMeshInstance*,FName const&,AActor* const,FLOAT);
	public: virtual AEmitter* SpawnEffect(AActor* const,AActor*,FLOAT,bool);
	public: virtual void PostEditChange();
	public: virtual ~UL2EffectEmitter();
	public: void AttachToTrailOrEtc(AEmitter*,FVector const&);
	public: void SetAccumulativeBeamEndPoINT(AEmitter*,FName const&,AActor const*);
	public: void SetBeamEmitterEndPoINT(AActor*,AActor*,AEmitter*,enum ESkillType);
	public: void SetPawnLight(AEmitter*,AActor* const,AActor*,APawn*,FRotator const&);
	public: void SetRibbonEmitterTrack(AEmitter*,APawn*,FName const&,FLOAT);
UL2Font
	public: UL2Font();
	public: UL2Font(UL2Font const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual ~UL2Font();
UL2NEnvLight
	public: UL2NEnvLight();
	public: UL2NEnvLight(UL2NEnvLight const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void GetActorAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetBSPAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetBeastLightMap1Scale(FLOAT,FLOAT&);
	public: virtual void GetBeastLightMap2Scale(FLOAT,FLOAT&);
	public: virtual void GetGodRayBrightnessScale(FLOAT,FLOAT&);
	public: virtual void GetGodRayEmitScale(FLOAT,FLOAT&);
	public: virtual void GetGodRaySizeScale(FLOAT,FLOAT&);
	public: virtual void GetMoonColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetMoonScale(FLOAT,FLOAT&);
	public: virtual void GetSkyBSPAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetSkyBoxColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetStaticMeshAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetSunColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetSunScale(FLOAT,FLOAT&);
	public: virtual void GetTerrainAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void Load(wchar_t const*);
	public: virtual void UpdateNTime(FLOAT);
	public: virtual ~UL2NEnvLight();
UL2NEnvManager
	public: DWORD GetSecond();
	public: FLOAT CalcEnvDelta(FLOAT);
	public: FLOAT GetBrightness_HSVActorSunLight(FLOAT,INT);
	public: FLOAT GetBrightness_HSVBSPSunLight(FLOAT,INT);
	public: FLOAT GetBrightness_HSVStaticMeshSunLight(FLOAT,INT);
	public: FLOAT GetBrightness_HSVTerrainSunLight(FLOAT,INT);
	public: FLOAT GetEnvBrightness(FLOAT,FLOAT,FLOAT,FLOAT);
	public: FVector GetSunLightDirection(FLOAT);
	public: INT GetHour();
	public: INT GetMin();
	public: INT GetNTimeRatio();
	public: INT GetNumCloud();
	public: INT GetNumHazeRing();
	public: INT IsDay();
	public: INT IsSoundDay();
	public: INT IsSoundNight();
	public: UL2NEnvManager();
	public: UL2NEnvManager(UL2NEnvManager const&);
	public: bool GetCandleEventState();
	public: double GetFakeTime();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void GetGodRayBrightnessScale(FLOAT,FLOAT&);
	public: virtual void GetGodRayEmitScale(FLOAT,FLOAT&);
	public: virtual void GetGodRaySizeScale(FLOAT,FLOAT&);
	public: virtual void Load(wchar_t const*);
	public: virtual void UpdateNTime(FLOAT);
	public: virtual ~UL2NEnvManager();
	public: void ChangeEnv(char,char,FLOAT,FLOAT,FLOAT,FLOAT,INT);
	public: void Clear();
	public: void DecreaseNTimeRatio(INT&);
	public: void GetActorAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&,INT);
	public: void GetBSPAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&,INT);
	public: void GetBaseColorPlane_HSVActorSunLight(FLOAT,FPlane&,INT);
	public: void GetBaseColorPlane_HSVBSPSunLight(FLOAT,FPlane&,INT);
	public: void GetBaseColorPlane_HSVStaticMeshSunLight(FLOAT,FPlane&,INT);
	public: void GetBaseColorPlane_HSVTerrainSunLight(FLOAT,FPlane&,INT);
	public: void GetBeastLightMap1Scale(FLOAT,FLOAT&,INT);
	public: void GetBeastLightMap2Scale(FLOAT,FLOAT&,INT);
	public: void GetColorPlane_HSVActorSunLight(FLOAT,FPlane&,INT);
	public: void GetColorPlane_HSVBSPSunLight(FLOAT,FPlane&,INT);
	public: void GetColorPlane_HSVStaticMeshSunLight(FLOAT,FPlane&,INT);
	public: void GetColorPlane_HSVTerrainSunLight(FLOAT,FPlane&,INT);
	public: void GetEnvColor(FColor const&,FColor const&,FColor const&,FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: void GetEnvColorPlane(FPlane const&,FPlane const&,FPlane const&,FLOAT,FPlane&);
	public: void GetMoonColor(FLOAT,unsigned char&,unsigned char&,unsigned char&,INT);
	public: void GetMoonModifierInfo(FLOAT,FLOAT&,FLOAT&,FLOAT&);
	public: void GetMoonScale(FLOAT,FLOAT&,INT);
	public: void GetSkyBSPAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&,INT);
	public: void GetSkyBoxColor(FLOAT,unsigned char&,unsigned char&,unsigned char&,INT);
	public: void GetStaticMeshAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&,INT);
	public: void GetSunColor(FLOAT,unsigned char&,unsigned char&,unsigned char&,INT);
	public: void GetSunModifierInfo(FLOAT,FLOAT&,FLOAT&,FLOAT&);
	public: void GetSunScale(FLOAT,FLOAT&,INT);
	public: void GetTerrainAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&,INT);
	public: void IncreaseNTimeRatio(INT&);
	public: void SetCandleEventState(bool);
	public: void SetEnableActorAmbient(INT);
	public: void SetEnableBspAmbient(INT);
	public: void SetEnableGodRay(INT);
	public: void SetEnableHsvActorLight(INT);
	public: void SetEnableHsvStaticMeshLight(INT);
	public: void SetEnableHsvTerrainLight(INT);
	public: void SetEnableLightMapIntensity(INT);
	public: void SetEnableSkyBoxColor(INT);
	public: void SetEnableSkyBspAmbient(INT);
	public: void SetEnableStaticMeshAmbient(INT);
	public: void SetEnableTerrainAmbient(INT);
	public: void SetFakeTime(FLOAT);
	public: void SetNTime(unsigned char&,unsigned char&,FLOAT&);
	public: void SetNTimeRatio(INT&);
	public: void SetOrigin(FVector);
	public: void SetShadowTick(INT);
	public: void SetTestActorAmbientColor(FColor);
	public: void SetTestBeastLightMapIntensity(FLOAT,FLOAT);
	public: void SetTestBspAmbientColor(FColor);
	public: void SetTestGodRayOption(FLOAT,FLOAT,FLOAT);
	public: void SetTestHsvActorLightColor(FColor);
	public: void SetTestHsvStaticMeshLightColor(FColor);
	public: void SetTestHsvTerrainLightColor(FColor);
	public: void SetTestSkyBoxColor(FColor);
	public: void SetTestSkyBspAmbientColor(FColor);
	public: void SetTestStaticMeshAmbientColor(FColor);
	public: void SetTestTerrainAmbientColor(FColor);
	public: void SetTimeToLobbyTime();
	public: wchar_t* GetCloudName(INT);
	public: wchar_t* GetHazeRingName(INT);
UL2NTimeLight
	public: UL2NTimeLight();
	public: UL2NTimeLight(UL2NTimeLight const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetBrightness_HSVActorSunLight(FLOAT);
	public: virtual FLOAT GetBrightness_HSVBSPSunLight(FLOAT);
	public: virtual FLOAT GetBrightness_HSVStaticMeshSunLight(FLOAT);
	public: virtual FLOAT GetBrightness_HSVTerrainSunLight(FLOAT);
	public: virtual void GetBaseColorPlane_HSVActorSunLight(FLOAT,FPlane&);
	public: virtual void GetBaseColorPlane_HSVBSPSunLight(FLOAT,FPlane&);
	public: virtual void GetBaseColorPlane_HSVStaticMeshSunLight(FLOAT,FPlane&);
	public: virtual void GetBaseColorPlane_HSVTerrainSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVActorSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVBSPSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVStaticMeshSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVTerrainSunLight(FLOAT,FPlane&);
	public: virtual void Load(wchar_t const*);
	public: virtual void UpdateNTime(FLOAT);
	public: virtual ~UL2NTimeLight();
UL2SceneInfo
	protected: UL2SceneInfo();
	public: UL2SceneInfo(UL2SceneInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UL2SceneInfo();
UL2SceneItem
	protected: UL2SceneItem();
	public: UL2SceneItem(UL2SceneItem const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UL2SceneItem();
UL2SkillEffect
	private: INT ChannelingTarget(APawn*,AActor*,struct FNMagicInfo*,INT);
	private: INT IsOnMultiTarget(UL2EffectEmitter*,struct FNMagicInfo*)const;
	public: UL2SkillEffect();
	public: UL2SkillEffect(UL2SkillEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UL2SkillEffect();
	public: void AccumulativeChannelingFromSkeletalMesh(APawn*,FName const&,USkeletalMeshInstance*,FName const&,AActor* const,FLOAT);
	public: void Casting(APawn*,AActor*,struct FNMagicInfo*);
	public: void Channeling(APawn*,struct FNMagicInfo*);
	public: void Explosion(ANSkillProjectile*);
	public: void Preshot(APawn*,struct FNMagicInfo*);
	public: void Shot(APawn*,struct FNMagicInfo*);
	public: void TransientEffect(APawn*,AActor*,INT);
	public: void UnionTarget(AActor*);
ULevel
	protected: ULevel();
	public: ABrush* Brush();
	public: AEmitter* SpawnEmitterAtaLocation(wchar_t const*,FVector const&,FRotator const&,AActor*);
	public: AGameInfo* GetGameInfo();
	public: INT DeleteL2EventActors(AActor*);
	public: INT EditorDestroyActor(AActor*);
	public: INT EndLoadSWLevel(INT);
	public: INT GetActorIndex(AActor*);
	public: INT GetCurEnvType();
	public: INT GetLevelObjectIndex(ULevelObject*);
	public: INT LoadActors(INT);
	public: INT LoadCleanup(INT);
	public: INT PostloadObjects(INT);
	public: INT PreloadObjects(INT);
	public: INT ToFloor(AActor*,INT,AActor*);
	public: INT _L2_DestroyActor(AActor*);
	public: ULevel(UEngine*,INT);
	public: ULevel(ULevel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* FindActorWithCreatureID(INT);
	public: virtual AActor* SpawnActor(UClass*,FName,FVector,FRotator,AActor*,INT,INT,AActor*,APawn*);
	public: virtual ABrush* SpawnBrush();
	public: virtual ALevelInfo* GetLevelInfo(FVector const*);
	public: virtual APlayerController* SpawnPlayActor(UPlayer*,enum ENetRole,FURL const&,FString&);
	public: virtual ATerrainInfo* GetTerrainInfo();
	public: virtual AZoneInfo* GetZoneActor(INT);
	public: virtual FLOAT CalculateRadiusMultiplier(INT,INT);
	public: virtual INT CheckEncroachment(AActor*,FVector,FRotator,INT);
	public: virtual INT CheckSlice(FVector&,FVector,INT&);
	public: virtual INT DestroyActor(AActor*,INT);
	public: virtual INT DestroyLevelObject(ULevelObject*);
	public: virtual INT EncroachingWorldGeometry(struct FCheckResult&,FVector,FVector,DWORD,ALevelInfo*);
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual INT FarMoveActor(AActor*,FVector,INT,INT,INT);
	public: virtual INT FindSpot(FVector,FVector&);
	public: virtual INT GetLevelNum();
	public: virtual INT IsAudibleAt(FVector,FVector,AActor*,enum ESoundOcclusion);
	public: virtual INT IsPaused();
	public: virtual INT IsServer();
	public: virtual INT L2SingleLineCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,DWORD,FVector);
	public: virtual INT Listen(FString&);
	public: virtual INT MoveActor(AActor*,FVector const&,FRotator,struct FCheckResult&,INT,INT,INT,INT);
	public: virtual INT NotifyAcceptingChannel(UChannel*);
	public: virtual INT NotifySendingFile(UNetConnection*,FGuid);
	public: virtual INT SingleLineCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,DWORD,FVector);
	public: virtual INT SinglePoINTCheck(struct FCheckResult&,FVector,FVector,DWORD,ALevelInfo*,INT);
	public: virtual INT TickDemoPlayback(FLOAT);
	public: virtual INT TickDemoRecord(FLOAT);
	public: virtual ULevel* GetLevel(INT);
	public: virtual ULevel* NotifyGetLevel();
	public: virtual ULevelObject* SpawnLevelObject(UClass*,FName,FVector,ULevelObject*);
	public: virtual UModel* GetModel(FVector const*);
	public: virtual enum EAcceptConnection NotifyAcceptingConnection();
	public: virtual struct FCheckResult* GetPawnListExtent(FMemStack&,INT,INT,INT,INT,INT);
	public: virtual struct FCheckResult* GetPawnListExtent2(FMemStack&,AActor*,FVector const&,FVector const&,FVector);
	public: virtual struct FCheckResult* L2MultiLineCheck(FMemStack&,FVector const&,FVector const&,FVector const&,ALevelInfo*,DWORD,AActor*);
	public: virtual struct FCheckResult* MultiLineCheck(FMemStack&,FVector,FVector const&,FVector const&,ALevelInfo*,DWORD,AActor*,INT);
	public: virtual struct FCheckResult* MultiPoINTCheck(FMemStack&,FVector,FVector,DWORD,ALevelInfo*,INT,INT,INT);
	public: virtual void BuildRenderData();
	public: virtual void CleanupDestroyed(INT);
	public: virtual void CleanupDestroyedLevelObject(INT);
	public: virtual void CompactActors();
	public: virtual void CompactLevelObjects();
	public: virtual void Destroy();
	public: virtual void DetailChange(enum EDetailMode);
	public: virtual void Flush();
	public: virtual void InvalidateStaticFilterState();
	public: virtual void Modify(INT);
	public: virtual void NotifyAcceptedConnection(UNetConnection*);
	public: virtual void NotifyReceivedFile(UNetConnection*,INT,wchar_t const*,INT);
	public: virtual void NotifyReceivedText(UNetConnection*,wchar_t const*);
	public: virtual void PostLoad();
	public: virtual void ReconcileActors();
	public: virtual void RememberActors();
	public: virtual void ResetActorStaticLight();
	public: virtual void Serialize(FArchive&);
	public: virtual void SetActorCollision(INT,INT);
	public: virtual void ShrinkLevel();
	public: virtual void SpawnViewActor(UViewport*);
	public: virtual void Tick(enum ELevelTick,FLOAT);
	public: virtual void UpdateTime(ALevelInfo*);
	public: virtual void WelcomePlayer(UNetConnection*,wchar_t*);
	public: virtual ~ULevel();
	public: void ClearBeastLightmapTexture(INT);
	public: void DeleteAllL2EventActors();
	public: void DestroyBeastLightmapTextures();
	public: void ExecL2EventActors(FName,FVector,FLOAT,FLOAT);
	public: void FinishDestroyedActors();
	public: void Load();
	public: void Patchup();
	public: void UpdateTerrainArrays();
	public: void _L2_SpawnActor(AActor*);
	wchar_t const* const `public: INT GetActorIndex(AActor*)'::`3'::__FUNC_NAME__;
	wchar_t const* const `public: INT GetLevelObjectIndex(ULevelObject*)'::`3'::__FUNC_NAME__;
ULevelObject
	public: INT IsHiddenEd();
	public: ULevelObject();
	public: ULevelObject(ULevelObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetAmbientVolume(FLOAT);
	public: virtual INT IsAAmbientSoundObject();
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*);
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*);
	public: virtual ~ULevelObject();
	public: void Render(FLevelSceneNode*,FRenderInterface*);
ULevelSummary
	public: ULevelSummary();
	public: ULevelSummary(ULevelSummary const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostLoad();
	public: virtual ~ULevelSummary();
	wchar_t const* const `public: virtual void PostLoad()'::`3'::__FUNC_NAME__;
ULodMesh
	public: ULodMesh();
	public: ULodMesh(ULodMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT MemFootprINT(INT);
	public: virtual UClass* GetMeshInstanceClass();
	public: virtual void Serialize(FArchive&);
	public: virtual ~ULodMesh();
ULodMeshInstance
	public: FMatrix AttachedMeshToWorld(FCoords&,FLOAT);
	public: FMatrix AttachedMeshToWorldOrigin(FCoords&,FLOAT);
	public: ULodMeshInstance();
	public: ULodMeshInstance(ULodMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FMeshAnimSeq* GetAnimSeq(FName);
	public: virtual AActor* GetActor();
	public: virtual INT GetStatus();
	public: virtual UMaterial* GetMaterial(INT,AActor*);
	public: virtual UMesh* GetMesh();
	public: virtual UMeshComponent* GetMeshComponent();
	public: virtual void GetFrame(AActor*,FLevelSceneNode*,FVector*,INT,INT&,DWORD);
	public: virtual void GetMeshVerts(AActor*,FVector*,INT,INT&);
	public: virtual void PoseFrame(INT,FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetActor(AActor*);
	public: virtual void SetMesh(UMesh*);
	public: virtual void SetMeshComponent(UMeshComponent*);
	public: virtual void SetStatus(INT);
	public: virtual ~ULodMeshInstance();
UMaskTexture
	public: UMaskTexture();
	public: UMaskTexture(UMaskTexture const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual void PostEditChange();
	public: virtual ~UMaskTexture();
UMasterLevel
	protected: UMasterLevel();
	public: ATerrainInfo* GetSWTerrainInfo(FVector const&);
	public: INT IterateActors(ActorFunc&,INT);
	public: INT IterateActors(ActorFunc&,ULevel*);
	public: ULevel* GetCurrentSWLevel(FVector const&);
	public: ULevel* GetCurrentSWLevel(FVector const*);
	public: ULevel* GetFirstNonSWLevel();
	public: ULevel* GetRemovalSWLevel();
	public: UMasterLevel(UEngine*);
	public: UMasterLevel(UMasterLevel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* SpawnActor(UClass*,FName,FVector,FRotator,AActor*,INT,INT,AActor*,APawn*);
	public: virtual ALevelInfo* GetLevelInfo(FVector const*);
	public: virtual ATerrainInfo* GetTerrainInfo();
	public: virtual AZoneInfo* GetZoneActor(INT);
	public: virtual INT GetLevelNum();
	public: virtual INT L2SingleLineCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,DWORD,FVector);
	public: virtual INT SingleLineCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,DWORD,FVector);
	public: virtual ULevel* GetLevel(INT);
	public: virtual UModel* GetModel(FVector const*);
	public: virtual struct FCheckResult* L2MultiLineCheck(FMemStack&,FVector const&,FVector const&,FVector const&,ALevelInfo*,DWORD,AActor*);
	public: virtual void BuildRenderData();
	public: virtual void CleanupDestroyed(INT);
	public: virtual void Destroy();
	public: virtual void InvalidateStaticFilterState();
	public: virtual void NotifyLevelDeleted(ULevel*);
	public: virtual void Serialize(FArchive&);
	public: virtual void Tick(enum ELevelTick,FLOAT);
	public: virtual ~UMasterLevel();
	public: void AddFirstLevel(ULevel*);
	public: void AddSWLevel(ULevel*,FVector*);
	public: void DeleteSWLevel(ULevel*);
	public: void DetachLevel(ULevel*,INT);
	public: void Iterate(void (ULevel::*&)());
	public: void IterateTerrainInfo(void (ATerrainInfo::*&)());
	public: void RemoveAllLevels(ULevel*);
	public: void RemoveTooDistantLevel(FVector const&);
	public: void SetCurrentMap(INT,INT);
UMatAction
	public: UMatAction();
	public: UMatAction(UMatAction const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual ~UMatAction();
UMatObject
	protected: UMatObject();
	public: UMatObject(UMatObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UMatObject();
UMatSubAction
	public: FString GetStatusDesc();
	public: UMatSubAction();
	public: UMatSubAction(UMatSubAction const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT IsRunning();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual void PostEditChange();
	public: virtual ~UMatSubAction();
UMaterial
	public: UBitmapMaterial* GetShaderMaterial(INT);
	public: UMaterial();
	public: UMaterial(UMaterial const&);
	public: UMaterial* ConvertPolyFlagsToMaterial(UMaterial*,DWORD);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl ClearFallbacks();
	public: virtual INT GetSortingLevel();
	public: virtual INT GetValidated();
	public: virtual INT HasFallback();
	public: virtual INT IsLoaded();
	public: virtual INT IsTransparent();
	public: virtual INT IsTwoSided()const;
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual INT RequiresNormal();
	public: virtual INT RequiresSorting();
	public: virtual INT RequiresSortingEx(FDynamicActor*);
	public: virtual UMaterial* CheckFallback();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void Destroy();
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetValidated(INT);
	public: virtual ~UMaterial();
UMaterialSequence
	public: UMaterialSequence();
	public: UMaterialSequence(UMaterialSequence const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UMaterialSequence();
	public: void Reset();
	public: void Trigger();
UMaterialSwitch
	public: UMaterialSwitch();
	public: UMaterialSwitch(UMaterialSwitch const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~UMaterialSwitch();
UMesh
	public: UMesh();
	public: UMesh(UMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual UClass* GetMeshInstanceClass();
	public: virtual UMeshInstance* GetDefaultMeshInstance();
	public: virtual UMeshInstance* GetMeshInstance(UMeshComponent*);
	public: virtual UMeshInstance* MeshGetInstance(AActor const*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UMesh();
UMeshAnimation
	public: UMeshAnimation();
	public: UMeshAnimation(UMeshAnimation const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AdjustMovement(FName,FCoords);
	public: virtual INT LoadMovementData(FName);
	public: virtual INT MemFootprINT();
	public: virtual INT SequenceMemFootprINT(FName);
	public: virtual MotionChunk* GetMovement(FName);
	public: virtual struct FMeshAnimSeq* GetAnimSeq(FName);
	public: virtual void ConformBones(UMeshAnimation*,USkeletalMesh*);
	public: virtual void InitForDigestion();
	public: virtual void LoadAllMovement();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual void SortMovesData();
	public: virtual ~UMeshAnimation();
UMeshComponent
	public: AActor* GetOwner();
	public: INT CreateSkin(FRenderInterface*,INT);
	public: INT GetMaterialNum();
	public: INT GetSortingLevel();
	public: INT IsReadyToRender();
	public: INT IsRender()const;
	public: INT IsSameMeshComponent(struct FMeshComponentData&);
	public: INT LoadMeshComponent(INT);
	public: INT LoadMeshComponentByResourceManager();
	public: INT PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: INT RequiresSorting(AActor*);
	public: INT Tick(FLOAT);
	public: UMaterial* GetMaterial(INT);
	public: UMesh* GetMesh();
	public: UMeshComponent();
	public: UMeshComponent(UMeshComponent const&);
	public: UMeshInstance* GetMeshInstance(INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char GetStatus();
	public: virtual INT IsLoaded();
	public: virtual void Destroy();
	public: virtual ~UMeshComponent();
	public: void CleanupDestroyed();
	public: void LoadAnimData(FName);
	public: void Render(FDynamicActor*,FLevelSceneNode*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&,INT,INT,INT,INT);
	public: void RenderPostProcess(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*);
	public: void RenderPreProcess(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&,INT&,INT,INT&);
	public: void SetAttachBoneName(FName const&);
	public: void SetAttachOffset(FVector const&);
	public: void SetAttachRotation(FRotator const&);
	public: void SetAttachment(struct FSheathingInfo const&);
	public: void SetMaterial(INT,UMaterial*);
	public: void SetMesh(UMesh*);
	public: void SetMeshInstance(UMeshInstance*);
	public: void SetOwner(AActor*);
	public: void SetRender(INT);
	public: void SetStatus(enum EMeshComponentStatus);
	public: void UpdateAnimation(FLOAT,UMeshComponent*);
	public: void UpdateMeshComponent(struct FMeshComponentData&);
UMeshContainer
	public: INT CreateSkin(FRenderInterface*,INT);
	public: INT GetSortingLevel();
	public: INT PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: INT RequiresSorting(AActor*);
	public: INT RequiresSortingEx(AActor*);
	public: INT Tick(FLOAT);
	public: INT UpdateFirstMeshComponent(struct FMeshComponentData&);
	public: INT UpdateFirstMeshComponentByEditor(struct FMeshComponentData&,UMesh*);
	public: UMesh* GetMesh();
	public: UMesh* GetMesh(INT);
	public: UMeshComponent* AddMeshComponent(struct FMeshComponentData&);
	public: UMeshComponent* GetMeshComponent();
	public: UMeshComponent* GetProperWeaponMeshComponent(enum WeaponType,enum WeaponMeshAttachSide);
	public: UMeshComponent* RemoveMeshComponent(UMeshComponent*);
	public: UMeshContainer();
	public: UMeshContainer(UMeshContainer const&);
	public: UMeshInstance* GetMeshInstance();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsLoaded();
	public: virtual void Destroy();
	public: virtual ~UMeshContainer();
	public: void CleanupDestroyed();
	public: void Init();
	public: void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*);
	public: void SerFirstMeshContainerIsRender(bool);
	public: void SetOwner(AActor*);
	public: void SetWeaponAttachBoneName(enum WeaponType,enum WeaponMeshAttachSide,FName const&);
	public: void SetWeaponAttachOffset(enum WeaponType,enum WeaponMeshAttachSide,FVector const&);
	public: void SetWeaponAttachRotation(enum WeaponType,enum WeaponMeshAttachSide,FRotator const&);
	public: void SetWeaponAttachment(enum WeaponType,enum WeaponMeshAttachSide,struct FSheathingInfo const&);
	public: void SetWeaponBone(FName const*,FName const&);
	public: void SetWeaponHide(enum WeaponType,enum WeaponMeshAttachSide,INT);
	public: void UpdateAnimation(FLOAT);
	public: void UpdateBoundingBox(FDynamicActor*);
	public: void UpdateFistWeaponMeshComponent();
UMeshEmitter
	public: UMeshEmitter();
	public: UMeshEmitter(UMeshEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsUpdateSkippableParticle();
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual ~UMeshEmitter();
UMeshInstance
	public: UMeshInstance();
	public: UMeshInstance(UMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* GetActor();
	public: virtual FBox GetCollisionBoundingBox(AActor const*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FLOAT AnimGetFrameCount(void*);
	public: virtual FLOAT AnimGetNotifyTime(void*,INT);
	public: virtual FLOAT AnimGetRate(void*);
	public: virtual FLOAT GetActiveAnimFrame(INT);
	public: virtual FLOAT GetActiveAnimRate(INT);
	public: virtual FMatrix MeshToWorld(FLOAT);
	public: virtual FName AnimGetGroup(void*);
	public: virtual FName AnimGetName(void*);
	public: virtual FName GetActiveAnimSequence(INT);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual INT ActiveVertStreamSize();
	public: virtual INT AnimForcePose(FName,FLOAT,FLOAT,INT,FLOAT);
	public: virtual INT AnimGetNotifyCount(void*);
	public: virtual INT AnimIsInGroup(void*,FName);
	public: virtual INT AnimStopLooping(INT);
	public: virtual INT FreezeAnimAt(FLOAT,INT);
	public: virtual INT GetAnimCount();
	public: virtual INT GetStatus();
	public: virtual INT IsAnimLooping(INT);
	public: virtual INT IsAnimPastLastFrame(INT);
	public: virtual INT IsAnimTweening(INT);
	public: virtual INT IsAnimating(INT);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector,FVector,FVector,DWORD,DWORD);
	public: virtual INT PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector,FVector,DWORD);
	public: virtual INT StopAnimating();
	public: virtual INT UpdateAnimation(FLOAT);
	public: virtual UAnimNotify* AnimGetNotifyObject(void*,INT);
	public: virtual UMaterial* GetMaterial(INT,AActor*);
	public: virtual UMesh* GetMesh();
	public: virtual UMeshComponent* GetMeshComponent();
	public: virtual void GetFrame(FLevelSceneNode*,DWORD);
	public: virtual void MeshBuildBounds();
	public: virtual void MeshSkinVertsCallback(void*);
	public: virtual void PoseFrame(INT,FLOAT);
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT,FMatrix const&);
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&,INT,INT,INT,INT);
	public: virtual void RenderPreProcess(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&,INT&,INT,INT&);
	public: virtual void SetActor(AActor*);
	public: virtual void SetAnimFrame(INT,FLOAT,INT);
	public: virtual void SetAnimLastFrame(INT,FLOAT);
	public: virtual void SetMesh(UMesh*);
	public: virtual void SetMeshComponent(UMeshComponent*);
	public: virtual void SetScale(FVector);
	public: virtual void SetStatus(INT);
	public: virtual void SetSubMeshIndex(INT);
	public: virtual void* GetAnimIndexed(INT);
	public: virtual void* GetAnimNamed(FName);
	public: virtual wchar_t const* AnimGetNotifyText(void*,INT);
	public: virtual ~UMeshInstance();
UMeshObject
	protected: UMeshObject();
	public: UMeshObject(UMeshObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UMeshObject();
UModel
	public: FLOAT FindNearestVertex(FVector const&,FVector&,FLOAT,INT&)const;
	public: INT PotentiallyVisible(INT,INT);
	public: UModel();
	public: UModel(ABrush*,INT);
	public: UModel(UModel const&);
	public: bool SetLightmapTextureSize(INT,INT,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FPoINTRegion PoINTRegion(AZoneInfo*,FVector)const;
	public: unsigned char FastLineCheck(FVector,FVector);
	public: virtual FBox GetCollisionBoundingBox(AActor const*)const;
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FVector GetEncroachCenter(AActor*);
	public: virtual FVector GetEncroachExtent(AActor*);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,FVector const&,DWORD,DWORD);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,DWORD);
	public: virtual INT UseCylinderCollision(AActor const*);
	public: virtual void Destroy();
	public: virtual void Illuminate(AActor*,INT,INT);
	public: virtual void PostLoad();
	public: virtual void Rename(wchar_t const*,UObject*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UModel();
	public: void AttachProjector(INT,struct FProjectorRenderInfo*,FPlane*);
	public: void BuildBound();
	public: void BuildRenderData();
	public: void ClearBeastLightmapTexture(ULevel*,INT);
	public: void ClearRenderData(URenderDevice*);
	public: void CompressBeastLightmaps();
	public: void CompressLightmaps();
	public: void DestroyBeastLightmapTextures();
	public: void EmptyModel(INT,INT);
	public: void Modify(INT);
	public: void ModifyAllSurfs(INT);
	public: void ModifySelectedSurfs(INT);
	public: void ModifySurf(INT,INT);
	public: void PrecomputeSphereFilter(FPlane const&);
	public: void Render(FDynamicActor*,FLevelSceneNode*,FRenderInterface*,INT,FColor);
	public: void ShrinkModel();
	public: void Transform(ABrush*);
UModifier
	public: UModifier();
	public: UModifier(UModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetSortingLevel();
	public: virtual INT IsLoaded();
	public: virtual INT IsTransparent();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual INT RequiresSorting();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual ~UModifier();
UNetConnection
	public: INT SendRawBunch(FOutBunch&,INT);
	public: UChannel* CreateChannel(enum EChannelType,INT,INT);
	public: UNetConnection();
	public: UNetConnection(UNetConnection const&);
	public: UNetConnection(UNetDriver*,FURL const&);
	public: UNetDriver* GetDriver();
	public: static UClass* __cdecl StaticClass();
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual INT IsNetReady(INT);
	public: virtual void AssertValid();
	public: virtual void Destroy();
	public: virtual void FlushNet();
	public: virtual void HandleClientPlayer(APlayerController*);
	public: virtual void InitOut();
	public: virtual void ReadInput(FLOAT);
	public: virtual void SendAck(INT,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual void Serialize(wchar_t const*,enum EName);
	public: virtual void Tick();
	public: virtual ~UNetConnection();
	public: void PostSend();
	public: void PreSend(INT);
	public: void PurgeAcks();
	public: void ReceiveFile(INT);
	public: void ReceivedNak(INT);
	public: void ReceivedPacket(struct FBitReader&);
	public: void ReceivedRawPacket(void*,INT);
	public: void SendPackageMap();
	public: void SetActorDirty(AActor*);
	public: void SlowAssertValid();
UNetDriver
	public: UNetDriver();
	public: UNetDriver(UNetDriver const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual INT InitConnect(FNetworkNotify*,FURL&,FString&);
	public: virtual INT InitListen(FNetworkNotify*,FURL&,FString&);
	public: virtual INT IsDemoDriver();
	public: virtual void AssertValid();
	public: virtual void Destroy();
	public: virtual void NotifyActorDestroyed(AActor*);
	public: virtual void Serialize(FArchive&);
	public: virtual void TickDispatch(FLOAT);
	public: virtual void TickFlush();
	public: virtual ~UNetDriver();
	public: void StaticConstructor();
UNetworkHandler
	public: FVector GetObjectLocation(FObjectMap*);
	public: INT IsInnerCylinder(FObjectMap*,FObjectMap*,FLOAT,FLOAT);
	public: INT IsTypeMatch(INT,FObjectMap*,INT);
	public: UNetworkHandler();
	public: UNetworkHandler(UNetworkHandler const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetDistance(FObjectMap*,FObjectMap*);
	public: virtual FObjectMap* GetNearestObject(INT,FLOAT,INT);
	public: virtual FObjectMap* GetNextObject(INT,FLOAT,INT);
	public: virtual FObjectMap* GetPetNearestObject(INT,FLOAT,INT);
	public: virtual INT AddNetworkQueue(struct NetworkPacket*);
	public: virtual INT DispatchNetworkQueue(struct NetworkPacket**);
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual INT GetServerID();
	public: virtual INT GetUserOneTimePassword();
	public: virtual INT IsGNOMatch(INT,FObjectMap*);
	public: virtual INT IsPawnCreatePacket(struct NetworkPacket,INT&);
	public: virtual INT NCGuardSendDataToServer(INT,void*);
	public: virtual INT RL();
	public: virtual INT RequestAddTradeItem(struct ItemInfo);
	public: virtual INT RequestAllyCrest(INT);
	public: virtual INT RequestAllyInfo();
	public: virtual INT RequestAnswerJoinAlly(L2ParamStack&);
	public: virtual INT RequestAnswerJoinParty(L2ParamStack&);
	public: virtual INT RequestAnswerJoinPledge(L2ParamStack&);
	public: virtual INT RequestAuthLogin(wchar_t const*,wchar_t const*,INT);
	public: virtual INT RequestBBSWrite(L2ParamStack&);
	public: virtual INT RequestBR_AddBasketProductInfo(INT);
	public: virtual INT RequestBR_BuyProduct(INT,INT);
	public: virtual INT RequestBR_DeleteBasketProductInfo(INT);
	public: virtual INT RequestBR_EventRankerList(INT,INT,INT);
	public: virtual INT RequestBR_GamePoINT();
	public: virtual INT RequestBR_MinigameInsertScore(INT);
	public: virtual INT RequestBR_MinigameLoadScores();
	public: virtual INT RequestBR_NewIConCashBtnWnd();
	public: virtual INT RequestBR_PresentBuyProduct(INT,INT,wchar_t const*,wchar_t const*,wchar_t const*);
	public: virtual INT RequestBR_ProductInfo(INT);
	public: virtual INT RequestBR_ProductList(INT);
	public: virtual INT RequestBR_RecentProductList();
	public: virtual INT RequestBuyItem(L2ParamStack&);
	public: virtual INT RequestBuySeed(L2ParamStack&);
	public: virtual INT RequestBypassToServer(L2ParamStack&);
	public: virtual INT RequestCharacterCreate(struct CharacterInfo);
	public: virtual INT RequestCharacterDelete(INT);
	public: virtual INT RequestCharacterRestore(INT);
	public: virtual INT RequestDestroyItem(struct ItemInfo);
	public: virtual INT RequestDestroyQuest(INT);
	public: virtual INT RequestDismissAlly();
	public: virtual INT RequestDismissParty(L2ParamStack&);
	public: virtual INT RequestDropItem(struct ItemInfo,FVector);
	public: virtual INT RequestEnchantItem(INT,INT);
	public: virtual INT RequestEnterWorldPacket(INT,INT*,DWORD,DWORD,DWORD,DWORD);
	public: virtual INT RequestExEnchantItemAttribute(INT);
	public: virtual INT RequestExPledgeCrestLarge(INT);
	public: virtual INT RequestExRemoveItemAttribute(INT,INT);
	public: virtual INT RequestExSetPledgeCrestLarge(INT,unsigned char*);
	public: virtual INT RequestFriendAddReply(L2ParamStack&);
	public: virtual INT RequestFriendDel(FString const&);
	public: virtual INT RequestFriendDetailInfo(FString const&);
	public: virtual INT RequestFriendInfoList();
	public: virtual INT RequestFriendInvite(FString const&);
	public: virtual INT RequestGMCommand(wchar_t const*,INT);
	public: virtual INT RequestGMList();
	public: virtual INT RequestGameStart(INT,short,INT,INT,INT);
	public: virtual INT RequestGiveNickName(L2ParamStack&);
	public: virtual INT RequestGotoLobby();
	public: virtual INT RequestInzonePartyInfoHistory();
	public: virtual INT RequestItemList();
	public: virtual INT RequestJoinAlly(L2ParamStack&);
	public: virtual INT RequestJoinParty(L2ParamStack&);
	public: virtual INT RequestJoinPledge(L2ParamStack&);
	public: virtual INT RequestJoinPledgeByName(FString const&,INT);
	public: virtual INT RequestLinkHtml(L2ParamStack&);
	public: virtual INT RequestNewCharacter();
	public: virtual INT RequestOustAlly(L2ParamStack&);
	public: virtual INT RequestOustPartyMember(L2ParamStack&);
	public: virtual INT RequestOustPledgeMember(L2ParamStack&);
	public: virtual INT RequestPetition(wchar_t*,INT);
	public: virtual INT RequestPetitionCancel();
	public: virtual INT RequestPledgeCrest(INT);
	public: virtual INT RequestPledgeExtendedInfo(L2ParamStack&);
	public: virtual INT RequestPledgeInfo(INT);
	public: virtual INT RequestPledgeMemberList();
	public: virtual INT RequestPreviewItem(L2ParamStack&);
	public: virtual INT RequestQuestList();
	public: virtual INT RequestRefundItem(L2ParamStack&);
	public: virtual INT RequestReplyStartPledgeWar(L2ParamStack&);
	public: virtual INT RequestReplyStopPledgeWar(L2ParamStack&);
	public: virtual INT RequestReplySurrenderPledgeWar(L2ParamStack&);
	public: virtual INT RequestSCCheck(INT,INT);
	public: virtual INT RequestSellItem(L2ParamStack&);
	public: virtual INT RequestServerList();
	public: virtual INT RequestServerLogin(L2ParamStack&);
	public: virtual INT RequestSetAllyCrest(INT,char*);
	public: virtual INT RequestSetPledgeCrest(INT,char*);
	public: virtual INT RequestStartPledgeWar(L2ParamStack&);
	public: virtual INT RequestStopPledgeWar(L2ParamStack&);
	public: virtual INT RequestSurrenderPersonally(L2ParamStack&);
	public: virtual INT RequestSurrenderPledgeWar(L2ParamStack&);
	public: virtual INT RequestTrade(INT);
	public: virtual INT RequestTradeDone(INT);
	public: virtual INT RequestTutorialClientEvent(INT);
	public: virtual INT RequestTutorialLinkHtml(L2ParamStack&);
	public: virtual INT RequestTutorialPassCmdToServer(L2ParamStack&);
	public: virtual INT RequestTutorialQuestionMarkPressed(INT);
	public: virtual INT RequestUpdateBlockMemo(FString const&,FString const&);
	public: virtual INT RequestUpdateFriendMemo(FString const&,FString const&);
	public: virtual INT RequestUseItem(L2ParamStack&);
	public: virtual INT RequestWithDrawalParty(L2ParamStack&);
	public: virtual INT RequestWithDrawalPledge();
	public: virtual INT RequestWithdrawAlly();
	public: virtual INT RequstBR_LectureMark(INT,bool);
	public: virtual INT ResponseAuthGameGuard();
	public: virtual bool IsNotYetLogin();
	public: virtual struct FServerStaticObject* GetStaticObject(INT);
	public: virtual struct FShuttle* GetShuttle(INT);
	public: virtual struct FVehicle* GetVehicle(INT);
	public: virtual struct Item* GetItem(INT);
	public: virtual struct Item* GetNearestItem(FLOAT,INT);
	public: virtual struct Item* GetNextItem(FLOAT,INT);
	public: virtual struct Item* GetPetNearestItem(FLOAT,INT);
	public: virtual struct User* GetNearestCreature(FLOAT,INT);
	public: virtual struct User* GetNearestEnemy(FLOAT,INT);
	public: virtual struct User* GetNearestFriend(FLOAT,INT);
	public: virtual struct User* GetNearestNPC(FLOAT,INT);
	public: virtual struct User* GetNearestParty(FLOAT,INT);
	public: virtual struct User* GetNearestUser(wchar_t*);
	public: virtual struct User* GetNextCreature(FLOAT,INT);
	public: virtual struct User* GetNextEnemy(FLOAT,INT);
	public: virtual struct User* GetNextFriend(FLOAT,INT);
	public: virtual struct User* GetNextNPC(FLOAT,INT);
	public: virtual struct User* GetNextParty(FLOAT,INT);
	public: virtual struct User* GetNextPartyUsingJoyPad(FLOAT,INT);
	public: virtual struct User* GetSearchNearestUser(wchar_t*);
	public: virtual struct User* GetSearchUser(wchar_t*);
	public: virtual struct User* GetUser(INT);
	public: virtual struct User* GetUser(wchar_t*);
	public: virtual struct User* GetUserByNpcID(INT);
	public: virtual void Action(INT,FVector,INT);
	public: virtual void AddServerPingList(INT,INT,INT);
	public: virtual void AnswerCoupleAction(L2ParamStack&);
	public: virtual void AnswerJoinPartyRoom(L2ParamStack&);
	public: virtual void AnswerTradeRequest(L2ParamStack&);
	public: virtual void Atk(INT,FVector const&,INT);
	public: virtual void AuthReconnect();
	public: virtual void BypassUserCmd(L2ParamStack&);
	public: virtual void CanNotMoveAnymore(AActor*,FVector,INT,INT);
	public: virtual void ChangeMoveType(INT);
	public: virtual void ChangePetName(wchar_t const*,wchar_t const*);
	public: virtual void ChangeWaitType(INT);
	public: virtual void CheckInvalidated(APawn*);
	public: virtual void Check_SpeedHack(DWORD);
	public: virtual void ClearObjectMap(struct User*);
	public: virtual void ConfirmDlg(L2ParamStack&);
	public: virtual void ConfirmMenteeAdd(FString const&,INT);
	public: virtual void ContinueServerClose();
	public: virtual void Destroy();
	public: virtual void EndScenePlayer(INT);
	public: virtual void EndServerPingList();
	public: virtual void FinishRotating(INT);
	public: virtual void GMSnoopEnd(INT);
	public: virtual void GNOManager(FLOAT);
	public: virtual void GetOffShuttle(INT,FVector);
	public: virtual void GetOffVehicle(INT,FVector);
	public: virtual void GetOnShuttle(INT,FVector);
	public: virtual void GetOnVehicle(INT,FVector);
	public: virtual void Init(INT,UGameEngine*);
	public: virtual void MTL(AActor*,FVector,FVector,AActor*,INT,INT,INT);
	public: virtual void MoveBackwardToLocation(FVector,FVector);
	public: virtual void MoveToPawn(INT);
	public: virtual void MoveWithDelta(FVector);
	public: virtual void NetPing(INT);
	public: virtual void NewVoteSociality(INT);
	public: virtual void NotifyStartMiniGame();
	public: virtual void PetitionVote(L2ParamStack&);
	public: virtual void RefreshWSAAsyncSelect();
	public: virtual void ReplyGameGuardQuery(DWORD,DWORD,DWORD,DWORD,enum GAMEGUARD_CHECK_TYPE);
	public: virtual void ReplyStartAllianceWar(L2ParamStack&);
	public: virtual void ReplyStopAllianceWar(L2ParamStack&);
	public: virtual void Request24HzSessionID();
	public: virtual void RequestAcceptWaitingSubstitute(INT,INT,INT);
	public: virtual void RequestAcquireSkill(L2ParamStack&);
	public: virtual void RequestAcquireSkillInfo(L2ParamStack&);
	public: virtual void RequestActionUse(L2ParamStack&);
	public: virtual void RequestAddExpandQuestAlarm(INT);
	public: virtual void RequestAllAgitInfo();
	public: virtual void RequestAllCastleInfo();
	public: virtual void RequestAllFortressInfo();
	public: virtual void RequestAskJoinPartyRoom(L2ParamStack&);
	public: virtual void RequestAskMemberShip();
	public: virtual void RequestAttack(INT,FVector);
	public: virtual void RequestAutoSoulShot(L2ParamStack&);
	public: virtual void RequestBidItemAuction(INT,__INT64);
	public: virtual void RequestBlock(L2ParamStack&);
	public: virtual void RequestBookMarkSlotInfo();
	public: virtual void RequestBuySellUIClose();
	public: virtual void RequestCallToChangeClass(INT);
	public: virtual void RequestCancelCuriousHouse();
	public: virtual void RequestCancelSentPost(INT);
	public: virtual void RequestCastleSiegeAttackerList(L2ParamStack&);
	public: virtual void RequestCastleSiegeDefenderList(L2ParamStack&);
	public: virtual void RequestCastleSiegeInfo(L2ParamStack&);
	public: virtual void RequestChangeAttributeCancel();
	public: virtual void RequestChangeAttributeItem(INT,INT,INT);
	public: virtual void RequestChangeBookMarkSlot(INT,INT);
	public: virtual void RequestChangeNicknameColor(INT,wchar_t*,INT);
	public: virtual void RequestChangePetName(wchar_t*);
	public: virtual void RequestChangeToAwakenedClass(INT);
	public: virtual void RequestCharacterNameCreatable(wchar_t const*);
	public: virtual void RequestCommissionBuyInfo(__INT64,enum Commission::Enum);
	public: virtual void RequestCommissionBuyItem(__INT64,enum Commission::Enum);
	public: virtual void RequestCommissionCancel();
	public: virtual void RequestCommissionDelete(__INT64,enum Commission::Enum,enum CommissionExpired::Enum);
	public: virtual void RequestCommissionInfo(INT);
	public: virtual void RequestCommissionList(INT,INT,INT,enum CrystalType,FString const&);
	public: virtual void RequestCommissionRegister(INT,FString const&,__INT64,__INT64,enum CommissionExpired::Enum,enum CommissionDiscountInfo::Enum,enum CommissionItemClassId::Enum);
	public: virtual void RequestCommissionRegisteredItem();
	public: virtual void RequestCommissionRegistrableItemList();
	public: virtual void RequestConfirmCancelItem(INT);
	public: virtual void RequestConfirmCastleSiegeWaitingList(L2ParamStack&);
	public: virtual void RequestConfirmGemStone(INT,INT,INT,__INT64);
	public: virtual void RequestConfirmRefinerItem(INT,INT);
	public: virtual void RequestConfirmTargetItem(INT);
	public: virtual void RequestCrystallizeEstimate(INT,__INT64);
	public: virtual void RequestCrystallizeItem(INT,__INT64);
	public: virtual void RequestCrystallizeItemCancel();
	public: virtual void RequestCuriousHouseHtml();
	public: virtual void RequestCuriousHouseRecord();
	public: virtual void RequestCursedWeaponList();
	public: virtual void RequestCursedWeaponLocation();
	public: virtual void RequestDeleteBookMarkSlot(INT);
	public: virtual void RequestDeleteMacro(L2ParamStack&);
	public: virtual void RequestDeletePartySubstitute(INT);
	public: virtual void RequestDeleteReceivedPost(L2ParamStack&);
	public: virtual void RequestDeleteSentPost(L2ParamStack&);
	public: virtual void RequestDismissMpccRoom();
	public: virtual void RequestDismissPartyRoom(L2ParamStack&);
	public: virtual void RequestDispel(INT,INT,INT);
	public: virtual void RequestDominionInfo();
	public: virtual void RequestDropItemFromPet(struct ItemInfo,FVector);
	public: virtual void RequestDuelAnswerStart(L2ParamStack&);
	public: virtual void RequestDuelStart(L2ParamStack&);
	public: virtual void RequestDuelSurrender(L2ParamStack&);
	public: virtual void RequestDynamicQuestHTML(INT,INT);
	public: virtual void RequestDynamicQuestProgressInfo(INT,INT);
	public: virtual void RequestDynamicQuestScoreBoard(INT,INT);
	public: virtual void RequestEventCampaignProgressInfo(INT,INT,INT);
	public: virtual void RequestEventCampaignQuestHTML(INT,INT,INT);
	public: virtual void RequestEventCampaignScoreBoard(INT,INT,INT);
	public: virtual void RequestEventKalieToken();
	public: virtual void RequestEventMatchObserverEnd(INT);
	public: virtual void RequestEx2ndPasswordCheck();
	public: virtual void RequestEx2ndPasswordReq(INT,wchar_t const*,wchar_t const*);
	public: virtual void RequestEx2ndPasswordVerify(wchar_t const*);
	public: virtual void RequestExAcceptJoinMPCC(L2ParamStack&);
	public: virtual void RequestExAddPostFriendForPostBox(wchar_t const*);
	public: virtual void RequestExAgitDetailInfo(enum AGIT_TYPE,INT);
	public: virtual void RequestExAgitInitialize();
	public: virtual void RequestExAgitListForBid(INT);
	public: virtual void RequestExAgitListForLot();
	public: virtual void RequestExApplyForAgitLotStep1(enum LotteryAgitType);
	public: virtual void RequestExApplyForAgitLotStep2(enum LotteryAgitType);
	public: virtual void RequestExApplyForBidStep1(INT);
	public: virtual void RequestExApplyForBidStep2(INT,__INT64);
	public: virtual void RequestExApplyForBidStep3(INT,__INT64);
	public: virtual void RequestExAskJoinMPCC(L2ParamStack&);
	public: virtual void RequestExBlockGameEnter(INT,INT);
	public: virtual void RequestExBlockGameVote(INT,INT);
	public: virtual void RequestExCancelEnchantItem();
	public: virtual void RequestExCancelShape_Shifting_Item();
	public: virtual void RequestExChangeName(L2ParamStack&);
	public: virtual void RequestExCleftEnter(INT);
	public: virtual void RequestExConfirmCancelAgitBid(INT);
	public: virtual void RequestExConfirmCancelAgitLot(enum LotteryAgitType);
	public: virtual void RequestExConfirmCancelRegisteringAgit();
	public: virtual void RequestExDeletePostFriendForPostBox(wchar_t const*);
	public: virtual void RequestExEnchantSkill(L2ParamStack&);
	public: virtual void RequestExEnchantSkillInfo(L2ParamStack&);
	public: virtual void RequestExEnchantSkillInfoDetail(L2ParamStack&);
	public: virtual void RequestExEnchantSkillRouteChange(L2ParamStack&);
	public: virtual void RequestExEnchantSkillSafe(L2ParamStack&);
	public: virtual void RequestExEnchantSkillUntrain(L2ParamStack&);
	public: virtual void RequestExEscapeScene();
	public: virtual void RequestExEvent_Campaign_Info(enum EventCampaignType::JobType,INT,INT);
	public: virtual void RequestExFishRanking();
	public: virtual void RequestExMPCCShowPartyMembersInfo(L2ParamStack&);
	public: virtual void RequestExMagicSkillUseGround(L2ParamStack&);
	public: virtual void RequestExMyAgitState();
	public: virtual void RequestExOustFromMPCC(L2ParamStack&);
	public: virtual void RequestExProceedCancelAgitBid(INT);
	public: virtual void RequestExProceedCancelAgitLot(enum LotteryAgitType);
	public: virtual void RequestExProceedCancelRegisteringAgit();
	public: virtual void RequestExReBid(INT);
	public: virtual void RequestExRegisterAgitForBidStep1();
	public: virtual void RequestExRegisterAgitForBidStep2(INT,__INT64,INT);
	public: virtual void RequestExRegisterAgitForBidStep3(INT,__INT64,INT);
	public: virtual void RequestExRqItemLink(L2ParamStack&);
	public: virtual void RequestExSetTutorial(L2ParamStack&);
	public: virtual void RequestExShowPostFriendListForPostBox();
	public: virtual void RequestExTryToPutEnchantSupportItem(INT,INT);
	public: virtual void RequestExTryToPutEnchantTargetItem(INT);
	public: virtual void RequestExTryToPut_Shape_Shifting_EnchantSupportItem(INT,INT);
	public: virtual void RequestExTryToPut_Shape_Shifting_TargetItem(INT);
	public: virtual void RequestExchangeSubstitute(INT,INT,INT);
	public: virtual void RequestExitPartyMatchingWaitingRoom(L2ParamStack&);
	public: virtual void RequestFirstPlayStart();
	public: virtual void RequestFlyMove(INT);
	public: virtual void RequestFlyMoveStart();
	public: virtual void RequestFortressMapInfo(INT);
	public: virtual void RequestFortressSiegeInfo();
	public: virtual void RequestGetBossRecord(L2ParamStack&);
	public: virtual void RequestGetItemFromPet(L2ParamStack&);
	public: virtual void RequestGiveItemToPet(L2ParamStack&);
	public: virtual void RequestGoodsInventoryInfo(bool);
	public: virtual void RequestHandOverPartyMaster(L2ParamStack&);
	public: virtual void RequestHardWareInfo();
	public: virtual void RequestHennaEquip(INT);
	public: virtual void RequestHennaItemInfo(INT);
	public: virtual void RequestHennaItemList();
	public: virtual void RequestHennaUnequip(INT);
	public: virtual void RequestHennaUnequipInfo(INT);
	public: virtual void RequestHennaUnequipList();
	public: virtual void RequestHotLinkStatistics(INT);
	public: virtual void RequestInfoItemAuction(INT);
	public: virtual void RequestInzoneWaitingTime();
	public: virtual void RequestJoinCastleSiege(L2ParamStack&);
	public: virtual void RequestJoinCuriousHouse();
	public: virtual void RequestJoinDominionWar(INT,INT,INT,INT);
	public: virtual void RequestJoinMpccRoom(INT,INT);
	public: virtual void RequestJoinPartyRoom(L2ParamStack&);
	public: virtual void RequestJump();
	public: virtual void RequestKeyMapping();
	public: virtual void RequestLeaveCuriousHouse();
	public: virtual void RequestLeaveObservingCuriousHouse();
	public: virtual void RequestListMpccWaiting(INT,INT,INT);
	public: virtual void RequestListPartyMatchingWaitingRoom(L2ParamStack&);
	public: virtual void RequestListPartyWating(L2ParamStack&);
	public: virtual void RequestMagicSkillList(L2ParamStack&);
	public: virtual void RequestMagicSkillUse(L2ParamStack&);
	public: virtual void RequestMakeMacro(L2ParamStack&);
	public: virtual void RequestManageMpccRoom(INT,INT,INT,INT,INT,FString const&);
	public: virtual void RequestManagePartyRoom(L2ParamStack&);
	public: virtual void RequestManorList();
	public: virtual void RequestMenteeAdd(FString const&);
	public: virtual void RequestMenteeWaitingList(INT,INT,INT);
	public: virtual void RequestMentorCancel(INT,FString const&);
	public: virtual void RequestMentorList();
	public: virtual void RequestModifyBookMarkSlot(INT,wchar_t const*,INT,wchar_t const*);
	public: virtual void RequestMoveToMerchant(L2ParamStack&);
	public: virtual void RequestMpccPartymasterList();
	public: virtual void RequestMultiSellChoose(L2ParamStack&);
	public: virtual void RequestObserverEndPacket(L2ParamStack&);
	public: virtual void RequestObservingCuriousHouse(INT);
	public: virtual void RequestObservingListCuriousHouse();
	public: virtual void RequestOlympiadMatchList();
	public: virtual void RequestOlympiadObserverEnd();
	public: virtual void RequestOpenMinimap(L2ParamStack&);
	public: virtual void RequestOustFromMpccRoom(INT);
	public: virtual void RequestOustFromPartyRoom(L2ParamStack&);
	public: virtual void RequestPCCafeCouponUse(FString);
	public: virtual void RequestPVPMatchRecord();
	public: virtual void RequestPackageSend(L2ParamStack&);
	public: virtual void RequestPackageSendableItemList(L2ParamStack&);
	public: virtual void RequestPartyLootingModify(INT);
	public: virtual void RequestPartyLootingModifyAgreement(INT);
	public: virtual void RequestPetGetItem(INT);
	public: virtual void RequestPetUseItem(INT);
	public: virtual void RequestPledgeMemberInfo(INT,wchar_t const*);
	public: virtual void RequestPledgeMemberPowerInfo(INT,wchar_t const*);
	public: virtual void RequestPledgePower(INT,INT,unsigned char*);
	public: virtual void RequestPledgePowerGradeList();
	public: virtual void RequestPledgeReorganizeMember(L2ParamStack&);
	public: virtual void RequestPledgeSetAcademyMasterPupil(INT,wchar_t const*,wchar_t const*);
	public: virtual void RequestPledgeSetMemberPowerGrade(wchar_t const*,INT);
	public: virtual void RequestPledgeWarList(INT,INT);
	public: virtual void RequestPostItemList();
	public: virtual void RequestPrivateStoreBuyManageCancel();
	public: virtual void RequestPrivateStoreBuyQuit();
	public: virtual void RequestPrivateStoreManageCancel();
	public: virtual void RequestPrivateStoreQuit();
	public: virtual void RequestProcureCropList(L2ParamStack*);
	public: virtual void RequestReceivePost(INT);
	public: virtual void RequestRecipeBookOpen(L2ParamStack&);
	public: virtual void RequestRecipeItemDelete(INT);
	public: virtual void RequestRecipeItemMakeInfo(INT);
	public: virtual void RequestRecipeItemMakeSelf(INT);
	public: virtual void RequestRecipeShopListSet(L2ParamStack&);
	public: virtual void RequestRecipeShopMakeDo(INT,INT,__INT64);
	public: virtual void RequestRecipeShopMakeInfo(INT,INT);
	public: virtual void RequestRecipeShopManageCancel();
	public: virtual void RequestRecipeShopManageQuit();
	public: virtual void RequestRecipeShopMessageSet(wchar_t*);
	public: virtual void RequestRecipeShopSellList(INT);
	public: virtual void RequestRefine(INT,INT,INT,__INT64);
	public: virtual void RequestRefineCancel(INT);
	public: virtual void RequestRefreshPrivateMarketInfo();
	public: virtual void RequestRegistPartySubstitute(INT);
	public: virtual void RequestRegistWaitingSubstitute(INT);
	public: virtual void RequestRejectPost(INT);
	public: virtual void RequestReload();
	public: virtual void RequestRemainTime();
	public: virtual void RequestRequestReceivedPost(INT);
	public: virtual void RequestRequestReceivedPostList();
	public: virtual void RequestRequestSentPost(INT);
	public: virtual void RequestRequestSentPostList();
	public: virtual void RequestResetNickname();
	public: virtual void RequestRestart(L2ParamStack&);
	public: virtual void RequestRestartPoINT(L2ParamStack&);
	public: virtual void RequestSEKCustom(L2ParamStack&);
	public: virtual void RequestSSQStatus(INT);
	public: virtual void RequestSaveBookMarkSlot(wchar_t const*,INT,wchar_t const*);
	public: virtual void RequestSaveInventoryOrder(L2ParamStack&);
	public: virtual void RequestSaveKeyMapping(unsigned char const*,INT);
	public: virtual void RequestSeedPhase();
	public: virtual void RequestSendL2FriendSay(wchar_t*,wchar_t*);
	public: virtual void RequestSendMsnChatLog(wchar_t*,wchar_t*,INT);
	public: virtual void RequestSendPost(L2ParamStack&);
	public: virtual void RequestSetCastleSiegeTime(L2ParamStack&);
	public: virtual void RequestSetCrop(L2ParamStack*);
	public: virtual void RequestSetSeed(L2ParamStack*);
	public: virtual void RequestShape_Shifting_Item(INT);
	public: virtual void RequestShortCutDel(L2ParamStack&);
	public: virtual void RequestShortCutReg(L2ParamStack&);
	public: virtual void RequestShowNewUserPetition();
	public: virtual void RequestShowPledgeUnionInfo();
	public: virtual void RequestShowStepThree(INT);
	public: virtual void RequestShowStepTwo(INT);
	public: virtual void RequestShowboard(L2ParamStack&);
	public: virtual void RequestSkillCoolTime();
	public: virtual void RequestSkillItem(L2ParamStack&);
	public: virtual void RequestStartAllianceWar(L2ParamStack&);
	public: virtual void RequestStartShowCrataeCubeRank();
	public: virtual void RequestStopAllianceWar(L2ParamStack&);
	public: virtual void RequestStopShowCrataeCubeRank();
	public: virtual void RequestSurrenderAllianceWar(L2ParamStack&);
	public: virtual void RequestSurrenderPledgeWarEX(FString&);
	public: virtual void RequestTargetCancel(L2ParamStack&);
	public: virtual void RequestTeleportBookMark(INT);
	public: virtual void RequestUnEquipItem(L2ParamStack&);
	public: virtual void RequestUnionAdjust();
	public: virtual void RequestUnionChange(INT);
	public: virtual void RequestUnionJoin(INT);
	public: virtual void RequestUnionRequest(INT);
	public: virtual void RequestUnionStart(INT);
	public: virtual void RequestUnionSummon(INT);
	public: virtual void RequestUnionWithdraw();
	public: virtual void RequestUseGoodsInventoryItem(enum GoodsType,__INT64,__INT64);
	public: virtual void RequestUserStatistics();
	public: virtual void RequestWithDrawPremiumItem(INT,__INT64);
	public: virtual void RequestWithdrawMpccRoom();
	public: virtual void RequestWithdrawPartyRoom(L2ParamStack&);
	public: virtual void RequestWorldStatistics(INT);
	public: virtual void RequestWriteHeroWords(FString);
	public: virtual void Ride(INT,INT);
	public: virtual void SAP();
	public: virtual void Say2(L2ParamStack&);
	public: virtual void SendBypassBuildCmd(L2ParamStack&);
	public: virtual void SendChangeAttributeTargetItem(INT,INT);
	public: virtual void SendDestroyItem(INT,__INT64);
	public: virtual void SendLogOutPacket();
	public: virtual void SendPrivateStoreBuyBuyList(L2ParamStack&);
	public: virtual void SendPrivateStoreBuyList(L2ParamStack&);
	public: virtual void SendWareHouseDepositList(L2ParamStack&);
	public: virtual void SendWareHouseWithdrawList(L2ParamStack&);
	public: virtual void ServerExPacketCountStart();
	public: virtual void ServerExPacketCountStop();
	public: virtual void ServerPacketCountStart();
	public: virtual void ServerPacketCountStop();
	public: virtual void SetMatchedStore(wchar_t const*);
	public: virtual void SetPawnResourceAllUserInForce();
	public: virtual void SetPrivateStoreBuyList(L2ParamStack&);
	public: virtual void SetPrivateStoreBuyMsg(wchar_t*);
	public: virtual void SetPrivateStoreList(L2ParamStack&);
	public: virtual void SetPrivateStoreMsg(wchar_t*);
	public: virtual void SetPrivateStoreWholeMsg(wchar_t*);
	public: virtual void SocialAction(INT);
	public: virtual void StartRotating(INT,INT);
	public: virtual void Tick(FLOAT);
	public: virtual void UpdateLargePledgeCrest(INT,INT,INT);
	public: virtual void ValidatePosition(FVector,INT,INT);
	public: virtual void VoteSociality(INT);
	public: virtual wchar_t* GetUserAccount();
	public: virtual wchar_t* GetUserPassword();
	public: virtual ~UNetworkHandler();
	public: void UpdateAllQuestMarks();
UOpacityModifier
	protected: UOpacityModifier();
	public: UOpacityModifier(UOpacityModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UOpacityModifier();
UPalette
	public: UPalette();
	public: UPalette(UPalette const&);
	public: UPalette* ReplaceWithExisting();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char BestMatch(FColor,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UPalette();
	public: void FixPalette();
UParticleEmitter
	public: INT GetMaxParticlesLOD()const;
	public: UParticleEmitter();
	public: UParticleEmitter(UParticleEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT SpawnParticles(FLOAT,FLOAT,FLOAT);
	public: virtual INT IsUpdateSkippableParticle();
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Destroy();
	public: virtual void HandleActorForce(AActor*,FLOAT);
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Reset();
	public: virtual void Scale(FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual void UpdateExtra();
	public: virtual void UpdateParticle(FLOAT,INT);
	public: virtual ~UParticleEmitter();
	public: void execSpawnParticle(struct FFrame&,void* const);
	public: void execTrigger(struct FFrame&,void* const);
UParticleMaterial
	protected: UParticleMaterial();
	public: UParticleMaterial(UParticleMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UParticleMaterial();
UPawnAliasMgr
	protected: UPawnAliasMgr();
	public: UPawnAliasMgr(UPawnAliasMgr const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UPawnAliasMgr();
UPawnSheathingMgr
	protected: UPawnSheathingMgr();
	public: UPawnSheathingMgr(UPawnSheathingMgr const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UPawnSheathingMgr();
UPlayer
	public: UPlayer();
	public: UPlayer(UPlayer const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual void Destroy();
	public: virtual void Serialize(FArchive&);
	public: virtual ~UPlayer();
UPlayerInput
	protected: UPlayerInput();
	public: UPlayerInput(UPlayerInput const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UPlayerInput();
	public: void eventPlayerInput(FLOAT);
UPolys
	public: UPolys();
	public: UPolys(UPolys const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UPolys();
	wchar_t const* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
UPostEffEnvManager
	private: UPostEffEnvManager();
	private: virtual ~UPostEffEnvManager();
	public: INT IsEnableRemoveHSV();
	public: INT IsEnableRemoveRGB();
	public: INT IsEnableRemoveYCbCr();
	public: UHDRRenderOption const& GetHDRRenderOption()const;
	public: UPostEffEnvManager(UPostEffEnvManager const&);
	public: unsigned char GetMotionBlurAlpha();
	public: void SetHDRRenderVal(FLOAT,FLOAT,FLOAT,FLOAT);
	public: void SetHSVIntensity(FLOAT);
	public: void SetHSVVal(FLOAT,INT,INT,FVector,FVector,FLOAT);
	public: void SetMotionBlurAlpha(unsigned char,FLOAT);
	public: void SetRGBIntensity(FLOAT);
	public: void SetRGBVal(INT,INT,FVector,FVector,FLOAT);
	public: void SetYCbCrIntensity(FLOAT);
	public: void SetYCbCrVal(FLOAT,INT,INT,FVector,FVector,FLOAT);
	public: void Tick(FLOAT);
UPrimitive
	public: UPrimitive();
	public: UPrimitive(UPrimitive const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetCollisionBoundingBox(AActor const*)const;
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual FVector GetEncroachCenter(AActor*);
	public: virtual FVector GetEncroachExtent(AActor*);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,FVector const&,DWORD,DWORD);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,DWORD);
	public: virtual INT UseCylinderCollision(AActor const*);
	public: virtual void Illuminate(AActor*,INT,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UPrimitive();
UProjectorMaterial
	protected: UProjectorMaterial();
	public: UProjectorMaterial(UProjectorMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UProjectorMaterial();
UProxyBitmapMaterial
	public: UProxyBitmapMaterial();
	public: UProxyBitmapMaterial(UProxyBitmapMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual ~UProxyBitmapMaterial();
	public: void SetTextureInterface(FBaseTexture*);
UReachSpec
	public: FPlane PathColor();
	public: INT BotOnlyPath();
	public: INT PlaceScout(AScout*);
	public: INT defineFor(ANavigationPoINT*,ANavigationPoINT*,APawn*);
	public: INT findBestReachable(AScout*);
	public: INT supports(INT,INT,INT,INT);
	public: UReachSpec();
	public: UReachSpec(UReachSpec const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UReachSpec();
	public: void Init();
URealtimeGenerationTexture
	protected: URealtimeGenerationTexture();
	public: URealtimeGenerationTexture(URealtimeGenerationTexture const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~URealtimeGenerationTexture();
URenderDevice
	public: URenderDevice();
	public: URenderDevice(URenderDevice const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT GetBackBufferHeight()const;
	public: virtual INT GetBackBufferWidth()const;
	public: virtual INT GetMultiSample();
	public: virtual INT GetResParams(INT&,INT&,INT&,INT&,INT&);
	public: virtual INT LostDevice();
	public: virtual INT ResourceCached(unsigned __INT64);
	public: virtual INT SetRes(UViewport*,INT,INT,INT,INT,INT,INT);
	public: virtual INT SupportsTextureFormat(enum ETextureFormat);
	public: virtual INT ToggleL2VideoCapture();
	public: virtual void ClearCompiledShaders();
	public: virtual void GetShaderVersion(INT&,INT&);
	public: virtual void SetBeastLightMapIntensity(FColor,FColor);
	public: virtual void SetBeastLightMapIntensity(FLOAT,FLOAT);
	public: virtual void SetDialogBoxMode(INT);
	public: virtual ~URenderDevice();
	public: void StaticConstructor();
URenderedMaterial
	public: URenderedMaterial();
	public: URenderedMaterial(URenderedMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual ~URenderedMaterial();
URibbonEmitter
	public: URibbonEmitter();
	public: URibbonEmitter(URibbonEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetGlobalScale(FLOAT);
	public: virtual FLOAT GetPoINTScale(FLOAT,INT);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Destroy();
	public: virtual void GetNewRibbonPoINT(FVector*,FVector*,FLOAT*);
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Scale(FLOAT);
	public: virtual ~URibbonEmitter();
USSAOEffect
	private: USSAOEffect();
	private: virtual ~USSAOEffect();
	public: USSAOEffect(USSAOEffect const&);
	public: void Render(FLevelSceneNode*,FRenderInterface*);
UScriptedTexture
	public: UScriptedTexture();
	public: UScriptedTexture(UScriptedTexture const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual void Destroy();
	public: virtual void PostEditChange();
	public: virtual ~UScriptedTexture();
	public: void execDrawPortal(struct FFrame&,void* const);
	public: void execDrawText(struct FFrame&,void* const);
	public: void execDrawTile(struct FFrame&,void* const);
	public: void execSetSize(struct FFrame&,void* const);
	public: void execTextSize(struct FFrame&,void* const);
UShader
	public: UShader();
	public: UShader(UShader const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetSortingLevel();
	public: virtual INT HasFallback();
	public: virtual INT IsLoaded();
	public: virtual INT IsTransparent();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual INT RequiresNormal();
	public: virtual INT RequiresSorting();
	public: virtual INT UseBumpOffset();
	public: virtual UMaterial* CheckFallback();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual ~UShader();
UShadowBitmapMaterial
	public: UShadowBitmapMaterial();
	public: UShadowBitmapMaterial(UShadowBitmapMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual void Destroy();
	public: virtual ~UShadowBitmapMaterial();
	public: void execDestroy(struct FFrame&,void* const);
USimulationCollision
	public: USimulationCollision();
	public: USimulationCollision(USimulationCollision const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void ConstraINT(FVector&);
	public: virtual void Draw(USkeletalMeshInstance*,FLineBatcher&);
	public: virtual void PrepareConstraINT(USkeletalMeshInstance*);
	public: virtual ~USimulationCollision();
USimulationCylinderCollision
	public: USimulationCylinderCollision();
	public: USimulationCylinderCollision(USimulationCylinderCollision const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void ConstraINT(FVector&);
	public: virtual void Draw(USkeletalMeshInstance*,FLineBatcher&);
	public: virtual void PrepareConstraINT(USkeletalMeshInstance*);
	public: virtual ~USimulationCylinderCollision();
USimulationData
	protected: USimulationData();
	public: USimulationData(USimulationData const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~USimulationData();
USimulationMesh
	public: INT FindMeshOffset(FName,FVector&);
	public: USimulationMesh();
	public: USimulationMesh(USimulationMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual UClass* GetMeshInstanceClass();
	public: virtual void Serialize(FArchive&);
	public: virtual ~USimulationMesh();
	public: void GenerateLodModel(INT,FLOAT,FLOAT,INT,INT);
	public: void GenerateSecondLOD(INT);
	public: void ReconstructRawMesh();
	public: void ResortSimulationDatas(FStaticLODModel*,USimulationData*);
	public: void SetDefaultAnchor(FStaticLODModel*,USimulationData*);
	public: void SetNeighbourData(FStaticLODModel*,USimulationData*);
	public: void SetResponsiveness(FStaticLODModel*,USimulationData*);
	public: void SetSpringConstraINTData(FStaticLODModel*,USimulationData*);
USimulationMeshInstance
	public: FVector SatisfyCollisionConstraINT(FVector&);
	public: UMaterial* GetMaterial(INT,struct FSkelMeshSection&,INT);
	public: USimulationMeshInstance();
	public: USimulationMeshInstance(USimulationMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ActiveVertStreamSize();
	public: virtual INT UpdateAnimation(FLOAT);
	public: virtual void Destroy();
	public: virtual void MeshSkinVertsCallback(void*);
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&,INT,INT,INT,INT);
	public: virtual void RenderPreProcess(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&,INT&,INT,INT&);
	public: virtual void Serialize(FArchive&);
	public: virtual ~USimulationMeshInstance();
	public: void ApplyAnchor();
	public: void ApplyConstraINTs();
	public: void ApplyForces(FLOAT,FLOAT,FLOAT);
	public: void ComputeNormals();
	public: void DistanceConstraINT(FVector&,FVector const&,FLOAT,FLOAT);
	public: void GetFrame(FLevelSceneNode*);
	public: void InitSimulationMeshInstance();
	public: void Interpolate(FLOAT);
	public: void SatisfySpringConstraINT(FVector&,INT,INT,FLOAT,FLOAT);
	public: void SwapPositionIndex();
USimulationNotify
	protected: USimulationNotify();
	public: USimulationNotify(USimulationNotify const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~USimulationNotify();
USimulationSphereCollision
	public: USimulationSphereCollision();
	public: USimulationSphereCollision(USimulationSphereCollision const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void ConstraINT(FVector&);
	public: virtual void Draw(USkeletalMeshInstance*,FLineBatcher&);
	public: virtual void PrepareConstraINT(USkeletalMeshInstance*);
	public: virtual ~USimulationSphereCollision();
USimulationSpringConstraint
	protected: USimulationSpringConstraINT();
	public: USimulationSpringConstraINT(USimulationSpringConstraINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~USimulationSpringConstraINT();
USkeletalMesh
	public: INT ConformSkeletonTo(USkeletalMesh*);
	public: INT LODFootprINT(INT,INT);
	public: INT MatchRefBone(FName);
	public: INT RenderPreProcess();
	public: INT SetAttachAlias(FName,FName,FCoords&);
	public: INT SetAttachmentLocation(AActor*,AActor*);
	public: INT SetBoundaryNormalVertex(USkeletalMesh*,INT);
	public: USkeletalMesh();
	public: USkeletalMesh(USkeletalMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual INT MemFootprINT(INT);
	public: virtual UClass* GetMeshInstanceClass();
	public: virtual void Destroy();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~USkeletalMesh();
	public: void ConvertRigidOnly();
	public: void ExtractRigidParts(INT,INT,INT,INT);
	public: void FlipFaces();
	public: void GenerateLodModel(INT,FLOAT,FLOAT,INT,INT);
	public: void GenerateLodModel(INT,FLOAT,FLOAT,INT,USkeletalMesh*,INT);
	public: void InsertLodModel(INT,USkeletalMesh*,FLOAT,INT);
	public: void MakeVertexBuffer();
	public: void NormalizeInfluences(INT);
	public: void RecalcSkinningStream();
	public: void ReconstructRawMesh();
USkeletalMeshInstance
	public: FCoords GetAliasesTagCoords(FName);
	public: FCoords GetBoneCoords(DWORD);
	public: FCoords GetTagCoords(FName);
	public: FLOAT AnimGetAttackShotNotifyTime(FName,INT);
	public: FLOAT AnimGetAttackShotNotifyTimeRev(FName,FName&);
	public: FLOAT GetAnimFrame(INT);
	public: FLOAT GetAnimRateOnChannel(INT);
	public: FLOAT GetBlendAlpha(INT);
	public: FMatrix MeshToWorldOrigin(FLOAT);
	public: FName GetAliasesTagBoneName(FName);
	public: FName GetAnimSequence(INT);
	public: FName GetBoneName(INT);
	public: FRotator GetBoneRotation(DWORD,INT);
	public: FRotator GetBoneRotation(FName,INT);
	public: FRotator GetRootRotation();
	public: FRotator GetRootRotationDelta();
	public: FVector GetRootLocation();
	public: FVector GetRootLocationDelta();
	public: INT CheckSameAnim(AActor*);
	public: INT ClearBoneDirection(FName);
	public: INT ClearBoneScaler(FName);
	public: INT DynamicHairGetFrame(AActor*,FLevelSceneNode*,FVector*,INT,INT&,DWORD,INT);
	public: INT EnableChannelNotify(INT,INT);
	public: INT FindLinkedBoneIndex(INT*,INT);
	public: INT FreezeAnimAtFrameRate(FLOAT,INT);
	public: INT GetAnimChannelCount();
	public: INT IsBoneScaler(INT,FLOAT&);
	public: INT LockRootMotion(INT);
	public: INT MatchRefBone(FName);
	public: INT SetAttachmentLocation(AActor*);
	public: INT SetBlendParams(INT,FLOAT,FLOAT,FLOAT,FName,INT);
	public: INT SetBoneDirection(FName,FRotator,FVector,FLOAT,INT);
	public: INT SetBoneLocation(FName,FVector,FLOAT);
	public: INT SetBoneRotation(FName,FRotator,INT,FLOAT);
	public: INT SetBoneScale(FLOAT,INT);
	public: INT SetBoneScale(INT,FLOAT,FName,INT);
	public: INT SetLODLevel(FDynamicActor*,FLevelSceneNode*,FMatrix&);
	public: INT SetSkelAnim(UMeshAnimation*,USkeletalMesh*);
	public: INT StopAnimating(INT);
	public: INT UseGPUSkinning(APawn const*,FStaticLODModel*);
	public: INT ValidateAnimChannel(INT);
	public: UMaterial* GetMaterial(INT,struct FSkelMeshSection&,INT);
	public: USkeletalMeshInstance();
	public: USkeletalMeshInstance(USkeletalMeshInstance const&);
	public: bool CheckSkinningBuffer();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FLOAT AnimGetFrameCount(void*);
	public: virtual FLOAT AnimGetNotifyTime(void*,INT);
	public: virtual FLOAT AnimGetRate(void*);
	public: virtual FLOAT GetActiveAnimFrame(INT);
	public: virtual FLOAT GetActiveAnimRate(INT);
	public: virtual FMatrix MeshToWorld(FLOAT);
	public: virtual FName AnimGetGroup(void*);
	public: virtual FName AnimGetName(void*);
	public: virtual FName GetActiveAnimSequence(INT);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual INT ActiveVertStreamSize();
	public: virtual INT AnimForcePose(FName,FLOAT,FLOAT,INT,FLOAT);
	public: virtual INT AnimGetNotifyCount(void*);
	public: virtual INT AnimIsInGroup(void*,FName);
	public: virtual INT AnimStopLooping(INT);
	public: virtual INT FreezeAnimAt(FLOAT,INT);
	public: virtual INT GetAnimCount();
	public: virtual INT GetBonePosition(DWORD,FVector&);
	public: virtual INT GetBonePosition(FName,FVector&);
	public: virtual INT GetBonePositionWithoutMeshtoWorldMatrixUpdate(DWORD,FVector&);
	public: virtual INT GetBonePositionWithoutMeshtoWorldMatrixUpdate(FName,FVector&);
	public: virtual INT IsAnimLooping(INT);
	public: virtual INT IsAnimPastLastFrame(INT);
	public: virtual INT IsAnimTweening(INT);
	public: virtual INT IsAnimating(INT);
	public: virtual INT PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: virtual INT UpdateAnimation(FLOAT);
	public: virtual UAnimNotify* AnimGetNotifyObject(void*,INT);
	public: virtual UMeshAnimation* CurrentSkelAnim(INT);
	public: virtual UMeshAnimation* FindAnimObjectForSequence(FName);
	public: virtual void ActualizeAnimLinkups();
	public: virtual void Destroy();
	public: virtual void ForceBoneRefresh();
	public: virtual void GetFrame(FLevelSceneNode*,DWORD);
	public: virtual void GetMeshVerts(AActor*,FVector*,INT,INT&);
	public: virtual void MeshBuildBounds();
	public: virtual void MeshSkinVertsCallback(void*);
	public: virtual void PoseFrame(INT,FLOAT);
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&,INT,INT,INT,INT);
	public: virtual void RenderPreProcess(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&,INT&,INT,INT&);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetAnimFrame(INT,FLOAT,INT);
	public: virtual void SetAnimLastFrame(INT,FLOAT);
	public: virtual void SetMesh(UMesh*);
	public: virtual void SetScale(FVector);
	public: virtual void* GetAnimIndexed(INT);
	public: virtual void* GetAnimNamed(FName);
	public: virtual wchar_t const* AnimGetNotifyText(void*,INT);
	public: virtual ~USkeletalMeshInstance();
	public: void BlendToAlpha(INT,FLOAT,FLOAT);
	public: void ClearSkelAnims();
	public: void CopyAnimation(INT,INT);
	public: void DoSkinning();
	public: void DrawSection(FDynamicActor*,USkeletalMesh*,FLevelSceneNode*,FMatrix const&,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT,INT,INT);
	public: void ForceAnimRate(INT,FLOAT);
	public: void ProcessSkinNotify(FLOAT,struct FMeshAnimSeq*,UMeshComponent*);
	public: void RenderDynamicHairMesh(FDynamicActor*,FLevelSceneNode*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&);
	public: void SetAnimRate(INT,FLOAT);
	public: void SetAnimSequence(INT,FName);
	public: void SetBlendAlpha(INT,FLOAT);
	public: void SetGPUSkinningConstants(FRenderInterface*,struct FSkelMeshSection*,USkeletalMeshInstance*);
	public: void UpdateBlendAlpha(INT,FLOAT,FLOAT);
	public: void UpdateFinalCopy(FDynamicActor*,FRenderInterface*);
USound
	public: FLOAT AddTimeStamp(FLOAT);
	public: INT IsLooping()const;
	public: INT IsMusic()const;
	public: INT IsPlayedUntilEnd();
	public: INT IsPlaying();
	public: INT IsStreaming()const;
	public: USound();
	public: USound(USound const&);
	public: USound(wchar_t const*,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetDuration();
	public: virtual void Destroy();
	public: virtual void PS2Convert();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~USound();
	public: void ClearTimeStamp();
	public: void SetPlaySound(INT);
USparkEmitter
	public: USparkEmitter();
	public: USparkEmitter(USparkEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual ~USparkEmitter();
USpriteEmitter
	public: USpriteEmitter();
	public: USpriteEmitter(USpriteEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT FillVertexBuffer(FSpriteParticleVertex*,FLevelSceneNode*);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual ~USpriteEmitter();
UStaticMesh
	private: void LockCachedCollisionNodes(struct CacheCollisionInfo&);
	private: void LockCachedCollisionTriangles(struct CacheCollisionInfo&);
	private: void UnlockCachedCollisionNodes(struct CacheCollisionInfo&);
	private: void UnlockCachedCollisionTriangles(struct CacheCollisionInfo&);
	public: INT GetLodLevel(FLevelSceneNode const*,AActor const*)const;
	public: INT GetNumCollisionNodes();
	public: INT GetNumCollisionTriangles();
	public: INT IsDynamicShadowCast(INT);
	public: UMaterial* GetSkin(AActor*,INT,INT);
	public: UStaticMesh();
	public: UStaticMesh(UStaticMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FStaticMeshCollisionNode const& GetCachedCollisionNode(struct CacheCollisionInfo const&,INT)const;
	public: struct FStaticMeshCollisionTriangle const& GetCachedCollisionTriangle(struct CacheCollisionInfo const&,INT)const;
	public: virtual FBox GetCollisionBoundingBox(AActor const*)const;
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual FVector GetEncroachCenter(AActor*);
	public: virtual FVector GetEncroachExtent(AActor*);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,FVector const&,DWORD,DWORD);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,DWORD);
	public: virtual INT UseCylinderCollision(AActor const*);
	public: virtual void Destroy();
	public: virtual void Illuminate(AActor*,INT,INT);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Rename(wchar_t const*,UObject*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UStaticMesh();
	public: void Build();
	public: void BuildNotforShadow();
	public: void BuildforShadow();
	public: void CalculateStaticMeshLightMap(UStaticMeshInstance*,FDynamicActor*);
	public: void CalculateStaticMeshLighting(UStaticMeshInstance*,FDynamicActor*);
	public: void CleanupCachedCollisionData(struct CacheCollisionInfo&);
	public: void ComputeLightmapTextureSize(FLOAT,INT);
	public: void LoadTangentVector();
	public: void SetupCachedCollisionData(struct CacheCollisionInfo&);
	public: void StaticConstructor();
USubActionCameraShake
	public: USubActionCameraShake();
	public: USubActionCameraShake(USubActionCameraShake const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionCameraShake();
USubActionFOV
	public: USubActionFOV();
	public: USubActionFOV(USubActionFOV const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionFOV();
USubActionFade
	public: USubActionFade();
	public: USubActionFade(USubActionFade const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionFade();
USubActionGameSpeed
	public: USubActionGameSpeed();
	public: USubActionGameSpeed(USubActionGameSpeed const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionGameSpeed();
USubActionOrientation
	public: USubActionOrientation();
	public: USubActionOrientation(USubActionOrientation const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT IsRunning();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual void PostLoad();
	public: virtual ~USubActionOrientation();
USubActionSceneSpeed
	public: USubActionSceneSpeed();
	public: USubActionSceneSpeed(USubActionSceneSpeed const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionSceneSpeed();
USubActionTrigger
	public: USubActionTrigger();
	public: USubActionTrigger(USubActionTrigger const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionTrigger();
UTerrainMaterial
	public: UTerrainMaterial();
	public: UTerrainMaterial(UTerrainMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT HasFallback();
	public: virtual UMaterial* CheckFallback();
	public: virtual ~UTerrainMaterial();
UTerrainSector
	protected: UTerrainSector();
	public: FColor const& GetVertexColor(INT,INT);
	public: FVector GetVertexNormal(INT,INT);
	public: FVector const& GetVertex(INT,INT);
	public: INT GetGlobalVertex(INT,INT);
	public: INT GetLocalVertex(INT,INT);
	public: INT IsSectorAll(INT,unsigned char);
	public: INT IsTriangleAll(INT,INT,INT,INT,INT,unsigned char);
	public: INT LocalIntMap(INT);
	public: INT PassShouldRenderTriangle(INT,INT,INT,INT,INT);
	public: UTerrainSector(ATerrainInfo*,INT,INT,INT,INT);
	public: UTerrainSector(UTerrainSector const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*);
	public: virtual void Destroy();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~UTerrainSector();
	public: void AttachProjector(AProjector*,struct FProjectorRenderInfo*,INT,INT,INT,INT);
	public: void CalcLocation();
	public: void DeleteTriangles();
	public: void GenerateCompleteIndexBuffer();
	public: void GenerateTriangles();
	public: void MakeIntensityMap();
	public: void MakeIntensityMapOnTime();
	public: void PregenerateTriangles();
	public: void SetIntensityMap(struct FTerrainIntensityMap*,FColor,FPlane,FLOAT);
	public: void SetInterpolatedIntensityMap(struct FTerrainIntensityMap*,struct FTerrainIntensityMap*,FLOAT,FLOAT);
	public: void StaticLight(INT);
	public: void TriangulateLayer(INT);
	wchar_t const* const `public: INT IsTriangleAll(INT,INT,INT,INT,INT,unsigned char)'::`3'::__FUNC_NAME__;
UTexCoordSource
	public: UTexCoordSource();
	public: UTexCoordSource(UTexCoordSource const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~UTexCoordSource();
UTexEnvMap
	public: UTexEnvMap();
	public: UTexEnvMap(UTexEnvMap const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexEnvMap();
UTexMatrix
	public: UTexMatrix();
	public: UTexMatrix(UTexMatrix const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexMatrix();
UTexModifier
	public: UTexModifier();
	public: UTexModifier(UTexModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual INT GetValidated();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void SetValidated(INT);
	public: virtual ~UTexModifier();
UTexOscillator
	public: UTexOscillator();
	public: UTexOscillator(UTexOscillator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual void PostEditChange();
	public: virtual ~UTexOscillator();
UTexOscillatorTriggered
	public: UTexOscillatorTriggered();
	public: UTexOscillatorTriggered(UTexOscillatorTriggered const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexOscillatorTriggered();
UTexPanner
	public: UTexPanner();
	public: UTexPanner(UTexPanner const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexPanner();
UTexPannerTriggered
	public: UTexPannerTriggered();
	public: UTexPannerTriggered(UTexPannerTriggered const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexPannerTriggered();
UTexRotator
	public: UTexRotator();
	public: UTexRotator(UTexRotator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual void PostLoad();
	public: virtual ~UTexRotator();
UTexScaler
	public: UTexScaler();
	public: UTexScaler(UTexScaler const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexScaler();
UTexture
	public: DWORD GetColorsIndex();
	public: FColor GetTexel(FLOAT,FLOAT,FLOAT,FLOAT);
	public: FColor* GetColors();
	public: FString GetFormatDesc();
	public: INT Compress(enum ETextureFormat,INT,struct FDXTCompressionOptions*,INT,INT);
	public: INT Crest_Compress(INT);
	public: INT Decompress(enum ETextureFormat);
	public: INT DefaultLOD();
	public: INT GetNumMips();
	public: INT TM_Compress();
	public: INT TM_Decompress();
	public: UTexture();
	public: UTexture(UTexture const&);
	public: enum ETextureFormat ConvertDXT();
	public: enum ETextureFormat ConvertDXT(INT,INT,INT,unsigned char**);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FMipmapBase* GetMip(INT);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual INT GetSortingLevel();
	public: virtual INT IsTransparent();
	public: virtual INT IsTwoSided()const;
	public: virtual INT RequiresSorting();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual double GetLastUpdateTime();
	public: virtual void ArithOp(UTexture*,enum ETextureArithOp);
	public: virtual void Clear(DWORD);
	public: virtual void Clear(FColor);
	public: virtual void Click(DWORD,FLOAT,FLOAT);
	public: virtual void ConstantTimeTick();
	public: virtual void Destroy();
	public: virtual void Init(INT,INT);
	public: virtual void MousePosition(DWORD,FLOAT,FLOAT);
	public: virtual void OneTimeLoopStart();
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Prime();
	public: virtual void Serialize(FArchive&);
	public: virtual void Tick(FLOAT);
	public: virtual void Tick(double);
	public: virtual void TimeReset();
	public: virtual void Update(double);
	public: virtual ~UTexture();
	public: void CreateColorRange();
	public: void CreateMips(INT,INT);
	public: void SetLastUpdateTime(double);
UTrailEmitter
	public: UParticleEmitter* FindAttachEmitter();
	public: UTrailEmitter();
	public: UTrailEmitter(UTrailEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FParticle* FindAttachParticle();
	public: virtual FColor SetInitialPoINTColor(FColor);
	public: virtual INT IsUpdateSkippableParticle();
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Destroy();
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual void Serialize(FArchive&);
	public: virtual void UpdateExtra();
	public: virtual void UpdateParticle(FLOAT,INT);
	public: virtual ~UTrailEmitter();
	public: void ClearChildTrail();
	public: void InitAttachInfo();
	public: void ResetTrail();
	public: void execResetTrail(struct FFrame&,void* const);
UUnderWaterShader
	public: UUnderWaterShader();
	public: UUnderWaterShader(UUnderWaterShader const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char* GetBumpRawData();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual void Destroy();
	public: virtual ~UUnderWaterShader();
	public: void MakeUnderWaterData(INT,INT);
	public: void SetDiffuseMaterial(UMaterial*);
UUserDefinableMaterial
	public: UUserDefinableMaterial();
	public: UUserDefinableMaterial(UUserDefinableMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual ~UUserDefinableMaterial();
UVertMesh
	public: INT RenderPreProcess();
	public: UVertMesh();
	public: UVertMesh(UVertMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual UClass* GetMeshInstanceClass();
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~UVertMesh();
	public: void StaticConstructor();
UVertMeshEmitter
	public: UVertMeshEmitter();
	public: UVertMeshEmitter(UVertMeshEmitter const&);
	public: UVertMeshInstance* GetMeshInstance(INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsUpdateSkippableParticle();
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Destroy();
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Reset();
	public: virtual void Spawned();
	public: virtual ~UVertMeshEmitter();
UVertMeshInstance
	public: INT RenderPreProcess(FAnimMeshVertexStream&);
	public: UVertMeshInstance();
	public: UVertMeshInstance(UVertMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FMeshAnimSeq* GetAnimSeq(FName);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FLOAT AnimGetFrameCount(void*);
	public: virtual FLOAT AnimGetNotifyTime(void*,INT);
	public: virtual FLOAT AnimGetRate(void*);
	public: virtual FLOAT GetActiveAnimFrame(INT);
	public: virtual FLOAT GetActiveAnimRate(INT);
	public: virtual FMatrix MeshToWorld(FLOAT);
	public: virtual FName AnimGetGroup(void*);
	public: virtual FName AnimGetName(void*);
	public: virtual FName GetActiveAnimSequence(INT);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual INT AnimForcePose(FName,FLOAT,FLOAT,INT,FLOAT);
	public: virtual INT AnimGetNotifyCount(void*);
	public: virtual INT AnimIsInGroup(void*,FName);
	public: virtual INT AnimStopLooping(INT);
	public: virtual INT GetAnimCount();
	public: virtual INT IsAnimLooping(INT);
	public: virtual INT IsAnimPastLastFrame(INT);
	public: virtual INT IsAnimTweening(INT);
	public: virtual INT IsAnimating(INT);
	public: virtual INT PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: virtual INT StopAnimating();
	public: virtual INT UpdateAnimation(FLOAT);
	public: virtual UAnimNotify* AnimGetNotifyObject(void*,INT);
	public: virtual UMaterial* GetMaterial(INT,AActor*);
	public: virtual void GetFrame(AActor*,FLevelSceneNode*,FVector*,INT,INT&,DWORD);
	public: virtual void GetMeshVerts(AActor*,FVector*,INT,INT&);
	public: virtual void MeshBuildBounds();
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT,FMatrix const&);
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,FMatrix&,INT,INT,INT,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetAnimFrame(INT,FLOAT,INT);
	public: virtual void SetScale(FVector);
	public: virtual void* GetAnimIndexed(INT);
	public: virtual void* GetAnimNamed(FName);
	public: virtual wchar_t const* AnimGetNotifyText(void*,INT);
	public: virtual ~UVertMeshInstance();
	public: void MatrixSetting(FRenderInterface*,FMatrix const&,UMeshComponent*,USkeletalMesh*,USkeletalMeshInstance*);
UVertexBuffer
	public: UVertexBuffer();
	public: UVertexBuffer(DWORD);
	public: UVertexBuffer(UVertexBuffer const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetDataSize();
	public: virtual void Serialize(FArchive&);
	public: virtual void* GetData();
	public: virtual ~UVertexBuffer();
	wchar_t const* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
UVertexColor
	protected: UVertexColor();
	public: UVertexColor(UVertexColor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UVertexColor();
UViewport
	public: INT IsDepthComplexity();
	public: INT IsEditing();
	public: INT IsLit();
	public: INT IsOrtho();
	public: INT IsPerspective();
	public: INT IsRealtime();
	public: INT IsTopView();
	public: INT IsWire();
	public: UClient* GetOuterUClient()const;
	public: UViewport();
	public: UViewport(UViewport const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl RefreshAll();
	public: unsigned char* _Screen(INT,INT);
	public: virtual INT Exec(wchar_t const*,FOutputDevice&);
	public: virtual INT IsMouseCaptured();
	public: virtual INT Lock(unsigned char*,INT*);
	public: virtual INT SetDrag(INT);
	public: virtual void Destroy();
	public: virtual void Present();
	public: virtual void ReadInput(FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual void Serialize(wchar_t const*,enum EName);
	public: virtual void TryRenderDevice(wchar_t const*,INT,INT,INT);
	public: virtual void Unlock();
	public: virtual void* GetServer();
	public: virtual ~UViewport();
	public: void ExecMacro(wchar_t const*,FOutputDevice&);
	public: void ExecuteHits(struct FHitCause const&,unsigned char*,INT,wchar_t*,FColor*,AActor**);
	public: void LockOnActor(AActor*);
	public: void PopHit(INT);
	public: void PushHit(struct HHitProxy const&,INT);
	public: void SetForceUnWire(INT);
	public: void SetScreenToClientInOrtho(INT);
UWaterMaterial
	public: UWaterMaterial();
	public: UWaterMaterial(UWaterMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual ~UWaterMaterial();
User
	private: INT EventArmorChange(INT,INT,INT);
	private: INT GetArmorPartsToAbnormalVisualEffect(INT,INT);
	private: INT GetChangeEventArmorItemID(EventChangeItem*,INT,INT,INT,INT);
	private: INT GetChangeEventBackItemID(EventChangeItem*,INT,INT);
	private: INT GetChangeEventShieldItemID(EventChangeItem*,INT,INT);
	private: INT GetChangeEventWeaponItemID(EventChangeItem*,INT,INT);
	private: INT GetLookChangeItemSlot(INT);
	private: INT GetUnderWearBodyPartToBodyPart(enum EItemSlotType,INT,FL2ArmorItemData*);
	private: INT GetWeaponPartsToAbnormalVisualEffect(INT,INT,INT);
	private: INT IsArmorItem(INT)const;
	private: INT IsBackItem(INT)const;
	private: INT IsChaotic()const;
	private: INT IsFighter();
	private: INT IsMagicianWeapon(INT)const;
	private: INT IsShieldItem(INT)const;
	private: INT IsTwoHandWeapon(INT)const;
	private: INT IsWeaponItem(INT)const;
	public: APawn* GetCharacterPawn()const;
	public: DWORD GetNameColor(bool);
	public: DWORD GetNickColor();
	public: DWORD GetUniqueNameColor();
	public: FL2ArmorItemData* GetArmorItemDataBySlot(INT);
	public: FL2ArmorItemData* GetDefaultArmorItemDataByID(INT);
	public: FL2WeaponItemData* GetWeaponItemDataBySlot(INT);
	public: FLOAT GetClassDrawScale();
	public: FName GetClassNameW(INT);
	public: FName GetDamageEffect();
	public: FName GetEquipItemAttachBoneName(enum EItemSlotType,enum WeaponMeshAttachSide);
	public: INT GetAttackItemVariationOption1()const;
	public: INT GetAttackItemVariationOption2()const;
	public: INT GetCriminalRate();
	public: INT GetDecoyMasterID()const;
	public: INT GetEventItemClassID(INT,INT);
	public: INT GetGuiltyStatus();
	public: INT GetHairAcceStyle()const;
	public: INT GetHairStyle()const;
	public: INT GetItemClassID(INT,INT);
	public: INT GetLookChangeItemClassID(INT);
	public: INT GetPetID();
	public: INT GetPledgeID();
	public: INT GetPrivateStoreState();
	public: INT GetSummonedID();
	public: INT GetSurrenderWarID();
	public: INT GetUltimateSkillLevel()const;
	public: INT GetUltimateSkillPoINT()const;
	public: INT HasBootsSound(INT);
	public: INT HasPvPPoINTPenalty()const;
	public: INT HasTacticalSign()const;
	public: INT HaveBuff(struct MagicSkillUniqueKey const&);
	public: INT IsDecoy()const;
	public: INT IsHairAccessoryIncludeOffsetting(INT);
	public: INT IsHideHair(enum EMeshType);
	public: INT IsHostileForSkillBarTexture();
	public: INT IsLookArmorItemByDress(INT);
	public: INT IsMyPartyMember();
	public: INT IsMyPledgeMember();
	public: INT IsPartyMaster();
	public: INT IsPartyMember();
	public: INT IsPledgeMaster();
	public: INT IsPrivateShopOpenState()const;
	public: INT IsScalingWeapon(INT);
	public: INT IsShield(FL2WeaponItemData*)const;
	public: INT IsValidHairStyle()const;
	public: INT OnRiding()const;
	public: INT OnVehicle()const;
	public: INT SetUltimateSkillPoINT(INT);
	public: INT SkillBreathBarNeedDraw();
	public: INT SpawnGLovesAdditionalEffectData(INT);
	public: INT UseArrowItem(enum WeaponType)const;
	public: INT UseBoltItem(enum WeaponType)const;
	public: UClass* SetTransformInfo(INT const&,INT const&,INT const&);
	public: UClass* SetTransformInfo(struct User const&,INT const&);
	public: User();
	public: User(struct User const&);
	public: bool IsCuriousHousePlayer();
	public: double GetExpPercentRate()const;
	public: enum CharacterDeactivateReason::DeactivateReason GetUserActivateInfo()const;
	public: enum EMeshType GetMeshType(INT,INT);
	public: enum TacticalSign::TypeEnum GetTacticalSign()const;
	public: void AddBuff(struct MagicSkillUniqueKey const&);
	public: void ClearBuff();
	public: void GetNPCMeshNTexNameByFace(struct FMeshComponentData&);
	public: void GetPCMeshNTexNameByFace(struct FMeshComponentData&,enum EMeshType);
	public: void IsMatchedStoreMsg(wchar_t const*);
	public: void NotifyPawnUltimateSkillLevelChanged();
	public: void RideTransform(INT);
	public: void SetAttackItemVariationOption(INT,INT);
	public: void SetAttackItemVariationOptionToPawn();
	public: void SetDecoyMasterID(INT);
	public: void SetEventmatchEffect(INT);
	public: void SetHairAcceStyle(INT);
	public: void SetHairStyle(INT);
	public: void SetItemSlotByItemClassID();
	public: void SetName(wchar_t*);
	public: void SetNickName(wchar_t*);
	public: void SetPawnResource(INT);
	public: void SetPawnResourceImpl(INT);
	public: void SetPledgePower(unsigned INT);
	public: void SetRangeAttackItem();
	public: void SetRealName(wchar_t*);
	public: void SetStoreMessage(enum UserPrivateStore::PrivateStoreMessageType const&,wchar_t*);
	public: void SetTacticalSign(enum TacticalSign::TypeEnum);
	public: void SpawnAdditionalWeaponEffect();
	public: void SpawnItemAttachedEffect(INT,INT);
	public: void UpdateDragonPawnMeshContainerByItem(APawn*);
	public: void UpdatePawnMeshContainer(APawn*,INT);
	public: void UpdatePawnMeshContainerByFace(APawn*);
	public: void UpdatePawnMeshContainerByHair(APawn*,INT);
	public: void UpdatePawnMeshContainerByItem(APawn*,enum EItemSlotType,INT);
	public: void setCuriousHouseShuffledName(INT,INT);
	public: wchar_t* GetClassNamePoINTer();
	public: wchar_t* GetName();
	public: wchar_t* GetNickName();
	public: wchar_t* GetRealName();
	public: ~User();
	wchar_t const* const `public: INT GetUltimateSkillPoINT()const '::`3'::__FUNC_NAME__;
	wchar_t const* const `public: INT SetUltimateSkillPoINT(INT)'::`3'::__FUNC_NAME__;

Globals:
	 CORE_API extern class FEngineStats GEngineStats
	 CORE_API extern class FL2GameData GL2GameData
	 CORE_API extern class FMatineeTools GMatineeTools
	 CORE_API extern class FMemCache GCache
	 CORE_API extern class FRebuildTools GRebuildTools
	 CORE_API extern class FStats GStats
	 CORE_API extern class FString __cdecl GetCDKeyHash(void)
	 CORE_API extern class FString __cdecl GetCDKeyResponse(wchar_t const *)
	 CORE_API extern class FTempLineBatcher * GTempLineBatcher
	 CORE_API extern class FTerrainTools GTerrainTools
	 CORE_API extern class L2VideoRecoder GL2VideoRecoder
	 CORE_API extern class UGlobalTempObjects * GGlobalTempObjects
	 CORE_API extern class UL2ConsoleWnd * GL2Console
	 CORE_API extern int GDebugRange

Functions:

Skipped:
	_DllMain@12
	autoclassAActor
	autoclassAAIController
	autoclassAAIMarker
	autoclassAAirEmitter
	autoclassAAirShip
	autoclassAAirVolume
	autoclassAAIScript
	autoclassAAmbientEventActor
	autoclassAAmbientSound
	autoclassAAmbientVolume
	autoclassAAmmo
	autoclassAAmmunition
	autoclassAAntiPortalActor
	autoclassAAutoDoor
	autoclassAAutoLadder
	autoclassAAvoidMarker
	autoclassABlockingVolume
	autoclassABrush
	autoclassACamera
	autoclassACameraControlPawn
	autoclassACameraEffectInfo
	autoclassACameraVolume
	autoclassACarriedObject
	autoclassAClipMarker
	autoclassAController
	autoclassACustomizableStaticMeshActor
	autoclassADamageType
	autoclassADecoration
	autoclassADecorationList
	autoclassADecoVolumeObject
	autoclassADefaultPhysicsVolume
	autoclassADoor
	autoclassADynamicLight
	autoclassAEmitter
	autoclassAEmitterLight
	autoclassAEnvCreatureManagerInfo
	autoclassAFileLog
	autoclassAFluidSurfaceInfo
	autoclassAFluidSurfaceOscillator
	autoclassAGameInfo
	autoclassAGameReplicationInfo
	autoclassAGameStats
	autoclassAHUD
	autoclassAInfo
	autoclassAInspector
	autoclassAInternetInfo
	autoclassAInterpolationPoint
	autoclassAInventory
	autoclassAInventoryAttachment
	autoclassAInventorySpot
	autoclassAJumpDest
	autoclassAJumpPad
	autoclassAKActor
	autoclassAKBSJoint
	autoclassAKCarWheelJoint
	autoclassAKConeLimit
	autoclassAKConstraint
	autoclassAKeypoint
	autoclassAKHinge
	autoclassAKTire
	autoclassAKVehicle
	autoclassAL2Alarm
	autoclassAL2CenterdDiamond
	autoclassAL2Dice
	autoclassAL2Float
	autoclassAL2FogInfo
	autoclassAL2Indicator
	autoclassAL2MovableStaticMeshActor
	autoclassAL2NMover
	autoclassAL2Pickup
	autoclassAL2Radar
	autoclassAL2RegionEffectInfo
	autoclassAL2SeamlessInfo
	autoclassALadder
	autoclassALadderVolume
	autoclassALevelInfo
	autoclassALiftCenter
	autoclassALiftExit
	autoclassALight
	autoclassALineagePlayerController
	autoclassALineOfSightTrigger
	autoclassALocationInfo
	autoclassALookTarget
	autoclassAMarkProjector
	autoclassAMatDemoActor
	autoclassAMovableStaticMeshActor
	autoclassAMover
	autoclassAMusicVolume
	autoclassAMutator
	autoclassANAgathion
	autoclassANavigationPoint
	autoclassANCubics
	autoclassANLine
	autoclassANMoon
	autoclassANMovableSunLight
	autoclassANote
	autoclassANpcPosInfo
	autoclassANProjectile
	autoclassANSkillProjectile
	autoclassANSun
	autoclassAParticleProjector
	autoclassAPathNode
	autoclassAPawn
	autoclassAPhysicsVolume
	autoclassAPickup
	autoclassAPlayerController
	autoclassAPlayerReplicationInfo
	autoclassAPlayerStart
	autoclassAPolyMarker
	autoclassAPotentialClimbWatcher
	autoclassAPowerups
	autoclassAProjectedEmitter
	autoclassAProjectile
	autoclassAProjector
	autoclassAReplicationInfo
	autoclassASavedMove
	autoclassASceneManager
	autoclassAScout
	autoclassASecurity
	autoclassAServerBlockingVolume
	autoclassAServerPrimitive
	autoclassAShadowProjector
	autoclassAShuttle
	autoclassAShuttleDoor
	autoclassAShuttleWall
	autoclassASkyMeshActor
	autoclassASkyRenderInfo
	autoclassASkyZoneInfo
	autoclassASmallNavigationPoint
	autoclassASpawnableStaticMeshActor
	autoclassASpawnedLight
	autoclassAStaticMeshActor
	autoclassAStationaryWeapons
	autoclassAStatLog
	autoclassAStatLogFile
	autoclassASuperPointInfo
	autoclassATeamInfo
	autoclassATeleporter
	autoclassATerrainInfo
	autoclassATerritoryInfo
	autoclassATrigger
	autoclassATriggers
	autoclassAVehicle
	autoclassAVehicleMeshPart
	autoclassAVehiclePart
	autoclassAVehicleRoutePoint
	autoclassAVehicleServerPart
	autoclassAViewportWindowController
	autoclassAVolume
	autoclassAWarpZoneInfo
	autoclassAWarpZoneMarker
	autoclassAWaterHitEmitter
	autoclassAWeapon
	autoclassAWeaponAttachment
	autoclassAZoneInfo
	autoclassCAuthSocket
	autoclassCClientSocket
	autoclassCDummySocket
	autoclassCPingSocket
	autoclassUActionMoveCamera
	autoclassUActionPause
	autoclassUActionWarp
	autoclassUActorChannel
	autoclassUAmbientSoundObject
	autoclassUAmbientVolumeSound
	autoclassUAnimation
	autoclassUAnimNotify
	autoclassUAnimNotify_AttackDamage
	autoclassUAnimNotify_AttackItem
	autoclassUAnimNotify_AttackPreShot
	autoclassUAnimNotify_AttackShot
	autoclassUAnimNotify_AttackVoice
	autoclassUAnimNotify_BoneScale
	autoclassUAnimNotify_CameraLocation
	autoclassUAnimNotify_Channeling
	autoclassUAnimNotify_DestroyEffect
	autoclassUAnimNotify_Effect
	autoclassUAnimNotify_IdleSound
	autoclassUAnimNotify_Illusion
	autoclassUAnimNotify_JumpDown
	autoclassUAnimNotify_JumpUp
	autoclassUAnimNotify_LaunchAccumulativeBeam
	autoclassUAnimNotify_Light
	autoclassUAnimNotify_MatSubAction
	autoclassUAnimNotify_PostEffect
	autoclassUAnimNotify_RandomSound
	autoclassUAnimNotify_ScreenFade
	autoclassUAnimNotify_Script
	autoclassUAnimNotify_Scripted
	autoclassUAnimNotify_SendCommandLine
	autoclassUAnimNotify_Sheathe
	autoclassUAnimNotify_Sound
	autoclassUAnimNotify_SwimSound
	autoclassUAnimNotify_ViewShake
	autoclassUAudioSubsystem
	autoclassUBaseGUIController
	autoclassUBeamEmitter
	autoclassUBitmapMaterial
	autoclassUBlackWhite
	autoclassUBumpShader
	autoclassUCameraEffect
	autoclassUCameraOverlay
	autoclassUCanvas
	autoclassUChannel
	autoclassUChannelDownload
	autoclassUCheatManager
	autoclassUCheckPackageCommandlet
	autoclassUClient
	autoclassUColorMask
	autoclassUColorModifier
	autoclassUColorVariationMaterial
	autoclassUColorWheel
	autoclassUCombiner
	autoclassUComplementModifier
	autoclassUConsole
	autoclassUConstantColor
	autoclassUConstantMaterial
	autoclassUControlChannel
	autoclassUConvertOggCommandlet
	autoclassUConvexVolume
	autoclassUCubemap
	autoclassUCustomMakedMaterial
	autoclassUDamageTextManager
	autoclassUDemoPlayPendingLevel
	autoclassUDemoRecConnection
	autoclassUDemoRecDriver
	autoclassUDOFEffect
	autoclassUDownload
	autoclassUEdgeDetectEffect
	autoclassUEngine
	autoclassUExtraMeshData
	autoclassUFadeColor
	autoclassUFileChannel
	autoclassUFinalBlend
	autoclassUFlashSubsystem
	autoclassUFluidSurfacePrimitive
	autoclassUFont
	autoclassUFontCacheManager
	autoclassUFontManager
	autoclassUFXAAEffect
	autoclassUGameEngine
	autoclassUGFxFlash
	autoclassUGlobalTempObjects
	autoclassUGlowEffect
	autoclassUGlowModifier
	autoclassUGodRayEffect
	autoclassUHDREffect
	autoclassUHSVConversionEffect
	autoclassUI3DL2Listener
	autoclassUIndexBuffer
	autoclassUInput
	autoclassUInteraction
	autoclassUInteractionMaster
	autoclassUInteractions
	autoclassUKarmaParams
	autoclassUKarmaParamsCollision
	autoclassUKarmaParamsRBFull
	autoclassUKarmaParamsSkel
	autoclassUKMeshProps
	autoclassUL2ColorModifier
	autoclassUL2ConsoleWnd
	autoclassUL2EffectEmitter
	autoclassUL2Font
	autoclassUL2NEnvLight
	autoclassUL2NEnvManager
	autoclassUL2NetHandler
	autoclassUL2NTimeLight
	autoclassUL2OrcMove
	autoclassUL2SceneInfo
	autoclassUL2SceneItem
	autoclassUL2SkillEffect
	autoclassUL2TextureFactory
	autoclassULevel
	autoclassULevelBase
	autoclassULevelObject
	autoclassULevelSummary
	autoclassULodMesh
	autoclassULodMeshInstance
	autoclassUMaskTexture
	autoclassUMasterLevel
	autoclassUMasterMD5Commandlet
	autoclassUMatAction
	autoclassUMaterial
	autoclassUMaterialSequence
	autoclassUMaterialSwitch
	autoclassUMatObject
	autoclassUMatSubAction
	autoclassUMesh
	autoclassUMeshAnimation
	autoclassUMeshComponent
	autoclassUMeshContainer
	autoclassUMeshEmitter
	autoclassUMeshInstance
	autoclassUMeshObject
	autoclassUModel
	autoclassUModifier
	autoclassUMotionBlur
	autoclassUNetConnection
	autoclassUNetDriver
	autoclassUNetPendingLevel
	autoclassUNetworkHandler
	autoclassUNullRenderDevice
	autoclassUOpacityModifier
	autoclassUOrcMove
	autoclassUPackageCheckInfo
	autoclassUPackageMapLevel
	autoclassUPalette
	autoclassUParticleEmitter
	autoclassUParticleMaterial
	autoclassUPawnAliasMgr
	autoclassUPawnSheathingMgr
	autoclassUPendingLevel
	autoclassUPlayer
	autoclassUPlayerInput
	autoclassUPolys
	autoclassUPrimitive
	autoclassUProjectorMaterial
	autoclassUProjectorPrimitive
	autoclassUProxyBitmapMaterial
	autoclassUReachSpec
	autoclassURealtimeGenerationTexture
	autoclassURenderDevice
	autoclassURenderedMaterial
	autoclassURenderResource
	autoclassURGBConversionEffect
	autoclassURibbonEmitter
	autoclassUSaveReplayResourceCommandlet
	autoclassUScriptConvertCommandlet
	autoclassUScriptedTexture
	autoclassUServerCommandlet
	autoclassUServerDataConvertCommandlet
	autoclassUShader
	autoclassUShadowBitmapMaterial
	autoclassUSimulationCollision
	autoclassUSimulationCylinderCollision
	autoclassUSimulationData
	autoclassUSimulationMesh
	autoclassUSimulationMeshInstance
	autoclassUSimulationNotify
	autoclassUSimulationSphereCollision
	autoclassUSimulationSpringConstraint
	autoclassUSkeletalMesh
	autoclassUSkeletalMeshInstance
	autoclassUSkinVertexBuffer
	autoclassUSound
	autoclassUSparkEmitter
	autoclassUSpriteEmitter
	autoclassUStaticMesh
	autoclassUStaticMeshInstance
	autoclassUSubActionCameraEffect
	autoclassUSubActionCameraShake
	autoclassUSubActionFade
	autoclassUSubActionFOV
	autoclassUSubActionGameSpeed
	autoclassUSubActionOrientation
	autoclassUSubActionSceneSpeed
	autoclassUSubActionTrigger
	autoclassUTerrainMaterial
	autoclassUTerrainPrimitive
	autoclassUTerrainSector
	autoclassUTexCoordMaterial
	autoclassUTexCoordSource
	autoclassUTexEnvMap
	autoclassUTexMatrix
	autoclassUTexModifier
	autoclassUTexOscillator
	autoclassUTexOscillatorTriggered
	autoclassUTexPanner
	autoclassUTexPannerTriggered
	autoclassUTexRotator
	autoclassUTexScaler
	autoclassUTexture
	autoclassUTrailEmitter
	autoclassUUnderWaterEffect
	autoclassUUnderWaterMaterial
	autoclassUUnderWaterShader
	autoclassUUserDefinableMaterial
	autoclassUVertexBuffer
	autoclassUVertexColor
	autoclassUVertexStreamBase
	autoclassUVertexStreamCOLOR
	autoclassUVertexStreamPosNormTex
	autoclassUVertexStreamUV
	autoclassUVertexStreamVECTOR
	autoclassUVertMesh
	autoclassUVertMeshEmitter
	autoclassUVertMeshInstance
	autoclassUViewport
	autoclassUWaterMaterial
	autoclassUXMLConvertCommandlet
	autoclassUYCbCrConversionEffect
	class FArchive & __cdecl operator<<(class FArchive &,class FBspNode &)
	class FArchive & __cdecl operator<<(class FArchive &,class FBspSurf &)
	class FArchive & __cdecl operator<<(class FArchive &,class FPoly &)
	class FArchive & __cdecl operator<<(class FArchive &,class FShaderCode * &)
	class FArchive & __cdecl operator<<(class FArchive &,class FURL &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FKeyValuePair &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FPlayerResponseLine &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FServerResponseLine &)
	class FName ENGINE_Accept
	class FName ENGINE_AcceptInventory
	class FName ENGINE_Activated
	class FName ENGINE_ActorEntered
	class FName ENGINE_ActorEnteredVolume
	class FName ENGINE_ActorLeaving
	class FName ENGINE_ActorLeavingVolume
	class FName ENGINE_AddCameraEffect
	class FName ENGINE_AddCheatManager
	class FName ENGINE_AddInteraction
	class FName ENGINE_AIHearSound
	class FName ENGINE_AllowDetourTo
	class FName ENGINE_AnimBegin
	class FName ENGINE_AnimEnd
	class FName ENGINE_AssociateAttackedNotify
	class FName ENGINE_Attach
	class FName ENGINE_AttachShadowProjector
	class FName ENGINE_AttackedNotify
	class FName ENGINE_BaseChange
	class FName ENGINE_BeginEvent
	class FName ENGINE_BeginPlay
	class FName ENGINE_BreathTimer
	class FName ENGINE_Broadcast
	class FName ENGINE_BroadcastLocalized
	class FName ENGINE_BroadcastLocalizedMessage
	class FName ENGINE_Bump
	class FName ENGINE_ChangeAnimation
	class FName ENGINE_ChangePawnState
	class FName ENGINE_ClearL2Game
	class FName ENGINE_ClientCloseMenu
	class FName ENGINE_ClientHearSound
	class FName ENGINE_ClientMessage
	class FName ENGINE_ClientNameChange
	class FName ENGINE_ClientOpenMenu
	class FName ENGINE_ClientSetViewTarget
	class FName ENGINE_ClientTravel
	class FName ENGINE_ClientValidate
	class FName ENGINE_CloseAll
	class FName ENGINE_CloseMenu
	class FName ENGINE_ConnectFailure
	class FName ENGINE_Deactivated
	class FName ENGINE_DemoPlaySound
	class FName ENGINE_Desireability
	class FName ENGINE_Destroyed
	class FName ENGINE_DestroyShadowProjector
	class FName ENGINE_Detach
	class FName ENGINE_DetailChange
	class FName ENGINE_DetourWeight
	class FName ENGINE_EncroachedBy
	class FName ENGINE_EncroachingOn
	class FName ENGINE_EndCrouch
	class FName ENGINE_EndedRotation
	class FName ENGINE_EndEvent
	class FName ENGINE_EnemyNotVisible
	class FName ENGINE_Falling
	class FName ENGINE_FellOutOfWorld
	class FName ENGINE_FillPrecacheMaterialsArray
	class FName ENGINE_FillPrecacheStaticMeshesArray
	class FName ENGINE_FinishedInterpolation
	class FName ENGINE_ForceGenerate
	class FName ENGINE_ForceKill
	class FName ENGINE_GainedChild
	class FName ENGINE_GameEnding
	class FName ENGINE_Generate
	class FName ENGINE_GetBeaconText
	class FName ENGINE_GetDestination
	class FName ENGINE_GetEffTargetLocation
	class FName ENGINE_GetHitEffectName
	class FName ENGINE_GetLocalLogFileName
	class FName ENGINE_GetSimulationCollision
	class FName ENGINE_GetSlaveDestination
	class FName ENGINE_GetSpawnRate
	class FName ENGINE_HeadVolumeChange
	class FName ENGINE_HearNoise
	class FName ENGINE_HitWall
	class FName ENGINE_InitGame
	class FName ENGINE_InitializeController
	class FName ENGINE_Initialized
	class FName ENGINE_InitInputSystem
	class FName ENGINE_Inspection
	class FName ENGINE_KApplyForce
	class FName ENGINE_KeyFrameReached
	class FName ENGINE_KForceExceed
	class FName ENGINE_KilledBy
	class FName ENGINE_KImpact
	class FName ENGINE_KSkelConvulse
	class FName ENGINE_KUpdateState
	class FName ENGINE_KVehicleUpdateParams
	class FName ENGINE_KVelDropBelow
	class FName ENGINE_L2GameActionNotify
	class FName ENGINE_L2NetLogin
	class FName ENGINE_L2NetPostLogin
	class FName ENGINE_Landed
	class FName ENGINE_LogGameSpecial
	class FName ENGINE_LogGameSpecial2
	class FName ENGINE_Login
	class FName ENGINE_LongFall
	class FName ENGINE_LostChild
	class FName ENGINE_MayFall
	class FName ENGINE_ModifyVelocity
	class FName ENGINE_MonitoredPawnAlert
	class FName ENGINE_NeedsMenuResolution
	class FName ENGINE_NextSceneEvent
	class FName ENGINE_Notify
	class FName ENGINE_NotifyBump
	class FName ENGINE_NotifyDie
	class FName ENGINE_NotifyHeadVolumeChange
	class FName ENGINE_NotifyHitMover
	class FName ENGINE_NotifyHitWall
	class FName ENGINE_NotifyJumpApex
	class FName ENGINE_NotifyLanded
	class FName ENGINE_NotifyMissedJump
	class FName ENGINE_NotifyPhysicsVolumeChange
	class FName ENGINE_OnAdminReply
	class FName ENGINE_OnBoost
	class FName ENGINE_OnClose
	class FName ENGINE_OnDriverIn
	class FName ENGINE_OnDriverOut
	class FName ENGINE_OnMoveDown
	class FName ENGINE_OnMoveUp
	class FName ENGINE_OnOpen
	class FName ENGINE_OnStart
	class FName ENGINE_OnStop
	class FName ENGINE_OnTurning
	class FName ENGINE_OpenMenu
	class FName ENGINE_OwnerPossess
	class FName ENGINE_PawnEnteredVolume
	class FName ENGINE_PawnLeavingVolume
	class FName ENGINE_PhysicsChangedFor
	class FName ENGINE_PhysicsVolumeChange
	class FName ENGINE_PlayDying
	class FName ENGINE_PlayerCalcView
	class FName ENGINE_PlayerInput
	class FName ENGINE_PlayerSeesMe
	class FName ENGINE_PlayerTick
	class FName ENGINE_PlayFalling
	class FName ENGINE_PlayJump
	class FName ENGINE_PlayLandingAnimation
	class FName ENGINE_PostBeginPlay
	class FName ENGINE_PostLogin
	class FName ENGINE_PostNetBeginPlay
	class FName ENGINE_PostNetReceive
	class FName ENGINE_PostRender
	class FName ENGINE_PostSetPawnResource
	class FName ENGINE_PostTeleport
	class FName ENGINE_PostTouch
	class FName ENGINE_PreBeginPlay
	class FName ENGINE_PreClientTravel
	class FName ENGINE_PreLogin
	class FName ENGINE_PrepareForMove
	class FName ENGINE_PreshotNotify
	class FName ENGINE_PreTeleport
	class FName ENGINE_Process_KeyEvent
	class FName ENGINE_Process_KeyType
	class FName ENGINE_Process_Message
	class FName ENGINE_Process_PostRender
	class FName ENGINE_Process_PreRender
	class FName ENGINE_Process_Tick
	class FName ENGINE_ReceiveLocalizedMessage
	class FName ENGINE_RemoveCameraEffect
	class FName ENGINE_RemoveInteraction
	class FName ENGINE_RenderTexture
	class FName ENGINE_ReplaceMenu
	class FName ENGINE_SceneEnded
	class FName ENGINE_SceneStarted
	class FName ENGINE_SeeMonster
	class FName ENGINE_SeePlayer
	class FName ENGINE_ServerCallback
	class FName ENGINE_ServerChangeVoiceChatter
	class FName ENGINE_ServerGetVoiceChatters
	class FName ENGINE_ServerTravel
	class FName ENGINE_ServerValidationResponse
	class FName ENGINE_SetAirVolume
	class FName ENGINE_SetAnimAction
	class FName ENGINE_SetFocusTo
	class FName ENGINE_SetHeadScale
	class FName ENGINE_SetInitialState
	class FName ENGINE_SetProgressMessage
	class FName ENGINE_SetProgressTime
	class FName ENGINE_SetRequiredGameResolution
	class FName ENGINE_SetSimulationCollision
	class FName ENGINE_SetupSpecialPathAbilities
	class FName ENGINE_SetWalking
	class FName ENGINE_ShotNotify
	class FName ENGINE_ShowUpgradeMenu
	class FName ENGINE_SoakStop
	class FName ENGINE_SpawnDefaultPlayerPawn
	class FName ENGINE_SpawnPlayerPawn
	class FName ENGINE_SpecialCost
	class FName ENGINE_SpecialHandling
	class FName ENGINE_StartCrouch
	class FName ENGINE_StopPlayFiring
	class FName ENGINE_SuggestMovePreparation
	class FName ENGINE_TakeDamage
	class FName ENGINE_TeamMessage
	class FName ENGINE_ThirdPersonEffects
	class FName ENGINE_Tick
	class FName ENGINE_Timer
	class FName ENGINE_TornOff
	class FName ENGINE_Touch
	class FName ENGINE_TravelPostAccept
	class FName ENGINE_TravelPreAccept
	class FName ENGINE_Trigger
	class FName ENGINE_TriggerEvent
	class FName ENGINE_UnTouch
	class FName ENGINE_UnTrigger
	class FName ENGINE_UpdateCharacter
	class FName ENGINE_UpdateEyeHeight
	class FName ENGINE_UsedBy
	class FName ENGINE_VehicleStateReceived
	class FName ENGINE_WorldSpaceOverlays
	class FName ENGINE_ZoneChange
	class FPlane __cdecl FGetHSV(unsigned char,unsigned char,unsigned char)
	class TArray<class ULevel *> * g_SWLevelList
	const AActor::`vftable'
	const AAIController::`vftable'
	const AAIMarker::`vftable'
	const AAirEmitter::`vftable'
	const AAirShip::`vftable'
	const AAirVolume::`vftable'
	const AAIScript::`vftable'
	const AAmbientEventActor::`vftable'
	const AAmbientSound::`vftable'
	const AAmbientVolume::`vftable'
	const AAmmo::`vftable'
	const AAmmunition::`vftable'
	const AAntiPortalActor::`vftable'
	const AAutoDoor::`vftable'
	const AAutoLadder::`vftable'
	const AAvoidMarker::`vftable'
	const ABlockingVolume::`vftable'
	const ABrush::`vftable'
	const ACamera::`vftable'
	const ACameraControlPawn::`vftable'
	const ACameraEffectInfo::`vftable'
	const ACameraVolume::`vftable'
	const ACarriedObject::`vftable'
	const AClipMarker::`vftable'
	const AController::`vftable'
	const ActorFunc::`vftable'
	const ACustomizableStaticMeshActor::`vftable'
	const ADamageType::`vftable'
	const ADecoration::`vftable'
	const ADecorationList::`vftable'
	const ADecoVolumeObject::`vftable'
	const ADefaultPhysicsVolume::`vftable'
	const ADoor::`vftable'
	const ADynamicLight::`vftable'
	const AEmitter::`vftable'
	const AEmitterLight::`vftable'
	const AEnvCreatureManagerInfo::`vftable'
	const AFileLog::`vftable'
	const AFluidSurfaceInfo::`vftable'
	const AFluidSurfaceOscillator::`vftable'
	const AGameInfo::`vftable'
	const AGameReplicationInfo::`vftable'
	const AGameStats::`vftable'
	const AHUD::`vftable'
	const AInfo::`vftable'
	const AInspector::`vftable'
	const AInternetInfo::`vftable'
	const AInterpolationPoint::`vftable'
	const AInventory::`vftable'
	const AInventoryAttachment::`vftable'
	const AInventorySpot::`vftable'
	const AJumpDest::`vftable'
	const AJumpPad::`vftable'
	const AKActor::`vftable'
	const AKBSJoint::`vftable'
	const AKCarWheelJoint::`vftable'
	const AKConeLimit::`vftable'
	const AKConstraint::`vftable'
	const AKeypoint::`vftable'
	const AKHinge::`vftable'
	const AKTire::`vftable'
	const AKVehicle::`vftable'
	const AL2Alarm::`vftable'
	const AL2CenterdDiamond::`vftable'
	const AL2Dice::`vftable'
	const AL2Float::`vftable'
	const AL2Indicator::`vftable'
	const AL2MovableStaticMeshActor::`vftable'
	const AL2NMover::`vftable'
	const AL2Pickup::`vftable'
	const AL2Radar::`vftable'
	const AL2SeamlessInfo::`vftable'
	const ALadder::`vftable'
	const ALadderVolume::`vftable'
	const ALevelInfo::`vftable'
	const ALiftCenter::`vftable'
	const ALiftExit::`vftable'
	const ALight::`vftable'
	const ALineagePlayerController::`vftable'
	const ALineOfSightTrigger::`vftable'
	const ALocationInfo::`vftable'
	const ALookTarget::`vftable'
	const AMarkProjector::`vftable'
	const AMatDemoActor::`vftable'
	const AMovableStaticMeshActor::`vftable'
	const AMover::`vftable'
	const AMusicVolume::`vftable'
	const AMutator::`vftable'
	const ANAgathion::`vftable'
	const ANavigationPoint::`vftable'
	const ANCubics::`vftable'
	const ANMoon::`vftable'
	const ANMovableSunLight::`vftable'
	const ANote::`vftable'
	const ANpcPosInfo::`vftable'
	const ANProjectile::`vftable'
	const ANSkillProjectile::`vftable'
	const ANSun::`vftable'
	const AParticleProjector::`vftable'
	const APathNode::`vftable'
	const APawn::`vftable'
	const APhysicsVolume::`vftable'
	const APickup::`vftable'
	const APlayerController::`vftable'
	const APlayerReplicationInfo::`vftable'
	const APlayerStart::`vftable'
	const APolyMarker::`vftable'
	const APotentialClimbWatcher::`vftable'
	const APowerups::`vftable'
	const AProjectedEmitter::`vftable'
	const AProjectile::`vftable'
	const AProjector::`vftable'
	const AReplicationInfo::`vftable'
	const ASavedMove::`vftable'
	const ASceneManager::`vftable'
	const AScout::`vftable'
	const ASecurity::`vftable'
	const AServerBlockingVolume::`vftable'
	const AServerPrimitive::`vftable'
	const AShadowProjector::`vftable'
	const AShuttle::`vftable'
	const AShuttleDoor::`vftable'
	const AShuttleWall::`vftable'
	const ASkyMeshActor::`vftable'
	const ASkyRenderInfo::`vftable'
	const ASkyZoneInfo::`vftable'
	const ASmallNavigationPoint::`vftable'
	const ASpawnableStaticMeshActor::`vftable'
	const ASpawnedLight::`vftable'
	const AStaticMeshActor::`vftable'
	const AStationaryWeapons::`vftable'
	const AStatLog::`vftable'
	const AStatLogFile::`vftable'
	const ASuperPointInfo::`vftable'
	const ATeamInfo::`vftable'
	const ATeleporter::`vftable'
	const ATerrainInfo::`vftable'
	const ATerritoryInfo::`vftable'
	const ATrigger::`vftable'
	const ATriggers::`vftable'
	const AVehicle::`vftable'
	const AVehicleMeshPart::`vftable'
	const AVehiclePart::`vftable'
	const AVehicleRoutePoint::`vftable'
	const AVehicleServerPart::`vftable'
	const AViewportWindowController::`vftable'
	const AVolume::`vftable'
	const AWarpZoneInfo::`vftable'
	const AWarpZoneMarker::`vftable'
	const AWaterHitEmitter::`vftable'
	const AWeapon::`vftable'
	const AWeaponAttachment::`vftable'
	const AZoneInfo::`vftable'
	const BR_EventManager::`vftable'
	const BR_GrpExchanger::`vftable'
	const CSceneManager::`vftable'
	const FActorSceneNode::`vftable'
	const FAuxRenderTarget::`vftable'
	const FCameraSceneNode::`vftable'
	const FCanvasConsoleUtil::`vftable'
	const FCanvasUtil::`vftable'
	const FDepthOfField::`vftable'
	const FGPUSkinVertexStream::`vftable'
	const FL2ArmorItemData::`vftable'
	const FL2EtcItemData::`vftable'
	const FL2GameData::`vftable'
	const FL2WeaponItemData::`vftable'
	const FLandMark::`vftable'
	const FLevelSceneNode::`vftable'
	const FLineBatcher::`vftable'
	const FMatineeTools::`vftable'
	const FNetworkNotify::`vftable'
	const FNPawnLight::`vftable'
	const FOutBunch::`vftable'
	const FParser::`vftable'
	const FPlayerSceneNode::`vftable'
	const FRawIndexBuffer::`vftable'
	const FRenderResource::`vftable'
	const FSceneNode::`vftable'
	const FShaderCache::`vftable'
	const FShaderCode::`vftable'
	const FSkinVertexStream::`vftable'
	const FSoundData::`vftable'
	const FTerrainTools::`vftable'
	const HavokInterface::`vftable'
	const HHitProxy::`vftable'
	const L224HzController::`vftable'
	const L2EventManager::`vftable'
	const L2WeatherManager::`vftable'
	const ServerManager::`vftable'
	const ServerTextureNameManager::`vftable'
	const TLazyArray<unsigned char>::`vftable'
	const TSingleton<class BR_EventManager>::`vftable'
	const TSingleton<class BR_GrpExchanger>::`vftable'
	const TSingleton<class CSceneManager>::`vftable'
	const TSingleton<class FDepthOfField>::`vftable'
	const TSingleton<class L224HzController>::`vftable'
	const TSingleton<class L2EventManager>::`vftable'
	const TSingleton<class L2WeatherManager>::`vftable'
	const TSingleton<class ServerManager>::`vftable'
	const TSingleton<class ServerTextureNameManager>::`vftable'
	const TSingleton<class UDecoration>::`vftable'
	const TSingleton<class UDepthEffect>::`vftable'
	const TSingleton<class UEditorColorEffect>::`vftable'
	const TSingleton<class UPostEffEnvManager>::`vftable'
	const TSingleton<class USSAOEffect>::`vftable'
	const UActionMoveCamera::`vftable'
	const UActionPause::`vftable'
	const UActionWarp::`vftable'
	const UAmbientSoundObject::`vftable'
	const UAmbientVolumeSound::`vftable'
	const UAnimNotify::`vftable'
	const UAnimNotify_AttackDamage::`vftable'
	const UAnimNotify_AttackItem::`vftable'
	const UAnimNotify_AttackPreShot::`vftable'
	const UAnimNotify_AttackShot::`vftable'
	const UAnimNotify_AttackVoice::`vftable'
	const UAnimNotify_BoneScale::`vftable'
	const UAnimNotify_CameraLocation::`vftable'
	const UAnimNotify_Channeling::`vftable'
	const UAnimNotify_DestroyEffect::`vftable'
	const UAnimNotify_Effect::`vftable'
	const UAnimNotify_IdleSound::`vftable'
	const UAnimNotify_Illusion::`vftable'
	const UAnimNotify_JumpDown::`vftable'
	const UAnimNotify_JumpUp::`vftable'
	const UAnimNotify_LaunchAccumulativeBeam::`vftable'
	const UAnimNotify_Light::`vftable'
	const UAnimNotify_MatSubAction::`vftable'
	const UAnimNotify_PostEffect::`vftable'
	const UAnimNotify_RandomSound::`vftable'
	const UAnimNotify_ScreenFade::`vftable'
	const UAnimNotify_Script::`vftable'
	const UAnimNotify_Scripted::`vftable'
	const UAnimNotify_SendCommandLine::`vftable'
	const UAnimNotify_Sheathe::`vftable'
	const UAnimNotify_Sound::`vftable'
	const UAnimNotify_SwimSound::`vftable'
	const UAnimNotify_ViewShake::`vftable'
	const UAudioSubsystem::`vftable'{for `FExec'}
	const UAudioSubsystem::`vftable'{for `UObject'}
	const UBaseGUIController::`vftable'
	const UBeamEmitter::`vftable'
	const UBitmapMaterial::`vftable'
	const UBumpShader::`vftable'
	const UCanvas::`vftable'
	const UCheatManager::`vftable'
	const UClient::`vftable'
	const UColorMask::`vftable'
	const UColorModifier::`vftable'
	const UColorVariationMaterial::`vftable'
	const UColorWheel::`vftable'
	const UCombiner::`vftable'
	const UComplementModifier::`vftable'
	const UConsole::`vftable'
	const UConstantColor::`vftable'
	const UConstantMaterial::`vftable'
	const UConvexVolume::`vftable'
	const UCubemap::`vftable'
	const UCustomMakedMaterial::`vftable'
	const UDamageTextManager::`vftable'
	const UDecoration::`vftable'
	const UDepthEffect::`vftable'
	const UDownload::`vftable'
	const UEditorColorEffect::`vftable'
	const UEngine::`vftable'{for `FExec'}
	const UEngine::`vftable'{for `UObject'}
	const UExtraMeshData::`vftable'
	const UFadeColor::`vftable'
	const UFinalBlend::`vftable'
	const UFlashSubsystem::`vftable'{for `FExec'}
	const UFlashSubsystem::`vftable'{for `UObject'}
	const UFont::`vftable'
	const UFontManager::`vftable'
	const UGameEngine::`vftable'{for `FExec'}
	const UGameEngine::`vftable'{for `UObject'}
	const UGFxFlash::`vftable'
	const UGlowModifier::`vftable'
	const UI3DL2Listener::`vftable'
	const UIndexBuffer::`vftable'
	const UInput::`vftable'{for `FExec'}
	const UInput::`vftable'{for `UObject'}
	const UInteraction::`vftable'
	const UInteractionMaster::`vftable'
	const UInteractions::`vftable'
	const UKarmaParams::`vftable'
	const UKarmaParamsCollision::`vftable'
	const UKarmaParamsRBFull::`vftable'
	const UKarmaParamsSkel::`vftable'
	const UKMeshProps::`vftable'
	const UL2ColorModifier::`vftable'
	const UL2ConsoleWnd::`vftable'{for `FExec'}
	const UL2ConsoleWnd::`vftable'{for `UObject'}
	const UL2EffectEmitter::`vftable'
	const UL2Font::`vftable'{for `FExec'}
	const UL2Font::`vftable'{for `UObject'}
	const UL2NEnvLight::`vftable'
	const UL2NEnvManager::`vftable'
	const UL2NTimeLight::`vftable'
	const UL2SceneInfo::`vftable'
	const UL2SceneItem::`vftable'
	const UL2SkillEffect::`vftable'
	const ULevel::`vftable'{for `FNetworkNotify'}
	const ULevel::`vftable'{for `UObject'}
	const ULevelObject::`vftable'
	const ULevelSummary::`vftable'
	const ULodMesh::`vftable'
	const ULodMeshInstance::`vftable'
	const UMaskTexture::`vftable'
	const UMasterLevel::`vftable'{for `FNetworkNotify'}
	const UMasterLevel::`vftable'{for `UObject'}
	const UMatAction::`vftable'
	const UMaterial::`vftable'
	const UMaterialSequence::`vftable'
	const UMaterialSwitch::`vftable'
	const UMatObject::`vftable'
	const UMatSubAction::`vftable'
	const UMesh::`vftable'
	const UMeshAnimation::`vftable'
	const UMeshComponent::`vftable'
	const UMeshContainer::`vftable'
	const UMeshEmitter::`vftable'
	const UMeshInstance::`vftable'
	const UMeshObject::`vftable'
	const UModel::`vftable'
	const UModifier::`vftable'
	const UNetConnection::`vftable'{for `FExec'}
	const UNetConnection::`vftable'{for `FOutputDevice'}
	const UNetConnection::`vftable'{for `UObject'}
	const UNetDriver::`vftable'{for `FExec'}
	const UNetDriver::`vftable'{for `UObject'}
	const UNetworkHandler::`vftable'{for `FExec'}
	const UNetworkHandler::`vftable'{for `UObject'}
	const UOpacityModifier::`vftable'
	const UPalette::`vftable'
	const UParticleEmitter::`vftable'
	const UParticleMaterial::`vftable'
	const UPawnAliasMgr::`vftable'
	const UPawnSheathingMgr::`vftable'
	const UPlayer::`vftable'{for `FExec'}
	const UPlayer::`vftable'{for `FOutputDevice'}
	const UPlayer::`vftable'{for `UObject'}
	const UPlayerInput::`vftable'
	const UPolys::`vftable'
	const UPostEffEnvManager::`vftable'
	const UPrimitive::`vftable'
	const UProjectorMaterial::`vftable'
	const UProxyBitmapMaterial::`vftable'
	const UReachSpec::`vftable'
	const URealtimeGenerationTexture::`vftable'
	const URenderDevice::`vftable'{for `FExec'}
	const URenderDevice::`vftable'{for `UObject'}
	const URenderedMaterial::`vftable'
	const URibbonEmitter::`vftable'
	const UScriptedTexture::`vftable'
	const UShader::`vftable'
	const UShadowBitmapMaterial::`vftable'
	const USimulationCollision::`vftable'
	const USimulationCylinderCollision::`vftable'
	const USimulationData::`vftable'
	const USimulationMesh::`vftable'
	const USimulationMeshInstance::`vftable'
	const USimulationNotify::`vftable'
	const USimulationSphereCollision::`vftable'
	const USimulationSpringConstraint::`vftable'
	const USkeletalMesh::`vftable'
	const USkeletalMeshInstance::`vftable'
	const USound::`vftable'
	const USparkEmitter::`vftable'
	const USpriteEmitter::`vftable'
	const USSAOEffect::`vftable'
	const UStaticMesh::`vftable'
	const USubActionCameraShake::`vftable'
	const USubActionFade::`vftable'
	const USubActionFOV::`vftable'
	const USubActionGameSpeed::`vftable'
	const USubActionOrientation::`vftable'
	const USubActionSceneSpeed::`vftable'
	const USubActionTrigger::`vftable'
	const UTerrainMaterial::`vftable'
	const UTerrainSector::`vftable'
	const UTexCoordSource::`vftable'
	const UTexEnvMap::`vftable'
	const UTexMatrix::`vftable'
	const UTexModifier::`vftable'
	const UTexOscillator::`vftable'
	const UTexOscillatorTriggered::`vftable'
	const UTexPanner::`vftable'
	const UTexPannerTriggered::`vftable'
	const UTexRotator::`vftable'
	const UTexScaler::`vftable'
	const UTexture::`vftable'
	const UTrailEmitter::`vftable'
	const UUnderWaterShader::`vftable'
	const UUserDefinableMaterial::`vftable'
	const UVertexBuffer::`vftable'
	const UVertexColor::`vftable'
	const UVertMesh::`vftable'
	const UVertMeshEmitter::`vftable'
	const UVertMeshInstance::`vftable'
	const UViewport::`vftable'{for `FExec'}
	const UViewport::`vftable'{for `FOutputDevice'}
	const UViewport::`vftable'{for `UObject'}
	const UWaterMaterial::`vftable'
	GPackage
	int __cdecl DispatchSocketWindowMsg(struct HWND__ *,unsigned int,unsigned int,long)
	int gbNoCalcStaticLight
	int gbShowBorderLine
	int gbStretchTerrainMask
	intAActorexecAdd_ColorColor
	intAActorexecAllActors
	intAActorexecAnimBlendParams
	intAActorexecAnimBlendToAlpha
	intAActorexecAnimIsInGroup
	intAActorexecAttachToBone
	intAActorexecAttachToBoneWithIndex
	intAActorexecAutonomousPhysics
	intAActorexecBasedActors
	intAActorexecBoneRefresh
	intAActorexecChildActors
	intAActorexecClock
	intAActorexecCollidingActors
	intAActorexecConsoleCommand
	intAActorexecDebugClock
	intAActorexecDebugUnclock
	intAActorexecDemoPlaySound
	intAActorexecDestroy
	intAActorexecDetachFromBone
	intAActorexecDrawDebugLine
	intAActorexecDynamicActors
	intAActorexecEnableChannelNotify
	intAActorexecError
	intAActorexecFastTrace
	intAActorexecFinishAnim
	intAActorexecFinishInterpolation
	intAActorexecFreezeAnimAt
	intAActorexecGetAnimParams
	intAActorexecGetBoneCoords
	intAActorexecGetBoneCoordsWithBoneIndex
	intAActorexecGetBoneRotation
	intAActorexecGetCacheEntry
	intAActorexecGetMapName
	intAActorexecGetMeshName
	intAActorexecGetNextInt
	intAActorexecGetNextIntDesc
	intAActorexecGetNextSkin
	intAActorexecGetNotifyChannel
	intAActorexecGetRenderBoundingSphere
	intAActorexecGetRootLocation
	intAActorexecGetRootLocationDelta
	intAActorexecGetRootRotation
	intAActorexecGetRootRotationDelta
	intAActorexecGetSoundDuration
	intAActorexecGetURLMap
	intAActorexecGetViewport
	intAActorexecHasAnim
	intAActorexecHasBoneName
	intAActorexecIsAnimating
	intAActorexecIsTweening
	intAActorexecKAddBoneLifter
	intAActorexecKAddImpulse
	intAActorexecKDisableCollision
	intAActorexecKDrawRigidBodyState
	intAActorexecKEnableCollision
	intAActorexecKFreezeRagdoll
	intAActorexecKGetActorGravScale
	intAActorexecKGetCOMOffset
	intAActorexecKGetCOMPosition
	intAActorexecKGetDampingProps
	intAActorexecKGetFriction
	intAActorexecKGetImpactThreshold
	intAActorexecKGetInertiaTensor
	intAActorexecKGetMass
	intAActorexecKGetRBQuaternion
	intAActorexecKGetRestitution
	intAActorexecKGetRigidBodyState
	intAActorexecKGetSkelMass
	intAActorexecKIsAwake
	intAActorexecKIsRagdollAvailable
	intAActorexecKMakeRagdollAvailable
	intAActorexecKRBVecFromVector
	intAActorexecKRBVecToVector
	intAActorexecKRemoveAllBoneLifters
	intAActorexecKRemoveLifterFromBone
	intAActorexecKSetActorGravScale
	intAActorexecKSetBlockKarma
	intAActorexecKSetCOMOffset
	intAActorexecKSetDampingProps
	intAActorexecKSetFriction
	intAActorexecKSetImpactThreshold
	intAActorexecKSetInertiaTensor
	intAActorexecKSetMass
	intAActorexecKSetRestitution
	intAActorexecKSetSkelVel
	intAActorexecKSetStayUpright
	intAActorexecKWake
	intAActorexecLinkMesh
	intAActorexecLinkSkelAnim
	intAActorexecLockRootMotion
	intAActorexecLoopAnim
	intAActorexecMakeNoise
	intAActorexecMove
	intAActorexecMoveCacheEntry
	intAActorexecMoveSmooth
	intAActorexecMultiply_ColorFloat
	intAActorexecMultiply_FloatColor
	intAActorexecNDestroy
	intAActorexecOnlyAffectPawns
	intAActorexecPlayAnim
	intAActorexecPlayerCanSeeMe
	intAActorexecPlayLoopSound
	intAActorexecPlayMusic
	intAActorexecPlayOwnedSound
	intAActorexecPlaySound
	intAActorexecPlaySoundOnVehicle
	intAActorexecPollFinishAnim
	intAActorexecPollFinishInterpolation
	intAActorexecPollSleep
	intAActorexecRadiusActors
	intAActorexecSetActorViewType
	intAActorexecSetAlphaTexModifier
	intAActorexecSetAnimFrame
	intAActorexecSetBase
	intAActorexecSetBoneDirection
	intAActorexecSetBoneLocation
	intAActorexecSetBoneRotation
	intAActorexecSetBoneScale
	intAActorexecSetCollision
	intAActorexecSetCollisionSize
	intAActorexecSetDrawScale
	intAActorexecSetDrawScale3D
	intAActorexecSetDrawType
	intAActorexecSetLocation
	intAActorexecSetOwner
	intAActorexecSetPhysics
	intAActorexecSetRelativeLocation
	intAActorexecSetRelativeRotation
	intAActorexecSetRotation
	intAActorexecSetStaticMesh
	intAActorexecSetTimer
	intAActorexecSleep
	intAActorexecSpawn
	intAActorexecStopAllMusic
	intAActorexecStopAnimating
	intAActorexecStopMusic
	intAActorexecStopSound
	intAActorexecSubtract_ColorColor
	intAActorexecSuggestFallVelocity
	intAActorexecTouchingActors
	intAActorexecTrace
	intAActorexecTraceActors
	intAActorexecTweenAnim
	intAActorexecUnClock
	intAActorexecVisibleActors
	intAActorexecVisibleCollidingActors
	intAAIControllerexecPollWaitToSeeEnemy
	intAAIControllerexecWaitToSeeEnemy
	intAControllerexecactorReachable
	intAControllerexecAddController
	intAControllerexecCanSee
	intAControllerexecEAdjustJump
	intAControllerexecEndClimbLadder
	intAControllerexecFindBestInventoryPath
	intAControllerexecFindPathTo
	intAControllerexecFindPathToIntercept
	intAControllerexecFindPathToward
	intAControllerexecFindPathTowardNearest
	intAControllerexecFindRandomDest
	intAControllerexecFinishRotation
	intAControllerexecInLatentExecution
	intAControllerexecLineOfSightTo
	intAControllerexecMoveTo
	intAControllerexecMoveToward
	intAControllerexecPickAnyTarget
	intAControllerexecPickTarget
	intAControllerexecPickWallAdjust
	intAControllerexecpointReachable
	intAControllerexecPollFinishRotation
	intAControllerexecPollMoveTo
	intAControllerexecPollMoveToward
	intAControllerexecPollWaitForLanding
	intAControllerexecRemoveController
	intAControllerexecStopWaiting
	intAControllerexecWaitForLanding
	intAEmitterexecKill
	intAEmitterexecSetSizeScale
	intAFileLogexecCloseLog
	intAFileLogexecLogf
	intAFileLogexecOpenLog
	intAFluidSurfaceInfoexecPling
	intAGameInfoexecGetNetworkNumber
	intAGameInfoexecParseKillMessage
	intAGameStatsexecGetMapFileName
	intAGameStatsexecGetStatsIdentifier
	intAHUDexecDraw3DLine
	intAInspectorexecInspectorFunc001
	intAInspectorexecInspectorFunc002
	intAInspectorexecInspectorFunc003
	intAInspectorexecInspectorFunc004
	intAInspectorexecInspectorFunc005
	intAInspectorexecInspectorFunc006
	intAKConstraintexecKGetConstraintForce
	intAKConstraintexecKGetConstraintTorque
	intAKConstraintexecKUpdateConstraintParams
	intAKVehicleexecGraphData
	intALevelInfoexecDetailChange
	intALevelInfoexecGetAddressURL
	intALevelInfoexecGetLocalURL
	intALevelInfoexecIsDemoBuild
	intALevelInfoexecIsEntry
	intAMarkProjectorexecUpdateDesireLocation
	intAPawnexecAddHungerEffect
	intAPawnexecForceCrouch
	intAPawnexecGetAtkWaitAnimName
	intAPawnexecGetDeathWaitAnimName
	intAPawnexecGetDefenseItemSound
	intAPawnexecGetRefSkeletonNum
	intAPawnexecGetRunAnimName
	intAPawnexecGetShieldItemSound
	intAPawnexecGetSitWaitAnimName
	intAPawnexecGetSwimAttackWaitAnimName
	intAPawnexecGetSwimWaitAnimName
	intAPawnexecGetWaitAnimName
	intAPawnexecGetWalkAnimName
	intAPawnexecIsMeshLoaded
	intAPawnexecPlayAnimUM
	intAPawnexecReachedDestination
	intAPawnexecRemoveHungerEffect
	intAPawnexecSetRelativeCoords
	intAPawnexecSetWeaponHide
	intAPickupexecAddToNavigation
	intAPickupexecRemoveFromNavigation
	intAPlayerControllerexecChangeVoiceChatter
	intAPlayerControllerexecClientHearSound
	intAPlayerControllerexecClientTravel
	intAPlayerControllerexecClientValidate
	intAPlayerControllerexecConsoleCommand
	intAPlayerControllerexecCopyToClipboard
	intAPlayerControllerexecFindStairRotation
	intAPlayerControllerexecGetDefaultURL
	intAPlayerControllerexecGetEntryLevel
	intAPlayerControllerexecGetPlayerNetworkAddress
	intAPlayerControllerexecGetServerNetworkAddress
	intAPlayerControllerexecIsPawnViewMode
	intAPlayerControllerexecLeaveVoiceChat
	intAPlayerControllerexecPasteFromClipboard
	intAPlayerControllerexecResetKeyboard
	intAPlayerControllerexecServerValidationResponse
	intAPlayerControllerexecSetViewTarget
	intAPlayerControllerexecUpdateURL
	intAProjectorexecAbandonProjector
	intAProjectorexecAttachActor
	intAProjectorexecAttachProjector
	intAProjectorexecDetachActor
	intAProjectorexecDetachProjector
	intASceneManagerexecGetTotalSceneTime
	intASecurityexecNativePerform
	intAShadowProjectorexecCheckVisible
	intAShadowProjectorexecUpdateLightInfo
	intAShuttleDoorexecClose
	intAShuttleDoorexecOpen
	intAStatLogexecBatchLocal
	intAStatLogexecBrowseRelativeLocalURL
	intAStatLogexecExecuteLocalLogBatcher
	intAStatLogexecExecuteSilentLogBatcher
	intAStatLogexecExecuteWorldLogBatcher
	intAStatLogexecGetGMTRef
	intAStatLogexecGetMapFileName
	intAStatLogexecGetPlayerChecksum
	intAStatLogexecInitialCheck
	intAStatLogexecLogMutator
	intAStatLogFileexecCloseLog
	intAStatLogFileexecFileFlush
	intAStatLogFileexecFileLog
	intAStatLogFileexecGetChecksum
	intAStatLogFileexecOpenLog
	intAStatLogFileexecWatermark
	intAVolumeexecEncompasses
	intAWarpZoneInfoexecUnWarp
	intAWarpZoneInfoexecWarp
	intAZoneInfoexecZoneActors
	intUCanvasexecDrawActor
	intUCanvasexecDrawPortal
	intUCanvasexecDrawText
	intUCanvasexecDrawTextClipped
	intUCanvasexecDrawTextJustified
	intUCanvasexecDrawTile
	intUCanvasexecDrawTileClipped
	intUCanvasexecDrawTileJustified
	intUCanvasexecDrawTileScaled
	intUCanvasexecDrawTileStretched
	intUCanvasexecStrLen
	intUCanvasexecTextSize
	intUCanvasexecWrapStringToArray
	intUInteractionexecConsoleCommand
	intUInteractionexecInitialize
	intUInteractionexecScreenToWorld
	intUInteractionexecWorldToScreen
	intUInteractionMasterexecTravel
	intUParticleEmitterexecSpawnParticle
	intUParticleEmitterexecTrigger
	intUScriptedTextureexecDrawPortal
	intUScriptedTextureexecDrawText
	intUScriptedTextureexecDrawTile
	intUScriptedTextureexecSetSize
	intUScriptedTextureexecTextSize
	intUShadowBitmapMaterialexecDestroy
	intUTrailEmitterexecResetTrail
	private: static class BR_EventManager * TSingleton<class BR_EventManager>::m_pObject
	private: static class BR_GrpExchanger * TSingleton<class BR_GrpExchanger>::m_pObject
	private: static class CSceneManager * TSingleton<class CSceneManager>::m_pObject
	private: static class FAuxRenderTarget * FCanvasUtil::m_pCaptureRenderTarget
	private: static class FDepthOfField * TSingleton<class FDepthOfField>::m_pObject
	private: static class L224HzController * TSingleton<class L224HzController>::m_pObject
	private: static class L2EventManager * TSingleton<class L2EventManager>::m_pObject
	private: static class L2WeatherManager * TSingleton<class L2WeatherManager>::m_pObject
	private: static class ServerManager * TSingleton<class ServerManager>::m_pObject
	private: static class ServerTextureNameManager * TSingleton<class ServerTextureNameManager>::m_pObject
	private: static class UClass AActor::PrivateStaticClass
	private: static class UClass AAIController::PrivateStaticClass
	private: static class UClass AAIMarker::PrivateStaticClass
	private: static class UClass AAirEmitter::PrivateStaticClass
	private: static class UClass AAirShip::PrivateStaticClass
	private: static class UClass AAirVolume::PrivateStaticClass
	private: static class UClass AAIScript::PrivateStaticClass
	private: static class UClass AAmbientEventActor::PrivateStaticClass
	private: static class UClass AAmbientSound::PrivateStaticClass
	private: static class UClass AAmbientVolume::PrivateStaticClass
	private: static class UClass AAmmo::PrivateStaticClass
	private: static class UClass AAmmunition::PrivateStaticClass
	private: static class UClass AAntiPortalActor::PrivateStaticClass
	private: static class UClass AAutoDoor::PrivateStaticClass
	private: static class UClass AAutoLadder::PrivateStaticClass
	private: static class UClass AAvoidMarker::PrivateStaticClass
	private: static class UClass ABlockingVolume::PrivateStaticClass
	private: static class UClass ABrush::PrivateStaticClass
	private: static class UClass ACamera::PrivateStaticClass
	private: static class UClass ACameraControlPawn::PrivateStaticClass
	private: static class UClass ACameraEffectInfo::PrivateStaticClass
	private: static class UClass ACameraVolume::PrivateStaticClass
	private: static class UClass ACarriedObject::PrivateStaticClass
	private: static class UClass AClipMarker::PrivateStaticClass
	private: static class UClass AController::PrivateStaticClass
	private: static class UClass ACustomizableStaticMeshActor::PrivateStaticClass
	private: static class UClass ADamageType::PrivateStaticClass
	private: static class UClass ADecoration::PrivateStaticClass
	private: static class UClass ADecorationList::PrivateStaticClass
	private: static class UClass ADecoVolumeObject::PrivateStaticClass
	private: static class UClass ADefaultPhysicsVolume::PrivateStaticClass
	private: static class UClass ADoor::PrivateStaticClass
	private: static class UClass ADynamicLight::PrivateStaticClass
	private: static class UClass AEmitter::PrivateStaticClass
	private: static class UClass AEmitterLight::PrivateStaticClass
	private: static class UClass AEnvCreatureManagerInfo::PrivateStaticClass
	private: static class UClass AFileLog::PrivateStaticClass
	private: static class UClass AFluidSurfaceInfo::PrivateStaticClass
	private: static class UClass AFluidSurfaceOscillator::PrivateStaticClass
	private: static class UClass AGameInfo::PrivateStaticClass
	private: static class UClass AGameReplicationInfo::PrivateStaticClass
	private: static class UClass AGameStats::PrivateStaticClass
	private: static class UClass AHUD::PrivateStaticClass
	private: static class UClass AInfo::PrivateStaticClass
	private: static class UClass AInspector::PrivateStaticClass
	private: static class UClass AInternetInfo::PrivateStaticClass
	private: static class UClass AInterpolationPoint::PrivateStaticClass
	private: static class UClass AInventory::PrivateStaticClass
	private: static class UClass AInventoryAttachment::PrivateStaticClass
	private: static class UClass AInventorySpot::PrivateStaticClass
	private: static class UClass AJumpDest::PrivateStaticClass
	private: static class UClass AJumpPad::PrivateStaticClass
	private: static class UClass AKActor::PrivateStaticClass
	private: static class UClass AKBSJoint::PrivateStaticClass
	private: static class UClass AKCarWheelJoint::PrivateStaticClass
	private: static class UClass AKConeLimit::PrivateStaticClass
	private: static class UClass AKConstraint::PrivateStaticClass
	private: static class UClass AKeypoint::PrivateStaticClass
	private: static class UClass AKHinge::PrivateStaticClass
	private: static class UClass AKTire::PrivateStaticClass
	private: static class UClass AKVehicle::PrivateStaticClass
	private: static class UClass AL2Alarm::PrivateStaticClass
	private: static class UClass AL2CenterdDiamond::PrivateStaticClass
	private: static class UClass AL2Dice::PrivateStaticClass
	private: static class UClass AL2Float::PrivateStaticClass
	private: static class UClass AL2Indicator::PrivateStaticClass
	private: static class UClass AL2MovableStaticMeshActor::PrivateStaticClass
	private: static class UClass AL2NMover::PrivateStaticClass
	private: static class UClass AL2Pickup::PrivateStaticClass
	private: static class UClass AL2Radar::PrivateStaticClass
	private: static class UClass AL2SeamlessInfo::PrivateStaticClass
	private: static class UClass ALadder::PrivateStaticClass
	private: static class UClass ALadderVolume::PrivateStaticClass
	private: static class UClass ALevelInfo::PrivateStaticClass
	private: static class UClass ALiftCenter::PrivateStaticClass
	private: static class UClass ALiftExit::PrivateStaticClass
	private: static class UClass ALight::PrivateStaticClass
	private: static class UClass ALineagePlayerController::PrivateStaticClass
	private: static class UClass ALineOfSightTrigger::PrivateStaticClass
	private: static class UClass ALocationInfo::PrivateStaticClass
	private: static class UClass ALookTarget::PrivateStaticClass
	private: static class UClass AMarkProjector::PrivateStaticClass
	private: static class UClass AMatDemoActor::PrivateStaticClass
	private: static class UClass AMovableStaticMeshActor::PrivateStaticClass
	private: static class UClass AMover::PrivateStaticClass
	private: static class UClass AMusicVolume::PrivateStaticClass
	private: static class UClass AMutator::PrivateStaticClass
	private: static class UClass ANAgathion::PrivateStaticClass
	private: static class UClass ANavigationPoint::PrivateStaticClass
	private: static class UClass ANCubics::PrivateStaticClass
	private: static class UClass ANMoon::PrivateStaticClass
	private: static class UClass ANMovableSunLight::PrivateStaticClass
	private: static class UClass ANote::PrivateStaticClass
	private: static class UClass ANpcPosInfo::PrivateStaticClass
	private: static class UClass ANProjectile::PrivateStaticClass
	private: static class UClass ANSkillProjectile::PrivateStaticClass
	private: static class UClass ANSun::PrivateStaticClass
	private: static class UClass AParticleProjector::PrivateStaticClass
	private: static class UClass APathNode::PrivateStaticClass
	private: static class UClass APawn::PrivateStaticClass
	private: static class UClass APhysicsVolume::PrivateStaticClass
	private: static class UClass APickup::PrivateStaticClass
	private: static class UClass APlayerController::PrivateStaticClass
	private: static class UClass APlayerReplicationInfo::PrivateStaticClass
	private: static class UClass APlayerStart::PrivateStaticClass
	private: static class UClass APolyMarker::PrivateStaticClass
	private: static class UClass APotentialClimbWatcher::PrivateStaticClass
	private: static class UClass APowerups::PrivateStaticClass
	private: static class UClass AProjectedEmitter::PrivateStaticClass
	private: static class UClass AProjectile::PrivateStaticClass
	private: static class UClass AProjector::PrivateStaticClass
	private: static class UClass AReplicationInfo::PrivateStaticClass
	private: static class UClass ASavedMove::PrivateStaticClass
	private: static class UClass ASceneManager::PrivateStaticClass
	private: static class UClass AScout::PrivateStaticClass
	private: static class UClass ASecurity::PrivateStaticClass
	private: static class UClass AServerBlockingVolume::PrivateStaticClass
	private: static class UClass AServerPrimitive::PrivateStaticClass
	private: static class UClass AShadowProjector::PrivateStaticClass
	private: static class UClass AShuttle::PrivateStaticClass
	private: static class UClass AShuttleDoor::PrivateStaticClass
	private: static class UClass AShuttleWall::PrivateStaticClass
	private: static class UClass ASkyMeshActor::PrivateStaticClass
	private: static class UClass ASkyRenderInfo::PrivateStaticClass
	private: static class UClass ASkyZoneInfo::PrivateStaticClass
	private: static class UClass ASmallNavigationPoint::PrivateStaticClass
	private: static class UClass ASpawnableStaticMeshActor::PrivateStaticClass
	private: static class UClass ASpawnedLight::PrivateStaticClass
	private: static class UClass AStaticMeshActor::PrivateStaticClass
	private: static class UClass AStationaryWeapons::PrivateStaticClass
	private: static class UClass AStatLog::PrivateStaticClass
	private: static class UClass AStatLogFile::PrivateStaticClass
	private: static class UClass ASuperPointInfo::PrivateStaticClass
	private: static class UClass ATeamInfo::PrivateStaticClass
	private: static class UClass ATeleporter::PrivateStaticClass
	private: static class UClass ATerrainInfo::PrivateStaticClass
	private: static class UClass ATerritoryInfo::PrivateStaticClass
	private: static class UClass ATrigger::PrivateStaticClass
	private: static class UClass ATriggers::PrivateStaticClass
	private: static class UClass AVehicle::PrivateStaticClass
	private: static class UClass AVehicleMeshPart::PrivateStaticClass
	private: static class UClass AVehiclePart::PrivateStaticClass
	private: static class UClass AVehicleRoutePoint::PrivateStaticClass
	private: static class UClass AVehicleServerPart::PrivateStaticClass
	private: static class UClass AViewportWindowController::PrivateStaticClass
	private: static class UClass AVolume::PrivateStaticClass
	private: static class UClass AWarpZoneInfo::PrivateStaticClass
	private: static class UClass AWarpZoneMarker::PrivateStaticClass
	private: static class UClass AWaterHitEmitter::PrivateStaticClass
	private: static class UClass AWeapon::PrivateStaticClass
	private: static class UClass AWeaponAttachment::PrivateStaticClass
	private: static class UClass AZoneInfo::PrivateStaticClass
	private: static class UClass UActionMoveCamera::PrivateStaticClass
	private: static class UClass UActionPause::PrivateStaticClass
	private: static class UClass UActionWarp::PrivateStaticClass
	private: static class UClass UAmbientSoundObject::PrivateStaticClass
	private: static class UClass UAmbientVolumeSound::PrivateStaticClass
	private: static class UClass UAnimNotify::PrivateStaticClass
	private: static class UClass UAnimNotify_AttackDamage::PrivateStaticClass
	private: static class UClass UAnimNotify_AttackItem::PrivateStaticClass
	private: static class UClass UAnimNotify_AttackPreShot::PrivateStaticClass
	private: static class UClass UAnimNotify_AttackShot::PrivateStaticClass
	private: static class UClass UAnimNotify_AttackVoice::PrivateStaticClass
	private: static class UClass UAnimNotify_BoneScale::PrivateStaticClass
	private: static class UClass UAnimNotify_CameraLocation::PrivateStaticClass
	private: static class UClass UAnimNotify_Channeling::PrivateStaticClass
	private: static class UClass UAnimNotify_DestroyEffect::PrivateStaticClass
	private: static class UClass UAnimNotify_Effect::PrivateStaticClass
	private: static class UClass UAnimNotify_IdleSound::PrivateStaticClass
	private: static class UClass UAnimNotify_Illusion::PrivateStaticClass
	private: static class UClass UAnimNotify_JumpDown::PrivateStaticClass
	private: static class UClass UAnimNotify_JumpUp::PrivateStaticClass
	private: static class UClass UAnimNotify_LaunchAccumulativeBeam::PrivateStaticClass
	private: static class UClass UAnimNotify_Light::PrivateStaticClass
	private: static class UClass UAnimNotify_MatSubAction::PrivateStaticClass
	private: static class UClass UAnimNotify_PostEffect::PrivateStaticClass
	private: static class UClass UAnimNotify_RandomSound::PrivateStaticClass
	private: static class UClass UAnimNotify_ScreenFade::PrivateStaticClass
	private: static class UClass UAnimNotify_Script::PrivateStaticClass
	private: static class UClass UAnimNotify_Scripted::PrivateStaticClass
	private: static class UClass UAnimNotify_SendCommandLine::PrivateStaticClass
	private: static class UClass UAnimNotify_Sheathe::PrivateStaticClass
	private: static class UClass UAnimNotify_Sound::PrivateStaticClass
	private: static class UClass UAnimNotify_SwimSound::PrivateStaticClass
	private: static class UClass UAnimNotify_ViewShake::PrivateStaticClass
	private: static class UClass UAudioSubsystem::PrivateStaticClass
	private: static class UClass UBaseGUIController::PrivateStaticClass
	private: static class UClass UBeamEmitter::PrivateStaticClass
	private: static class UClass UBitmapMaterial::PrivateStaticClass
	private: static class UClass UBumpShader::PrivateStaticClass
	private: static class UClass UCanvas::PrivateStaticClass
	private: static class UClass UCheatManager::PrivateStaticClass
	private: static class UClass UClient::PrivateStaticClass
	private: static class UClass UColorMask::PrivateStaticClass
	private: static class UClass UColorModifier::PrivateStaticClass
	private: static class UClass UColorVariationMaterial::PrivateStaticClass
	private: static class UClass UColorWheel::PrivateStaticClass
	private: static class UClass UCombiner::PrivateStaticClass
	private: static class UClass UComplementModifier::PrivateStaticClass
	private: static class UClass UConsole::PrivateStaticClass
	private: static class UClass UConstantColor::PrivateStaticClass
	private: static class UClass UConstantMaterial::PrivateStaticClass
	private: static class UClass UConvexVolume::PrivateStaticClass
	private: static class UClass UCubemap::PrivateStaticClass
	private: static class UClass UCustomMakedMaterial::PrivateStaticClass
	private: static class UClass UDamageTextManager::PrivateStaticClass
	private: static class UClass UDownload::PrivateStaticClass
	private: static class UClass UEngine::PrivateStaticClass
	private: static class UClass UExtraMeshData::PrivateStaticClass
	private: static class UClass UFadeColor::PrivateStaticClass
	private: static class UClass UFinalBlend::PrivateStaticClass
	private: static class UClass UFlashSubsystem::PrivateStaticClass
	private: static class UClass UFont::PrivateStaticClass
	private: static class UClass UFontManager::PrivateStaticClass
	private: static class UClass UGameEngine::PrivateStaticClass
	private: static class UClass UGFxFlash::PrivateStaticClass
	private: static class UClass UGlowModifier::PrivateStaticClass
	private: static class UClass UI3DL2Listener::PrivateStaticClass
	private: static class UClass UIndexBuffer::PrivateStaticClass
	private: static class UClass UInput::PrivateStaticClass
	private: static class UClass UInteraction::PrivateStaticClass
	private: static class UClass UInteractionMaster::PrivateStaticClass
	private: static class UClass UInteractions::PrivateStaticClass
	private: static class UClass UKarmaParams::PrivateStaticClass
	private: static class UClass UKarmaParamsCollision::PrivateStaticClass
	private: static class UClass UKarmaParamsRBFull::PrivateStaticClass
	private: static class UClass UKarmaParamsSkel::PrivateStaticClass
	private: static class UClass UKMeshProps::PrivateStaticClass
	private: static class UClass UL2ColorModifier::PrivateStaticClass
	private: static class UClass UL2ConsoleWnd::PrivateStaticClass
	private: static class UClass UL2EffectEmitter::PrivateStaticClass
	private: static class UClass UL2Font::PrivateStaticClass
	private: static class UClass UL2NEnvLight::PrivateStaticClass
	private: static class UClass UL2NEnvManager::PrivateStaticClass
	private: static class UClass UL2NTimeLight::PrivateStaticClass
	private: static class UClass UL2SceneInfo::PrivateStaticClass
	private: static class UClass UL2SceneItem::PrivateStaticClass
	private: static class UClass UL2SkillEffect::PrivateStaticClass
	private: static class UClass ULevel::PrivateStaticClass
	private: static class UClass ULevelObject::PrivateStaticClass
	private: static class UClass ULevelSummary::PrivateStaticClass
	private: static class UClass ULodMesh::PrivateStaticClass
	private: static class UClass ULodMeshInstance::PrivateStaticClass
	private: static class UClass UMaskTexture::PrivateStaticClass
	private: static class UClass UMasterLevel::PrivateStaticClass
	private: static class UClass UMatAction::PrivateStaticClass
	private: static class UClass UMaterial::PrivateStaticClass
	private: static class UClass UMaterialSequence::PrivateStaticClass
	private: static class UClass UMaterialSwitch::PrivateStaticClass
	private: static class UClass UMatObject::PrivateStaticClass
	private: static class UClass UMatSubAction::PrivateStaticClass
	private: static class UClass UMesh::PrivateStaticClass
	private: static class UClass UMeshAnimation::PrivateStaticClass
	private: static class UClass UMeshComponent::PrivateStaticClass
	private: static class UClass UMeshContainer::PrivateStaticClass
	private: static class UClass UMeshEmitter::PrivateStaticClass
	private: static class UClass UMeshInstance::PrivateStaticClass
	private: static class UClass UMeshObject::PrivateStaticClass
	private: static class UClass UModel::PrivateStaticClass
	private: static class UClass UModifier::PrivateStaticClass
	private: static class UClass UNetConnection::PrivateStaticClass
	private: static class UClass UNetDriver::PrivateStaticClass
	private: static class UClass UNetworkHandler::PrivateStaticClass
	private: static class UClass UOpacityModifier::PrivateStaticClass
	private: static class UClass UPalette::PrivateStaticClass
	private: static class UClass UParticleEmitter::PrivateStaticClass
	private: static class UClass UParticleMaterial::PrivateStaticClass
	private: static class UClass UPawnAliasMgr::PrivateStaticClass
	private: static class UClass UPawnSheathingMgr::PrivateStaticClass
	private: static class UClass UPlayer::PrivateStaticClass
	private: static class UClass UPlayerInput::PrivateStaticClass
	private: static class UClass UPolys::PrivateStaticClass
	private: static class UClass UPrimitive::PrivateStaticClass
	private: static class UClass UProjectorMaterial::PrivateStaticClass
	private: static class UClass UProxyBitmapMaterial::PrivateStaticClass
	private: static class UClass UReachSpec::PrivateStaticClass
	private: static class UClass URealtimeGenerationTexture::PrivateStaticClass
	private: static class UClass URenderDevice::PrivateStaticClass
	private: static class UClass URenderedMaterial::PrivateStaticClass
	private: static class UClass URibbonEmitter::PrivateStaticClass
	private: static class UClass UScriptedTexture::PrivateStaticClass
	private: static class UClass UShader::PrivateStaticClass
	private: static class UClass UShadowBitmapMaterial::PrivateStaticClass
	private: static class UClass USimulationCollision::PrivateStaticClass
	private: static class UClass USimulationCylinderCollision::PrivateStaticClass
	private: static class UClass USimulationData::PrivateStaticClass
	private: static class UClass USimulationMesh::PrivateStaticClass
	private: static class UClass USimulationMeshInstance::PrivateStaticClass
	private: static class UClass USimulationNotify::PrivateStaticClass
	private: static class UClass USimulationSphereCollision::PrivateStaticClass
	private: static class UClass USimulationSpringConstraint::PrivateStaticClass
	private: static class UClass USkeletalMesh::PrivateStaticClass
	private: static class UClass USkeletalMeshInstance::PrivateStaticClass
	private: static class UClass USound::PrivateStaticClass
	private: static class UClass USparkEmitter::PrivateStaticClass
	private: static class UClass USpriteEmitter::PrivateStaticClass
	private: static class UClass UStaticMesh::PrivateStaticClass
	private: static class UClass USubActionCameraShake::PrivateStaticClass
	private: static class UClass USubActionFade::PrivateStaticClass
	private: static class UClass USubActionFOV::PrivateStaticClass
	private: static class UClass USubActionGameSpeed::PrivateStaticClass
	private: static class UClass USubActionOrientation::PrivateStaticClass
	private: static class UClass USubActionSceneSpeed::PrivateStaticClass
	private: static class UClass USubActionTrigger::PrivateStaticClass
	private: static class UClass UTerrainMaterial::PrivateStaticClass
	private: static class UClass UTerrainSector::PrivateStaticClass
	private: static class UClass UTexCoordSource::PrivateStaticClass
	private: static class UClass UTexEnvMap::PrivateStaticClass
	private: static class UClass UTexMatrix::PrivateStaticClass
	private: static class UClass UTexModifier::PrivateStaticClass
	private: static class UClass UTexOscillator::PrivateStaticClass
	private: static class UClass UTexOscillatorTriggered::PrivateStaticClass
	private: static class UClass UTexPanner::PrivateStaticClass
	private: static class UClass UTexPannerTriggered::PrivateStaticClass
	private: static class UClass UTexRotator::PrivateStaticClass
	private: static class UClass UTexScaler::PrivateStaticClass
	private: static class UClass UTexture::PrivateStaticClass
	private: static class UClass UTrailEmitter::PrivateStaticClass
	private: static class UClass UUnderWaterShader::PrivateStaticClass
	private: static class UClass UUserDefinableMaterial::PrivateStaticClass
	private: static class UClass UVertexBuffer::PrivateStaticClass
	private: static class UClass UVertexColor::PrivateStaticClass
	private: static class UClass UVertMesh::PrivateStaticClass
	private: static class UClass UVertMeshEmitter::PrivateStaticClass
	private: static class UClass UVertMeshInstance::PrivateStaticClass
	private: static class UClass UViewport::PrivateStaticClass
	private: static class UClass UWaterMaterial::PrivateStaticClass
	private: static class UDecoration * TSingleton<class UDecoration>::m_pObject
	private: static class UDepthEffect * TSingleton<class UDepthEffect>::m_pObject
	private: static class UEditorColorEffect * TSingleton<class UEditorColorEffect>::m_pObject
	private: static class UPostEffEnvManager * TSingleton<class UPostEffEnvManager>::m_pObject
	private: static class USSAOEffect * TSingleton<class USSAOEffect>::m_pObject
	private: static float const ALineagePlayerController::m_SmoothMovementThresholdMax
	private: static float const ALineagePlayerController::m_SmoothMovementThresholdMin
	private: static int const FWorldBuilder::nBottomLimit
	private: static int const UFontManager::s_defaultLineGap
	private: static int const UFontManager::s_defaultUnderlineOffset
	private: static unsigned int const FONTID::s_Invalid
	private: static unsigned int UFontManager::s_fontIDIndex
	private: static void __cdecl TSingleton<class BR_EventManager>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class BR_GrpExchanger>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class CSceneManager>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class FDepthOfField>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class L224HzController>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class L2EventManager>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class L2WeatherManager>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class ServerManager>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class ServerTextureNameManager>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class UDecoration>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class UDepthEffect>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class UEditorColorEffect>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class UPostEffEnvManager>::CreateSingleton(void)
	private: static void __cdecl TSingleton<class USSAOEffect>::CreateSingleton(void)
	protected: __thiscall TSingleton<class BR_EventManager>::TSingleton<class BR_EventManager>(void)
	protected: __thiscall TSingleton<class BR_GrpExchanger>::TSingleton<class BR_GrpExchanger>(void)
	protected: __thiscall TSingleton<class CSceneManager>::TSingleton<class CSceneManager>(void)
	protected: __thiscall TSingleton<class FDepthOfField>::TSingleton<class FDepthOfField>(void)
	protected: __thiscall TSingleton<class L224HzController>::TSingleton<class L224HzController>(void)
	protected: __thiscall TSingleton<class L2EventManager>::TSingleton<class L2EventManager>(void)
	protected: __thiscall TSingleton<class L2WeatherManager>::TSingleton<class L2WeatherManager>(void)
	protected: __thiscall TSingleton<class ServerManager>::TSingleton<class ServerManager>(void)
	protected: __thiscall TSingleton<class ServerTextureNameManager>::TSingleton<class ServerTextureNameManager>(void)
	protected: __thiscall TSingleton<class UDecoration>::TSingleton<class UDecoration>(void)
	protected: __thiscall TSingleton<class UDepthEffect>::TSingleton<class UDepthEffect>(void)
	protected: __thiscall TSingleton<class UEditorColorEffect>::TSingleton<class UEditorColorEffect>(void)
	protected: __thiscall TSingleton<class UPostEffEnvManager>::TSingleton<class UPostEffEnvManager>(void)
	protected: __thiscall TSingleton<class USSAOEffect>::TSingleton<class USSAOEffect>(void)
	protected: virtual __thiscall TSingleton<class BR_EventManager>::~TSingleton<class BR_EventManager>(void)
	protected: virtual __thiscall TSingleton<class BR_GrpExchanger>::~TSingleton<class BR_GrpExchanger>(void)
	protected: virtual __thiscall TSingleton<class CSceneManager>::~TSingleton<class CSceneManager>(void)
	protected: virtual __thiscall TSingleton<class FDepthOfField>::~TSingleton<class FDepthOfField>(void)
	protected: virtual __thiscall TSingleton<class L224HzController>::~TSingleton<class L224HzController>(void)
	protected: virtual __thiscall TSingleton<class L2EventManager>::~TSingleton<class L2EventManager>(void)
	protected: virtual __thiscall TSingleton<class L2WeatherManager>::~TSingleton<class L2WeatherManager>(void)
	protected: virtual __thiscall TSingleton<class ServerManager>::~TSingleton<class ServerManager>(void)
	protected: virtual __thiscall TSingleton<class ServerTextureNameManager>::~TSingleton<class ServerTextureNameManager>(void)
	protected: virtual __thiscall TSingleton<class UDecoration>::~TSingleton<class UDecoration>(void)
	protected: virtual __thiscall TSingleton<class UDepthEffect>::~TSingleton<class UDepthEffect>(void)
	protected: virtual __thiscall TSingleton<class UEditorColorEffect>::~TSingleton<class UEditorColorEffect>(void)
	protected: virtual __thiscall TSingleton<class UPostEffEnvManager>::~TSingleton<class UPostEffEnvManager>(void)
	protected: virtual __thiscall TSingleton<class USSAOEffect>::~TSingleton<class USSAOEffect>(void)
	protected: virtual float __thiscall UL2NTimeLight::GetBrightness(class TArray<struct FNTimeHSV> &,float)
	protected: virtual void __thiscall UL2NTimeLight::GetBaseColorPlane(class TArray<struct FNTimeHSV> &,float,class FPlane &)
	protected: virtual void __thiscall UL2NTimeLight::GetColor(class TArray<struct FNTimeColor> &,float,unsigned char &,unsigned char &,unsigned char &)
	protected: virtual void __thiscall UL2NTimeLight::GetColor(class TArray<struct FNTimeColor> &,int,int,float,unsigned char &,unsigned char &,unsigned char &)
	protected: virtual void __thiscall UL2NTimeLight::GetColorPlane(class TArray<struct FNTimeHSV> &,float,class FPlane &)
	protected: virtual void __thiscall UL2NTimeLight::GetScale(class TArray<struct FNTimeScale> &,float,float &)
	protected: virtual void __thiscall UL2NTimeLight::LoadColor(class TArray<struct FNTimeColor> &,wchar_t const *,wchar_t const *)
	protected: virtual void __thiscall UL2NTimeLight::LoadColors(class TArray<int> &,class TArray<struct FNTimeColor> &,wchar_t const *,wchar_t const *)
	protected: virtual void __thiscall UL2NTimeLight::LoadHSV(class TArray<struct FNTimeHSV> &,wchar_t const *,wchar_t const *)
	protected: virtual void __thiscall UL2NTimeLight::LoadScale(class TArray<struct FNTimeScale> &,wchar_t const *,wchar_t const *)
	public: __thiscall FONTID::operator unsigned long(void)const 
	public: __thiscall TArray<unsigned char>::TArray<unsigned char>(class TArray<unsigned char> const &)
	public: __thiscall TArray<unsigned char>::TArray<unsigned char>(enum ENoInit)
	public: __thiscall TArray<unsigned char>::TArray<unsigned char>(int)
	public: __thiscall TArray<unsigned char>::TArray<unsigned char>(void)
	public: __thiscall TArray<unsigned char>::~TArray<unsigned char>(void)
	public: __thiscall TLazyArray<unsigned char>::TLazyArray<unsigned char>(class TLazyArray<unsigned char> const &)
	public: __thiscall TLazyArray<unsigned char>::TLazyArray<unsigned char>(int)
	public: __thiscall TLazyArray<unsigned char>::~TLazyArray<unsigned char>(void)
	public: __thiscall TSingleton<class BR_EventManager>::TSingleton<class BR_EventManager>(class TSingleton<class BR_EventManager> const &)
	public: __thiscall TSingleton<class BR_GrpExchanger>::TSingleton<class BR_GrpExchanger>(class TSingleton<class BR_GrpExchanger> const &)
	public: __thiscall TSingleton<class CSceneManager>::TSingleton<class CSceneManager>(class TSingleton<class CSceneManager> const &)
	public: __thiscall TSingleton<class FDepthOfField>::TSingleton<class FDepthOfField>(class TSingleton<class FDepthOfField> const &)
	public: __thiscall TSingleton<class L224HzController>::TSingleton<class L224HzController>(class TSingleton<class L224HzController> const &)
	public: __thiscall TSingleton<class L2EventManager>::TSingleton<class L2EventManager>(class TSingleton<class L2EventManager> const &)
	public: __thiscall TSingleton<class L2WeatherManager>::TSingleton<class L2WeatherManager>(class TSingleton<class L2WeatherManager> const &)
	public: __thiscall TSingleton<class ServerManager>::TSingleton<class ServerManager>(class TSingleton<class ServerManager> const &)
	public: __thiscall TSingleton<class ServerTextureNameManager>::TSingleton<class ServerTextureNameManager>(class TSingleton<class ServerTextureNameManager> const &)
	public: __thiscall TSingleton<class UDecoration>::TSingleton<class UDecoration>(class TSingleton<class UDecoration> const &)
	public: __thiscall TSingleton<class UDepthEffect>::TSingleton<class UDepthEffect>(class TSingleton<class UDepthEffect> const &)
	public: __thiscall TSingleton<class UEditorColorEffect>::TSingleton<class UEditorColorEffect>(class TSingleton<class UEditorColorEffect> const &)
	public: __thiscall TSingleton<class UPostEffEnvManager>::TSingleton<class UPostEffEnvManager>(class TSingleton<class UPostEffEnvManager> const &)
	public: __thiscall TSingleton<class USSAOEffect>::TSingleton<class USSAOEffect>(class TSingleton<class USSAOEffect> const &)
	public: bool __thiscall FL2GameData::GetSetItemID(int,int,int,class TArray<int> &)
	public: bool __thiscall FONTID::operator==(class FONTID const &)
	public: class AActor & __thiscall AActor::operator=(class AActor const &)
	public: class AAIController & __thiscall AAIController::operator=(class AAIController const &)
	public: class AAIMarker & __thiscall AAIMarker::operator=(class AAIMarker const &)
	public: class AAirEmitter & __thiscall AAirEmitter::operator=(class AAirEmitter const &)
	public: class AAirShip & __thiscall AAirShip::operator=(class AAirShip &)
	public: class AAirVolume & __thiscall AAirVolume::operator=(class AAirVolume const &)
	public: class AAIScript & __thiscall AAIScript::operator=(class AAIScript const &)
	public: class AAmbientEventActor & __thiscall AAmbientEventActor::operator=(class AAmbientEventActor const &)
	public: class AAmbientSound & __thiscall AAmbientSound::operator=(class AAmbientSound const &)
	public: class AAmbientVolume & __thiscall AAmbientVolume::operator=(class AAmbientVolume const &)
	public: class AAmmo & __thiscall AAmmo::operator=(class AAmmo const &)
	public: class AAmmunition & __thiscall AAmmunition::operator=(class AAmmunition const &)
	public: class AAntiPortalActor & __thiscall AAntiPortalActor::operator=(class AAntiPortalActor const &)
	public: class AAutoDoor & __thiscall AAutoDoor::operator=(class AAutoDoor const &)
	public: class AAutoLadder & __thiscall AAutoLadder::operator=(class AAutoLadder const &)
	public: class AAvoidMarker & __thiscall AAvoidMarker::operator=(class AAvoidMarker const &)
	public: class ABlockingVolume & __thiscall ABlockingVolume::operator=(class ABlockingVolume const &)
	public: class ABrush & __thiscall ABrush::operator=(class ABrush const &)
	public: class ACamera & __thiscall ACamera::operator=(class ACamera const &)
	public: class ACameraControlPawn & __thiscall ACameraControlPawn::operator=(class ACameraControlPawn &)
	public: class ACameraEffectInfo & __thiscall ACameraEffectInfo::operator=(class ACameraEffectInfo const &)
	public: class ACameraVolume & __thiscall ACameraVolume::operator=(class ACameraVolume const &)
	public: class ACarriedObject & __thiscall ACarriedObject::operator=(class ACarriedObject const &)
	public: class AClipMarker & __thiscall AClipMarker::operator=(class AClipMarker const &)
	public: class AController & __thiscall AController::operator=(class AController const &)
	public: class ActorFunc & __thiscall ActorFunc::operator=(class ActorFunc const &)
	public: class ACustomizableStaticMeshActor & __thiscall ACustomizableStaticMeshActor::operator=(class ACustomizableStaticMeshActor const &)
	public: class ADamageType & __thiscall ADamageType::operator=(class ADamageType const &)
	public: class ADecoration & __thiscall ADecoration::operator=(class ADecoration const &)
	public: class ADecorationList & __thiscall ADecorationList::operator=(class ADecorationList const &)
	public: class ADecoVolumeObject & __thiscall ADecoVolumeObject::operator=(class ADecoVolumeObject const &)
	public: class ADefaultPhysicsVolume & __thiscall ADefaultPhysicsVolume::operator=(class ADefaultPhysicsVolume const &)
	public: class ADoor & __thiscall ADoor::operator=(class ADoor const &)
	public: class ADynamicLight & __thiscall ADynamicLight::operator=(class ADynamicLight const &)
	public: class AEmitter & __thiscall AEmitter::operator=(class AEmitter const &)
	public: class AEmitterLight & __thiscall AEmitterLight::operator=(class AEmitterLight const &)
	public: class AEnvCreatureManagerInfo & __thiscall AEnvCreatureManagerInfo::operator=(class AEnvCreatureManagerInfo const &)
	public: class AFileLog & __thiscall AFileLog::operator=(class AFileLog const &)
	public: class AFluidSurfaceInfo & __thiscall AFluidSurfaceInfo::operator=(class AFluidSurfaceInfo const &)
	public: class AFluidSurfaceOscillator & __thiscall AFluidSurfaceOscillator::operator=(class AFluidSurfaceOscillator const &)
	public: class AGameInfo & __thiscall AGameInfo::operator=(class AGameInfo const &)
	public: class AGameReplicationInfo & __thiscall AGameReplicationInfo::operator=(class AGameReplicationInfo const &)
	public: class AGameStats & __thiscall AGameStats::operator=(class AGameStats const &)
	public: class AHUD & __thiscall AHUD::operator=(class AHUD const &)
	public: class AInfo & __thiscall AInfo::operator=(class AInfo const &)
	public: class AInspector & __thiscall AInspector::operator=(class AInspector const &)
	public: class AInternetInfo & __thiscall AInternetInfo::operator=(class AInternetInfo const &)
	public: class AInterpolationPoint & __thiscall AInterpolationPoint::operator=(class AInterpolationPoint const &)
	public: class AInventory & __thiscall AInventory::operator=(class AInventory const &)
	public: class AInventoryAttachment & __thiscall AInventoryAttachment::operator=(class AInventoryAttachment const &)
	public: class AInventorySpot & __thiscall AInventorySpot::operator=(class AInventorySpot const &)
	public: class AJumpDest & __thiscall AJumpDest::operator=(class AJumpDest const &)
	public: class AJumpPad & __thiscall AJumpPad::operator=(class AJumpPad const &)
	public: class AKActor & __thiscall AKActor::operator=(class AKActor const &)
	public: class AKBSJoint & __thiscall AKBSJoint::operator=(class AKBSJoint const &)
	public: class AKCarWheelJoint & __thiscall AKCarWheelJoint::operator=(class AKCarWheelJoint const &)
	public: class AKConeLimit & __thiscall AKConeLimit::operator=(class AKConeLimit const &)
	public: class AKConstraint & __thiscall AKConstraint::operator=(class AKConstraint const &)
	public: class AKeypoint & __thiscall AKeypoint::operator=(class AKeypoint const &)
	public: class AKHinge & __thiscall AKHinge::operator=(class AKHinge const &)
	public: class AKTire & __thiscall AKTire::operator=(class AKTire const &)
	public: class AKVehicle & __thiscall AKVehicle::operator=(class AKVehicle &)
	public: class AL2Alarm & __thiscall AL2Alarm::operator=(class AL2Alarm const &)
	public: class AL2CenterdDiamond & __thiscall AL2CenterdDiamond::operator=(class AL2CenterdDiamond const &)
	public: class AL2Dice & __thiscall AL2Dice::operator=(class AL2Dice const &)
	public: class AL2Float & __thiscall AL2Float::operator=(class AL2Float const &)
	public: class AL2Indicator & __thiscall AL2Indicator::operator=(class AL2Indicator const &)
	public: class AL2MovableStaticMeshActor & __thiscall AL2MovableStaticMeshActor::operator=(class AL2MovableStaticMeshActor const &)
	public: class AL2NMover & __thiscall AL2NMover::operator=(class AL2NMover const &)
	public: class AL2Pickup & __thiscall AL2Pickup::operator=(class AL2Pickup const &)
	public: class AL2Radar & __thiscall AL2Radar::operator=(class AL2Radar const &)
	public: class AL2SeamlessInfo & __thiscall AL2SeamlessInfo::operator=(class AL2SeamlessInfo const &)
	public: class ALadder & __thiscall ALadder::operator=(class ALadder const &)
	public: class ALadderVolume & __thiscall ALadderVolume::operator=(class ALadderVolume const &)
	public: class ALevelInfo & __thiscall ALevelInfo::operator=(class ALevelInfo const &)
	public: class ALiftCenter & __thiscall ALiftCenter::operator=(class ALiftCenter const &)
	public: class ALiftExit & __thiscall ALiftExit::operator=(class ALiftExit const &)
	public: class ALight & __thiscall ALight::operator=(class ALight const &)
	public: class ALineagePlayerController & __thiscall ALineagePlayerController::operator=(class ALineagePlayerController const &)
	public: class ALineOfSightTrigger & __thiscall ALineOfSightTrigger::operator=(class ALineOfSightTrigger const &)
	public: class ALocationInfo & __thiscall ALocationInfo::operator=(class ALocationInfo const &)
	public: class ALookTarget & __thiscall ALookTarget::operator=(class ALookTarget const &)
	public: class AMarkProjector & __thiscall AMarkProjector::operator=(class AMarkProjector const &)
	public: class AMatDemoActor & __thiscall AMatDemoActor::operator=(class AMatDemoActor const &)
	public: class AMovableStaticMeshActor & __thiscall AMovableStaticMeshActor::operator=(class AMovableStaticMeshActor const &)
	public: class AMover & __thiscall AMover::operator=(class AMover const &)
	public: class AMusicVolume & __thiscall AMusicVolume::operator=(class AMusicVolume const &)
	public: class AMutator & __thiscall AMutator::operator=(class AMutator const &)
	public: class ANAgathion & __thiscall ANAgathion::operator=(class ANAgathion &)
	public: class ANavigationPoint & __thiscall ANavigationPoint::operator=(class ANavigationPoint const &)
	public: class ANCubics & __thiscall ANCubics::operator=(class ANCubics &)
	public: class ANMoon & __thiscall ANMoon::operator=(class ANMoon const &)
	public: class ANMovableSunLight & __thiscall ANMovableSunLight::operator=(class ANMovableSunLight const &)
	public: class ANote & __thiscall ANote::operator=(class ANote const &)
	public: class ANpcPosInfo & __thiscall ANpcPosInfo::operator=(class ANpcPosInfo const &)
	public: class ANProjectile & __thiscall ANProjectile::operator=(class ANProjectile &)
	public: class ANSkillProjectile & __thiscall ANSkillProjectile::operator=(class ANSkillProjectile &)
	public: class ANSun & __thiscall ANSun::operator=(class ANSun const &)
	public: class AParticleProjector & __thiscall AParticleProjector::operator=(class AParticleProjector const &)
	public: class APathNode & __thiscall APathNode::operator=(class APathNode const &)
	public: class APawn & __thiscall APawn::operator=(class APawn &)
	public: class APhysicsVolume & __thiscall APhysicsVolume::operator=(class APhysicsVolume const &)
	public: class APickup & __thiscall APickup::operator=(class APickup const &)
	public: class APlayerController & __thiscall APlayerController::operator=(class APlayerController const &)
	public: class APlayerReplicationInfo & __thiscall APlayerReplicationInfo::operator=(class APlayerReplicationInfo const &)
	public: class APlayerStart & __thiscall APlayerStart::operator=(class APlayerStart const &)
	public: class APolyMarker & __thiscall APolyMarker::operator=(class APolyMarker const &)
	public: class APotentialClimbWatcher & __thiscall APotentialClimbWatcher::operator=(class APotentialClimbWatcher const &)
	public: class APowerups & __thiscall APowerups::operator=(class APowerups const &)
	public: class AProjectedEmitter & __thiscall AProjectedEmitter::operator=(class AProjectedEmitter const &)
	public: class AProjectile & __thiscall AProjectile::operator=(class AProjectile const &)
	public: class AProjector & __thiscall AProjector::operator=(class AProjector const &)
	public: class AReplicationInfo & __thiscall AReplicationInfo::operator=(class AReplicationInfo const &)
	public: class ASavedMove & __thiscall ASavedMove::operator=(class ASavedMove const &)
	public: class ASceneManager & __thiscall ASceneManager::operator=(class ASceneManager const &)
	public: class AScout & __thiscall AScout::operator=(class AScout &)
	public: class ASecurity & __thiscall ASecurity::operator=(class ASecurity const &)
	public: class AServerBlockingVolume & __thiscall AServerBlockingVolume::operator=(class AServerBlockingVolume const &)
	public: class AServerPrimitive & __thiscall AServerPrimitive::operator=(class AServerPrimitive const &)
	public: class AShadowProjector & __thiscall AShadowProjector::operator=(class AShadowProjector const &)
	public: class AShuttle & __thiscall AShuttle::operator=(class AShuttle &)
	public: class AShuttleDoor & __thiscall AShuttleDoor::operator=(class AShuttleDoor &)
	public: class AShuttleWall & __thiscall AShuttleWall::operator=(class AShuttleWall const &)
	public: class ASkyMeshActor & __thiscall ASkyMeshActor::operator=(class ASkyMeshActor const &)
	public: class ASkyRenderInfo & __thiscall ASkyRenderInfo::operator=(class ASkyRenderInfo const &)
	public: class ASkyZoneInfo & __thiscall ASkyZoneInfo::operator=(class ASkyZoneInfo const &)
	public: class ASmallNavigationPoint & __thiscall ASmallNavigationPoint::operator=(class ASmallNavigationPoint const &)
	public: class ASpawnableStaticMeshActor & __thiscall ASpawnableStaticMeshActor::operator=(class ASpawnableStaticMeshActor const &)
	public: class ASpawnedLight & __thiscall ASpawnedLight::operator=(class ASpawnedLight const &)
	public: class AStaticMeshActor & __thiscall AStaticMeshActor::operator=(class AStaticMeshActor const &)
	public: class AStationaryWeapons & __thiscall AStationaryWeapons::operator=(class AStationaryWeapons const &)
	public: class AStatLog & __thiscall AStatLog::operator=(class AStatLog const &)
	public: class AStatLogFile & __thiscall AStatLogFile::operator=(class AStatLogFile const &)
	public: class ASuperPointInfo & __thiscall ASuperPointInfo::operator=(class ASuperPointInfo const &)
	public: class ATeamInfo & __thiscall ATeamInfo::operator=(class ATeamInfo const &)
	public: class ATeleporter & __thiscall ATeleporter::operator=(class ATeleporter const &)
	public: class ATerrainInfo & __thiscall ATerrainInfo::operator=(class ATerrainInfo const &)
	public: class ATerritoryInfo & __thiscall ATerritoryInfo::operator=(class ATerritoryInfo const &)
	public: class ATrigger & __thiscall ATrigger::operator=(class ATrigger const &)
	public: class ATriggers & __thiscall ATriggers::operator=(class ATriggers const &)
	public: class AutoClock & __thiscall AutoClock::operator=(class AutoClock const &)
	public: class AVehicle & __thiscall AVehicle::operator=(class AVehicle &)
	public: class AVehicleMeshPart & __thiscall AVehicleMeshPart::operator=(class AVehicleMeshPart &)
	public: class AVehiclePart & __thiscall AVehiclePart::operator=(class AVehiclePart const &)
	public: class AVehicleRoutePoint & __thiscall AVehicleRoutePoint::operator=(class AVehicleRoutePoint &)
	public: class AVehicleServerPart & __thiscall AVehicleServerPart::operator=(class AVehicleServerPart const &)
	public: class AViewportWindowController & __thiscall AViewportWindowController::operator=(class AViewportWindowController const &)
	public: class AVolume & __thiscall AVolume::operator=(class AVolume const &)
	public: class AWarpZoneInfo & __thiscall AWarpZoneInfo::operator=(class AWarpZoneInfo const &)
	public: class AWarpZoneMarker & __thiscall AWarpZoneMarker::operator=(class AWarpZoneMarker const &)
	public: class AWaterHitEmitter & __thiscall AWaterHitEmitter::operator=(class AWaterHitEmitter const &)
	public: class AWeapon & __thiscall AWeapon::operator=(class AWeapon const &)
	public: class AWeaponAttachment & __thiscall AWeaponAttachment::operator=(class AWeaponAttachment const &)
	public: class AZoneInfo & __thiscall AZoneInfo::operator=(class AZoneInfo const &)
	public: class BR_EventManager & __thiscall BR_EventManager::operator=(class BR_EventManager const &)
	public: class BR_GrpExchanger & __thiscall BR_GrpExchanger::operator=(class BR_GrpExchanger const &)
	public: class CAtmosphere & __thiscall CAtmosphere::operator=(class CAtmosphere const &)
	public: class CSceneManager & __thiscall CSceneManager::operator=(class CSceneManager const &)
	public: class CSun & __thiscall CSun::operator=(class CSun const &)
	public: class FActorSceneNode & __thiscall FActorSceneNode::operator=(class FActorSceneNode const &)
	public: class FAuxRenderTarget & __thiscall FAuxRenderTarget::operator=(class FAuxRenderTarget const &)
	public: class FCameraSceneNode & __thiscall FCameraSceneNode::operator=(class FCameraSceneNode const &)
	public: class FCanvasConsoleUtil & __thiscall FCanvasConsoleUtil::operator=(class FCanvasConsoleUtil const &)
	public: class FCanvasUtil & __thiscall FCanvasUtil::operator=(class FCanvasUtil const &)
	public: class FCommandMacro & __thiscall FCommandMacro::operator=(class FCommandMacro const &)
	public: class FDepthOfField & __thiscall FDepthOfField::operator=(class FDepthOfField const &)
	public: class FDynamicActor & __thiscall FDynamicActor::operator=(class FDynamicActor const &)
	public: class FDynamicLight & __thiscall FDynamicLight::operator=(class FDynamicLight const &)
	public: class FEngineStats & __thiscall FEngineStats::operator=(class FEngineStats const &)
	public: class FFlashData & __thiscall FFlashData::operator=(class FFlashData const &)
	public: class FGPUSkinVertexStream & __thiscall FGPUSkinVertexStream::operator=(class FGPUSkinVertexStream const &)
	public: class FL2ArmorItemData & __thiscall FL2ArmorItemData::operator=(class FL2ArmorItemData const &)
	public: class FL2EtcItemData & __thiscall FL2EtcItemData::operator=(class FL2EtcItemData const &)
	public: class FL2GameData & __thiscall FL2GameData::operator=(class FL2GameData const &)
	public: class FL2PawnAnimContainer & __thiscall FL2PawnAnimContainer::operator=(class FL2PawnAnimContainer const &)
	public: class FL2ReplayManager & __thiscall FL2ReplayManager::operator=(class FL2ReplayManager const &)
	public: class FL2TextAlignParser & __thiscall FL2TextAlignParser::operator=(class FL2TextAlignParser const &)
	public: class FL2WeaponItemData & __thiscall FL2WeaponItemData::operator=(class FL2WeaponItemData const &)
	public: class FLandMark & __thiscall FLandMark::operator=(class FLandMark const &)
	public: class FLevelSceneNode & __thiscall FLevelSceneNode::operator=(class FLevelSceneNode const &)
	public: class FLineBatcher & __thiscall FLineBatcher::operator=(class FLineBatcher const &)
	public: class FMaterialStageProperty & __thiscall FMaterialStageProperty::operator=(class FMaterialStageProperty const &)
	public: class FMatineeTools & __thiscall FMatineeTools::operator=(class FMatineeTools const &)
	public: class FMusicInfo & __thiscall FMusicInfo::operator=(class FMusicInfo const &)
	public: class FNetworkNotify & __thiscall FNetworkNotify::operator=(class FNetworkNotify const &)
	public: class FNPawnLight & __thiscall FNPawnLight::operator=(class FNPawnLight const &)
	public: class FontDrawInfo & __thiscall FontDrawInfo::operator=(class FontDrawInfo const &)
	public: class FontDrawInfoSection & __thiscall FontDrawInfoSection::operator=(class FontDrawInfoSection const &)
	public: class FONTID & __thiscall FONTID::operator=(class FONTID const &)
	public: class FontProperty & __thiscall FontProperty::operator=(class FontProperty const &)
	public: class FOutBunch & __thiscall FOutBunch::operator=(class FOutBunch const &)
	public: class FParser & __thiscall FParser::operator=(class FParser const &)
	public: class FPathBuilder & __thiscall FPathBuilder::operator=(class FPathBuilder const &)
	public: class FPixelShaderFunction & __thiscall FPixelShaderFunction::operator=(class FPixelShaderFunction const &)
	public: class FPlayerSceneNode & __thiscall FPlayerSceneNode::operator=(class FPlayerSceneNode const &)
	public: class FPoly & __thiscall FPoly::operator=(class FPoly const &)
	public: class FProjectedRegionEffect & __thiscall FProjectedRegionEffect::operator=(class FProjectedRegionEffect const &)
	public: class FRawIndexBuffer & __thiscall FRawIndexBuffer::operator=(class FRawIndexBuffer const &)
	public: class FRebuildOptions __thiscall FRebuildOptions::operator=(class FRebuildOptions)
	public: class FRebuildTools & __thiscall FRebuildTools::operator=(class FRebuildTools const &)
	public: class FRenderResource & __thiscall FRenderResource::operator=(class FRenderResource const &)
	public: class FRotator __thiscall ASceneManager::GetRotation(class TArray<class FVector> *,float,class FVector,class FRotator,class UMatAction *,int)
	public: class FSceneNode & __thiscall FSceneNode::operator=(class FSceneNode const &)
	public: class FShaderCache & __thiscall FShaderCache::operator=(class FShaderCache const &)
	public: class FShaderCode & __thiscall FShaderCode::operator=(class FShaderCode const &)
	public: class FShaderFunction & __thiscall FShaderFunction::operator=(class FShaderFunction const &)
	public: class FShaderProperty & __thiscall FShaderProperty::operator=(class FShaderProperty const &)
	public: class FSkinVertexStream & __thiscall FSkinVertexStream::operator=(class FSkinVertexStream const &)
	public: class FSoundData & __thiscall FSoundData::operator=(class FSoundData const &)
	public: class FStaticMeshSection & __thiscall FStaticMeshSection::operator=(class FStaticMeshSection const &)
	public: class FStats & __thiscall FStats::operator=(class FStats const &)
	public: class FTerrainTools & __thiscall FTerrainTools::operator=(class FTerrainTools const &)
	public: class FURL & __thiscall FURL::operator=(class FURL const &)
	public: class FVector __thiscall ASceneManager::GetLocation(class TArray<class FVector> *,float)
	public: class FVertexShaderFunction & __thiscall FVertexShaderFunction::operator=(class FVertexShaderFunction const &)
	public: class FWaveModInfo & __thiscall FWaveModInfo::operator=(class FWaveModInfo const &)
	public: class FWorldBuilder & __thiscall FWorldBuilder::operator=(class FWorldBuilder const &)
	public: class HavokInterface & __thiscall HavokInterface::operator=(class HavokInterface const &)
	public: class L224HzController & __thiscall L224HzController::operator=(class L224HzController const &)
	public: class L224HzData & __thiscall L224HzData::operator=(class L224HzData const &)
	public: class L2EventManager & __thiscall L2EventManager::operator=(class L2EventManager const &)
	public: class L2VideoRecoder & __thiscall L2VideoRecoder::operator=(class L2VideoRecoder const &)
	public: class L2WeatherManager & __thiscall L2WeatherManager::operator=(class L2WeatherManager const &)
	public: class ServerInfoData & __thiscall ServerInfoData::operator=(class ServerInfoData const &)
	public: class ServerManager & __thiscall ServerManager::operator=(class ServerManager const &)
	public: class ServerTextureNameManager & __thiscall ServerTextureNameManager::operator=(class ServerTextureNameManager const &)
	public: class TArray<class AAmbientVolume *> __thiscall ALevelInfo::GetAmbientVolume(class FVector,class AActor *,int)
	public: class TArray<class AAmbientVolume *> __thiscall ALevelInfo::L2GetAmbientVolume(class FVector,class AActor *,int)
	public: class TArray<class UMeshComponent *> * __thiscall UMeshContainer::GetMeshComponents(int)
	public: class TArray<class UMeshComponent *> __thiscall UMeshContainer::UpdateMeshComponentByEditor(class TArray<struct FMeshComponentData> &,class TArray<class UMesh *> &,int)
	public: class TArray<class UMeshInstance *> __thiscall UMeshContainer::GetMeshInstances(int)
	public: class TArray<class USimulationCollision *> & __thiscall USimulationMesh::GetCollision(void)
	public: class TArray<int> __thiscall UModel::BoxLeaves(class FBox,class FName,int)
	public: class TArray<int> const & __thiscall FL2AlterAbnormalStatusManager::GetAlterIDList(enum FL2AlterAbnormalStatusManager::ObjectType,int)const 
	public: class TArray<int> const & __thiscall FL2GameData::FindAlterSkill(enum FL2AlterAbnormalStatusManager::ObjectType,int)const 
	public: class TArray<int> const & __thiscall FL2GameData::GetQuestTutorialKeyList(void)const 
	public: class TArray<int> const & __thiscall FL2GameData::GetStatisticTypeIDList(void)const 
	public: class TArray<struct FSpringNode> & __thiscall USimulationMeshInstance::GetSpringNodes(int)
	public: class TArray<unsigned char> & __thiscall TArray<unsigned char>::operator+(class TArray<unsigned char> const &)
	public: class TArray<unsigned char> & __thiscall TArray<unsigned char>::operator+=(class TArray<unsigned char> const &)
	public: class TArray<unsigned char> & __thiscall TArray<unsigned char>::operator=(class TArray<unsigned char> const &)
	public: class ThaiCharUtil & __thiscall ThaiCharUtil::operator=(class ThaiCharUtil const &)
	public: class TLazyArray<unsigned char> & __thiscall TLazyArray<unsigned char>::operator=(class TLazyArray<unsigned char> const &)
	public: class TMap<int,class TArray<class FVector> > * __thiscall ASuperPointInfo::GetPaths(void)
	public: class TMap<int,class TArray<class FVector> > * __thiscall AVehicleRoutePoint::GetPaths(void)
	public: class TSingleton<class BR_EventManager> & __thiscall TSingleton<class BR_EventManager>::operator=(class TSingleton<class BR_EventManager> const &)
	public: class TSingleton<class BR_GrpExchanger> & __thiscall TSingleton<class BR_GrpExchanger>::operator=(class TSingleton<class BR_GrpExchanger> const &)
	public: class TSingleton<class CSceneManager> & __thiscall TSingleton<class CSceneManager>::operator=(class TSingleton<class CSceneManager> const &)
	public: class TSingleton<class FDepthOfField> & __thiscall TSingleton<class FDepthOfField>::operator=(class TSingleton<class FDepthOfField> const &)
	public: class TSingleton<class L224HzController> & __thiscall TSingleton<class L224HzController>::operator=(class TSingleton<class L224HzController> const &)
	public: class TSingleton<class L2EventManager> & __thiscall TSingleton<class L2EventManager>::operator=(class TSingleton<class L2EventManager> const &)
	public: class TSingleton<class L2WeatherManager> & __thiscall TSingleton<class L2WeatherManager>::operator=(class TSingleton<class L2WeatherManager> const &)
	public: class TSingleton<class ServerManager> & __thiscall TSingleton<class ServerManager>::operator=(class TSingleton<class ServerManager> const &)
	public: class TSingleton<class ServerTextureNameManager> & __thiscall TSingleton<class ServerTextureNameManager>::operator=(class TSingleton<class ServerTextureNameManager> const &)
	public: class TSingleton<class UDecoration> & __thiscall TSingleton<class UDecoration>::operator=(class TSingleton<class UDecoration> const &)
	public: class TSingleton<class UDepthEffect> & __thiscall TSingleton<class UDepthEffect>::operator=(class TSingleton<class UDepthEffect> const &)
	public: class TSingleton<class UEditorColorEffect> & __thiscall TSingleton<class UEditorColorEffect>::operator=(class TSingleton<class UEditorColorEffect> const &)
	public: class TSingleton<class UPostEffEnvManager> & __thiscall TSingleton<class UPostEffEnvManager>::operator=(class TSingleton<class UPostEffEnvManager> const &)
	public: class TSingleton<class USSAOEffect> & __thiscall TSingleton<class USSAOEffect>::operator=(class TSingleton<class USSAOEffect> const &)
	public: class UActionMoveCamera & __thiscall UActionMoveCamera::operator=(class UActionMoveCamera const &)
	public: class UActionPause & __thiscall UActionPause::operator=(class UActionPause const &)
	public: class UActionWarp & __thiscall UActionWarp::operator=(class UActionWarp const &)
	public: class UAmbientSoundObject & __thiscall UAmbientSoundObject::operator=(class UAmbientSoundObject const &)
	public: class UAmbientVolumeSound & __thiscall UAmbientVolumeSound::operator=(class UAmbientVolumeSound const &)
	public: class UAnimNotify & __thiscall UAnimNotify::operator=(class UAnimNotify const &)
	public: class UAnimNotify_AttackDamage & __thiscall UAnimNotify_AttackDamage::operator=(class UAnimNotify_AttackDamage const &)
	public: class UAnimNotify_AttackItem & __thiscall UAnimNotify_AttackItem::operator=(class UAnimNotify_AttackItem const &)
	public: class UAnimNotify_AttackPreShot & __thiscall UAnimNotify_AttackPreShot::operator=(class UAnimNotify_AttackPreShot const &)
	public: class UAnimNotify_AttackShot & __thiscall UAnimNotify_AttackShot::operator=(class UAnimNotify_AttackShot const &)
	public: class UAnimNotify_AttackVoice & __thiscall UAnimNotify_AttackVoice::operator=(class UAnimNotify_AttackVoice const &)
	public: class UAnimNotify_BoneScale & __thiscall UAnimNotify_BoneScale::operator=(class UAnimNotify_BoneScale const &)
	public: class UAnimNotify_CameraLocation & __thiscall UAnimNotify_CameraLocation::operator=(class UAnimNotify_CameraLocation const &)
	public: class UAnimNotify_Channeling & __thiscall UAnimNotify_Channeling::operator=(class UAnimNotify_Channeling const &)
	public: class UAnimNotify_DestroyEffect & __thiscall UAnimNotify_DestroyEffect::operator=(class UAnimNotify_DestroyEffect const &)
	public: class UAnimNotify_Effect & __thiscall UAnimNotify_Effect::operator=(class UAnimNotify_Effect const &)
	public: class UAnimNotify_IdleSound & __thiscall UAnimNotify_IdleSound::operator=(class UAnimNotify_IdleSound const &)
	public: class UAnimNotify_Illusion & __thiscall UAnimNotify_Illusion::operator=(class UAnimNotify_Illusion const &)
	public: class UAnimNotify_JumpDown & __thiscall UAnimNotify_JumpDown::operator=(class UAnimNotify_JumpDown const &)
	public: class UAnimNotify_JumpUp & __thiscall UAnimNotify_JumpUp::operator=(class UAnimNotify_JumpUp const &)
	public: class UAnimNotify_LaunchAccumulativeBeam & __thiscall UAnimNotify_LaunchAccumulativeBeam::operator=(class UAnimNotify_LaunchAccumulativeBeam const &)
	public: class UAnimNotify_Light & __thiscall UAnimNotify_Light::operator=(class UAnimNotify_Light const &)
	public: class UAnimNotify_MatSubAction & __thiscall UAnimNotify_MatSubAction::operator=(class UAnimNotify_MatSubAction const &)
	public: class UAnimNotify_PostEffect & __thiscall UAnimNotify_PostEffect::operator=(class UAnimNotify_PostEffect const &)
	public: class UAnimNotify_RandomSound & __thiscall UAnimNotify_RandomSound::operator=(class UAnimNotify_RandomSound const &)
	public: class UAnimNotify_ScreenFade & __thiscall UAnimNotify_ScreenFade::operator=(class UAnimNotify_ScreenFade const &)
	public: class UAnimNotify_Script & __thiscall UAnimNotify_Script::operator=(class UAnimNotify_Script const &)
	public: class UAnimNotify_Scripted & __thiscall UAnimNotify_Scripted::operator=(class UAnimNotify_Scripted const &)
	public: class UAnimNotify_SendCommandLine & __thiscall UAnimNotify_SendCommandLine::operator=(class UAnimNotify_SendCommandLine const &)
	public: class UAnimNotify_Sheathe & __thiscall UAnimNotify_Sheathe::operator=(class UAnimNotify_Sheathe const &)
	public: class UAnimNotify_Sound & __thiscall UAnimNotify_Sound::operator=(class UAnimNotify_Sound const &)
	public: class UAnimNotify_SwimSound & __thiscall UAnimNotify_SwimSound::operator=(class UAnimNotify_SwimSound const &)
	public: class UAnimNotify_ViewShake & __thiscall UAnimNotify_ViewShake::operator=(class UAnimNotify_ViewShake const &)
	public: class UAudioSubsystem & __thiscall UAudioSubsystem::operator=(class UAudioSubsystem const &)
	public: class UBaseGUIController & __thiscall UBaseGUIController::operator=(class UBaseGUIController const &)
	public: class UBeamEmitter & __thiscall UBeamEmitter::operator=(class UBeamEmitter const &)
	public: class UBitmapMaterial & __thiscall UBitmapMaterial::operator=(class UBitmapMaterial const &)
	public: class UBumpShader & __thiscall UBumpShader::operator=(class UBumpShader const &)
	public: class UCanvas & __thiscall UCanvas::operator=(class UCanvas const &)
	public: class UCheatManager & __thiscall UCheatManager::operator=(class UCheatManager const &)
	public: class UClient & __thiscall UClient::operator=(class UClient const &)
	public: class UColorMask & __thiscall UColorMask::operator=(class UColorMask const &)
	public: class UColorModifier & __thiscall UColorModifier::operator=(class UColorModifier const &)
	public: class UColorVariationMaterial & __thiscall UColorVariationMaterial::operator=(class UColorVariationMaterial const &)
	public: class UColorWheel & __thiscall UColorWheel::operator=(class UColorWheel const &)
	public: class UCombiner & __thiscall UCombiner::operator=(class UCombiner const &)
	public: class UComplementModifier & __thiscall UComplementModifier::operator=(class UComplementModifier const &)
	public: class UConsole & __thiscall UConsole::operator=(class UConsole const &)
	public: class UConstantColor & __thiscall UConstantColor::operator=(class UConstantColor const &)
	public: class UConstantMaterial & __thiscall UConstantMaterial::operator=(class UConstantMaterial const &)
	public: class UConvexVolume & __thiscall UConvexVolume::operator=(class UConvexVolume const &)
	public: class UCubemap & __thiscall UCubemap::operator=(class UCubemap const &)
	public: class UCustomMakedMaterial & __thiscall UCustomMakedMaterial::operator=(class UCustomMakedMaterial const &)
	public: class UDamageTextManager & __thiscall UDamageTextManager::operator=(class UDamageTextManager const &)
	public: class UDecoration & __thiscall UDecoration::operator=(class UDecoration const &)
	public: class UDepthEffect & __thiscall UDepthEffect::operator=(class UDepthEffect const &)
	public: class UDownload & __thiscall UDownload::operator=(class UDownload const &)
	public: class UEditorColorEffect & __thiscall UEditorColorEffect::operator=(class UEditorColorEffect const &)
	public: class UEngine & __thiscall UEngine::operator=(class UEngine const &)
	public: class UExtraMeshData & __thiscall UExtraMeshData::operator=(class UExtraMeshData const &)
	public: class UFadeColor & __thiscall UFadeColor::operator=(class UFadeColor const &)
	public: class UFinalBlend & __thiscall UFinalBlend::operator=(class UFinalBlend const &)
	public: class UFlashSubsystem & __thiscall UFlashSubsystem::operator=(class UFlashSubsystem const &)
	public: class UFont & __thiscall UFont::operator=(class UFont const &)
	public: class UFontManager & __thiscall UFontManager::operator=(class UFontManager const &)
	public: class UGameEngine & __thiscall UGameEngine::operator=(class UGameEngine const &)
	public: class UGFxFlash & __thiscall UGFxFlash::operator=(class UGFxFlash const &)
	public: class UGlowModifier & __thiscall UGlowModifier::operator=(class UGlowModifier const &)
	public: class UI3DL2Listener & __thiscall UI3DL2Listener::operator=(class UI3DL2Listener const &)
	public: class UIndexBuffer & __thiscall UIndexBuffer::operator=(class UIndexBuffer const &)
	public: class UInput & __thiscall UInput::operator=(class UInput const &)
	public: class UInteraction & __thiscall UInteraction::operator=(class UInteraction const &)
	public: class UInteractionMaster & __thiscall UInteractionMaster::operator=(class UInteractionMaster const &)
	public: class UInteractions & __thiscall UInteractions::operator=(class UInteractions const &)
	public: class UKarmaParams & __thiscall UKarmaParams::operator=(class UKarmaParams const &)
	public: class UKarmaParamsCollision & __thiscall UKarmaParamsCollision::operator=(class UKarmaParamsCollision const &)
	public: class UKarmaParamsRBFull & __thiscall UKarmaParamsRBFull::operator=(class UKarmaParamsRBFull const &)
	public: class UKarmaParamsSkel & __thiscall UKarmaParamsSkel::operator=(class UKarmaParamsSkel const &)
	public: class UKMeshProps & __thiscall UKMeshProps::operator=(class UKMeshProps const &)
	public: class UL2ColorModifier & __thiscall UL2ColorModifier::operator=(class UL2ColorModifier const &)
	public: class UL2ConsoleWnd & __thiscall UL2ConsoleWnd::operator=(class UL2ConsoleWnd const &)
	public: class UL2EffectEmitter & __thiscall UL2EffectEmitter::operator=(class UL2EffectEmitter const &)
	public: class UL2Font & __thiscall UL2Font::operator=(class UL2Font const &)
	public: class UL2NEnvLight & __thiscall UL2NEnvLight::operator=(class UL2NEnvLight const &)
	public: class UL2NEnvManager & __thiscall UL2NEnvManager::operator=(class UL2NEnvManager const &)
	public: class UL2NTimeLight & __thiscall UL2NTimeLight::operator=(class UL2NTimeLight const &)
	public: class UL2SceneInfo & __thiscall UL2SceneInfo::operator=(class UL2SceneInfo const &)
	public: class UL2SceneItem & __thiscall UL2SceneItem::operator=(class UL2SceneItem const &)
	public: class UL2SkillEffect & __thiscall UL2SkillEffect::operator=(class UL2SkillEffect const &)
	public: class ULevel & __thiscall ULevel::operator=(class ULevel const &)
	public: class ULevelObject & __thiscall ULevelObject::operator=(class ULevelObject const &)
	public: class ULevelSummary & __thiscall ULevelSummary::operator=(class ULevelSummary const &)
	public: class ULodMesh & __thiscall ULodMesh::operator=(class ULodMesh const &)
	public: class ULodMeshInstance & __thiscall ULodMeshInstance::operator=(class ULodMeshInstance const &)
	public: class UMaskTexture & __thiscall UMaskTexture::operator=(class UMaskTexture const &)
	public: class UMasterLevel & __thiscall UMasterLevel::operator=(class UMasterLevel const &)
	public: class UMatAction & __thiscall UMatAction::operator=(class UMatAction const &)
	public: class UMaterial & __thiscall UMaterial::operator=(class UMaterial const &)
	public: class UMaterialSequence & __thiscall UMaterialSequence::operator=(class UMaterialSequence const &)
	public: class UMaterialSwitch & __thiscall UMaterialSwitch::operator=(class UMaterialSwitch const &)
	public: class UMatObject & __thiscall UMatObject::operator=(class UMatObject const &)
	public: class UMatSubAction & __thiscall UMatSubAction::operator=(class UMatSubAction const &)
	public: class UMesh & __thiscall UMesh::operator=(class UMesh const &)
	public: class UMeshAnimation & __thiscall UMeshAnimation::operator=(class UMeshAnimation const &)
	public: class UMeshComponent & __thiscall UMeshComponent::operator=(class UMeshComponent const &)
	public: class UMeshContainer & __thiscall UMeshContainer::operator=(class UMeshContainer const &)
	public: class UMeshEmitter & __thiscall UMeshEmitter::operator=(class UMeshEmitter const &)
	public: class UMeshInstance & __thiscall UMeshInstance::operator=(class UMeshInstance const &)
	public: class UMeshObject & __thiscall UMeshObject::operator=(class UMeshObject const &)
	public: class UModel & __thiscall UModel::operator=(class UModel const &)
	public: class UModifier & __thiscall UModifier::operator=(class UModifier const &)
	public: class UNetConnection & __thiscall UNetConnection::operator=(class UNetConnection const &)
	public: class UNetDriver & __thiscall UNetDriver::operator=(class UNetDriver const &)
	public: class UNetworkHandler & __thiscall UNetworkHandler::operator=(class UNetworkHandler const &)
	public: class UOpacityModifier & __thiscall UOpacityModifier::operator=(class UOpacityModifier const &)
	public: class UPalette & __thiscall UPalette::operator=(class UPalette const &)
	public: class UParticleEmitter & __thiscall UParticleEmitter::operator=(class UParticleEmitter const &)
	public: class UParticleMaterial & __thiscall UParticleMaterial::operator=(class UParticleMaterial const &)
	public: class UPawnAliasMgr & __thiscall UPawnAliasMgr::operator=(class UPawnAliasMgr const &)
	public: class UPawnSheathingMgr & __thiscall UPawnSheathingMgr::operator=(class UPawnSheathingMgr const &)
	public: class UPlayer & __thiscall UPlayer::operator=(class UPlayer const &)
	public: class UPlayerInput & __thiscall UPlayerInput::operator=(class UPlayerInput const &)
	public: class UPolys & __thiscall UPolys::operator=(class UPolys const &)
	public: class UPostEffEnvManager & __thiscall UPostEffEnvManager::operator=(class UPostEffEnvManager const &)
	public: class UPrimitive & __thiscall UPrimitive::operator=(class UPrimitive const &)
	public: class UProjectorMaterial & __thiscall UProjectorMaterial::operator=(class UProjectorMaterial const &)
	public: class UProxyBitmapMaterial & __thiscall UProxyBitmapMaterial::operator=(class UProxyBitmapMaterial const &)
	public: class UReachSpec & __thiscall UReachSpec::operator=(class UReachSpec const &)
	public: class UReachSpec * __thiscall UReachSpec::operator+(class UReachSpec const &)const 
	public: class URealtimeGenerationTexture & __thiscall URealtimeGenerationTexture::operator=(class URealtimeGenerationTexture const &)
	public: class URenderDevice & __thiscall URenderDevice::operator=(class URenderDevice const &)
	public: class URenderedMaterial & __thiscall URenderedMaterial::operator=(class URenderedMaterial const &)
	public: class URibbonEmitter & __thiscall URibbonEmitter::operator=(class URibbonEmitter const &)
	public: class UScriptedTexture & __thiscall UScriptedTexture::operator=(class UScriptedTexture const &)
	public: class UShader & __thiscall UShader::operator=(class UShader const &)
	public: class UShadowBitmapMaterial & __thiscall UShadowBitmapMaterial::operator=(class UShadowBitmapMaterial const &)
	public: class USimulationCollision & __thiscall USimulationCollision::operator=(class USimulationCollision const &)
	public: class USimulationCylinderCollision & __thiscall USimulationCylinderCollision::operator=(class USimulationCylinderCollision const &)
	public: class USimulationData & __thiscall USimulationData::operator=(class USimulationData const &)
	public: class USimulationMesh & __thiscall USimulationMesh::operator=(class USimulationMesh const &)
	public: class USimulationMeshInstance & __thiscall USimulationMeshInstance::operator=(class USimulationMeshInstance const &)
	public: class USimulationNotify & __thiscall USimulationNotify::operator=(class USimulationNotify const &)
	public: class USimulationSphereCollision & __thiscall USimulationSphereCollision::operator=(class USimulationSphereCollision const &)
	public: class USimulationSpringConstraint & __thiscall USimulationSpringConstraint::operator=(class USimulationSpringConstraint const &)
	public: class USkeletalMesh & __thiscall USkeletalMesh::operator=(class USkeletalMesh const &)
	public: class USkeletalMeshInstance & __thiscall USkeletalMeshInstance::operator=(class USkeletalMeshInstance const &)
	public: class USound & __thiscall USound::operator=(class USound const &)
	public: class USparkEmitter & __thiscall USparkEmitter::operator=(class USparkEmitter const &)
	public: class USpriteEmitter & __thiscall USpriteEmitter::operator=(class USpriteEmitter const &)
	public: class USSAOEffect & __thiscall USSAOEffect::operator=(class USSAOEffect const &)
	public: class UStaticMesh & __thiscall UStaticMesh::operator=(class UStaticMesh const &)
	public: class USubActionCameraShake & __thiscall USubActionCameraShake::operator=(class USubActionCameraShake const &)
	public: class USubActionFade & __thiscall USubActionFade::operator=(class USubActionFade const &)
	public: class USubActionFOV & __thiscall USubActionFOV::operator=(class USubActionFOV const &)
	public: class USubActionGameSpeed & __thiscall USubActionGameSpeed::operator=(class USubActionGameSpeed const &)
	public: class USubActionOrientation & __thiscall USubActionOrientation::operator=(class USubActionOrientation const &)
	public: class USubActionSceneSpeed & __thiscall USubActionSceneSpeed::operator=(class USubActionSceneSpeed const &)
	public: class USubActionTrigger & __thiscall USubActionTrigger::operator=(class USubActionTrigger const &)
	public: class UTerrainMaterial & __thiscall UTerrainMaterial::operator=(class UTerrainMaterial const &)
	public: class UTerrainSector & __thiscall UTerrainSector::operator=(class UTerrainSector const &)
	public: class UTexCoordSource & __thiscall UTexCoordSource::operator=(class UTexCoordSource const &)
	public: class UTexEnvMap & __thiscall UTexEnvMap::operator=(class UTexEnvMap const &)
	public: class UTexMatrix & __thiscall UTexMatrix::operator=(class UTexMatrix const &)
	public: class UTexModifier & __thiscall UTexModifier::operator=(class UTexModifier const &)
	public: class UTexOscillator & __thiscall UTexOscillator::operator=(class UTexOscillator const &)
	public: class UTexOscillatorTriggered & __thiscall UTexOscillatorTriggered::operator=(class UTexOscillatorTriggered const &)
	public: class UTexPanner & __thiscall UTexPanner::operator=(class UTexPanner const &)
	public: class UTexPannerTriggered & __thiscall UTexPannerTriggered::operator=(class UTexPannerTriggered const &)
	public: class UTexRotator & __thiscall UTexRotator::operator=(class UTexRotator const &)
	public: class UTexScaler & __thiscall UTexScaler::operator=(class UTexScaler const &)
	public: class UTexture & __thiscall UTexture::operator=(class UTexture const &)
	public: class UTrailEmitter & __thiscall UTrailEmitter::operator=(class UTrailEmitter const &)
	public: class UUnderWaterShader & __thiscall UUnderWaterShader::operator=(class UUnderWaterShader const &)
	public: class UUserDefinableMaterial & __thiscall UUserDefinableMaterial::operator=(class UUserDefinableMaterial const &)
	public: class UVertexBuffer & __thiscall UVertexBuffer::operator=(class UVertexBuffer const &)
	public: class UVertexColor & __thiscall UVertexColor::operator=(class UVertexColor const &)
	public: class UVertMesh & __thiscall UVertMesh::operator=(class UVertMesh const &)
	public: class UVertMeshEmitter & __thiscall UVertMeshEmitter::operator=(class UVertMeshEmitter const &)
	public: class UVertMeshInstance & __thiscall UVertMeshInstance::operator=(class UVertMeshInstance const &)
	public: class UViewport & __thiscall UViewport::operator=(class UViewport const &)
	public: class UWaterMaterial & __thiscall UWaterMaterial::operator=(class UWaterMaterial const &)
	public: int __thiscall APawn::CheckAbnormalStates(class TArray<int> &)
	public: int __thiscall APawn::SetMagicInfo(int,int,int,float,float,class AActor *,float,struct FL2MagicSkillData *,int,class TArray<int> *,int,class TArray<class FVector> *)
	public: int __thiscall ATerrainInfo::GetRenderCombinationNum(class TArray<int> &,enum ETerrainRenderMethod)
	public: int __thiscall FL2GameData::FindAlterSkillAboutAbnormalStatusCondition(int,class TArray<struct FL2AlterSkillData *> &)
	public: int __thiscall FPoly::operator!=(class FPoly)
	public: int __thiscall FPoly::operator==(class FPoly)
	public: int __thiscall FURL::operator==(class FURL const &)const 
	public: int __thiscall FWaveModInfo::ReadWaveInfo(class TArray<unsigned char> &)
	public: int __thiscall FWaveModInfo::UpdateWaveData(class TArray<unsigned char> &)
	public: int __thiscall TArray<unsigned char>::Add(int)
	public: int __thiscall TArray<unsigned char>::AddCompact(int)
	public: int __thiscall TArray<unsigned char>::AddDynamicItem(unsigned char const &)
	public: int __thiscall TArray<unsigned char>::AddItem(unsigned char const &)
	public: int __thiscall TArray<unsigned char>::AddNoAlloc(int &)
	public: int __thiscall TArray<unsigned char>::AddUniqueDynamicItem(unsigned char const &)
	public: int __thiscall TArray<unsigned char>::AddUniqueItem(unsigned char const &)
	public: int __thiscall TArray<unsigned char>::AddZeroed(int)
	public: int __thiscall TArray<unsigned char>::FindItem(unsigned char const &,int &)const 
	public: int __thiscall TArray<unsigned char>::FindItemIndex(unsigned char const &)const 
	public: int __thiscall TArray<unsigned char>::RemoveItem(unsigned char const &)
	public: int __thiscall UCanvas::CalculateStringLine(class FString const &,int,int &,class TArray<class FString> &)
	public: int __thiscall UCanvas::DrawTextTTFToCanvas(int,int,wchar_t const *,class FontDrawInfo const *,unsigned char,int,int,class TArray<class FontDrawInfoSection *> const *)
	public: int __thiscall UCanvas::DrawTextTTFToCanvasThai(int,int,class TArray<struct ThaiCharacter> &,class FontDrawInfo const *,unsigned char,int,int,class TArray<class FontDrawInfoSection *> const *)
	public: int __thiscall UCanvas::GetTextSizeTTFThai(struct tagSIZE &,class TArray<struct ThaiCharacter> const &,class FontDrawInfo const *,int,int)
	public: int __thiscall UModel::ConvexVolumeMultiCheck(class FBox &,class FPlane *,int,class FVector,class TArray<int> &)
	public: int __thiscall UReachSpec::operator<=(class UReachSpec const &)
	public: int __thiscall UReachSpec::operator==(class UReachSpec const &)
	public: int __thiscall User::GetMeshDataLHand(class APawn *,enum EItemSlotType,enum EMeshType,class TArray<struct FMeshComponentData> &)
	public: int __thiscall User::HasDualWeaponData(class FL2WeaponItemData *,class TArray<struct FMeshComponentData> &)
	public: int __thiscall User::NeedToChangePawn(int const &,class TArray<int> const &)const 
	public: int __thiscall User::SpawnAdditionalEffectData(int,class TArray<struct FMeshComponentData> const &)
	public: int __thiscall USkeletalMeshInstance::AnimGetAttackShotNotifyTimeEx(class FName,class TArray<float> *,float,float,int)
	public: int __thiscall USkeletalMeshInstance::GetMeshJointsAndNormals(class AActor *,class TArray<class FVector> *,int)
	public: static class BR_EventManager & __cdecl TSingleton<class BR_EventManager>::GetObj(void)
	public: static class BR_EventManager * __cdecl TSingleton<class BR_EventManager>::GetObjPtr(void)
	public: static class BR_GrpExchanger & __cdecl TSingleton<class BR_GrpExchanger>::GetObj(void)
	public: static class BR_GrpExchanger * __cdecl TSingleton<class BR_GrpExchanger>::GetObjPtr(void)
	public: static class CSceneManager & __cdecl TSingleton<class CSceneManager>::GetObj(void)
	public: static class CSceneManager * __cdecl TSingleton<class CSceneManager>::GetObjPtr(void)
	public: static class FDepthOfField & __cdecl TSingleton<class FDepthOfField>::GetObj(void)
	public: static class FDepthOfField * __cdecl TSingleton<class FDepthOfField>::GetObjPtr(void)
	public: static class FString FURL::DefaultHost
	public: static class FString FURL::DefaultLocalMap
	public: static class FString FURL::DefaultMap
	public: static class FString FURL::DefaultMapExt
	public: static class FString FURL::DefaultName
	public: static class FString FURL::DefaultPortal
	public: static class FString FURL::DefaultProtocol
	public: static class FString FURL::DefaultProtocolDescription
	public: static class FString FURL::DefaultSaveExt
	public: static class L224HzController & __cdecl TSingleton<class L224HzController>::GetObj(void)
	public: static class L224HzController * __cdecl TSingleton<class L224HzController>::GetObjPtr(void)
	public: static class L2EventManager & __cdecl TSingleton<class L2EventManager>::GetObj(void)
	public: static class L2EventManager * __cdecl TSingleton<class L2EventManager>::GetObjPtr(void)
	public: static class L2WeatherManager & __cdecl TSingleton<class L2WeatherManager>::GetObj(void)
	public: static class L2WeatherManager * __cdecl TSingleton<class L2WeatherManager>::GetObjPtr(void)
	public: static class ServerManager & __cdecl TSingleton<class ServerManager>::GetObj(void)
	public: static class ServerManager * __cdecl TSingleton<class ServerManager>::GetObjPtr(void)
	public: static class ServerTextureNameManager & __cdecl TSingleton<class ServerTextureNameManager>::GetObj(void)
	public: static class ServerTextureNameManager * __cdecl TSingleton<class ServerTextureNameManager>::GetObjPtr(void)
	public: static class UAudioSubsystem * USound::Audio
	public: static class UClient * UTexture::__Client
	public: static class UDecoration & __cdecl TSingleton<class UDecoration>::GetObj(void)
	public: static class UDecoration * __cdecl TSingleton<class UDecoration>::GetObjPtr(void)
	public: static class UDepthEffect & __cdecl TSingleton<class UDepthEffect>::GetObj(void)
	public: static class UDepthEffect * __cdecl TSingleton<class UDepthEffect>::GetObjPtr(void)
	public: static class UEditorColorEffect & __cdecl TSingleton<class UEditorColorEffect>::GetObj(void)
	public: static class UEditorColorEffect * __cdecl TSingleton<class UEditorColorEffect>::GetObjPtr(void)
	public: static class UPostEffEnvManager & __cdecl TSingleton<class UPostEffEnvManager>::GetObj(void)
	public: static class UPostEffEnvManager * __cdecl TSingleton<class UPostEffEnvManager>::GetObjPtr(void)
	public: static class USSAOEffect & __cdecl TSingleton<class USSAOEffect>::GetObj(void)
	public: static class USSAOEffect * __cdecl TSingleton<class USSAOEffect>::GetObjPtr(void)
	public: static float const UAudioSubsystem::MIN_REUSABLE_TIME
	public: static float const UAudioSubsystem::NO_DELAY
	public: static float const UAudioSubsystem::NO_FADE
	public: static float const UAudioSubsystem::STATE_CHANGE_MUSIC_FADEOUT
	public: static int * FL2GameData::rangedAttackConsumeItemsID
	public: static int * FL2PawnAnimContainer::Offset
	public: static int const FL2WeaponEnchantEffectData::MAX_ENCHANT_COLOR_CNT
	public: static int const UAudioSubsystem::INVALID_SOUND_HANDLE
	public: static int FURL::DefaultPort
	public: static void * __cdecl AActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAIController::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAIController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAIMarker::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAIMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAirEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAirEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAirShip::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAirShip::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAirVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAirVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAIScript::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAIScript::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAmbientEventActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAmbientEventActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAmbientSound::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAmbientSound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAmbientVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAmbientVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAmmo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAmmo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAmmunition::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAmmunition::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAntiPortalActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAntiPortalActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAutoDoor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAutoDoor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAutoLadder::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAutoLadder::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAvoidMarker::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AAvoidMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ABlockingVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ABlockingVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ABrush::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ABrush::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ACamera::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ACamera::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ACameraControlPawn::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ACameraControlPawn::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ACameraEffectInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ACameraEffectInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ACameraVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ACameraVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ACarriedObject::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ACarriedObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AClipMarker::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AClipMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AController::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ACustomizableStaticMeshActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ACustomizableStaticMeshActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADamageType::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ADamageType::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADecoration::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ADecoration::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADecorationList::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ADecorationList::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADecoVolumeObject::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ADecoVolumeObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADefaultPhysicsVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ADefaultPhysicsVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADoor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ADoor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADynamicLight::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ADynamicLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AEmitterLight::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AEmitterLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AEnvCreatureManagerInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AEnvCreatureManagerInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AFileLog::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AFileLog::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AFluidSurfaceInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AFluidSurfaceInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AFluidSurfaceOscillator::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AFluidSurfaceOscillator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AGameInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AGameInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AGameReplicationInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AGameReplicationInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AGameStats::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AGameStats::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AHUD::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AHUD::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInspector::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AInspector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInternetInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AInternetInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInterpolationPoint::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AInterpolationPoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInventory::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AInventory::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInventoryAttachment::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AInventoryAttachment::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInventorySpot::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AInventorySpot::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AJumpDest::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AJumpDest::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AJumpPad::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AJumpPad::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AKActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKBSJoint::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AKBSJoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKCarWheelJoint::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AKCarWheelJoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKConeLimit::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AKConeLimit::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKConstraint::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AKConstraint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKeypoint::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AKeypoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKHinge::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AKHinge::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKTire::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AKTire::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKVehicle::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AKVehicle::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Alarm::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2Alarm::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2CenterdDiamond::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2CenterdDiamond::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Dice::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2Dice::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Float::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2Float::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Indicator::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2Indicator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2MovableStaticMeshActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2MovableStaticMeshActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2NMover::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2NMover::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Pickup::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2Pickup::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Radar::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2Radar::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2SeamlessInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AL2SeamlessInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALadder::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALadder::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALadderVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALadderVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALevelInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALevelInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALiftCenter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALiftCenter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALiftExit::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALiftExit::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALight::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALineagePlayerController::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALineagePlayerController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALineOfSightTrigger::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALineOfSightTrigger::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALocationInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALocationInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALookTarget::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ALookTarget::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMarkProjector::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AMarkProjector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMatDemoActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AMatDemoActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMovableStaticMeshActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AMovableStaticMeshActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMover::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AMover::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMusicVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AMusicVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMutator::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AMutator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANAgathion::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANAgathion::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANavigationPoint::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANavigationPoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANCubics::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANCubics::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANMoon::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANMoon::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANMovableSunLight::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANMovableSunLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANote::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANote::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANpcPosInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANpcPosInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANProjectile::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANProjectile::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANSkillProjectile::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANSkillProjectile::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANSun::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ANSun::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AParticleProjector::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AParticleProjector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APathNode::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APathNode::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APawn::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APawn::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APhysicsVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APhysicsVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APickup::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APickup::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APlayerController::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APlayerController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APlayerReplicationInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APlayerReplicationInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APlayerStart::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APlayerStart::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APolyMarker::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APolyMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APotentialClimbWatcher::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APotentialClimbWatcher::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APowerups::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl APowerups::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AProjectedEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AProjectedEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AProjectile::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AProjectile::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AProjector::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AProjector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AReplicationInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AReplicationInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASavedMove::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASavedMove::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASceneManager::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASceneManager::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AScout::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AScout::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASecurity::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASecurity::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AServerBlockingVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AServerBlockingVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AServerPrimitive::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AServerPrimitive::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AShadowProjector::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AShadowProjector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AShuttle::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AShuttle::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AShuttleDoor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AShuttleDoor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AShuttleWall::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AShuttleWall::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASkyMeshActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASkyMeshActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASkyRenderInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASkyRenderInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASkyZoneInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASkyZoneInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASmallNavigationPoint::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASmallNavigationPoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASpawnableStaticMeshActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASpawnableStaticMeshActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASpawnedLight::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASpawnedLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AStaticMeshActor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AStaticMeshActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AStationaryWeapons::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AStationaryWeapons::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AStatLog::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AStatLog::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AStatLogFile::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AStatLogFile::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASuperPointInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ASuperPointInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATeamInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ATeamInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATeleporter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ATeleporter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATerrainInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ATerrainInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATerritoryInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ATerritoryInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATrigger::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ATrigger::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATriggers::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ATriggers::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVehicle::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AVehicle::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVehicleMeshPart::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AVehicleMeshPart::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVehiclePart::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AVehiclePart::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVehicleRoutePoint::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AVehicleRoutePoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVehicleServerPart::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AVehicleServerPart::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AViewportWindowController::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AViewportWindowController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWarpZoneInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AWarpZoneInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWarpZoneMarker::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AWarpZoneMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWaterHitEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AWaterHitEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWeapon::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AWeapon::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWeaponAttachment::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AWeaponAttachment::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AZoneInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl AZoneInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UActionMoveCamera::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UActionMoveCamera::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UActionPause::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UActionPause::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UActionWarp::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UActionWarp::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAmbientSoundObject::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAmbientSoundObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAmbientVolumeSound::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAmbientVolumeSound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_AttackDamage::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_AttackDamage::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_AttackItem::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_AttackItem::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_AttackPreShot::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_AttackPreShot::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_AttackShot::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_AttackShot::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_AttackVoice::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_AttackVoice::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_BoneScale::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_BoneScale::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_CameraLocation::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_CameraLocation::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Channeling::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_Channeling::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_DestroyEffect::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_DestroyEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Effect::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_Effect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_IdleSound::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_IdleSound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Illusion::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_Illusion::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_JumpDown::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_JumpDown::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_JumpUp::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_JumpUp::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_LaunchAccumulativeBeam::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_LaunchAccumulativeBeam::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Light::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_Light::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_MatSubAction::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_MatSubAction::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_PostEffect::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_PostEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_RandomSound::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_RandomSound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_ScreenFade::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_ScreenFade::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Script::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_Script::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Scripted::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_Scripted::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_SendCommandLine::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_SendCommandLine::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Sheathe::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_Sheathe::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Sound::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_Sound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_SwimSound::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_SwimSound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_ViewShake::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAnimNotify_ViewShake::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAudioSubsystem::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UAudioSubsystem::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UBaseGUIController::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UBaseGUIController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UBeamEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UBeamEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UBitmapMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UBitmapMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UBumpShader::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UBumpShader::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCanvas::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UCanvas::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCheatManager::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UCheatManager::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UClient::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UClient::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UColorMask::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UColorMask::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UColorModifier::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UColorModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UColorVariationMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UColorVariationMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UColorWheel::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UColorWheel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCombiner::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UCombiner::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UComplementModifier::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UComplementModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UConsole::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UConsole::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UConstantColor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UConstantColor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UConstantMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UConstantMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UConvexVolume::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UConvexVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCubemap::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UCubemap::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCustomMakedMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UCustomMakedMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UDamageTextManager::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UDamageTextManager::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UDownload::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UDownload::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UEngine::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UEngine::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UExtraMeshData::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UExtraMeshData::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFadeColor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UFadeColor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFinalBlend::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UFinalBlend::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFlashSubsystem::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UFlashSubsystem::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFont::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UFont::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFontManager::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UFontManager::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UGameEngine::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UGameEngine::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UGFxFlash::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UGFxFlash::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UGlowModifier::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UGlowModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UI3DL2Listener::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UI3DL2Listener::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UIndexBuffer::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UIndexBuffer::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UInput::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UInput::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UInteraction::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UInteraction::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UInteractionMaster::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UInteractionMaster::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UInteractions::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UInteractions::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKarmaParams::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UKarmaParams::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKarmaParamsCollision::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UKarmaParamsCollision::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKarmaParamsRBFull::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UKarmaParamsRBFull::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKarmaParamsSkel::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UKarmaParamsSkel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKMeshProps::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UKMeshProps::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2ColorModifier::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2ColorModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2ConsoleWnd::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2ConsoleWnd::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2EffectEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2EffectEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2Font::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2Font::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2NEnvLight::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2NEnvLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2NEnvManager::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2NEnvManager::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2NTimeLight::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2NTimeLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2SceneInfo::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2SceneInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2SceneItem::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2SceneItem::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2SkillEffect::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UL2SkillEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULevel::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ULevel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULevelObject::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ULevelObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULevelSummary::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ULevelSummary::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULodMesh::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ULodMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULodMeshInstance::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl ULodMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMaskTexture::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMaskTexture::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMasterLevel::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMasterLevel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMatAction::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMatAction::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMaterialSequence::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMaterialSequence::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMaterialSwitch::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMaterialSwitch::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMatObject::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMatObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMatSubAction::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMatSubAction::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMesh::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshAnimation::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMeshAnimation::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshComponent::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMeshComponent::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshContainer::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMeshContainer::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMeshEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshInstance::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshObject::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UMeshObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UModel::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UModel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UModifier::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UNetConnection::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UNetConnection::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UNetDriver::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UNetDriver::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UNetworkHandler::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UNetworkHandler::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UOpacityModifier::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UOpacityModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPalette::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UPalette::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UParticleEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UParticleEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UParticleMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UParticleMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPawnAliasMgr::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UPawnAliasMgr::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPawnSheathingMgr::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UPawnSheathingMgr::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPlayer::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UPlayer::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPlayerInput::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UPlayerInput::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPolys::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UPolys::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPrimitive::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UPrimitive::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UProjectorMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UProjectorMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UProxyBitmapMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UProxyBitmapMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UReachSpec::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UReachSpec::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl URealtimeGenerationTexture::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl URealtimeGenerationTexture::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl URenderDevice::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl URenderDevice::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl URenderedMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl URenderedMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl URibbonEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl URibbonEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UScriptedTexture::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UScriptedTexture::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UShader::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UShader::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UShadowBitmapMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UShadowBitmapMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USimulationCollision::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USimulationCollision::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USimulationCylinderCollision::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USimulationCylinderCollision::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USimulationData::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USimulationData::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USimulationMesh::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USimulationMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USimulationMeshInstance::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USimulationMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USimulationNotify::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USimulationNotify::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USimulationSphereCollision::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USimulationSphereCollision::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USimulationSpringConstraint::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USimulationSpringConstraint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USkeletalMesh::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USkeletalMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USkeletalMeshInstance::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USkeletalMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USound::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USparkEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USparkEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USpriteEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USpriteEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UStaticMesh::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UStaticMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionCameraShake::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USubActionCameraShake::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionFade::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USubActionFade::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionFOV::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USubActionFOV::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionGameSpeed::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USubActionGameSpeed::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionOrientation::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USubActionOrientation::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionSceneSpeed::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USubActionSceneSpeed::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionTrigger::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl USubActionTrigger::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTerrainMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTerrainMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTerrainSector::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTerrainSector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexCoordSource::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexCoordSource::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexEnvMap::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexEnvMap::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexMatrix::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexMatrix::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexModifier::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexOscillator::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexOscillator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexOscillatorTriggered::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexOscillatorTriggered::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexPanner::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexPanner::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexPannerTriggered::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexPannerTriggered::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexRotator::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexRotator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexScaler::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexScaler::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexture::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTexture::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTrailEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UTrailEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UUnderWaterShader::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UUnderWaterShader::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UUserDefinableMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UUserDefinableMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertexBuffer::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UVertexBuffer::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertexColor::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UVertexColor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertMesh::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UVertMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertMeshEmitter::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UVertMeshEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertMeshInstance::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UVertMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UViewport::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UViewport::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UWaterMaterial::operator new(unsigned int,class UObject *,wchar_t const *,unsigned long)
	public: static void * __cdecl UWaterMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * ALineagePlayerController::m_pPrevZoneNameInfo
	public: static void __cdecl AActor::operator delete(void *)
	public: static void __cdecl AActor::operator delete(void *,class UObject *)
	public: static void __cdecl AActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAIController::operator delete(void *)
	public: static void __cdecl AAIController::operator delete(void *,class UObject *)
	public: static void __cdecl AAIController::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAIController::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAIController::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAIMarker::operator delete(void *)
	public: static void __cdecl AAIMarker::operator delete(void *,class UObject *)
	public: static void __cdecl AAIMarker::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAIMarker::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAIMarker::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAirEmitter::operator delete(void *)
	public: static void __cdecl AAirEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl AAirEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAirEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAirEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAirShip::operator delete(void *)
	public: static void __cdecl AAirShip::operator delete(void *,class UObject *)
	public: static void __cdecl AAirShip::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAirShip::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAirShip::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAirVolume::operator delete(void *)
	public: static void __cdecl AAirVolume::operator delete(void *,class UObject *)
	public: static void __cdecl AAirVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAirVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAirVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAIScript::operator delete(void *)
	public: static void __cdecl AAIScript::operator delete(void *,class UObject *)
	public: static void __cdecl AAIScript::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAIScript::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAIScript::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAmbientEventActor::operator delete(void *)
	public: static void __cdecl AAmbientEventActor::operator delete(void *,class UObject *)
	public: static void __cdecl AAmbientEventActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAmbientEventActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAmbientEventActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAmbientSound::operator delete(void *)
	public: static void __cdecl AAmbientSound::operator delete(void *,class UObject *)
	public: static void __cdecl AAmbientSound::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAmbientSound::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAmbientSound::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAmbientVolume::operator delete(void *)
	public: static void __cdecl AAmbientVolume::operator delete(void *,class UObject *)
	public: static void __cdecl AAmbientVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAmbientVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAmbientVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAmmo::operator delete(void *)
	public: static void __cdecl AAmmo::operator delete(void *,class UObject *)
	public: static void __cdecl AAmmo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAmmo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAmmo::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAmmunition::operator delete(void *)
	public: static void __cdecl AAmmunition::operator delete(void *,class UObject *)
	public: static void __cdecl AAmmunition::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAmmunition::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAmmunition::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAntiPortalActor::operator delete(void *)
	public: static void __cdecl AAntiPortalActor::operator delete(void *,class UObject *)
	public: static void __cdecl AAntiPortalActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAntiPortalActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAntiPortalActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAutoDoor::operator delete(void *)
	public: static void __cdecl AAutoDoor::operator delete(void *,class UObject *)
	public: static void __cdecl AAutoDoor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAutoDoor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAutoDoor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAutoLadder::operator delete(void *)
	public: static void __cdecl AAutoLadder::operator delete(void *,class UObject *)
	public: static void __cdecl AAutoLadder::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAutoLadder::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAutoLadder::operator delete(void *,enum EInternal *)
	public: static void __cdecl AAvoidMarker::operator delete(void *)
	public: static void __cdecl AAvoidMarker::operator delete(void *,class UObject *)
	public: static void __cdecl AAvoidMarker::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AAvoidMarker::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AAvoidMarker::operator delete(void *,enum EInternal *)
	public: static void __cdecl ABlockingVolume::operator delete(void *)
	public: static void __cdecl ABlockingVolume::operator delete(void *,class UObject *)
	public: static void __cdecl ABlockingVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ABlockingVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ABlockingVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl ABrush::operator delete(void *)
	public: static void __cdecl ABrush::operator delete(void *,class UObject *)
	public: static void __cdecl ABrush::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ABrush::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ABrush::operator delete(void *,enum EInternal *)
	public: static void __cdecl ACamera::operator delete(void *)
	public: static void __cdecl ACamera::operator delete(void *,class UObject *)
	public: static void __cdecl ACamera::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ACamera::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ACamera::operator delete(void *,enum EInternal *)
	public: static void __cdecl ACameraControlPawn::operator delete(void *)
	public: static void __cdecl ACameraControlPawn::operator delete(void *,class UObject *)
	public: static void __cdecl ACameraControlPawn::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ACameraControlPawn::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ACameraControlPawn::operator delete(void *,enum EInternal *)
	public: static void __cdecl ACameraEffectInfo::operator delete(void *)
	public: static void __cdecl ACameraEffectInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ACameraEffectInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ACameraEffectInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ACameraEffectInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ACameraVolume::operator delete(void *)
	public: static void __cdecl ACameraVolume::operator delete(void *,class UObject *)
	public: static void __cdecl ACameraVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ACameraVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ACameraVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl ACarriedObject::operator delete(void *)
	public: static void __cdecl ACarriedObject::operator delete(void *,class UObject *)
	public: static void __cdecl ACarriedObject::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ACarriedObject::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ACarriedObject::operator delete(void *,enum EInternal *)
	public: static void __cdecl AClipMarker::operator delete(void *)
	public: static void __cdecl AClipMarker::operator delete(void *,class UObject *)
	public: static void __cdecl AClipMarker::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AClipMarker::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AClipMarker::operator delete(void *,enum EInternal *)
	public: static void __cdecl AController::operator delete(void *)
	public: static void __cdecl AController::operator delete(void *,class UObject *)
	public: static void __cdecl AController::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AController::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AController::operator delete(void *,enum EInternal *)
	public: static void __cdecl ACustomizableStaticMeshActor::operator delete(void *)
	public: static void __cdecl ACustomizableStaticMeshActor::operator delete(void *,class UObject *)
	public: static void __cdecl ACustomizableStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ACustomizableStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ACustomizableStaticMeshActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl ADamageType::operator delete(void *)
	public: static void __cdecl ADamageType::operator delete(void *,class UObject *)
	public: static void __cdecl ADamageType::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ADamageType::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ADamageType::operator delete(void *,enum EInternal *)
	public: static void __cdecl ADecoration::operator delete(void *)
	public: static void __cdecl ADecoration::operator delete(void *,class UObject *)
	public: static void __cdecl ADecoration::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ADecoration::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ADecoration::operator delete(void *,enum EInternal *)
	public: static void __cdecl ADecorationList::operator delete(void *)
	public: static void __cdecl ADecorationList::operator delete(void *,class UObject *)
	public: static void __cdecl ADecorationList::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ADecorationList::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ADecorationList::operator delete(void *,enum EInternal *)
	public: static void __cdecl ADecoVolumeObject::operator delete(void *)
	public: static void __cdecl ADecoVolumeObject::operator delete(void *,class UObject *)
	public: static void __cdecl ADecoVolumeObject::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ADecoVolumeObject::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ADecoVolumeObject::operator delete(void *,enum EInternal *)
	public: static void __cdecl ADefaultPhysicsVolume::operator delete(void *)
	public: static void __cdecl ADefaultPhysicsVolume::operator delete(void *,class UObject *)
	public: static void __cdecl ADefaultPhysicsVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ADefaultPhysicsVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ADefaultPhysicsVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl ADoor::operator delete(void *)
	public: static void __cdecl ADoor::operator delete(void *,class UObject *)
	public: static void __cdecl ADoor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ADoor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ADoor::operator delete(void *,enum EInternal *)
	public: static void __cdecl ADynamicLight::operator delete(void *)
	public: static void __cdecl ADynamicLight::operator delete(void *,class UObject *)
	public: static void __cdecl ADynamicLight::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ADynamicLight::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ADynamicLight::operator delete(void *,enum EInternal *)
	public: static void __cdecl AEmitter::operator delete(void *)
	public: static void __cdecl AEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl AEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl AEmitterLight::operator delete(void *)
	public: static void __cdecl AEmitterLight::operator delete(void *,class UObject *)
	public: static void __cdecl AEmitterLight::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AEmitterLight::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AEmitterLight::operator delete(void *,enum EInternal *)
	public: static void __cdecl AEnvCreatureManagerInfo::operator delete(void *)
	public: static void __cdecl AEnvCreatureManagerInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AEnvCreatureManagerInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AEnvCreatureManagerInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AEnvCreatureManagerInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl AFileLog::operator delete(void *)
	public: static void __cdecl AFileLog::operator delete(void *,class UObject *)
	public: static void __cdecl AFileLog::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AFileLog::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AFileLog::operator delete(void *,enum EInternal *)
	public: static void __cdecl AFluidSurfaceInfo::operator delete(void *)
	public: static void __cdecl AFluidSurfaceInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AFluidSurfaceInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AFluidSurfaceInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AFluidSurfaceInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl AFluidSurfaceOscillator::operator delete(void *)
	public: static void __cdecl AFluidSurfaceOscillator::operator delete(void *,class UObject *)
	public: static void __cdecl AFluidSurfaceOscillator::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AFluidSurfaceOscillator::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AFluidSurfaceOscillator::operator delete(void *,enum EInternal *)
	public: static void __cdecl AGameInfo::operator delete(void *)
	public: static void __cdecl AGameInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AGameInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AGameInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AGameInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl AGameReplicationInfo::operator delete(void *)
	public: static void __cdecl AGameReplicationInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AGameReplicationInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AGameReplicationInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AGameReplicationInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl AGameStats::operator delete(void *)
	public: static void __cdecl AGameStats::operator delete(void *,class UObject *)
	public: static void __cdecl AGameStats::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AGameStats::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AGameStats::operator delete(void *,enum EInternal *)
	public: static void __cdecl AHUD::operator delete(void *)
	public: static void __cdecl AHUD::operator delete(void *,class UObject *)
	public: static void __cdecl AHUD::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AHUD::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AHUD::operator delete(void *,enum EInternal *)
	public: static void __cdecl AInfo::operator delete(void *)
	public: static void __cdecl AInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl AInspector::operator delete(void *)
	public: static void __cdecl AInspector::operator delete(void *,class UObject *)
	public: static void __cdecl AInspector::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AInspector::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AInspector::operator delete(void *,enum EInternal *)
	public: static void __cdecl AInternetInfo::operator delete(void *)
	public: static void __cdecl AInternetInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AInternetInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AInternetInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AInternetInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl AInterpolationPoint::operator delete(void *)
	public: static void __cdecl AInterpolationPoint::operator delete(void *,class UObject *)
	public: static void __cdecl AInterpolationPoint::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AInterpolationPoint::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AInterpolationPoint::operator delete(void *,enum EInternal *)
	public: static void __cdecl AInventory::operator delete(void *)
	public: static void __cdecl AInventory::operator delete(void *,class UObject *)
	public: static void __cdecl AInventory::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AInventory::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AInventory::operator delete(void *,enum EInternal *)
	public: static void __cdecl AInventoryAttachment::operator delete(void *)
	public: static void __cdecl AInventoryAttachment::operator delete(void *,class UObject *)
	public: static void __cdecl AInventoryAttachment::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AInventoryAttachment::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AInventoryAttachment::operator delete(void *,enum EInternal *)
	public: static void __cdecl AInventorySpot::operator delete(void *)
	public: static void __cdecl AInventorySpot::operator delete(void *,class UObject *)
	public: static void __cdecl AInventorySpot::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AInventorySpot::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AInventorySpot::operator delete(void *,enum EInternal *)
	public: static void __cdecl AJumpDest::operator delete(void *)
	public: static void __cdecl AJumpDest::operator delete(void *,class UObject *)
	public: static void __cdecl AJumpDest::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AJumpDest::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AJumpDest::operator delete(void *,enum EInternal *)
	public: static void __cdecl AJumpPad::operator delete(void *)
	public: static void __cdecl AJumpPad::operator delete(void *,class UObject *)
	public: static void __cdecl AJumpPad::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AJumpPad::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AJumpPad::operator delete(void *,enum EInternal *)
	public: static void __cdecl AKActor::operator delete(void *)
	public: static void __cdecl AKActor::operator delete(void *,class UObject *)
	public: static void __cdecl AKActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AKActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AKActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AKBSJoint::operator delete(void *)
	public: static void __cdecl AKBSJoint::operator delete(void *,class UObject *)
	public: static void __cdecl AKBSJoint::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AKBSJoint::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AKBSJoint::operator delete(void *,enum EInternal *)
	public: static void __cdecl AKCarWheelJoint::operator delete(void *)
	public: static void __cdecl AKCarWheelJoint::operator delete(void *,class UObject *)
	public: static void __cdecl AKCarWheelJoint::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AKCarWheelJoint::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AKCarWheelJoint::operator delete(void *,enum EInternal *)
	public: static void __cdecl AKConeLimit::operator delete(void *)
	public: static void __cdecl AKConeLimit::operator delete(void *,class UObject *)
	public: static void __cdecl AKConeLimit::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AKConeLimit::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AKConeLimit::operator delete(void *,enum EInternal *)
	public: static void __cdecl AKConstraint::operator delete(void *)
	public: static void __cdecl AKConstraint::operator delete(void *,class UObject *)
	public: static void __cdecl AKConstraint::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AKConstraint::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AKConstraint::operator delete(void *,enum EInternal *)
	public: static void __cdecl AKeypoint::operator delete(void *)
	public: static void __cdecl AKeypoint::operator delete(void *,class UObject *)
	public: static void __cdecl AKeypoint::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AKeypoint::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AKeypoint::operator delete(void *,enum EInternal *)
	public: static void __cdecl AKHinge::operator delete(void *)
	public: static void __cdecl AKHinge::operator delete(void *,class UObject *)
	public: static void __cdecl AKHinge::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AKHinge::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AKHinge::operator delete(void *,enum EInternal *)
	public: static void __cdecl AKTire::operator delete(void *)
	public: static void __cdecl AKTire::operator delete(void *,class UObject *)
	public: static void __cdecl AKTire::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AKTire::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AKTire::operator delete(void *,enum EInternal *)
	public: static void __cdecl AKVehicle::operator delete(void *)
	public: static void __cdecl AKVehicle::operator delete(void *,class UObject *)
	public: static void __cdecl AKVehicle::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AKVehicle::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AKVehicle::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2Alarm::operator delete(void *)
	public: static void __cdecl AL2Alarm::operator delete(void *,class UObject *)
	public: static void __cdecl AL2Alarm::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2Alarm::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2Alarm::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2CenterdDiamond::operator delete(void *)
	public: static void __cdecl AL2CenterdDiamond::operator delete(void *,class UObject *)
	public: static void __cdecl AL2CenterdDiamond::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2CenterdDiamond::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2CenterdDiamond::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2Dice::operator delete(void *)
	public: static void __cdecl AL2Dice::operator delete(void *,class UObject *)
	public: static void __cdecl AL2Dice::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2Dice::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2Dice::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2Float::operator delete(void *)
	public: static void __cdecl AL2Float::operator delete(void *,class UObject *)
	public: static void __cdecl AL2Float::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2Float::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2Float::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2Indicator::operator delete(void *)
	public: static void __cdecl AL2Indicator::operator delete(void *,class UObject *)
	public: static void __cdecl AL2Indicator::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2Indicator::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2Indicator::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2MovableStaticMeshActor::operator delete(void *)
	public: static void __cdecl AL2MovableStaticMeshActor::operator delete(void *,class UObject *)
	public: static void __cdecl AL2MovableStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2MovableStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2MovableStaticMeshActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2NMover::operator delete(void *)
	public: static void __cdecl AL2NMover::operator delete(void *,class UObject *)
	public: static void __cdecl AL2NMover::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2NMover::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2NMover::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2Pickup::operator delete(void *)
	public: static void __cdecl AL2Pickup::operator delete(void *,class UObject *)
	public: static void __cdecl AL2Pickup::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2Pickup::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2Pickup::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2Radar::operator delete(void *)
	public: static void __cdecl AL2Radar::operator delete(void *,class UObject *)
	public: static void __cdecl AL2Radar::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2Radar::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2Radar::operator delete(void *,enum EInternal *)
	public: static void __cdecl AL2SeamlessInfo::operator delete(void *)
	public: static void __cdecl AL2SeamlessInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AL2SeamlessInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AL2SeamlessInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AL2SeamlessInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALadder::operator delete(void *)
	public: static void __cdecl ALadder::operator delete(void *,class UObject *)
	public: static void __cdecl ALadder::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALadder::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALadder::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALadderVolume::operator delete(void *)
	public: static void __cdecl ALadderVolume::operator delete(void *,class UObject *)
	public: static void __cdecl ALadderVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALadderVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALadderVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALevelInfo::operator delete(void *)
	public: static void __cdecl ALevelInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ALevelInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALevelInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALevelInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALiftCenter::operator delete(void *)
	public: static void __cdecl ALiftCenter::operator delete(void *,class UObject *)
	public: static void __cdecl ALiftCenter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALiftCenter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALiftCenter::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALiftExit::operator delete(void *)
	public: static void __cdecl ALiftExit::operator delete(void *,class UObject *)
	public: static void __cdecl ALiftExit::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALiftExit::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALiftExit::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALight::operator delete(void *)
	public: static void __cdecl ALight::operator delete(void *,class UObject *)
	public: static void __cdecl ALight::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALight::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALight::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALineagePlayerController::operator delete(void *)
	public: static void __cdecl ALineagePlayerController::operator delete(void *,class UObject *)
	public: static void __cdecl ALineagePlayerController::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALineagePlayerController::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALineagePlayerController::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALineOfSightTrigger::operator delete(void *)
	public: static void __cdecl ALineOfSightTrigger::operator delete(void *,class UObject *)
	public: static void __cdecl ALineOfSightTrigger::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALineOfSightTrigger::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALineOfSightTrigger::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALocationInfo::operator delete(void *)
	public: static void __cdecl ALocationInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ALocationInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALocationInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALocationInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ALookTarget::operator delete(void *)
	public: static void __cdecl ALookTarget::operator delete(void *,class UObject *)
	public: static void __cdecl ALookTarget::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ALookTarget::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ALookTarget::operator delete(void *,enum EInternal *)
	public: static void __cdecl AMarkProjector::operator delete(void *)
	public: static void __cdecl AMarkProjector::operator delete(void *,class UObject *)
	public: static void __cdecl AMarkProjector::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AMarkProjector::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AMarkProjector::operator delete(void *,enum EInternal *)
	public: static void __cdecl AMatDemoActor::operator delete(void *)
	public: static void __cdecl AMatDemoActor::operator delete(void *,class UObject *)
	public: static void __cdecl AMatDemoActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AMatDemoActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AMatDemoActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AMovableStaticMeshActor::operator delete(void *)
	public: static void __cdecl AMovableStaticMeshActor::operator delete(void *,class UObject *)
	public: static void __cdecl AMovableStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AMovableStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AMovableStaticMeshActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AMover::operator delete(void *)
	public: static void __cdecl AMover::operator delete(void *,class UObject *)
	public: static void __cdecl AMover::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AMover::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AMover::operator delete(void *,enum EInternal *)
	public: static void __cdecl AMusicVolume::operator delete(void *)
	public: static void __cdecl AMusicVolume::operator delete(void *,class UObject *)
	public: static void __cdecl AMusicVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AMusicVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AMusicVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl AMutator::operator delete(void *)
	public: static void __cdecl AMutator::operator delete(void *,class UObject *)
	public: static void __cdecl AMutator::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AMutator::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AMutator::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANAgathion::operator delete(void *)
	public: static void __cdecl ANAgathion::operator delete(void *,class UObject *)
	public: static void __cdecl ANAgathion::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANAgathion::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANAgathion::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANavigationPoint::operator delete(void *)
	public: static void __cdecl ANavigationPoint::operator delete(void *,class UObject *)
	public: static void __cdecl ANavigationPoint::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANavigationPoint::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANavigationPoint::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANCubics::operator delete(void *)
	public: static void __cdecl ANCubics::operator delete(void *,class UObject *)
	public: static void __cdecl ANCubics::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANCubics::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANCubics::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANMoon::operator delete(void *)
	public: static void __cdecl ANMoon::operator delete(void *,class UObject *)
	public: static void __cdecl ANMoon::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANMoon::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANMoon::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANMovableSunLight::operator delete(void *)
	public: static void __cdecl ANMovableSunLight::operator delete(void *,class UObject *)
	public: static void __cdecl ANMovableSunLight::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANMovableSunLight::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANMovableSunLight::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANote::operator delete(void *)
	public: static void __cdecl ANote::operator delete(void *,class UObject *)
	public: static void __cdecl ANote::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANote::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANote::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANpcPosInfo::operator delete(void *)
	public: static void __cdecl ANpcPosInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ANpcPosInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANpcPosInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANpcPosInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANProjectile::operator delete(void *)
	public: static void __cdecl ANProjectile::operator delete(void *,class UObject *)
	public: static void __cdecl ANProjectile::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANProjectile::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANProjectile::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANSkillProjectile::operator delete(void *)
	public: static void __cdecl ANSkillProjectile::operator delete(void *,class UObject *)
	public: static void __cdecl ANSkillProjectile::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANSkillProjectile::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANSkillProjectile::operator delete(void *,enum EInternal *)
	public: static void __cdecl ANSun::operator delete(void *)
	public: static void __cdecl ANSun::operator delete(void *,class UObject *)
	public: static void __cdecl ANSun::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ANSun::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ANSun::operator delete(void *,enum EInternal *)
	public: static void __cdecl AParticleProjector::operator delete(void *)
	public: static void __cdecl AParticleProjector::operator delete(void *,class UObject *)
	public: static void __cdecl AParticleProjector::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AParticleProjector::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AParticleProjector::operator delete(void *,enum EInternal *)
	public: static void __cdecl APathNode::operator delete(void *)
	public: static void __cdecl APathNode::operator delete(void *,class UObject *)
	public: static void __cdecl APathNode::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APathNode::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APathNode::operator delete(void *,enum EInternal *)
	public: static void __cdecl APawn::operator delete(void *)
	public: static void __cdecl APawn::operator delete(void *,class UObject *)
	public: static void __cdecl APawn::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APawn::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APawn::operator delete(void *,enum EInternal *)
	public: static void __cdecl APhysicsVolume::operator delete(void *)
	public: static void __cdecl APhysicsVolume::operator delete(void *,class UObject *)
	public: static void __cdecl APhysicsVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APhysicsVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APhysicsVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl APickup::operator delete(void *)
	public: static void __cdecl APickup::operator delete(void *,class UObject *)
	public: static void __cdecl APickup::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APickup::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APickup::operator delete(void *,enum EInternal *)
	public: static void __cdecl APlayerController::operator delete(void *)
	public: static void __cdecl APlayerController::operator delete(void *,class UObject *)
	public: static void __cdecl APlayerController::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APlayerController::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APlayerController::operator delete(void *,enum EInternal *)
	public: static void __cdecl APlayerReplicationInfo::operator delete(void *)
	public: static void __cdecl APlayerReplicationInfo::operator delete(void *,class UObject *)
	public: static void __cdecl APlayerReplicationInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APlayerReplicationInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APlayerReplicationInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl APlayerStart::operator delete(void *)
	public: static void __cdecl APlayerStart::operator delete(void *,class UObject *)
	public: static void __cdecl APlayerStart::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APlayerStart::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APlayerStart::operator delete(void *,enum EInternal *)
	public: static void __cdecl APolyMarker::operator delete(void *)
	public: static void __cdecl APolyMarker::operator delete(void *,class UObject *)
	public: static void __cdecl APolyMarker::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APolyMarker::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APolyMarker::operator delete(void *,enum EInternal *)
	public: static void __cdecl APotentialClimbWatcher::operator delete(void *)
	public: static void __cdecl APotentialClimbWatcher::operator delete(void *,class UObject *)
	public: static void __cdecl APotentialClimbWatcher::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APotentialClimbWatcher::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APotentialClimbWatcher::operator delete(void *,enum EInternal *)
	public: static void __cdecl APowerups::operator delete(void *)
	public: static void __cdecl APowerups::operator delete(void *,class UObject *)
	public: static void __cdecl APowerups::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl APowerups::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl APowerups::operator delete(void *,enum EInternal *)
	public: static void __cdecl AProjectedEmitter::operator delete(void *)
	public: static void __cdecl AProjectedEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl AProjectedEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AProjectedEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AProjectedEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl AProjectile::operator delete(void *)
	public: static void __cdecl AProjectile::operator delete(void *,class UObject *)
	public: static void __cdecl AProjectile::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AProjectile::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AProjectile::operator delete(void *,enum EInternal *)
	public: static void __cdecl AProjector::operator delete(void *)
	public: static void __cdecl AProjector::operator delete(void *,class UObject *)
	public: static void __cdecl AProjector::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AProjector::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AProjector::operator delete(void *,enum EInternal *)
	public: static void __cdecl AReplicationInfo::operator delete(void *)
	public: static void __cdecl AReplicationInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AReplicationInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AReplicationInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AReplicationInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASavedMove::operator delete(void *)
	public: static void __cdecl ASavedMove::operator delete(void *,class UObject *)
	public: static void __cdecl ASavedMove::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASavedMove::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASavedMove::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASceneManager::operator delete(void *)
	public: static void __cdecl ASceneManager::operator delete(void *,class UObject *)
	public: static void __cdecl ASceneManager::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASceneManager::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASceneManager::operator delete(void *,enum EInternal *)
	public: static void __cdecl AScout::operator delete(void *)
	public: static void __cdecl AScout::operator delete(void *,class UObject *)
	public: static void __cdecl AScout::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AScout::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AScout::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASecurity::operator delete(void *)
	public: static void __cdecl ASecurity::operator delete(void *,class UObject *)
	public: static void __cdecl ASecurity::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASecurity::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASecurity::operator delete(void *,enum EInternal *)
	public: static void __cdecl AServerBlockingVolume::operator delete(void *)
	public: static void __cdecl AServerBlockingVolume::operator delete(void *,class UObject *)
	public: static void __cdecl AServerBlockingVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AServerBlockingVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AServerBlockingVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl AServerPrimitive::operator delete(void *)
	public: static void __cdecl AServerPrimitive::operator delete(void *,class UObject *)
	public: static void __cdecl AServerPrimitive::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AServerPrimitive::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AServerPrimitive::operator delete(void *,enum EInternal *)
	public: static void __cdecl AShadowProjector::operator delete(void *)
	public: static void __cdecl AShadowProjector::operator delete(void *,class UObject *)
	public: static void __cdecl AShadowProjector::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AShadowProjector::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AShadowProjector::operator delete(void *,enum EInternal *)
	public: static void __cdecl AShuttle::operator delete(void *)
	public: static void __cdecl AShuttle::operator delete(void *,class UObject *)
	public: static void __cdecl AShuttle::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AShuttle::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AShuttle::operator delete(void *,enum EInternal *)
	public: static void __cdecl AShuttleDoor::operator delete(void *)
	public: static void __cdecl AShuttleDoor::operator delete(void *,class UObject *)
	public: static void __cdecl AShuttleDoor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AShuttleDoor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AShuttleDoor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AShuttleWall::operator delete(void *)
	public: static void __cdecl AShuttleWall::operator delete(void *,class UObject *)
	public: static void __cdecl AShuttleWall::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AShuttleWall::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AShuttleWall::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASkyMeshActor::operator delete(void *)
	public: static void __cdecl ASkyMeshActor::operator delete(void *,class UObject *)
	public: static void __cdecl ASkyMeshActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASkyMeshActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASkyMeshActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASkyRenderInfo::operator delete(void *)
	public: static void __cdecl ASkyRenderInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ASkyRenderInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASkyRenderInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASkyRenderInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASkyZoneInfo::operator delete(void *)
	public: static void __cdecl ASkyZoneInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ASkyZoneInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASkyZoneInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASkyZoneInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASmallNavigationPoint::operator delete(void *)
	public: static void __cdecl ASmallNavigationPoint::operator delete(void *,class UObject *)
	public: static void __cdecl ASmallNavigationPoint::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASmallNavigationPoint::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASmallNavigationPoint::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASpawnableStaticMeshActor::operator delete(void *)
	public: static void __cdecl ASpawnableStaticMeshActor::operator delete(void *,class UObject *)
	public: static void __cdecl ASpawnableStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASpawnableStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASpawnableStaticMeshActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASpawnedLight::operator delete(void *)
	public: static void __cdecl ASpawnedLight::operator delete(void *,class UObject *)
	public: static void __cdecl ASpawnedLight::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASpawnedLight::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASpawnedLight::operator delete(void *,enum EInternal *)
	public: static void __cdecl AStaticMeshActor::operator delete(void *)
	public: static void __cdecl AStaticMeshActor::operator delete(void *,class UObject *)
	public: static void __cdecl AStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AStaticMeshActor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AStaticMeshActor::operator delete(void *,enum EInternal *)
	public: static void __cdecl AStationaryWeapons::operator delete(void *)
	public: static void __cdecl AStationaryWeapons::operator delete(void *,class UObject *)
	public: static void __cdecl AStationaryWeapons::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AStationaryWeapons::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AStationaryWeapons::operator delete(void *,enum EInternal *)
	public: static void __cdecl AStatLog::operator delete(void *)
	public: static void __cdecl AStatLog::operator delete(void *,class UObject *)
	public: static void __cdecl AStatLog::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AStatLog::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AStatLog::operator delete(void *,enum EInternal *)
	public: static void __cdecl AStatLogFile::operator delete(void *)
	public: static void __cdecl AStatLogFile::operator delete(void *,class UObject *)
	public: static void __cdecl AStatLogFile::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AStatLogFile::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AStatLogFile::operator delete(void *,enum EInternal *)
	public: static void __cdecl ASuperPointInfo::operator delete(void *)
	public: static void __cdecl ASuperPointInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ASuperPointInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ASuperPointInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ASuperPointInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ATeamInfo::operator delete(void *)
	public: static void __cdecl ATeamInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ATeamInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ATeamInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ATeamInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ATeleporter::operator delete(void *)
	public: static void __cdecl ATeleporter::operator delete(void *,class UObject *)
	public: static void __cdecl ATeleporter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ATeleporter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ATeleporter::operator delete(void *,enum EInternal *)
	public: static void __cdecl ATerrainInfo::operator delete(void *)
	public: static void __cdecl ATerrainInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ATerrainInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ATerrainInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ATerrainInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ATerritoryInfo::operator delete(void *)
	public: static void __cdecl ATerritoryInfo::operator delete(void *,class UObject *)
	public: static void __cdecl ATerritoryInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ATerritoryInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ATerritoryInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ATrigger::operator delete(void *)
	public: static void __cdecl ATrigger::operator delete(void *,class UObject *)
	public: static void __cdecl ATrigger::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ATrigger::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ATrigger::operator delete(void *,enum EInternal *)
	public: static void __cdecl ATriggers::operator delete(void *)
	public: static void __cdecl ATriggers::operator delete(void *,class UObject *)
	public: static void __cdecl ATriggers::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ATriggers::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ATriggers::operator delete(void *,enum EInternal *)
	public: static void __cdecl AVehicle::operator delete(void *)
	public: static void __cdecl AVehicle::operator delete(void *,class UObject *)
	public: static void __cdecl AVehicle::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AVehicle::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AVehicle::operator delete(void *,enum EInternal *)
	public: static void __cdecl AVehicleMeshPart::operator delete(void *)
	public: static void __cdecl AVehicleMeshPart::operator delete(void *,class UObject *)
	public: static void __cdecl AVehicleMeshPart::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AVehicleMeshPart::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AVehicleMeshPart::operator delete(void *,enum EInternal *)
	public: static void __cdecl AVehiclePart::operator delete(void *)
	public: static void __cdecl AVehiclePart::operator delete(void *,class UObject *)
	public: static void __cdecl AVehiclePart::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AVehiclePart::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AVehiclePart::operator delete(void *,enum EInternal *)
	public: static void __cdecl AVehicleRoutePoint::operator delete(void *)
	public: static void __cdecl AVehicleRoutePoint::operator delete(void *,class UObject *)
	public: static void __cdecl AVehicleRoutePoint::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AVehicleRoutePoint::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AVehicleRoutePoint::operator delete(void *,enum EInternal *)
	public: static void __cdecl AVehicleServerPart::operator delete(void *)
	public: static void __cdecl AVehicleServerPart::operator delete(void *,class UObject *)
	public: static void __cdecl AVehicleServerPart::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AVehicleServerPart::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AVehicleServerPart::operator delete(void *,enum EInternal *)
	public: static void __cdecl AViewportWindowController::operator delete(void *)
	public: static void __cdecl AViewportWindowController::operator delete(void *,class UObject *)
	public: static void __cdecl AViewportWindowController::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AViewportWindowController::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AViewportWindowController::operator delete(void *,enum EInternal *)
	public: static void __cdecl AVolume::operator delete(void *)
	public: static void __cdecl AVolume::operator delete(void *,class UObject *)
	public: static void __cdecl AVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl AWarpZoneInfo::operator delete(void *)
	public: static void __cdecl AWarpZoneInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AWarpZoneInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AWarpZoneInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AWarpZoneInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl AWarpZoneMarker::operator delete(void *)
	public: static void __cdecl AWarpZoneMarker::operator delete(void *,class UObject *)
	public: static void __cdecl AWarpZoneMarker::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AWarpZoneMarker::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AWarpZoneMarker::operator delete(void *,enum EInternal *)
	public: static void __cdecl AWaterHitEmitter::operator delete(void *)
	public: static void __cdecl AWaterHitEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl AWaterHitEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AWaterHitEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AWaterHitEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl AWeapon::operator delete(void *)
	public: static void __cdecl AWeapon::operator delete(void *,class UObject *)
	public: static void __cdecl AWeapon::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AWeapon::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AWeapon::operator delete(void *,enum EInternal *)
	public: static void __cdecl AWeaponAttachment::operator delete(void *)
	public: static void __cdecl AWeaponAttachment::operator delete(void *,class UObject *)
	public: static void __cdecl AWeaponAttachment::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AWeaponAttachment::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AWeaponAttachment::operator delete(void *,enum EInternal *)
	public: static void __cdecl AZoneInfo::operator delete(void *)
	public: static void __cdecl AZoneInfo::operator delete(void *,class UObject *)
	public: static void __cdecl AZoneInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl AZoneInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl AZoneInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl ThaiCharUtil::MakeThaiCharArray(wchar_t const *,class TArray<struct ThaiCharacter> &,wchar_t *)
	public: static void __cdecl TSingleton<class BR_EventManager>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class BR_GrpExchanger>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class CSceneManager>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class FDepthOfField>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class L224HzController>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class L2EventManager>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class L2WeatherManager>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class ServerManager>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class ServerTextureNameManager>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class UDecoration>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class UDepthEffect>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class UEditorColorEffect>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class UPostEffEnvManager>::DestroySingleton(void)
	public: static void __cdecl TSingleton<class USSAOEffect>::DestroySingleton(void)
	public: static void __cdecl UActionMoveCamera::operator delete(void *)
	public: static void __cdecl UActionMoveCamera::operator delete(void *,class UObject *)
	public: static void __cdecl UActionMoveCamera::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UActionMoveCamera::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UActionMoveCamera::operator delete(void *,enum EInternal *)
	public: static void __cdecl UActionPause::operator delete(void *)
	public: static void __cdecl UActionPause::operator delete(void *,class UObject *)
	public: static void __cdecl UActionPause::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UActionPause::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UActionPause::operator delete(void *,enum EInternal *)
	public: static void __cdecl UActionWarp::operator delete(void *)
	public: static void __cdecl UActionWarp::operator delete(void *,class UObject *)
	public: static void __cdecl UActionWarp::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UActionWarp::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UActionWarp::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAmbientSoundObject::operator delete(void *)
	public: static void __cdecl UAmbientSoundObject::operator delete(void *,class UObject *)
	public: static void __cdecl UAmbientSoundObject::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAmbientSoundObject::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAmbientSoundObject::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAmbientVolumeSound::operator delete(void *)
	public: static void __cdecl UAmbientVolumeSound::operator delete(void *,class UObject *)
	public: static void __cdecl UAmbientVolumeSound::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAmbientVolumeSound::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAmbientVolumeSound::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify::operator delete(void *)
	public: static void __cdecl UAnimNotify::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_AttackDamage::operator delete(void *)
	public: static void __cdecl UAnimNotify_AttackDamage::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_AttackDamage::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_AttackDamage::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_AttackDamage::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_AttackItem::operator delete(void *)
	public: static void __cdecl UAnimNotify_AttackItem::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_AttackItem::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_AttackItem::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_AttackItem::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_AttackPreShot::operator delete(void *)
	public: static void __cdecl UAnimNotify_AttackPreShot::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_AttackPreShot::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_AttackPreShot::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_AttackPreShot::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_AttackShot::operator delete(void *)
	public: static void __cdecl UAnimNotify_AttackShot::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_AttackShot::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_AttackShot::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_AttackShot::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_AttackVoice::operator delete(void *)
	public: static void __cdecl UAnimNotify_AttackVoice::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_AttackVoice::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_AttackVoice::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_AttackVoice::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_BoneScale::operator delete(void *)
	public: static void __cdecl UAnimNotify_BoneScale::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_BoneScale::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_BoneScale::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_BoneScale::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_CameraLocation::operator delete(void *)
	public: static void __cdecl UAnimNotify_CameraLocation::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_CameraLocation::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_CameraLocation::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_CameraLocation::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_Channeling::operator delete(void *)
	public: static void __cdecl UAnimNotify_Channeling::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_Channeling::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_Channeling::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_Channeling::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_DestroyEffect::operator delete(void *)
	public: static void __cdecl UAnimNotify_DestroyEffect::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_DestroyEffect::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_DestroyEffect::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_DestroyEffect::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_Effect::operator delete(void *)
	public: static void __cdecl UAnimNotify_Effect::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_Effect::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_Effect::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_Effect::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_IdleSound::operator delete(void *)
	public: static void __cdecl UAnimNotify_IdleSound::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_IdleSound::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_IdleSound::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_IdleSound::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_Illusion::operator delete(void *)
	public: static void __cdecl UAnimNotify_Illusion::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_Illusion::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_Illusion::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_Illusion::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_JumpDown::operator delete(void *)
	public: static void __cdecl UAnimNotify_JumpDown::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_JumpDown::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_JumpDown::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_JumpDown::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_JumpUp::operator delete(void *)
	public: static void __cdecl UAnimNotify_JumpUp::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_JumpUp::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_JumpUp::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_JumpUp::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_LaunchAccumulativeBeam::operator delete(void *)
	public: static void __cdecl UAnimNotify_LaunchAccumulativeBeam::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_LaunchAccumulativeBeam::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_LaunchAccumulativeBeam::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_LaunchAccumulativeBeam::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_Light::operator delete(void *)
	public: static void __cdecl UAnimNotify_Light::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_Light::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_Light::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_Light::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_MatSubAction::operator delete(void *)
	public: static void __cdecl UAnimNotify_MatSubAction::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_MatSubAction::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_MatSubAction::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_MatSubAction::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_PostEffect::operator delete(void *)
	public: static void __cdecl UAnimNotify_PostEffect::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_PostEffect::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_PostEffect::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_PostEffect::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_RandomSound::operator delete(void *)
	public: static void __cdecl UAnimNotify_RandomSound::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_RandomSound::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_RandomSound::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_RandomSound::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_ScreenFade::operator delete(void *)
	public: static void __cdecl UAnimNotify_ScreenFade::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_ScreenFade::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_ScreenFade::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_ScreenFade::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_Script::operator delete(void *)
	public: static void __cdecl UAnimNotify_Script::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_Script::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_Script::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_Script::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_Scripted::operator delete(void *)
	public: static void __cdecl UAnimNotify_Scripted::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_Scripted::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_Scripted::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_Scripted::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_SendCommandLine::operator delete(void *)
	public: static void __cdecl UAnimNotify_SendCommandLine::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_SendCommandLine::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_SendCommandLine::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_SendCommandLine::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_Sheathe::operator delete(void *)
	public: static void __cdecl UAnimNotify_Sheathe::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_Sheathe::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_Sheathe::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_Sheathe::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_Sound::operator delete(void *)
	public: static void __cdecl UAnimNotify_Sound::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_Sound::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_Sound::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_Sound::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_SwimSound::operator delete(void *)
	public: static void __cdecl UAnimNotify_SwimSound::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_SwimSound::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_SwimSound::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_SwimSound::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAnimNotify_ViewShake::operator delete(void *)
	public: static void __cdecl UAnimNotify_ViewShake::operator delete(void *,class UObject *)
	public: static void __cdecl UAnimNotify_ViewShake::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAnimNotify_ViewShake::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAnimNotify_ViewShake::operator delete(void *,enum EInternal *)
	public: static void __cdecl UAudioSubsystem::operator delete(void *)
	public: static void __cdecl UAudioSubsystem::operator delete(void *,class UObject *)
	public: static void __cdecl UAudioSubsystem::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UAudioSubsystem::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UAudioSubsystem::operator delete(void *,enum EInternal *)
	public: static void __cdecl UBaseGUIController::operator delete(void *)
	public: static void __cdecl UBaseGUIController::operator delete(void *,class UObject *)
	public: static void __cdecl UBaseGUIController::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UBaseGUIController::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UBaseGUIController::operator delete(void *,enum EInternal *)
	public: static void __cdecl UBeamEmitter::operator delete(void *)
	public: static void __cdecl UBeamEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl UBeamEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UBeamEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UBeamEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl UBitmapMaterial::operator delete(void *)
	public: static void __cdecl UBitmapMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UBitmapMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UBitmapMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UBitmapMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UBumpShader::operator delete(void *)
	public: static void __cdecl UBumpShader::operator delete(void *,class UObject *)
	public: static void __cdecl UBumpShader::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UBumpShader::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UBumpShader::operator delete(void *,enum EInternal *)
	public: static void __cdecl UCanvas::operator delete(void *)
	public: static void __cdecl UCanvas::operator delete(void *,class UObject *)
	public: static void __cdecl UCanvas::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UCanvas::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UCanvas::operator delete(void *,enum EInternal *)
	public: static void __cdecl UCheatManager::operator delete(void *)
	public: static void __cdecl UCheatManager::operator delete(void *,class UObject *)
	public: static void __cdecl UCheatManager::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UCheatManager::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UCheatManager::operator delete(void *,enum EInternal *)
	public: static void __cdecl UClient::operator delete(void *)
	public: static void __cdecl UClient::operator delete(void *,class UObject *)
	public: static void __cdecl UClient::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UClient::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UClient::operator delete(void *,enum EInternal *)
	public: static void __cdecl UColorMask::operator delete(void *)
	public: static void __cdecl UColorMask::operator delete(void *,class UObject *)
	public: static void __cdecl UColorMask::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UColorMask::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UColorMask::operator delete(void *,enum EInternal *)
	public: static void __cdecl UColorModifier::operator delete(void *)
	public: static void __cdecl UColorModifier::operator delete(void *,class UObject *)
	public: static void __cdecl UColorModifier::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UColorModifier::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UColorModifier::operator delete(void *,enum EInternal *)
	public: static void __cdecl UColorVariationMaterial::operator delete(void *)
	public: static void __cdecl UColorVariationMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UColorVariationMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UColorVariationMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UColorVariationMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UColorWheel::operator delete(void *)
	public: static void __cdecl UColorWheel::operator delete(void *,class UObject *)
	public: static void __cdecl UColorWheel::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UColorWheel::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UColorWheel::operator delete(void *,enum EInternal *)
	public: static void __cdecl UCombiner::operator delete(void *)
	public: static void __cdecl UCombiner::operator delete(void *,class UObject *)
	public: static void __cdecl UCombiner::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UCombiner::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UCombiner::operator delete(void *,enum EInternal *)
	public: static void __cdecl UComplementModifier::operator delete(void *)
	public: static void __cdecl UComplementModifier::operator delete(void *,class UObject *)
	public: static void __cdecl UComplementModifier::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UComplementModifier::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UComplementModifier::operator delete(void *,enum EInternal *)
	public: static void __cdecl UConsole::operator delete(void *)
	public: static void __cdecl UConsole::operator delete(void *,class UObject *)
	public: static void __cdecl UConsole::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UConsole::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UConsole::operator delete(void *,enum EInternal *)
	public: static void __cdecl UConstantColor::operator delete(void *)
	public: static void __cdecl UConstantColor::operator delete(void *,class UObject *)
	public: static void __cdecl UConstantColor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UConstantColor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UConstantColor::operator delete(void *,enum EInternal *)
	public: static void __cdecl UConstantMaterial::operator delete(void *)
	public: static void __cdecl UConstantMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UConstantMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UConstantMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UConstantMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UConvexVolume::operator delete(void *)
	public: static void __cdecl UConvexVolume::operator delete(void *,class UObject *)
	public: static void __cdecl UConvexVolume::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UConvexVolume::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UConvexVolume::operator delete(void *,enum EInternal *)
	public: static void __cdecl UCubemap::operator delete(void *)
	public: static void __cdecl UCubemap::operator delete(void *,class UObject *)
	public: static void __cdecl UCubemap::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UCubemap::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UCubemap::operator delete(void *,enum EInternal *)
	public: static void __cdecl UCustomMakedMaterial::operator delete(void *)
	public: static void __cdecl UCustomMakedMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UCustomMakedMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UCustomMakedMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UCustomMakedMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UDamageTextManager::operator delete(void *)
	public: static void __cdecl UDamageTextManager::operator delete(void *,class UObject *)
	public: static void __cdecl UDamageTextManager::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UDamageTextManager::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UDamageTextManager::operator delete(void *,enum EInternal *)
	public: static void __cdecl UDownload::operator delete(void *)
	public: static void __cdecl UDownload::operator delete(void *,class UObject *)
	public: static void __cdecl UDownload::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UDownload::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UDownload::operator delete(void *,enum EInternal *)
	public: static void __cdecl UEngine::operator delete(void *)
	public: static void __cdecl UEngine::operator delete(void *,class UObject *)
	public: static void __cdecl UEngine::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UEngine::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UEngine::operator delete(void *,enum EInternal *)
	public: static void __cdecl UExtraMeshData::operator delete(void *)
	public: static void __cdecl UExtraMeshData::operator delete(void *,class UObject *)
	public: static void __cdecl UExtraMeshData::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UExtraMeshData::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UExtraMeshData::operator delete(void *,enum EInternal *)
	public: static void __cdecl UFadeColor::operator delete(void *)
	public: static void __cdecl UFadeColor::operator delete(void *,class UObject *)
	public: static void __cdecl UFadeColor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UFadeColor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UFadeColor::operator delete(void *,enum EInternal *)
	public: static void __cdecl UFinalBlend::operator delete(void *)
	public: static void __cdecl UFinalBlend::operator delete(void *,class UObject *)
	public: static void __cdecl UFinalBlend::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UFinalBlend::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UFinalBlend::operator delete(void *,enum EInternal *)
	public: static void __cdecl UFlashSubsystem::operator delete(void *)
	public: static void __cdecl UFlashSubsystem::operator delete(void *,class UObject *)
	public: static void __cdecl UFlashSubsystem::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UFlashSubsystem::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UFlashSubsystem::operator delete(void *,enum EInternal *)
	public: static void __cdecl UFont::operator delete(void *)
	public: static void __cdecl UFont::operator delete(void *,class UObject *)
	public: static void __cdecl UFont::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UFont::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UFont::operator delete(void *,enum EInternal *)
	public: static void __cdecl UFontManager::operator delete(void *)
	public: static void __cdecl UFontManager::operator delete(void *,class UObject *)
	public: static void __cdecl UFontManager::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UFontManager::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UFontManager::operator delete(void *,enum EInternal *)
	public: static void __cdecl UGameEngine::operator delete(void *)
	public: static void __cdecl UGameEngine::operator delete(void *,class UObject *)
	public: static void __cdecl UGameEngine::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UGameEngine::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UGameEngine::operator delete(void *,enum EInternal *)
	public: static void __cdecl UGFxFlash::operator delete(void *)
	public: static void __cdecl UGFxFlash::operator delete(void *,class UObject *)
	public: static void __cdecl UGFxFlash::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UGFxFlash::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UGFxFlash::operator delete(void *,enum EInternal *)
	public: static void __cdecl UGlowModifier::operator delete(void *)
	public: static void __cdecl UGlowModifier::operator delete(void *,class UObject *)
	public: static void __cdecl UGlowModifier::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UGlowModifier::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UGlowModifier::operator delete(void *,enum EInternal *)
	public: static void __cdecl UI3DL2Listener::operator delete(void *)
	public: static void __cdecl UI3DL2Listener::operator delete(void *,class UObject *)
	public: static void __cdecl UI3DL2Listener::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UI3DL2Listener::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UI3DL2Listener::operator delete(void *,enum EInternal *)
	public: static void __cdecl UIndexBuffer::operator delete(void *)
	public: static void __cdecl UIndexBuffer::operator delete(void *,class UObject *)
	public: static void __cdecl UIndexBuffer::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UIndexBuffer::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UIndexBuffer::operator delete(void *,enum EInternal *)
	public: static void __cdecl UInput::operator delete(void *)
	public: static void __cdecl UInput::operator delete(void *,class UObject *)
	public: static void __cdecl UInput::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UInput::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UInput::operator delete(void *,enum EInternal *)
	public: static void __cdecl UInteraction::operator delete(void *)
	public: static void __cdecl UInteraction::operator delete(void *,class UObject *)
	public: static void __cdecl UInteraction::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UInteraction::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UInteraction::operator delete(void *,enum EInternal *)
	public: static void __cdecl UInteractionMaster::operator delete(void *)
	public: static void __cdecl UInteractionMaster::operator delete(void *,class UObject *)
	public: static void __cdecl UInteractionMaster::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UInteractionMaster::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UInteractionMaster::operator delete(void *,enum EInternal *)
	public: static void __cdecl UInteractions::operator delete(void *)
	public: static void __cdecl UInteractions::operator delete(void *,class UObject *)
	public: static void __cdecl UInteractions::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UInteractions::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UInteractions::operator delete(void *,enum EInternal *)
	public: static void __cdecl UKarmaParams::operator delete(void *)
	public: static void __cdecl UKarmaParams::operator delete(void *,class UObject *)
	public: static void __cdecl UKarmaParams::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UKarmaParams::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UKarmaParams::operator delete(void *,enum EInternal *)
	public: static void __cdecl UKarmaParamsCollision::operator delete(void *)
	public: static void __cdecl UKarmaParamsCollision::operator delete(void *,class UObject *)
	public: static void __cdecl UKarmaParamsCollision::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UKarmaParamsCollision::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UKarmaParamsCollision::operator delete(void *,enum EInternal *)
	public: static void __cdecl UKarmaParamsRBFull::operator delete(void *)
	public: static void __cdecl UKarmaParamsRBFull::operator delete(void *,class UObject *)
	public: static void __cdecl UKarmaParamsRBFull::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UKarmaParamsRBFull::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UKarmaParamsRBFull::operator delete(void *,enum EInternal *)
	public: static void __cdecl UKarmaParamsSkel::operator delete(void *)
	public: static void __cdecl UKarmaParamsSkel::operator delete(void *,class UObject *)
	public: static void __cdecl UKarmaParamsSkel::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UKarmaParamsSkel::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UKarmaParamsSkel::operator delete(void *,enum EInternal *)
	public: static void __cdecl UKMeshProps::operator delete(void *)
	public: static void __cdecl UKMeshProps::operator delete(void *,class UObject *)
	public: static void __cdecl UKMeshProps::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UKMeshProps::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UKMeshProps::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2ColorModifier::operator delete(void *)
	public: static void __cdecl UL2ColorModifier::operator delete(void *,class UObject *)
	public: static void __cdecl UL2ColorModifier::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2ColorModifier::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2ColorModifier::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2ConsoleWnd::operator delete(void *)
	public: static void __cdecl UL2ConsoleWnd::operator delete(void *,class UObject *)
	public: static void __cdecl UL2ConsoleWnd::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2ConsoleWnd::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2ConsoleWnd::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2EffectEmitter::operator delete(void *)
	public: static void __cdecl UL2EffectEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl UL2EffectEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2EffectEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2EffectEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2Font::operator delete(void *)
	public: static void __cdecl UL2Font::operator delete(void *,class UObject *)
	public: static void __cdecl UL2Font::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2Font::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2Font::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2NEnvLight::operator delete(void *)
	public: static void __cdecl UL2NEnvLight::operator delete(void *,class UObject *)
	public: static void __cdecl UL2NEnvLight::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2NEnvLight::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2NEnvLight::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2NEnvManager::operator delete(void *)
	public: static void __cdecl UL2NEnvManager::operator delete(void *,class UObject *)
	public: static void __cdecl UL2NEnvManager::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2NEnvManager::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2NEnvManager::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2NTimeLight::operator delete(void *)
	public: static void __cdecl UL2NTimeLight::operator delete(void *,class UObject *)
	public: static void __cdecl UL2NTimeLight::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2NTimeLight::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2NTimeLight::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2SceneInfo::operator delete(void *)
	public: static void __cdecl UL2SceneInfo::operator delete(void *,class UObject *)
	public: static void __cdecl UL2SceneInfo::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2SceneInfo::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2SceneInfo::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2SceneItem::operator delete(void *)
	public: static void __cdecl UL2SceneItem::operator delete(void *,class UObject *)
	public: static void __cdecl UL2SceneItem::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2SceneItem::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2SceneItem::operator delete(void *,enum EInternal *)
	public: static void __cdecl UL2SkillEffect::operator delete(void *)
	public: static void __cdecl UL2SkillEffect::operator delete(void *,class UObject *)
	public: static void __cdecl UL2SkillEffect::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UL2SkillEffect::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UL2SkillEffect::operator delete(void *,enum EInternal *)
	public: static void __cdecl ULevel::operator delete(void *)
	public: static void __cdecl ULevel::operator delete(void *,class UObject *)
	public: static void __cdecl ULevel::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ULevel::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ULevel::operator delete(void *,enum EInternal *)
	public: static void __cdecl ULevelObject::operator delete(void *)
	public: static void __cdecl ULevelObject::operator delete(void *,class UObject *)
	public: static void __cdecl ULevelObject::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ULevelObject::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ULevelObject::operator delete(void *,enum EInternal *)
	public: static void __cdecl ULevelSummary::operator delete(void *)
	public: static void __cdecl ULevelSummary::operator delete(void *,class UObject *)
	public: static void __cdecl ULevelSummary::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ULevelSummary::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ULevelSummary::operator delete(void *,enum EInternal *)
	public: static void __cdecl ULodMesh::operator delete(void *)
	public: static void __cdecl ULodMesh::operator delete(void *,class UObject *)
	public: static void __cdecl ULodMesh::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ULodMesh::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ULodMesh::operator delete(void *,enum EInternal *)
	public: static void __cdecl ULodMeshInstance::operator delete(void *)
	public: static void __cdecl ULodMeshInstance::operator delete(void *,class UObject *)
	public: static void __cdecl ULodMeshInstance::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl ULodMeshInstance::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl ULodMeshInstance::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMaskTexture::operator delete(void *)
	public: static void __cdecl UMaskTexture::operator delete(void *,class UObject *)
	public: static void __cdecl UMaskTexture::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMaskTexture::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMaskTexture::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMasterLevel::operator delete(void *)
	public: static void __cdecl UMasterLevel::operator delete(void *,class UObject *)
	public: static void __cdecl UMasterLevel::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMasterLevel::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMasterLevel::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMatAction::operator delete(void *)
	public: static void __cdecl UMatAction::operator delete(void *,class UObject *)
	public: static void __cdecl UMatAction::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMatAction::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMatAction::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMaterial::operator delete(void *)
	public: static void __cdecl UMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMaterialSequence::operator delete(void *)
	public: static void __cdecl UMaterialSequence::operator delete(void *,class UObject *)
	public: static void __cdecl UMaterialSequence::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMaterialSequence::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMaterialSequence::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMaterialSwitch::operator delete(void *)
	public: static void __cdecl UMaterialSwitch::operator delete(void *,class UObject *)
	public: static void __cdecl UMaterialSwitch::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMaterialSwitch::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMaterialSwitch::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMatObject::operator delete(void *)
	public: static void __cdecl UMatObject::operator delete(void *,class UObject *)
	public: static void __cdecl UMatObject::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMatObject::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMatObject::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMatSubAction::operator delete(void *)
	public: static void __cdecl UMatSubAction::operator delete(void *,class UObject *)
	public: static void __cdecl UMatSubAction::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMatSubAction::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMatSubAction::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMesh::operator delete(void *)
	public: static void __cdecl UMesh::operator delete(void *,class UObject *)
	public: static void __cdecl UMesh::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMesh::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMesh::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMeshAnimation::operator delete(void *)
	public: static void __cdecl UMeshAnimation::operator delete(void *,class UObject *)
	public: static void __cdecl UMeshAnimation::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMeshAnimation::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMeshAnimation::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMeshComponent::operator delete(void *)
	public: static void __cdecl UMeshComponent::operator delete(void *,class UObject *)
	public: static void __cdecl UMeshComponent::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMeshComponent::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMeshComponent::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMeshContainer::operator delete(void *)
	public: static void __cdecl UMeshContainer::operator delete(void *,class UObject *)
	public: static void __cdecl UMeshContainer::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMeshContainer::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMeshContainer::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMeshEmitter::operator delete(void *)
	public: static void __cdecl UMeshEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl UMeshEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMeshEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMeshEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMeshInstance::operator delete(void *)
	public: static void __cdecl UMeshInstance::operator delete(void *,class UObject *)
	public: static void __cdecl UMeshInstance::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMeshInstance::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMeshInstance::operator delete(void *,enum EInternal *)
	public: static void __cdecl UMeshObject::operator delete(void *)
	public: static void __cdecl UMeshObject::operator delete(void *,class UObject *)
	public: static void __cdecl UMeshObject::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UMeshObject::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UMeshObject::operator delete(void *,enum EInternal *)
	public: static void __cdecl UModel::operator delete(void *)
	public: static void __cdecl UModel::operator delete(void *,class UObject *)
	public: static void __cdecl UModel::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UModel::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UModel::operator delete(void *,enum EInternal *)
	public: static void __cdecl UModifier::operator delete(void *)
	public: static void __cdecl UModifier::operator delete(void *,class UObject *)
	public: static void __cdecl UModifier::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UModifier::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UModifier::operator delete(void *,enum EInternal *)
	public: static void __cdecl UNetConnection::operator delete(void *)
	public: static void __cdecl UNetConnection::operator delete(void *,class UObject *)
	public: static void __cdecl UNetConnection::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UNetConnection::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UNetConnection::operator delete(void *,enum EInternal *)
	public: static void __cdecl UNetDriver::operator delete(void *)
	public: static void __cdecl UNetDriver::operator delete(void *,class UObject *)
	public: static void __cdecl UNetDriver::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UNetDriver::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UNetDriver::operator delete(void *,enum EInternal *)
	public: static void __cdecl UNetworkHandler::operator delete(void *)
	public: static void __cdecl UNetworkHandler::operator delete(void *,class UObject *)
	public: static void __cdecl UNetworkHandler::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UNetworkHandler::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UNetworkHandler::operator delete(void *,enum EInternal *)
	public: static void __cdecl UOpacityModifier::operator delete(void *)
	public: static void __cdecl UOpacityModifier::operator delete(void *,class UObject *)
	public: static void __cdecl UOpacityModifier::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UOpacityModifier::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UOpacityModifier::operator delete(void *,enum EInternal *)
	public: static void __cdecl UPalette::operator delete(void *)
	public: static void __cdecl UPalette::operator delete(void *,class UObject *)
	public: static void __cdecl UPalette::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UPalette::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UPalette::operator delete(void *,enum EInternal *)
	public: static void __cdecl UParticleEmitter::operator delete(void *)
	public: static void __cdecl UParticleEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl UParticleEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UParticleEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UParticleEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl UParticleMaterial::operator delete(void *)
	public: static void __cdecl UParticleMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UParticleMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UParticleMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UParticleMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UPawnAliasMgr::operator delete(void *)
	public: static void __cdecl UPawnAliasMgr::operator delete(void *,class UObject *)
	public: static void __cdecl UPawnAliasMgr::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UPawnAliasMgr::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UPawnAliasMgr::operator delete(void *,enum EInternal *)
	public: static void __cdecl UPawnSheathingMgr::operator delete(void *)
	public: static void __cdecl UPawnSheathingMgr::operator delete(void *,class UObject *)
	public: static void __cdecl UPawnSheathingMgr::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UPawnSheathingMgr::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UPawnSheathingMgr::operator delete(void *,enum EInternal *)
	public: static void __cdecl UPlayer::operator delete(void *)
	public: static void __cdecl UPlayer::operator delete(void *,class UObject *)
	public: static void __cdecl UPlayer::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UPlayer::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UPlayer::operator delete(void *,enum EInternal *)
	public: static void __cdecl UPlayerInput::operator delete(void *)
	public: static void __cdecl UPlayerInput::operator delete(void *,class UObject *)
	public: static void __cdecl UPlayerInput::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UPlayerInput::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UPlayerInput::operator delete(void *,enum EInternal *)
	public: static void __cdecl UPolys::operator delete(void *)
	public: static void __cdecl UPolys::operator delete(void *,class UObject *)
	public: static void __cdecl UPolys::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UPolys::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UPolys::operator delete(void *,enum EInternal *)
	public: static void __cdecl UPrimitive::operator delete(void *)
	public: static void __cdecl UPrimitive::operator delete(void *,class UObject *)
	public: static void __cdecl UPrimitive::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UPrimitive::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UPrimitive::operator delete(void *,enum EInternal *)
	public: static void __cdecl UProjectorMaterial::operator delete(void *)
	public: static void __cdecl UProjectorMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UProjectorMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UProjectorMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UProjectorMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UProxyBitmapMaterial::operator delete(void *)
	public: static void __cdecl UProxyBitmapMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UProxyBitmapMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UProxyBitmapMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UProxyBitmapMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UReachSpec::operator delete(void *)
	public: static void __cdecl UReachSpec::operator delete(void *,class UObject *)
	public: static void __cdecl UReachSpec::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UReachSpec::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UReachSpec::operator delete(void *,enum EInternal *)
	public: static void __cdecl URealtimeGenerationTexture::operator delete(void *)
	public: static void __cdecl URealtimeGenerationTexture::operator delete(void *,class UObject *)
	public: static void __cdecl URealtimeGenerationTexture::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl URealtimeGenerationTexture::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl URealtimeGenerationTexture::operator delete(void *,enum EInternal *)
	public: static void __cdecl URenderDevice::operator delete(void *)
	public: static void __cdecl URenderDevice::operator delete(void *,class UObject *)
	public: static void __cdecl URenderDevice::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl URenderDevice::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl URenderDevice::operator delete(void *,enum EInternal *)
	public: static void __cdecl URenderedMaterial::operator delete(void *)
	public: static void __cdecl URenderedMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl URenderedMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl URenderedMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl URenderedMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl URibbonEmitter::operator delete(void *)
	public: static void __cdecl URibbonEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl URibbonEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl URibbonEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl URibbonEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl UScriptedTexture::operator delete(void *)
	public: static void __cdecl UScriptedTexture::operator delete(void *,class UObject *)
	public: static void __cdecl UScriptedTexture::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UScriptedTexture::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UScriptedTexture::operator delete(void *,enum EInternal *)
	public: static void __cdecl UShader::operator delete(void *)
	public: static void __cdecl UShader::operator delete(void *,class UObject *)
	public: static void __cdecl UShader::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UShader::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UShader::operator delete(void *,enum EInternal *)
	public: static void __cdecl UShadowBitmapMaterial::operator delete(void *)
	public: static void __cdecl UShadowBitmapMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UShadowBitmapMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UShadowBitmapMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UShadowBitmapMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl USimulationCollision::operator delete(void *)
	public: static void __cdecl USimulationCollision::operator delete(void *,class UObject *)
	public: static void __cdecl USimulationCollision::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USimulationCollision::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USimulationCollision::operator delete(void *,enum EInternal *)
	public: static void __cdecl USimulationCylinderCollision::operator delete(void *)
	public: static void __cdecl USimulationCylinderCollision::operator delete(void *,class UObject *)
	public: static void __cdecl USimulationCylinderCollision::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USimulationCylinderCollision::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USimulationCylinderCollision::operator delete(void *,enum EInternal *)
	public: static void __cdecl USimulationData::operator delete(void *)
	public: static void __cdecl USimulationData::operator delete(void *,class UObject *)
	public: static void __cdecl USimulationData::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USimulationData::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USimulationData::operator delete(void *,enum EInternal *)
	public: static void __cdecl USimulationMesh::operator delete(void *)
	public: static void __cdecl USimulationMesh::operator delete(void *,class UObject *)
	public: static void __cdecl USimulationMesh::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USimulationMesh::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USimulationMesh::operator delete(void *,enum EInternal *)
	public: static void __cdecl USimulationMeshInstance::operator delete(void *)
	public: static void __cdecl USimulationMeshInstance::operator delete(void *,class UObject *)
	public: static void __cdecl USimulationMeshInstance::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USimulationMeshInstance::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USimulationMeshInstance::operator delete(void *,enum EInternal *)
	public: static void __cdecl USimulationNotify::operator delete(void *)
	public: static void __cdecl USimulationNotify::operator delete(void *,class UObject *)
	public: static void __cdecl USimulationNotify::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USimulationNotify::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USimulationNotify::operator delete(void *,enum EInternal *)
	public: static void __cdecl USimulationSphereCollision::operator delete(void *)
	public: static void __cdecl USimulationSphereCollision::operator delete(void *,class UObject *)
	public: static void __cdecl USimulationSphereCollision::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USimulationSphereCollision::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USimulationSphereCollision::operator delete(void *,enum EInternal *)
	public: static void __cdecl USimulationSpringConstraint::operator delete(void *)
	public: static void __cdecl USimulationSpringConstraint::operator delete(void *,class UObject *)
	public: static void __cdecl USimulationSpringConstraint::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USimulationSpringConstraint::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USimulationSpringConstraint::operator delete(void *,enum EInternal *)
	public: static void __cdecl USkeletalMesh::operator delete(void *)
	public: static void __cdecl USkeletalMesh::operator delete(void *,class UObject *)
	public: static void __cdecl USkeletalMesh::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USkeletalMesh::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USkeletalMesh::operator delete(void *,enum EInternal *)
	public: static void __cdecl USkeletalMeshInstance::operator delete(void *)
	public: static void __cdecl USkeletalMeshInstance::operator delete(void *,class UObject *)
	public: static void __cdecl USkeletalMeshInstance::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USkeletalMeshInstance::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USkeletalMeshInstance::operator delete(void *,enum EInternal *)
	public: static void __cdecl USound::operator delete(void *)
	public: static void __cdecl USound::operator delete(void *,class UObject *)
	public: static void __cdecl USound::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USound::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USound::operator delete(void *,enum EInternal *)
	public: static void __cdecl USparkEmitter::operator delete(void *)
	public: static void __cdecl USparkEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl USparkEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USparkEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USparkEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl USpriteEmitter::operator delete(void *)
	public: static void __cdecl USpriteEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl USpriteEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USpriteEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USpriteEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl UStaticMesh::operator delete(void *)
	public: static void __cdecl UStaticMesh::operator delete(void *,class UObject *)
	public: static void __cdecl UStaticMesh::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UStaticMesh::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UStaticMesh::operator delete(void *,enum EInternal *)
	public: static void __cdecl USubActionCameraShake::operator delete(void *)
	public: static void __cdecl USubActionCameraShake::operator delete(void *,class UObject *)
	public: static void __cdecl USubActionCameraShake::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USubActionCameraShake::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USubActionCameraShake::operator delete(void *,enum EInternal *)
	public: static void __cdecl USubActionFade::operator delete(void *)
	public: static void __cdecl USubActionFade::operator delete(void *,class UObject *)
	public: static void __cdecl USubActionFade::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USubActionFade::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USubActionFade::operator delete(void *,enum EInternal *)
	public: static void __cdecl USubActionFOV::operator delete(void *)
	public: static void __cdecl USubActionFOV::operator delete(void *,class UObject *)
	public: static void __cdecl USubActionFOV::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USubActionFOV::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USubActionFOV::operator delete(void *,enum EInternal *)
	public: static void __cdecl USubActionGameSpeed::operator delete(void *)
	public: static void __cdecl USubActionGameSpeed::operator delete(void *,class UObject *)
	public: static void __cdecl USubActionGameSpeed::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USubActionGameSpeed::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USubActionGameSpeed::operator delete(void *,enum EInternal *)
	public: static void __cdecl USubActionOrientation::operator delete(void *)
	public: static void __cdecl USubActionOrientation::operator delete(void *,class UObject *)
	public: static void __cdecl USubActionOrientation::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USubActionOrientation::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USubActionOrientation::operator delete(void *,enum EInternal *)
	public: static void __cdecl USubActionSceneSpeed::operator delete(void *)
	public: static void __cdecl USubActionSceneSpeed::operator delete(void *,class UObject *)
	public: static void __cdecl USubActionSceneSpeed::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USubActionSceneSpeed::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USubActionSceneSpeed::operator delete(void *,enum EInternal *)
	public: static void __cdecl USubActionTrigger::operator delete(void *)
	public: static void __cdecl USubActionTrigger::operator delete(void *,class UObject *)
	public: static void __cdecl USubActionTrigger::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl USubActionTrigger::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl USubActionTrigger::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTerrainMaterial::operator delete(void *)
	public: static void __cdecl UTerrainMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UTerrainMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTerrainMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTerrainMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTerrainSector::operator delete(void *)
	public: static void __cdecl UTerrainSector::operator delete(void *,class UObject *)
	public: static void __cdecl UTerrainSector::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTerrainSector::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTerrainSector::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexCoordSource::operator delete(void *)
	public: static void __cdecl UTexCoordSource::operator delete(void *,class UObject *)
	public: static void __cdecl UTexCoordSource::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexCoordSource::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexCoordSource::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexEnvMap::operator delete(void *)
	public: static void __cdecl UTexEnvMap::operator delete(void *,class UObject *)
	public: static void __cdecl UTexEnvMap::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexEnvMap::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexEnvMap::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexMatrix::operator delete(void *)
	public: static void __cdecl UTexMatrix::operator delete(void *,class UObject *)
	public: static void __cdecl UTexMatrix::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexMatrix::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexMatrix::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexModifier::operator delete(void *)
	public: static void __cdecl UTexModifier::operator delete(void *,class UObject *)
	public: static void __cdecl UTexModifier::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexModifier::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexModifier::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexOscillator::operator delete(void *)
	public: static void __cdecl UTexOscillator::operator delete(void *,class UObject *)
	public: static void __cdecl UTexOscillator::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexOscillator::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexOscillator::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexOscillatorTriggered::operator delete(void *)
	public: static void __cdecl UTexOscillatorTriggered::operator delete(void *,class UObject *)
	public: static void __cdecl UTexOscillatorTriggered::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexOscillatorTriggered::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexOscillatorTriggered::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexPanner::operator delete(void *)
	public: static void __cdecl UTexPanner::operator delete(void *,class UObject *)
	public: static void __cdecl UTexPanner::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexPanner::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexPanner::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexPannerTriggered::operator delete(void *)
	public: static void __cdecl UTexPannerTriggered::operator delete(void *,class UObject *)
	public: static void __cdecl UTexPannerTriggered::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexPannerTriggered::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexPannerTriggered::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexRotator::operator delete(void *)
	public: static void __cdecl UTexRotator::operator delete(void *,class UObject *)
	public: static void __cdecl UTexRotator::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexRotator::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexRotator::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexScaler::operator delete(void *)
	public: static void __cdecl UTexScaler::operator delete(void *,class UObject *)
	public: static void __cdecl UTexScaler::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexScaler::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexScaler::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTexture::operator delete(void *)
	public: static void __cdecl UTexture::operator delete(void *,class UObject *)
	public: static void __cdecl UTexture::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTexture::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTexture::operator delete(void *,enum EInternal *)
	public: static void __cdecl UTrailEmitter::operator delete(void *)
	public: static void __cdecl UTrailEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl UTrailEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UTrailEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UTrailEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl UUnderWaterShader::operator delete(void *)
	public: static void __cdecl UUnderWaterShader::operator delete(void *,class UObject *)
	public: static void __cdecl UUnderWaterShader::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UUnderWaterShader::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UUnderWaterShader::operator delete(void *,enum EInternal *)
	public: static void __cdecl UUserDefinableMaterial::operator delete(void *)
	public: static void __cdecl UUserDefinableMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UUserDefinableMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UUserDefinableMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UUserDefinableMaterial::operator delete(void *,enum EInternal *)
	public: static void __cdecl UVertexBuffer::operator delete(void *)
	public: static void __cdecl UVertexBuffer::operator delete(void *,class UObject *)
	public: static void __cdecl UVertexBuffer::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UVertexBuffer::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UVertexBuffer::operator delete(void *,enum EInternal *)
	public: static void __cdecl UVertexColor::operator delete(void *)
	public: static void __cdecl UVertexColor::operator delete(void *,class UObject *)
	public: static void __cdecl UVertexColor::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UVertexColor::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UVertexColor::operator delete(void *,enum EInternal *)
	public: static void __cdecl UVertMesh::operator delete(void *)
	public: static void __cdecl UVertMesh::operator delete(void *,class UObject *)
	public: static void __cdecl UVertMesh::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UVertMesh::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UVertMesh::operator delete(void *,enum EInternal *)
	public: static void __cdecl UVertMeshEmitter::operator delete(void *)
	public: static void __cdecl UVertMeshEmitter::operator delete(void *,class UObject *)
	public: static void __cdecl UVertMeshEmitter::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UVertMeshEmitter::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UVertMeshEmitter::operator delete(void *,enum EInternal *)
	public: static void __cdecl UVertMeshInstance::operator delete(void *)
	public: static void __cdecl UVertMeshInstance::operator delete(void *,class UObject *)
	public: static void __cdecl UVertMeshInstance::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UVertMeshInstance::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UVertMeshInstance::operator delete(void *,enum EInternal *)
	public: static void __cdecl UViewport::operator delete(void *)
	public: static void __cdecl UViewport::operator delete(void *,class UObject *)
	public: static void __cdecl UViewport::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UViewport::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UViewport::operator delete(void *,enum EInternal *)
	public: static void __cdecl UWaterMaterial::operator delete(void *)
	public: static void __cdecl UWaterMaterial::operator delete(void *,class UObject *)
	public: static void __cdecl UWaterMaterial::operator delete(void *,class UObject *,wchar_t const *)
	public: static void __cdecl UWaterMaterial::operator delete(void *,class UObject *,wchar_t const *,unsigned long)
	public: static void __cdecl UWaterMaterial::operator delete(void *,enum EInternal *)
	public: static wchar_t const * const UAudioSubsystem::MUSIC_PATH
	public: static wchar_t const * const UAudioSubsystem::NPCDIALOG_PACK
	public: static wchar_t const * const UAudioSubsystem::OGG_EXT
	public: static wchar_t const * const UAudioSubsystem::PACKAGE_FORMAT
	public: static wchar_t const * const UAudioSubsystem::SYSTEMMSG_PACK
	public: static wchar_t const * const UAudioSubsystem::TUTORIAL_VOICE
	public: static wchar_t const * const UAudioSubsystem::VOICE_PATH
	public: struct FAccessoryType & __thiscall FAccessoryType::operator=(struct FAccessoryType const &)
	public: struct FAnywhereNpcMaker & __thiscall FAnywhereNpcMaker::operator=(struct FAnywhereNpcMaker const &)
	public: struct FBezierContPoint & __thiscall FBezierContPoint::operator=(struct FBezierContPoint const &)
	public: struct FBoneAdditionalEffect & __thiscall FBoneAdditionalEffect::operator=(struct FBoneAdditionalEffect const &)
	public: struct FCameraItem & __thiscall FCameraItem::operator=(struct FCameraItem const &)
	public: struct FChannelingData & __thiscall FChannelingData::operator=(struct FChannelingData const &)
	public: struct FConsoleMessage & __thiscall FConsoleMessage::operator=(struct FConsoleMessage const &)
	public: struct FDecoInfo & __thiscall FDecoInfo::operator=(struct FDecoInfo const &)
	public: struct FDecorationLayer & __thiscall FDecorationLayer::operator=(struct FDecorationLayer const &)
	public: struct FEarthQuakeParameter & __thiscall FEarthQuakeParameter::operator=(struct FEarthQuakeParameter const &)
	public: struct FEffectPawnLightParam & __thiscall FEffectPawnLightParam::operator=(struct FEffectPawnLightParam const &)
	public: struct FHitCause & __thiscall FHitCause::operator=(struct FHitCause const &)
	public: struct FKeyValuePair & __thiscall FKeyValuePair::operator=(struct FKeyValuePair const &)
	public: struct FL2AdditionalEffectData & __thiscall FL2AdditionalEffectData::operator=(struct FL2AdditionalEffectData const &)
	public: struct FL2AlterSkillData & __thiscall FL2AlterSkillData::operator=(struct FL2AlterSkillData const &)
	public: struct FL2CharData & __thiscall FL2CharData::operator=(struct FL2CharData const &)
	public: struct FL2EnterEventData & __thiscall FL2EnterEventData::operator=(struct FL2EnterEventData const &)
	public: struct FL2ExceptionMinimapData & __thiscall FL2ExceptionMinimapData::operator=(struct FL2ExceptionMinimapData const &)
	public: struct FL2MagicSkillData & __thiscall FL2MagicSkillData::operator=(struct FL2MagicSkillData const &)
	public: struct FL2NpcData & __thiscall FL2NpcData::operator=(struct FL2NpcData const &)
	public: struct FL2NpcSkillAnimData & __thiscall FL2NpcSkillAnimData::operator=(struct FL2NpcSkillAnimData const &)
	public: struct FL2PawnAnimData & __thiscall FL2PawnAnimData::operator=(struct FL2PawnAnimData const &)
	public: struct FL2PostEffectData & __thiscall FL2PostEffectData::operator=(struct FL2PostEffectData const &)
	public: struct FL2QuestMarkConditionData & __thiscall FL2QuestMarkConditionData::operator=(struct FL2QuestMarkConditionData const &)
	public: struct FL2RideData & __thiscall FL2RideData::operator=(struct FL2RideData const &)
	public: struct FL2ScenePlayerData & __thiscall FL2ScenePlayerData::operator=(struct FL2ScenePlayerData const &)
	public: struct FL2ShuttleData & __thiscall FL2ShuttleData::operator=(struct FL2ShuttleData const &)
	public: struct FL2SkillSoundData & __thiscall FL2SkillSoundData::operator=(struct FL2SkillSoundData const &)
	public: struct FL2SkillSoundSourceData & __thiscall FL2SkillSoundSourceData::operator=(struct FL2SkillSoundSourceData const &)
	public: struct FL2StatisticData & __thiscall FL2StatisticData::operator=(struct FL2StatisticData const &)
	public: struct FL2VariationEffectData & __thiscall FL2VariationEffectData::operator=(struct FL2VariationEffectData const &)
	public: struct FL2VehiclePartsData & __thiscall FL2VehiclePartsData::operator=(struct FL2VehiclePartsData const &)
	public: struct FL2WeaponEnchantEffectData & __thiscall FL2WeaponEnchantEffectData::operator=(struct FL2WeaponEnchantEffectData const &)
	public: struct FMaterialSequenceItem & __thiscall FMaterialSequenceItem::operator=(struct FMaterialSequenceItem const &)
	public: struct FMeshComponentData & __thiscall FMeshComponentData::operator=(struct FMeshComponentData const &)
	public: struct FMusicItem & __thiscall FMusicItem::operator=(struct FMusicItem const &)
	public: struct FNAtkConsumeItemParam & __thiscall FNAtkConsumeItemParam::operator=(struct FNAtkConsumeItemParam const &)
	public: struct FNAttackActionParam & __thiscall FNAttackActionParam::operator=(struct FNAttackActionParam const &)
	public: struct FNCollisionInfo & __thiscall FNCollisionInfo::operator=(struct FNCollisionInfo const &)
	public: struct FNIllusionParam & __thiscall FNIllusionParam::operator=(struct FNIllusionParam const &)
	public: struct FNIllusionPawnParam & __thiscall FNIllusionPawnParam::operator=(struct FNIllusionPawnParam const &)
	public: struct FNMagicInfo & __thiscall FNMagicInfo::operator=(struct FNMagicInfo &)
	public: struct FNpcItem & __thiscall FNpcItem::operator=(struct FNpcItem const &)
	public: struct FNPrimeActionParam & __thiscall FNPrimeActionParam::operator=(struct FNPrimeActionParam const &)
	public: struct FNSilhouetteParam & __thiscall FNSilhouetteParam::operator=(struct FNSilhouetteParam const &)
	public: struct FPcItem & __thiscall FPcItem::operator=(struct FPcItem const &)
	public: struct FPlayerResponseLine & __thiscall FPlayerResponseLine::operator=(struct FPlayerResponseLine const &)
	public: struct FPointRegion & __thiscall FPointRegion::operator=(struct FPointRegion const &)
	public: struct FRibbonPoint & __thiscall FRibbonPoint::operator=(struct FRibbonPoint const &)
	public: struct FScreenItem & __thiscall FScreenItem::operator=(struct FScreenItem const &)
	public: struct FServerResponseLine & __thiscall FServerResponseLine::operator=(struct FServerResponseLine const &)
	public: struct FSheathingInfo & __thiscall FSheathingInfo::operator=(struct FSheathingInfo const &)
	public: struct FSkyParameter & __thiscall FSkyParameter::operator=(struct FSkyParameter const &)
	public: struct FStaticMeshDecoInfo & __thiscall FStaticMeshDecoInfo::operator=(struct FStaticMeshDecoInfo const &)
	public: struct FStaticMeshDecorationLayerData & __thiscall FStaticMeshDecorationLayerData::operator=(struct FStaticMeshDecorationLayerData const &)
	public: struct FTerrainMaterialLayer & __thiscall FTerrainMaterialLayer::operator=(struct FTerrainMaterialLayer const &)
	public: struct FVehiclePartInfo & __thiscall FVehiclePartInfo::operator=(struct FVehiclePartInfo const &)
	public: struct FZoneStateFog & __thiscall FZoneStateFog::operator=(struct FZoneStateFog const &)
	public: struct HHitProxy & __thiscall HHitProxy::operator=(struct HHitProxy const &)
	public: struct User & __thiscall User::operator=(struct User const &)
	public: unsigned char & __thiscall TArray<unsigned char>::Last(int)
	public: unsigned char & __thiscall TArray<unsigned char>::operator()(int)
	public: unsigned char __thiscall TArray<unsigned char>::Pop(void)
	public: unsigned char const & __thiscall TArray<unsigned char>::Last(int)const 
	public: unsigned char const & __thiscall TArray<unsigned char>::operator()(int)const 
	public: unsigned long __thiscall UInteractionMaster::eventProcess_KeyEvent(class TArray<class UInteraction *>,unsigned char &,unsigned char &,float)
	public: unsigned long __thiscall UInteractionMaster::eventProcess_KeyType(class TArray<class UInteraction *>,unsigned char &,class FString const &)
	public: virtual class FArchive & __thiscall FOutBunch::operator<<(class FName &)
	public: virtual class FArchive & __thiscall FOutBunch::operator<<(class UObject * &)
	public: virtual int __thiscall UColorVariationMaterial::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UCombiner::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UGameEngine::OnInventoryStackableItemList(short,class TArray<int> const &)
	public: virtual int __thiscall UGameEngine::OnNpcInfo(struct User *,class FVector,int,class TArray<int> const &,class L2ParamStack &)
	public: virtual int __thiscall UGameEngine::OnShuttleInfo(struct FShuttle *,class FVector &,int,int,class TArray<struct FDoorInfo>)
	public: virtual int __thiscall UGameEngine::OnWareHouseStackableItemList(short,class TArray<int> const &)
	public: virtual int __thiscall ULevel::FindL2EventActors(class FName,class TArray<class AActor *> &)
	public: virtual int __thiscall UMasterLevel::FindL2EventActors(class FName,class TArray<class AActor *> &)
	public: virtual int __thiscall UMaterial::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UMaterialSequence::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UMaterialSwitch::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UModifier::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall URenderDevice::CompileShader(class FString const &,class TArray<unsigned long> *,class FString &)
	public: virtual int __thiscall UShader::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual void __thiscall ANProjectile::SetControlPoints(class FVector,class FVector,class TArray<class FVector> *,float)
	public: virtual void __thiscall ANSkillProjectile::SetControlPoints(class FVector,class FVector,class TArray<class FVector> *,float)
	public: virtual void __thiscall TLazyArray<unsigned char>::Load(void)
	public: virtual void __thiscall TLazyArray<unsigned char>::Unload(void)
	public: virtual void __thiscall UCanvas::WrapStringToArray(wchar_t const *,class TArray<class FString> *,float,class UFont *,wchar_t)
	public: virtual void __thiscall UGameEngine::OnCursedWeaponList(class TArray<int> *)
	public: virtual void __thiscall UGameEngine::OnCursedWeaponLocation(class TArray<int> *,class TArray<int> *,class TArray<class FVector> *)
	public: virtual void __thiscall UGameEngine::OnEndItemList(int,class TArray<int> &)
	public: virtual void __thiscall UGameEngine::OnReceiveBasicActionList(class TArray<int> &)
	public: virtual void __thiscall UL2NEnvLight::GetCloudColor(float,class TArray<class FColor> &)
	public: virtual void __thiscall UL2NEnvLight::GetHazeColor(float,class TArray<class FColor> &)
	public: virtual void __thiscall UNetworkHandler::GetObjectInfo(int,float,float,class TArray<struct User *> &)
	public: virtual void __thiscall UNetworkHandler::GetUserIDList(class TArray<int> *)
	public: virtual void __thiscall UNetworkHandler::RequestPartyMatchWaitList(int,int,int,class TArray<int> &,class FString)
	public: void __thiscall APawn::ChangeAbnormalVisualEffectType(class TArray<int> const &)
	public: void __thiscall APawn::eventGetSimulationCollision(class TArray<class USimulationCollision *> &)
	public: void __thiscall APawn::eventSetSimulationCollision(class TArray<class USimulationCollision *>)
	public: void __thiscall APawn::GetAllAnimName(class TArray<class FName> &)
	public: void __thiscall APawn::UpdateMeshComponents(int,class TArray<struct FMeshComponentData> &,int,int)
	public: void __thiscall ATerrainInfo::SetLightmapTexture(class TArray<unsigned char> const &,int,int,int)
	public: void __thiscall CSun::`default constructor closure'(void)
	public: void __thiscall FDynamicLight::`default constructor closure'(void)
	public: void __thiscall FL2ReplayManager::`default constructor closure'(void)
	public: void __thiscall FMatineeTools::GetSamples(class ASceneManager *,class UMatAction *,class TArray<class FVector> *)
	public: void __thiscall FNMagicInfo::SetInfo(int,int,struct FL2MagicSkillData *,float,class AActor *,float,class FRotator const &,class FRotator const &,int,class TArray<int> *,int,class TArray<class FVector> *)
	public: void __thiscall FNPawnLight::`default constructor closure'(void)
	public: void __thiscall FURL::`default constructor closure'(void)
	public: void __thiscall TArray<unsigned char>::CountBytes(class FArchive &)
	public: void __thiscall TArray<unsigned char>::Empty(int)
	public: void __thiscall TArray<unsigned char>::Insert(int,int)
	public: void __thiscall TArray<unsigned char>::InsertZeroed(int,int)
	public: void __thiscall TArray<unsigned char>::Process(int)
	public: void __thiscall TArray<unsigned char>::Remove(int,int)
	public: void __thiscall TArray<unsigned char>::Reserve(int)
	public: void __thiscall TArray<unsigned char>::Shrink(void)
	public: void __thiscall TLazyArray<unsigned char>::`default constructor closure'(void)
	public: void __thiscall UDamageTextManager::GetPendingDamageTexts(int,class TArray<struct FDamageTextUpdateInfo> &)
	public: void __thiscall UDecoration::Add(struct FDecorationLayer *,class TArray<struct FDecoInfo> *)
	public: void __thiscall UInteractionMaster::eventProcess_Message(class FString const &,float,class TArray<class UInteraction *>)
	public: void __thiscall UInteractionMaster::eventProcess_PostRender(class TArray<class UInteraction *>,class UCanvas *)
	public: void __thiscall UInteractionMaster::eventProcess_PreRender(class TArray<class UInteraction *>,class UCanvas *)
	public: void __thiscall UInteractionMaster::eventProcess_Tick(class TArray<class UInteraction *>,float)
	public: void __thiscall UL2NEnvManager::GetCloudColor(float,class TArray<class FColor> &,int)
	public: void __thiscall UL2NEnvManager::GetHazeColor(float,class TArray<class FColor> &,int)
	public: void __thiscall UMeshContainer::UpdateMeshComponents(int,class TArray<struct FMeshComponentData> &,int,int)
	public: void __thiscall UModel::AddLightmapTexture(class TArray<unsigned char> const &,int,int,int,int)
	public: void __thiscall User::GetMeshDataBack(class APawn *,enum EItemSlotType,enum EMeshType,class TArray<struct FMeshComponentData> &)
	public: void __thiscall User::GetMeshDataChest(class APawn *,enum EItemSlotType,enum EMeshType,class TArray<struct FMeshComponentData> &)
	public: void __thiscall User::GetMeshDataGlovesNFeet(class APawn *,enum EItemSlotType,enum EMeshType,class TArray<struct FMeshComponentData> &)
	public: void __thiscall User::GetMeshDataHairAccessary(class APawn *,enum EItemSlotType,enum EMeshType,class TArray<struct FMeshComponentData> &)
	public: void __thiscall User::GetMeshDataLegs(class APawn *,enum EItemSlotType,enum EMeshType,class TArray<struct FMeshComponentData> &)
	public: void __thiscall User::GetMeshDataRHand(class APawn *,enum EItemSlotType,enum EMeshType,class TArray<struct FMeshComponentData> &)
	public: void __thiscall USkeletalMesh::CalculateNormals(class TArray<class FVector> &,int)
	public: void __thiscall UStaticMesh::TriangleSphereQuery(class AActor *,class FSphere &,class TArray<struct FStaticMeshCollisionTriangle *> &)
	public: void __thiscall UTerrainSector::CalcLight(class ALight *,int,class TArray<unsigned long> &)
	void __cdecl DeleteAllVertexPools(class URenderDevice *)
	wchar_t const * const `public: __thiscall TLazyArray<unsigned char>::~TLazyArray<unsigned char>(void)'::`3'::__FUNC_NAME__
	wchar_t const * const `public: struct FNMagicInfo & __thiscall FNMagicInfo::operator=(struct FNMagicInfo &)'::`3'::__FUNC_NAME__
	wchar_t const * const `public: virtual void __thiscall TLazyArray<unsigned char>::Load(void)'::`3'::__FUNC_NAME__
	wchar_t const * const `public: virtual void __thiscall TLazyArray<unsigned char>::Unload(void)'::`3'::__FUNC_NAME__
