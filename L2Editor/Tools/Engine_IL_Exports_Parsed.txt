Classes:
	AAIController
	AAIMarker
	AAIScript
	AActor
	AAirEmitter
	AAirVolume
	AAmbientSound
	AAmmo
	AAmmunition
	AAntiPortalActor
	AAutoDoor
	AAutoLadder
	AAvoidMarker
	ABlockingVolume
	ABrush
	ACamera
	ACarriedObject
	AClipMarker
	AController
	ADamageType
	ADecoVolumeObject
	ADecoration
	ADecorationList
	ADefaultPhysicsVolume
	ADoor
	AEmitter
	AEmitterLight
	AEnvCreatureManagerInfo
	AFileLog
	AFluidSurfaceInfo
	AFluidSurfaceOscillator
	AGameInfo
	AGameReplicationInfo
	AGameStats
	AHUD
	AInfo
	AInspector
	AInternetInfo
	AInterpolationPoint
	AInventory
	AInventoryAttachment
	AInventorySpot
	AJumpDest
	AJumpPad
	AKActor
	AKBSJoint
	AKCarWheelJoint
	AKConeLimit
	AKConstraint
	AKHinge
	AKTire
	AKVehicle
	AKeypoint
	AL2Alarm
	AL2Dice
	AL2Float
	AL2Indicator
	AL2NMover
	AL2Pickup
	AL2Radar
	AL2SeamlessInfo
	ALadder
	ALadderVolume
	ALevelInfo
	ALiftCenter
	ALiftExit
	ALight
	ALineOfSightTrigger
	ALineagePlayerController
	ALocationInfo
	ALookTarget
	AMarkProjector
	AMatDemoActor
	AMovableStaticMeshActor
	AMover
	AMusicVolume
	AMutator
	ANCubics
	ANLine
	ANMoon
	ANMovableSunLight
	ANProjectile
	ANSkillProjectile
	ANSun
	ANavigationPoint
	ANote
	ANpcPosInfo
	APathNode
	APawn
	APhysicsVolume
	APickup
	APlayerController
	APlayerReplicationInfo
	APlayerStart
	APolyMarker
	APotentialClimbWatcher
	APowerups
	AProjectile
	AProjector
	AReplicationInfo
	ASavedMove
	ASceneManager
	AScout
	ASecurity
	AServerPrimitive
	AShadowProjector
	ASkyZoneInfo
	ASmallNavigationPoint
	ASpawnableStaticMeshActor
	AStatLog
	AStatLogFile
	AStaticMeshActor
	AStationaryWeapons
	ASuperPointInfo
	ATeamInfo
	ATeleporter
	ATerrainInfo
	ATerritoryInfo
	ATrigger
	ATriggers
	AVehicle
	AVehiclePart
	AVehicleRoutePoint
	AViewportWindowController
	AVolume
	AWarpZoneInfo
	AWarpZoneMarker
	AWaterHitEmitter
	AWeapon
	AWeaponAttachment
	AZoneInfo
	CGeoCellInfo
	CGeoZoneInfo
	CellQueueType
	ColosseumFence
	ConnectInfo
	FActorSceneNode
	FAnimMeshVertexStream
	FAnywhereNpc
	FAnywhereNpcMaker
	FBezier
	FBspSection
	FBspVertex
	FBspVertexStream
	FCameraSceneNode
	FCanvasUtil
	FCanvasVertex
	FChatMsgInfo
	FCollisionHash
	FCollisionOctree
	FColor
	FConsoleMessage
	FConvexVolume
	FDXTCompressionOptions
	FDirectionalLightMapSceneNode
	FDynamicActor
	FDynamicLight
	FEngineStats
	FFadeColorMaterialInfo
	FGPUSkinVertexStream
	FHitCause
	FHitObserver
	FInBunch
	FKAggregateGeom
	FKBoxElem
	FKConvexElem
	FKCylinderElem
	FKSphereElem
	FKeyValuePair
	FL2GameData
	FL2NpcData
	FL2ReplayManager
	FL2ResueOrCast
	FL2TextAlignParser
	FLandMark
	FLeafRenderInfo
	FLevelSceneNode
	FLightMap
	FLightMapIndex
	FLightMapSceneNode
	FLightMapTexture
	FLineBatcher
	FLineVertex
	FMaterialProperty
	FMatineeTools
	FMipmap
	FMipmapBase
	FMirrorSceneNode
	FMultiLightMapTexture
	FNAbnormalStat
	FNAbnormalStat_BIGBODY
	FNAbnormalStat_BIGHEAD
	FNAbnormalStat_CHANGE_TEXTURE
	FNAbnormalStat_DANCE_ROOT
	FNAbnormalStat_DOT_BLEEDING
	FNAbnormalStat_DOT_FIRE
	FNAbnormalStat_DOT_FIRE_AREA
	FNAbnormalStat_DOT_MP
	FNAbnormalStat_DOT_POISON
	FNAbnormalStat_DOT_SOIL
	FNAbnormalStat_DOT_WATER
	FNAbnormalStat_DOT_WIND
	FNAbnormalStat_FLESH_STONE
	FNAbnormalStat_FLOATING_ROOT
	FNAbnormalStat_GHOST_STUN
	FNAbnormalStat_MAGIC_SQUARE
	FNAbnormalStat_PARALYZE
	FNAbnormalStat_ROOT
	FNAbnormalStat_SEIZURE1
	FNAbnormalStat_SEIZURE2
	FNAbnormalStat_SILENCE
	FNAbnormalStat_SLEEP
	FNAbnormalStat_STEALTH
	FNAbnormalStat_STUN
	FNActorResourceLoader
	FNAppendixEffect
	FNAppendixEffect_COLOSSEUM_1
	FNAppendixEffect_COLOSSEUM_2
	FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE
	FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED
	FNAppendixEffect_COLOSSEUM_SELECTED_BLUE
	FNAppendixEffect_COLOSSEUM_SELECTED_RED
	FNBoneScalerStat
	FNCursedWeaponEffect
	FNMagicInfo
	FNMonsterRaceInfo
	FNMonsterRaceMgr
	FNMover
	FNPawnLight
	FNPawnResource
	FNPrimeActionParam
	FNViewShake
	FNViewShakeMgr
	FNWeaponEffect
	FNetworkNotify
	FNpcPos
	FNpcPrivate
	FOctreeNode
	FOrientation
	FOutBunch
	FParser
	FPathBuilder
	FPlayerResponseLine
	FPlayerSceneNode
	FPointLightMapSceneNode
	FPointRegion
	FPoly
	FRaw32BitIndexBuffer
	FRawColorStream
	FRawIndexBuffer
	FRebuildOptions
	FRebuildTools
	FRenderInterface
	FRenderResource
	FRibbonPoint
	FRotatorF
	FSceneNode
	FScriptedPortalSceneNode
	FServerResponseLine
	FServerStaticObject
	FShadowSceneNode
	FSkinVertexStream
	FSkySceneNode
	FSolidColorTexture
	FSoundData
	FStatGraph
	FStatGraphLine
	FStaticCubemap
	FStaticLODModelTriangle
	FStaticLightMapTexture
	FStaticMeshBatch
	FStaticMeshBatchIndexBuffer
	FStaticMeshBatchNormalVertex
	FStaticMeshBatchVertex
	FStaticMeshBatchVertexStream
	FStaticMeshCollisionNode
	FStaticMeshCollisionTriangle
	FStaticMeshColorStream
	FStaticMeshLightVisibilityStream
	FStaticMeshMaterial
	FStaticMeshSection
	FStaticMeshTriangle
	FStaticMeshUVStream
	FStaticMeshVertex
	FStaticMeshVertexStream
	FStaticProjectorInfo
	FStaticProjectorVertex
	FStaticTexture
	FStats
	FTangent
	FTangentStream
	FTempLineBatcher
	FTerrainMaterialLayer
	FTerrainTools
	FTextureModifyinfo
	FURL
	FViewportWindowParam
	FWarpZoneSceneNode
	FWaterSheetSceneNode
	FWaveModInfo
	FWayPoint
	FWhenExtinctionCreate
	FWorldBuilder
	FZoneRenderInfo
	HActor
	HBspSurf
	HCoords
	HHitProxy
	HLevelObject
	HMaterialTree
	HMatineeAction
	HMatineeScene
	HMatineeSubAction
	HMatineeTimePath
	HTerrain
	HTerrainToolLayer
	L2AbnormalZone
	L2FName
	NCBoneSimul
	NCCloakSimul
	NCClothSimul
	NCSpringSimul
	UActionMoveCamera
	UActionPause
	UActionWarp
	UActorChannel
	UAmbientSoundObject
	UAnimNotify
	UAnimNotify_AttackItem
	UAnimNotify_AttackPreShot
	UAnimNotify_AttackShot
	UAnimNotify_AttackVoice
	UAnimNotify_BoneScale
	UAnimNotify_Channeling
	UAnimNotify_DestroyEffect
	UAnimNotify_Effect
	UAnimNotify_IdleSound
	UAnimNotify_MatSubAction
	UAnimNotify_ScreenFade
	UAnimNotify_Script
	UAnimNotify_Scripted
	UAnimNotify_Sound
	UAnimNotify_SwimSound
	UAnimNotify_ViewShake
	UAnimation
	UAudioSubsystem
	UBaseGUIController
	UBeamEmitter
	UBitmapMaterial
	UBlackWhite
	UBumpShader
	UCameraEffect
	UCameraOverlay
	UCanvas
	UChannel
	UChannelDownload
	UCheatManager
	UClient
	UColorModifier
	UCombiner
	UConsole
	UConstantColor
	UConstantMaterial
	UControlChannel
	UConvexVolume
	UCubemap
	UDemoRecConnection
	UDemoRecDriver
	UDownload
	UDummyAudio
	UEngine
	UExtraMeshData
	UExtraSkeletalMeshInstance
	UFadeBlackWhite
	UFadeColor
	UFileChannel
	UFinalBlend
	UFluidSurfacePrimitive
	UFont
	UGameEngine
	UGlowEffect
	UGlowModifier
	UHDREffect
	UI3DL2Listener
	UIndexBuffer
	UInput
	UInteraction
	UInteractionMaster
	UInteractions
	UKMeshProps
	UKarmaParams
	UKarmaParamsCollision
	UKarmaParamsRBFull
	UKarmaParamsSkel
	UL2ColorModifier
	UL2ConsoleWnd
	UL2Font
	UL2NEnvLight
	UL2NEnvManager
	UL2NTimeLight
	UL2NetHandler
	UL2OrcMove
	UL2TextureFactory
	ULevel
	ULevelBase
	ULevelObject
	ULevelSummary
	ULodMesh
	ULodMeshInstance
	UMatAction
	UMatObject
	UMatSubAction
	UMaterial
	UMaterialSequence
	UMaterialSwitch
	UMesh
	UMeshAnimation
	UMeshEmitter
	UMeshInstance
	UMeshObject
	UModel
	UModifier
	UMotionBlur
	UNetConnection
	UNetDriver
	UNetworkHandler
	UNullRenderDevice
	UOpacityModifier
	UOrcMove
	UPackageCheckInfo
	UPackageMapLevel
	UPalette
	UParticleEmitter
	UParticleMaterial
	UPlayer
	UPlayerInput
	UPolys
	UPrimitive
	UProjectorMaterial
	UProjectorPrimitive
	UProxyBitmapMaterial
	UReachSpec
	URenderDevice
	URenderResource
	URenderedMaterial
	URibbonEmitter
	UScriptedTexture
	UShader
	UShadowBitmapMaterial
	USkeletalMesh
	USkeletalMeshInstance
	USkillAction
	USkillAction_LocateEffect
	USkillAction_SwordTrail
	USkillVisualEffect
	USkinVertexBuffer
	USound
	USparkEmitter
	USpriteEmitter
	UStaticMesh
	UStaticMeshInstance
	USubActionCameraEffect
	USubActionCameraShake
	USubActionFOV
	USubActionFade
	USubActionGameSpeed
	USubActionOrientation
	USubActionSceneSpeed
	USubActionTrigger
	USubSkeletalMeshInstance
	UTerrainBrush
	UTerrainBrushColor
	UTerrainBrushEdgeTurn
	UTerrainBrushFlatten
	UTerrainBrushNoise
	UTerrainBrushPaint
	UTerrainBrushSelect
	UTerrainBrushSmooth
	UTerrainBrushTexPan
	UTerrainBrushTexRotate
	UTerrainBrushTexScale
	UTerrainBrushVertexEdit
	UTerrainBrushVisibility
	UTerrainMaterial
	UTerrainPrimitive
	UTerrainSector
	UTexCoordMaterial
	UTexCoordSource
	UTexEnvMap
	UTexMatrix
	UTexModifier
	UTexOscillator
	UTexOscillatorTriggered
	UTexPanner
	UTexPannerTriggered
	UTexRotator
	UTexScaler
	UTexture
	UTrailEmitter
	UUnderWaterEffect
	UUnderWaterMaterial
	UUnderWaterShader
	UVertMesh
	UVertMeshEmitter
	UVertMeshInstance
	UVertexBuffer
	UVertexColor
	UVertexStreamBase
	UVertexStreamCOLOR
	UVertexStreamPosNormTex
	UVertexStreamUV
	UVertexStreamVECTOR
	UViewport
	UWaterMaterial
	User

Interfaces:
AAIController
	public: AAIController();
	public: AAIController(AAIController const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AcceptNearbyPath(AActor*);
	public: virtual void AdjustFromWall(FVector,AActor*);
	public: virtual void SetAdjustLocation(FVector);
	public: virtual ~AAIController();
	public: void eventGetDestination(APawn*);
	public: void eventGetSlaveDestination(APawn*);
	public: void eventOwnerPossess(APawn*);
	public: void execPollWaitToSeeEnemy(struct FFrame&,void* const);
	public: void execWaitToSeeEnemy(struct FFrame&,void* const);
AAIMarker
	public: AAIMarker();
	public: AAIMarker(AAIMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual ~AAIMarker();
AAIScript
	public: AAIScript();
	public: AAIScript(AAIScript const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual void ClearMarker();
	public: virtual ~AAIScript();
AActor
	const TCHAR* const `public: INT IsBasedOn(AActor const*)const '::`3'::__FUNC_NAME__;
	const TCHAR* const `public: INT IsJoinedTo(AActor const*)const '::`3'::__FUNC_NAME__;
	const TCHAR* const `public: void TwoWallAdjust(FVector&,FVector&,FVector&,FVector&,FLOAT)'::`3'::__FUNC_NAME__;
	public: AActor();
	public: AActor(AActor const&);
	public: AActor* GetAmbientLightingActor();
	public: AActor* GetHitActor();
	public: AActor* GetTopOwner();
	public: AActor* SpawnSkillEffect(AActor*,AActor*,FName,INT,FVector,FRotator,FLOAT,INT,INT,INT,INT);
	public: AActor* eventSpecialHandling(APawn*);
	public: DWORD eventEncroachingOn(AActor*);
	public: DWORD eventKUpdateState(struct _FKRigidBodyState&);
	public: DWORD eventPreTeleport(ATeleporter*);
	public: FCoords GetBoneCoordsWithBoneIndex(INT);
	public: FDynamicActor* GetActorRenderData();
	public: FLOAT LifeFraction();
	public: FName GetLFootBoneName();
	public: FName GetRFootBoneName();
	public: FRotator GetViewRotation();
	public: FVector GetCylinderExtent()const;
	public: FVector SuggestFallVelocity(FVector,FVector,FLOAT,FLOAT,FLOAT,FLOAT);
	public: INT AttachToBone(AActor*,FName,INT);
	public: INT AttachToBone(AActor*,INT,INT);
	public: INT DetachFromBone(AActor*);
	public: INT HasBoneName(FName);
	public: INT IsAnimating(INT)const;
	public: INT IsBasedOn(AActor const*)const;
	public: INT IsBlockedBy(AActor const*)const;
	public: INT IsBrush()const;
	public: INT IsEncroacher()const;
	public: INT IsHiddenEd();
	public: INT IsInOctree();
	public: INT IsInZone(AZoneInfo const*)const;
	public: INT IsJoinedTo(AActor const*)const;
	public: INT IsMovingBrush()const;
	public: INT IsOverlapping(AActor*,struct FCheckResult*);
	public: INT IsOwnedBy(AActor const*)const;
	public: INT IsStaticBrush()const;
	public: INT IsVolumeBrush()const;
	public: INT TestCanSeeMe(APlayerController*);
	public: INT fixedTurn(INT,INT,INT);
	public: INT moveSmooth(FVector);
	public: ULevel* GetLevel()const;
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* AssociatedLevelGeometry();
	public: virtual AActor* GetProjectorBase();
	public: virtual AEmitter* GetEmitter();
	public: virtual ALight* GetLight();
	public: virtual APawn* GetPawn();
	public: virtual APawn* GetPlayerPawn()const;
	public: virtual APlayerController* GetTopPlayerController();
	public: virtual FCoords ToLocal()const;
	public: virtual FCoords ToWorld()const;
	public: virtual FDynamicLight* GetLightRenderData();
	public: virtual FLOAT GetAmbientVolume(FLOAT);
	public: virtual FLOAT GetDamageDist();
	public: virtual FLOAT GetNetPriority(AActor*,FLOAT,FLOAT);
	public: virtual FLOAT WorldLightRadius()const;
	public: virtual FMatrix BillBoardLocalToWorld(FRotator)const;
	public: virtual FMatrix CollisionToWorld();
	public: virtual FMatrix ConvertOrthMatrix(FMatrix,INT);
	public: virtual FMatrix LocalToWorld()const;
	public: virtual FMatrix WorldToLocal()const;
	public: virtual FName GetCapeBoneName();
	public: virtual FName GetHeadBoneName();
	public: virtual FName GetL2MovementEventName();
	public: virtual FName GetL2MovementTagName(INT);
	public: virtual FName GetLArmBoneName();
	public: virtual FName GetLHandBoneName();
	public: virtual FName GetLowbodyBoneName();
	public: virtual FName GetRArmBoneName();
	public: virtual FName GetRHandBoneName();
	public: virtual FName GetSpineBoneName();
	public: virtual FRotator FindSlopeRotation(FVector,FRotator);
	public: virtual FVector GetTrailerPrePivot();
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT CanBeAttacked();
	public: virtual INT CanBeTold();
	public: virtual INT CheckAnimFinished(INT);
	public: virtual INT CheckOwnerUpdated();
	public: virtual INT HasAssociatedLevelGeometry(AActor*);
	public: virtual INT IsAAmbientSound();
	public: virtual INT IsABrush();
	public: virtual INT IsAEmitter();
	public: virtual INT IsALight();
	public: virtual INT IsAMover();
	public: virtual INT IsAPawn();
	public: virtual INT IsAPlayerController();
	public: virtual INT IsAProjectile();
	public: virtual INT IsAVolume();
	public: virtual INT IsBroadcastObserverModeActor();
	public: virtual INT IsDamageAct();
	public: virtual INT IsLoaded();
	public: virtual INT IsModifiedTexture();
	public: virtual INT IsNeedTick();
	public: virtual INT IsNetRelevantFor(APlayerController*,AActor*,FVector);
	public: virtual INT IsObserverModeActor();
	public: virtual INT IsPendingKill();
	public: virtual INT IsPlayer();
	public: virtual INT IsRendered();
	public: virtual INT IsSameAnim();
	public: virtual INT IsSpineRotation();
	public: virtual INT PlayerControlled();
	public: virtual INT PostLoadProcess();
	public: virtual INT ProcessRemoteFunction(UFunction*,void*,struct FFrame*);
	public: virtual INT ShouldTickInEntry();
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual INT ShrinkCollision(AActor*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual UMaterial* GetCloakSkin(INT);
	public: virtual UMaterial* GetLeftArmSkin(INT);
	public: virtual UMaterial* GetLeftHandSkin(INT);
	public: virtual UMaterial* GetRightArmSkin(INT);
	public: virtual UMaterial* GetRightHandSkin(INT);
	public: virtual UMaterial* GetSkin(INT);
	public: virtual UMaterial* GetSubSkin(INT);
	public: virtual UMesh* GetCloakCoverMesh();
	public: virtual UMesh* GetCloakMesh();
	public: virtual UMesh* GetLeftArmMesh();
	public: virtual UMesh* GetLeftHandMesh();
	public: virtual UMesh* GetRightArmMesh();
	public: virtual UMesh* GetRightHandMesh();
	public: virtual UMesh* GetSubMesh(INT);
	public: virtual UMeshInstance* GetCloakCoverMeshInstance();
	public: virtual UMeshInstance* GetCloakMeshInstance();
	public: virtual UMeshInstance* GetLeftArmMeshInstance();
	public: virtual UMeshInstance* GetLeftHandMeshInstance();
	public: virtual UMeshInstance* GetRightArmMeshInstance();
	public: virtual UMeshInstance* GetRightHandMeshInstance();
	public: virtual UMeshInstance* GetSubMeshInstance(INT);
	public: virtual UModifier* GetModifiedTextureMaterial();
	public: virtual UPrimitive* GetPrimitive();
	public: virtual USound* GetAttackItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetAttackVoiceSound(FLOAT);
	public: virtual USound* GetDamageSound(FLOAT&,FLOAT&);
	public: virtual USound* GetDefenseItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetShieldItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetStepSoundData();
	public: virtual struct FNMagicInfo* GetMagicInfo();
	public: virtual void AssociateAttackedNotify(APawn*,AActor*,INT,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void AttachL2MovementActor(AActor*);
	public: virtual void Attacked();
	public: virtual void AttackedNotify(APawn*,AActor*,INT,INT,INT);
	public: virtual void BoundProjectileVelocity();
	public: virtual void CheckForErrors();
	public: virtual void CheckSameAnim();
	public: virtual void ClearAlphaTexModifier();
	public: virtual void ClearL2Game();
	public: virtual void ClearMarker();
	public: virtual void ClearTexModifier();
	public: virtual void CreateSkin(FRenderInterface*);
	public: virtual void Destroy();
	public: virtual void GainedChild(AActor*);
	public: virtual void GetTargetLocation(FVector,FVector&);
	public: virtual void InitExecution();
	public: virtual void L2EventPlay(INT);
	public: virtual void L2EventShow(INT);
	public: virtual void L2Explode(FVector,AActor*);
	public: virtual void L2HitWall(FVector,AActor*);
	public: virtual void L2Touch(AActor*);
	public: virtual void LostChild(AActor*);
	public: virtual void NetDirty(UProperty*);
	public: virtual void NotifyAnimEnd(INT);
	public: virtual void NotifyBump(AActor*);
	public: virtual void PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: virtual void PostBeginPlay();
	public: virtual void PostEditChange();
	public: virtual void PostEditLoad();
	public: virtual void PostEditMove();
	public: virtual void PostLoad();
	public: virtual void PostNetReceive();
	public: virtual void PostNetReceiveLocation();
	public: virtual void PostPath();
	public: virtual void PostRaytrace();
	public: virtual void PostRender();
	public: virtual void PostScriptDestroyed();
	public: virtual void PreNetReceive();
	public: virtual void PrePath();
	public: virtual void PreRaytrace();
	public: virtual void ProcessEvent(UFunction*,void*,void*);
	public: virtual void ProcessState(FLOAT);
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetActorViewType(enum EActorViewType,INT,unsigned char);
	public: virtual void SetAddTexModifier(FColor);
	public: virtual void SetAddTexModifier(unsigned char,unsigned char,unsigned char);
	public: virtual void SetAlphaTexModifier(unsigned char);
	public: virtual void SetBase(AActor*,FVector,INT);
	public: virtual void SetCapeBoneName(FName);
	public: virtual void SetChangeColorTexModifier(unsigned char,unsigned char,unsigned char);
	public: virtual void SetCloakCoverMesh(UMesh*);
	public: virtual void SetCloakMesh(UMesh*);
	public: virtual void SetHeadBoneName(FName);
	public: virtual void SetLArmBoneName(FName);
	public: virtual void SetLHandBoneName(FName);
	public: virtual void SetLeftArmMesh(UMesh*);
	public: virtual void SetLeftHandMesh(UMesh*);
	public: virtual void SetLowbodyBoneName(FName);
	public: virtual void SetMeshes(INT,FName,INT);
	public: virtual void SetOverlayDependAlphaTexModifier(unsigned char,unsigned char,unsigned char);
	public: virtual void SetOverlayTexModifier(unsigned char,unsigned char,unsigned char,unsigned char);
	public: virtual void SetRArmBoneName(FName);
	public: virtual void SetRHandBoneName(FName);
	public: virtual void SetRightArmMesh(UMesh*);
	public: virtual void SetRightHandMesh(UMesh*);
	public: virtual void SetSpineBoneName(FName);
	public: virtual void SetStaticMeshActorViewType(INT,INT);
	public: virtual void SetSubMesh(INT,UMesh*);
	public: virtual void SetSubtractTexModifier(unsigned char,unsigned char,unsigned char);
	public: virtual void SetTexes(INT,FName,INT);
	public: virtual void SetTrailerPrePivot(FVector);
	public: virtual void SetVolumes();
	public: virtual void SetZone(INT,INT);
	public: virtual void SmoothHitWall(FVector,AActor*);
	public: virtual void Spawned();
	public: virtual void StartAnimPoll();
	public: virtual void TickAuthoritative(FLOAT);
	public: virtual void TickSimulated(FLOAT);
	public: virtual void TickSpecial(FLOAT);
	public: virtual void UpdateAnimation(FLOAT);
	public: virtual void UpdateRenderData();
	public: virtual void performPhysics(FLOAT);
	public: virtual void physFalling(FLOAT,INT);
	public: virtual void physL2Movement(FLOAT,INT);
	public: virtual void processHitWall(FVector,AActor*);
	public: virtual void processLanded(FVector,AActor*,FLOAT,INT);
	public: virtual void setPhysics(unsigned char,AActor*,FVector);
	public: virtual void stepUp(FVector,FVector,FVector,struct FCheckResult&);
	public: virtual ~AActor();
	public: void ActorSetTimer(FLOAT,INT);
	public: void AttachProjector(AProjector*);
	public: void BeginTouch(AActor*);
	public: void CheckNoiseHearing(FLOAT);
	public: void ClearRenderData();
	public: void CompactAttached();
	public: void DetachProjector(AProjector*);
	public: void EndTouch(AActor*,INT);
	public: void FindBase();
	public: void GetNetBuoyancy(FLOAT&,FLOAT&);
	public: void PlayReplicatedAnim();
	public: void ProcessDemoRecFunction(UFunction*,void*,struct FFrame*);
	public: void ReplicateAnim(INT,FName,FLOAT,FLOAT,FLOAT,FLOAT,INT);
	public: void SEtLFootBonName(FName);
	public: void SEtRFootBonName(FName);
	public: void SetActorShadertype(enum EActorEffectType);
	public: void SetCollision(INT,INT,INT);
	public: void SetCollisionSize(FLOAT,FLOAT);
	public: void SetDrawScale(FLOAT);
	public: void SetDrawScale3D(FVector);
	public: void SetDrawType(enum EDrawType);
	public: void SetOverlayColor(unsigned char,unsigned char,unsigned char,unsigned char);
	public: void SetOwner(AActor*);
	public: void SetStaticMesh(UStaticMesh*);
	public: void TwoWallAdjust(FVector&,FVector&,FVector&,FVector&,FLOAT);
	public: void UpdateOverlay(FLOAT);
	public: void UpdateRelativeRotation();
	public: void UpdateTimers(FLOAT);
	public: void eventAnimEnd(INT);
	public: void eventAttach(AActor*);
	public: void eventBaseChange();
	public: void eventBeginEvent();
	public: void eventBeginPlay();
	public: void eventBroadcastLocalizedMessage(UClass*,INT,APlayerReplicationInfo*,APlayerReplicationInfo*,UObject*);
	public: void eventBump(AActor*);
	public: void eventClearL2Game();
	public: void eventDemoPlaySound(USound*,unsigned char,FLOAT,DWORD,FLOAT,FLOAT,DWORD);
	public: void eventDestroyed();
	public: void eventDetach(AActor*);
	public: void eventEncroachedBy(AActor*);
	public: void eventEndEvent();
	public: void eventEndedRotation();
	public: void eventFalling();
	public: void eventFellOutOfWorld(unsigned char);
	public: void eventFinishedInterpolation();
	public: void eventGainedChild(AActor*);
	public: void eventGetEffTargetLocation(FVector&);
	public: void eventHitWall(FVector,AActor*);
	public: void eventKApplyForce(FVector&,FVector&);
	public: void eventKImpact(AActor*,FVector,FVector,FVector);
	public: void eventKSkelConvulse();
	public: void eventKVelDropBelow();
	public: void eventKilledBy(APawn*);
	public: void eventL2GameActionNotify(unsigned char);
	public: void eventLanded(FVector);
	public: void eventLostChild(AActor*);
	public: void eventPhysicsVolumeChange(APhysicsVolume*);
	public: void eventPostBeginPlay();
	public: void eventPostNetBeginPlay();
	public: void eventPostNetReceive();
	public: void eventPostSetPawnResource();
	public: void eventPostTeleport(ATeleporter*);
	public: void eventPostTouch(AActor*);
	public: void eventPreBeginPlay();
	public: void eventRenderTexture(UScriptedTexture*);
	public: void eventSetInitialState();
	public: void eventTakeDamage(INT,APawn*,FVector,FVector,UClass*);
	public: void eventTick(FLOAT);
	public: void eventTimer();
	public: void eventTornOff();
	public: void eventTouch(AActor*);
	public: void eventTravelPostAccept();
	public: void eventTravelPreAccept();
	public: void eventTrigger(AActor*,APawn*);
	public: void eventTriggerEvent(FName,AActor*,APawn*);
	public: void eventUnTouch(AActor*);
	public: void eventUnTrigger(AActor*,APawn*);
	public: void eventUsedBy(APawn*);
	public: void eventZoneChange(AZoneInfo*);
	public: void execAdd_ColorColor(struct FFrame&,void* const);
	public: void execAllActors(struct FFrame&,void* const);
	public: void execAnimBlendParams(struct FFrame&,void* const);
	public: void execAnimBlendToAlpha(struct FFrame&,void* const);
	public: void execAnimIsInGroup(struct FFrame&,void* const);
	public: void execAttachToBone(struct FFrame&,void* const);
	public: void execAttachToBoneWithIndex(struct FFrame&,void* const);
	public: void execAutonomousPhysics(struct FFrame&,void* const);
	public: void execBasedActors(struct FFrame&,void* const);
	public: void execBoneRefresh(struct FFrame&,void* const);
	public: void execChildActors(struct FFrame&,void* const);
	public: void execClock(struct FFrame&,void* const);
	public: void execCollidingActors(struct FFrame&,void* const);
	public: void execConsoleCommand(struct FFrame&,void* const);
	public: void execDebugClock(struct FFrame&,void* const);
	public: void execDebugUnclock(struct FFrame&,void* const);
	public: void execDemoPlaySound(struct FFrame&,void* const);
	public: void execDestroy(struct FFrame&,void* const);
	public: void execDetachFromBone(struct FFrame&,void* const);
	public: void execDrawDebugLine(struct FFrame&,void* const);
	public: void execDynamicActors(struct FFrame&,void* const);
	public: void execEnableChannelNotify(struct FFrame&,void* const);
	public: void execError(struct FFrame&,void* const);
	public: void execFastTrace(struct FFrame&,void* const);
	public: void execFinishAnim(struct FFrame&,void* const);
	public: void execFinishInterpolation(struct FFrame&,void* const);
	public: void execFreezeAnimAt(struct FFrame&,void* const);
	public: void execGetAnimParams(struct FFrame&,void* const);
	public: void execGetBoneCoords(struct FFrame&,void* const);
	public: void execGetBoneCoordsWithBoneIndex(struct FFrame&,void* const);
	public: void execGetBoneRotation(struct FFrame&,void* const);
	public: void execGetCacheEntry(struct FFrame&,void* const);
	public: void execGetMapName(struct FFrame&,void* const);
	public: void execGetMeshName(struct FFrame&,void* const);
	public: void execGetNextInt(struct FFrame&,void* const);
	public: void execGetNextIntDesc(struct FFrame&,void* const);
	public: void execGetNextSkin(struct FFrame&,void* const);
	public: void execGetNotifyChannel(struct FFrame&,void* const);
	public: void execGetRenderBoundingSphere(struct FFrame&,void* const);
	public: void execGetRootLocation(struct FFrame&,void* const);
	public: void execGetRootLocationDelta(struct FFrame&,void* const);
	public: void execGetRootRotation(struct FFrame&,void* const);
	public: void execGetRootRotationDelta(struct FFrame&,void* const);
	public: void execGetSoundDuration(struct FFrame&,void* const);
	public: void execGetURLMap(struct FFrame&,void* const);
	public: void execGetViewport(struct FFrame&,void* const);
	public: void execHasAnim(struct FFrame&,void* const);
	public: void execHasBoneName(struct FFrame&,void* const);
	public: void execIsAnimating(struct FFrame&,void* const);
	public: void execIsTweening(struct FFrame&,void* const);
	public: void execKAddBoneLifter(struct FFrame&,void* const);
	public: void execKAddImpulse(struct FFrame&,void* const);
	public: void execKDisableCollision(struct FFrame&,void* const);
	public: void execKDrawRigidBodyState(struct FFrame&,void* const);
	public: void execKEnableCollision(struct FFrame&,void* const);
	public: void execKFreezeRagdoll(struct FFrame&,void* const);
	public: void execKGetActorGravScale(struct FFrame&,void* const);
	public: void execKGetCOMOffset(struct FFrame&,void* const);
	public: void execKGetCOMPosition(struct FFrame&,void* const);
	public: void execKGetDampingProps(struct FFrame&,void* const);
	public: void execKGetFriction(struct FFrame&,void* const);
	public: void execKGetImpactThreshold(struct FFrame&,void* const);
	public: void execKGetInertiaTensor(struct FFrame&,void* const);
	public: void execKGetMass(struct FFrame&,void* const);
	public: void execKGetRBQuaternion(struct FFrame&,void* const);
	public: void execKGetRestitution(struct FFrame&,void* const);
	public: void execKGetRigidBodyState(struct FFrame&,void* const);
	public: void execKGetSkelMass(struct FFrame&,void* const);
	public: void execKIsAwake(struct FFrame&,void* const);
	public: void execKIsRagdollAvailable(struct FFrame&,void* const);
	public: void execKMakeRagdollAvailable(struct FFrame&,void* const);
	public: void execKRBVecFromVector(struct FFrame&,void* const);
	public: void execKRBVecToVector(struct FFrame&,void* const);
	public: void execKRemoveAllBoneLifters(struct FFrame&,void* const);
	public: void execKRemoveLifterFromBone(struct FFrame&,void* const);
	public: void execKSetActorGravScale(struct FFrame&,void* const);
	public: void execKSetBlockKarma(struct FFrame&,void* const);
	public: void execKSetCOMOffset(struct FFrame&,void* const);
	public: void execKSetDampingProps(struct FFrame&,void* const);
	public: void execKSetFriction(struct FFrame&,void* const);
	public: void execKSetImpactThreshold(struct FFrame&,void* const);
	public: void execKSetInertiaTensor(struct FFrame&,void* const);
	public: void execKSetMass(struct FFrame&,void* const);
	public: void execKSetRestitution(struct FFrame&,void* const);
	public: void execKSetSkelVel(struct FFrame&,void* const);
	public: void execKSetStayUpright(struct FFrame&,void* const);
	public: void execKWake(struct FFrame&,void* const);
	public: void execLinkMesh(struct FFrame&,void* const);
	public: void execLinkSkelAnim(struct FFrame&,void* const);
	public: void execLockRootMotion(struct FFrame&,void* const);
	public: void execLoopAnim(struct FFrame&,void* const);
	public: void execMakeNoise(struct FFrame&,void* const);
	public: void execMove(struct FFrame&,void* const);
	public: void execMoveCacheEntry(struct FFrame&,void* const);
	public: void execMoveSmooth(struct FFrame&,void* const);
	public: void execMultiply_ColorFloat(struct FFrame&,void* const);
	public: void execMultiply_FloatColor(struct FFrame&,void* const);
	public: void execNDestroy(struct FFrame&,void* const);
	public: void execOnlyAffectPawns(struct FFrame&,void* const);
	public: void execPlayAnim(struct FFrame&,void* const);
	public: void execPlayMusic(struct FFrame&,void* const);
	public: void execPlayOwnedSound(struct FFrame&,void* const);
	public: void execPlaySound(struct FFrame&,void* const);
	public: void execPlaySoundOnVehicle(struct FFrame&,void* const);
	public: void execPlayerCanSeeMe(struct FFrame&,void* const);
	public: void execPollFinishAnim(struct FFrame&,void* const);
	public: void execPollFinishInterpolation(struct FFrame&,void* const);
	public: void execPollSleep(struct FFrame&,void* const);
	public: void execRadiusActors(struct FFrame&,void* const);
	public: void execSetAnimFrame(struct FFrame&,void* const);
	public: void execSetBase(struct FFrame&,void* const);
	public: void execSetBoneDirection(struct FFrame&,void* const);
	public: void execSetBoneLocation(struct FFrame&,void* const);
	public: void execSetBoneRotation(struct FFrame&,void* const);
	public: void execSetBoneScale(struct FFrame&,void* const);
	public: void execSetCollision(struct FFrame&,void* const);
	public: void execSetCollisionSize(struct FFrame&,void* const);
	public: void execSetDrawScale(struct FFrame&,void* const);
	public: void execSetDrawScale3D(struct FFrame&,void* const);
	public: void execSetDrawType(struct FFrame&,void* const);
	public: void execSetLocation(struct FFrame&,void* const);
	public: void execSetOwner(struct FFrame&,void* const);
	public: void execSetPhysics(struct FFrame&,void* const);
	public: void execSetRelativeLocation(struct FFrame&,void* const);
	public: void execSetRelativeRotation(struct FFrame&,void* const);
	public: void execSetRotation(struct FFrame&,void* const);
	public: void execSetStaticMesh(struct FFrame&,void* const);
	public: void execSetTimer(struct FFrame&,void* const);
	public: void execSleep(struct FFrame&,void* const);
	public: void execSpawn(struct FFrame&,void* const);
	public: void execStopAllMusic(struct FFrame&,void* const);
	public: void execStopAnimating(struct FFrame&,void* const);
	public: void execStopMusic(struct FFrame&,void* const);
	public: void execSubtract_ColorColor(struct FFrame&,void* const);
	public: void execSuggestFallVelocity(struct FFrame&,void* const);
	public: void execTouchingActors(struct FFrame&,void* const);
	public: void execTrace(struct FFrame&,void* const);
	public: void execTraceActors(struct FFrame&,void* const);
	public: void execTweenAnim(struct FFrame&,void* const);
	public: void execUnClock(struct FFrame&,void* const);
	public: void execVisibleActors(struct FFrame&,void* const);
	public: void execVisibleCollidingActors(struct FFrame&,void* const);
	public: void physNMover(FLOAT,INT);
	public: void physNProjectile(FLOAT,INT);
	public: void physProjectile(FLOAT,INT);
	public: void physRootMotion(FLOAT);
	public: void physTrailer(FLOAT);
	public: void physicsRotation(FLOAT);
AAirEmitter
	protected: AAirEmitter();
	public: AAirEmitter(AAirEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAirEmitter();
	public: void eventForceKill();
	public: void eventSetAirVolume(AAirVolume*);
AAirVolume
	protected: AAirVolume();
	public: AAirVolume(AAirVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAirVolume();
AAmbientSound
	public: AAmbientSound();
	public: AAmbientSound(AAmbientSound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetAmbientVolume(FLOAT);
	public: virtual INT IsAAmbientSound();
	public: virtual void Destroy();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~AAmbientSound();
AAmmo
	protected: AAmmo();
	public: AAmmo(AAmmo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAmmo();
AAmmunition
	public: AAmmunition();
	public: AAmmunition(AAmmunition const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AAmmunition();
AAntiPortalActor
	protected: AAntiPortalActor();
	public: AAntiPortalActor(AAntiPortalActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAntiPortalActor();
AAutoDoor
	protected: AAutoDoor();
	public: AAutoDoor(AAutoDoor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAutoDoor();
AAutoLadder
	public: AAutoLadder();
	public: AAutoLadder(AAutoLadder const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual ~AAutoLadder();
AAvoidMarker
	protected: AAvoidMarker();
	public: AAvoidMarker(AAvoidMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AAvoidMarker();
ABlockingVolume
	public: ABlockingVolume();
	public: ABlockingVolume(ABlockingVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual ~ABlockingVolume();
ABrush
	const TCHAR* const `public: FLOAT BuildCoords(FModelCoords*,FModelCoords*)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: FLOAT OldBuildCoords(FModelCoords*,FModelCoords*)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: virtual void CopyPosRotScaleFrom(ABrush*)'::`3'::__FUNC_NAME__;
	public: ABrush();
	public: ABrush(ABrush const&);
	public: FCoords OldToLocal()const;
	public: FCoords OldToWorld()const;
	public: FLOAT BuildCoords(FModelCoords*,FModelCoords*);
	public: FLOAT OldBuildCoords(FModelCoords*,FModelCoords*);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FCoords ToLocal()const;
	public: virtual FCoords ToWorld()const;
	public: virtual INT IsABrush();
	public: virtual UPrimitive* GetPrimitive();
	public: virtual void CheckForErrors();
	public: virtual void CopyPosRotScaleFrom(ABrush*);
	public: virtual void InitPosRotScale();
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual ~ABrush();
ACamera
	public: ACamera();
	public: ACamera(ACamera const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~ACamera();
ACarriedObject
	public: ACarriedObject();
	public: ACarriedObject(ACarriedObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~ACarriedObject();
AClipMarker
	protected: AClipMarker();
	public: AClipMarker(AClipMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AClipMarker();
AController
	public: AActor* FindPath(FVector,AActor*,INT);
	public: AActor* HandleSpecial(AActor*);
	public: AActor* SetPath(INT);
	public: AController();
	public: AController(AController const&);
	public: DWORD LineOfSightTo(AActor*,INT);
	public: DWORD SeePawn(APawn*,INT);
	public: DWORD eventAllowDetourTo(ANavigationPoINT*);
	public: DWORD eventNotifyBump(AActor*);
	public: DWORD eventNotifyHeadVolumeChange(APhysicsVolume*);
	public: DWORD eventNotifyHitWall(FVector,AActor*);
	public: DWORD eventNotifyLanded(FVector);
	public: DWORD eventNotifyPhysicsVolumeChange(APhysicsVolume*);
	public: FLOAT eventDesireability(APickup*);
	public: INT CanHear(FVector,FLOAT,AActor*);
	public: INT CanHearSound(FVector,AActor*,FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* GetSelectedActor();
	public: virtual AActor* GetViewTarget();
	public: virtual INT AcceptNearbyPath(AActor*);
	public: virtual INT CheckAnimFinished(INT);
	public: virtual INT GetSelectedCreatureID();
	public: virtual INT HitWallNotify(FVector,AActor*);
	public: virtual INT IsBroadcastObserverMode();
	public: virtual INT IsObserverMode();
	public: virtual INT LocalPlayerController();
	public: virtual INT StopAtLedge();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual INT WantsLedgeCheck();
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void AdjustFromWall(FVector,AActor*);
	public: virtual void CheckHearSound(AActor*,INT,USound*,FVector,FLOAT,INT);
	public: virtual void ResetMusicControll();
	public: virtual void SetAdjustLocation(FVector);
	public: virtual void SetBroadcastObserverMode(INT);
	public: virtual void SetSelectedActor(AActor*);
	public: virtual void SetSelectedCreatureID(INT);
	public: virtual void SetVehicleStatus(INT);
	public: virtual void StartAnimPoll();
	public: virtual void StopMove();
	public: virtual ~AController();
	public: void AddFlyTo(FVector,FVector,INT);
	public: void AddMoveTo(FVector,FVector);
	public: void AddMoveToward(FVector,AActor*,FLOAT);
	public: void CheckEnemyVisible();
	public: void CheckFears();
	public: void ClearL2NetCommand();
	public: void FlyTo(FVector,INT,AActor*,FLOAT);
	public: void L2NetCommand(INT);
	public: void MoveBackTo(FVector,AActor*,FLOAT);
	public: void MoveTo(FVector,AActor*,FLOAT);
	public: void MoveToNotRotation(FVector,AActor*,FLOAT);
	public: void MoveToward(AActor*,AActor*,FLOAT);
	public: void PendingL2NetCommand();
	public: void SetRouteCache(ANavigationPoINT*,FLOAT,FLOAT);
	public: void ShowSelf();
	public: void StopMoveToward();
	public: void StopMoveWithLocation(FVector);
	public: void eventAIHearSound(AActor*,INT,USound*,FVector,FVector,DWORD);
	public: void eventEnemyNotVisible();
	public: void eventHearNoise(FLOAT,AActor*);
	public: void eventLongFall();
	public: void eventMayFall();
	public: void eventMonitoredPawnAlert();
	public: void eventNotifyHitMover(FVector,AMover*);
	public: void eventNotifyJumpApex();
	public: void eventNotifyMissedJump();
	public: void eventPrepareForMove(ANavigationPoINT*,UReachSpec*);
	public: void eventSeeMonster(APawn*);
	public: void eventSeePlayer(APawn*);
	public: void eventSetupSpecialPathAbilities();
	public: void eventSoakStop(FString const&);
	public: void execAddController(struct FFrame&,void* const);
	public: void execCanSee(struct FFrame&,void* const);
	public: void execEAdjustJump(struct FFrame&,void* const);
	public: void execEndClimbLadder(struct FFrame&,void* const);
	public: void execFindBestInventoryPath(struct FFrame&,void* const);
	public: void execFindPathTo(struct FFrame&,void* const);
	public: void execFindPathToIntercept(struct FFrame&,void* const);
	public: void execFindPathToward(struct FFrame&,void* const);
	public: void execFindPathTowardNearest(struct FFrame&,void* const);
	public: void execFindRandomDest(struct FFrame&,void* const);
	public: void execFinishRotation(struct FFrame&,void* const);
	public: void execInLatentExecution(struct FFrame&,void* const);
	public: void execLineOfSightTo(struct FFrame&,void* const);
	public: void execMoveTo(struct FFrame&,void* const);
	public: void execMoveToward(struct FFrame&,void* const);
	public: void execPickAnyTarget(struct FFrame&,void* const);
	public: void execPickTarget(struct FFrame&,void* const);
	public: void execPickWallAdjust(struct FFrame&,void* const);
	public: void execPollFinishRotation(struct FFrame&,void* const);
	public: void execPollMoveTo(struct FFrame&,void* const);
	public: void execPollMoveToward(struct FFrame&,void* const);
	public: void execPollWaitForLanding(struct FFrame&,void* const);
	public: void execRemoveController(struct FFrame&,void* const);
	public: void execStopWaiting(struct FFrame&,void* const);
	public: void execWaitForLanding(struct FFrame&,void* const);
	public: void execactorReachable(struct FFrame&,void* const);
	public: void execpoINTReachable(struct FFrame&,void* const);
ADamageType
	protected: ADamageType();
	public: ADamageType(ADamageType const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ADamageType();
ADecoVolumeObject
	protected: ADecoVolumeObject();
	public: ADecoVolumeObject(ADecoVolumeObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ADecoVolumeObject();
ADecoration
	public: ADecoration();
	public: ADecoration(ADecoration const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void processLanded(FVector,AActor*,FLOAT,INT);
	public: virtual ~ADecoration();
ADecorationList
	protected: ADecorationList();
	public: ADecorationList(ADecorationList const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ADecorationList();
ADefaultPhysicsVolume
	protected: ADefaultPhysicsVolume();
	public: ADefaultPhysicsVolume(ADefaultPhysicsVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ADefaultPhysicsVolume();
ADoor
	public: ADoor();
	public: ADoor(ADoor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* AssociatedLevelGeometry();
	public: virtual INT HasAssociatedLevelGeometry(AActor*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual void FindBase();
	public: virtual void InitForPathFinding();
	public: virtual void PostPath();
	public: virtual void PostaddReachSpecs(APawn*);
	public: virtual void PrePath();
	public: virtual ~ADoor();
AEmitter
	public: AEmitter();
	public: AEmitter(AEmitter const&);
	public: FLOAT GetParticleMaxLifeTimeRange();
	public: INT CheckFirstSpawnParticle();
	public: INT SpawnEmitterLight();
	public: INT SpawnEmitterQuake();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AEmitter* GetEmitter();
	public: virtual FVector GetTrailerPrePivot();
	public: virtual INT CheckForProjectors();
	public: virtual INT IsAEmitter();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void ClearL2Game();
	public: virtual void Destroy();
	public: virtual void Initialize();
	public: virtual void Kill();
	public: virtual void L2EventShow(INT);
	public: virtual void NotifyAnimEnd(INT);
	public: virtual void PostScriptDestroyed();
	public: virtual void PreDestroyEvent();
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void Spawned();
	public: virtual ~AEmitter();
	public: void AdjustparticleLife(FLOAT);
	public: void EmitterRotation(FLOAT);
	public: void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: void SetDelayed(FLOAT,INT,INT);
	public: void SetDisabled(INT,INT,INT);
	public: void SetMaxParticles(FLOAT);
	public: void SetOpacity(FLOAT);
	public: void SetOpacityRatio(FLOAT);
	public: void SetParticleLifeTimeRange(FLOAT);
	public: void SetParticleMaxParticles(FLOAT);
	public: void SetSizeScale(FLOAT);
	public: void SetSpeedRate(FLOAT);
	public: void SetSpeedScale(FLOAT);
	public: void execKill(struct FFrame&,void* const);
	public: void execSetSizeScale(struct FFrame&,void* const);
AEmitterLight
	public: AEmitterLight();
	public: AEmitterLight(AEmitterLight const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FDynamicLight* GetLightRenderData();
	public: virtual ~AEmitterLight();
AEnvCreatureManagerInfo
	public: AEnvCreatureManagerInfo();
	public: AEnvCreatureManagerInfo(AEnvCreatureManagerInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void PostBeginPlay();
	public: virtual void PostScriptDestroyed();
	public: virtual void SetInit(INT,FVector,FName,FLOAT,FLOAT,INT);
	public: virtual ~AEnvCreatureManagerInfo();
AFileLog
	protected: AFileLog();
	public: AFileLog(AFileLog const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AFileLog();
	public: void execCloseLog(struct FFrame&,void* const);
	public: void execLogf(struct FFrame&,void* const);
	public: void execOpenLog(struct FFrame&,void* const);
AFluidSurfaceInfo
	protected: AFluidSurfaceInfo();
	public: AFluidSurfaceInfo(AFluidSurfaceInfo const&);
	public: FVector GetVertexPosLocal(INT,INT);
	public: FVector GetVertexPosWorld(INT,INT);
	public: INT GetClampedBitmap(INT,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual UPrimitive* GetPrimitive();
	public: virtual void Destroy();
	public: virtual void PostEditChange();
	public: virtual void PostEditMove();
	public: virtual void PostLoad();
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void Spawned();
	public: virtual ~AFluidSurfaceInfo();
	public: void FillIndexBuffer(void*);
	public: void FillVertexBuffer(void*);
	public: void GetNearestIndex(FVector const&,INT&,INT&);
	public: void Init();
	public: void Pling(FVector const&,FLOAT,FLOAT);
	public: void PlingVertex(INT,INT,FLOAT);
	public: void RebuildClampedBitmap();
	public: void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: void SetClampedBitmap(INT,INT,INT);
	public: void SimpleFillIndexBuffer(void*);
	public: void SimpleFillVertexBuffer(void*);
	public: void UpdateOscillatorList();
	public: void UpdateSimulation(FLOAT);
	public: void execPling(struct FFrame&,void* const);
AFluidSurfaceOscillator
	public: AFluidSurfaceOscillator();
	public: AFluidSurfaceOscillator(AFluidSurfaceOscillator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Destroy();
	public: virtual void PostEditChange();
	public: virtual ~AFluidSurfaceOscillator();
	public: void UpdateOscillation(FLOAT);
AGameInfo
	protected: AGameInfo();
	public: AGameInfo(AGameInfo const&);
	public: APlayerController* eventL2NetLogin(FString const&,FString const&,FString&);
	public: APlayerController* eventLogin(FString const&,FString const&,FString&);
	public: FString eventGetBeaconText();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AGameInfo();
	public: void eventAcceptInventory(APawn*);
	public: void eventBroadcast(AActor*,FString const&,FName);
	public: void eventBroadcastLocalized(AActor*,UClass*,INT,APlayerReplicationInfo*,APlayerReplicationInfo*,UObject*);
	public: void eventDetailChange();
	public: void eventGameEnding();
	public: void eventInitGame(FString const&,FString&);
	public: void eventL2NetPostLogin(APlayerController*);
	public: void eventPostLogin(APlayerController*);
	public: void eventPreLogin(FString const&,FString const&,FString&,FString&);
	public: void eventSpawnDefaultPlayerPawn(AController*);
	public: void eventSpawnPlayerPawn(AController*,FString const&,FVector,FRotator);
	public: void execGetNetworkNumber(struct FFrame&,void* const);
	public: void execParseKillMessage(struct FFrame&,void* const);
AGameReplicationInfo
	public: AGameReplicationInfo();
	public: AGameReplicationInfo(AGameReplicationInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AGameReplicationInfo();
AGameStats
	protected: AGameStats();
	public: AGameStats(AGameStats const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AGameStats();
	public: void execGetMapFileName(struct FFrame&,void* const);
	public: void execGetStatsIdentifier(struct FFrame&,void* const);
AHUD
	protected: AHUD();
	public: AHUD(AHUD const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AHUD();
	public: void eventConnectFailure(FString const&,FString const&);
	public: void eventPostRender(UCanvas*);
	public: void eventShowUpgradeMenu();
	public: void eventWorldSpaceOverlays();
	public: void execDraw3DLine(struct FFrame&,void* const);
AInfo
	protected: AInfo();
	public: AInfo(AInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AInfo();
AInspector
	protected: AInspector();
	public: AInspector(AInspector const&);
	public: INT eventInspection(INT,INT,INT,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AInspector();
	public: void execInspectorFunc001(struct FFrame&,void* const);
	public: void execInspectorFunc002(struct FFrame&,void* const);
	public: void execInspectorFunc003(struct FFrame&,void* const);
	public: void execInspectorFunc004(struct FFrame&,void* const);
	public: void execInspectorFunc005(struct FFrame&,void* const);
	public: void execInspectorFunc006(struct FFrame&,void* const);
AInternetInfo
	protected: AInternetInfo();
	public: AInternetInfo(AInternetInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AInternetInfo();
AInterpolationPoint
	public: AInterpolationPoINT();
	public: AInterpolationPoINT(AInterpolationPoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual void PostEditMove();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~AInterpolationPoINT();
AInventory
	public: AInventory();
	public: AInventory(AInventory const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AInventory();
AInventoryAttachment
	protected: AInventoryAttachment();
	public: AInventoryAttachment(AInventoryAttachment const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AInventoryAttachment();
AInventorySpot
	public: AInventorySpot();
	public: AInventorySpot(AInventorySpot const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AInventorySpot* GetAInventorySpot();
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual ~AInventorySpot();
AJumpDest
	public: AJumpDest();
	public: AJumpDest(AJumpDest const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ReviewPath(APawn*);
	public: virtual void ClearPaths();
	public: virtual void SetupForcedPath(APawn*,UReachSpec*);
	public: virtual ~AJumpDest();
AJumpPad
	public: AJumpPad();
	public: AJumpPad(AJumpPad const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~AJumpPad();
AKActor
	public: AKActor();
	public: AKActor(AKActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Spawned();
	public: virtual ~AKActor();
AKBSJoint
	protected: AKBSJoINT();
	public: AKBSJoINT(AKBSJoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKBSJoINT();
AKCarWheelJoint
	public: AKCarWheelJoINT();
	public: AKCarWheelJoINT(AKCarWheelJoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKCarWheelJoINT();
AKConeLimit
	public: AKConeLimit();
	public: AKConeLimit(AKConeLimit const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKConeLimit();
AKConstraint
	public: AKConstraINT();
	public: AKConstraINT(AKConstraINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKConstraINT();
	public: void eventKForceExceed(FLOAT);
	public: void execKGetConstraINTForce(struct FFrame&,void* const);
	public: void execKGetConstraINTTorque(struct FFrame&,void* const);
	public: void execKUpdateConstraINTParams(struct FFrame&,void* const);
AKHinge
	public: AKHinge();
	public: AKHinge(AKHinge const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKHinge();
AKTire
	protected: AKTire();
	public: AKTire(AKTire const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKTire();
AKVehicle
	public: AKVehicle();
	public: AKVehicle(AKVehicle const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKVehicle();
	public: void eventKVehicleUpdateParams();
	public: void eventVehicleStateReceived();
	public: void execGraphData(struct FFrame&,void* const);
AKeypoint
	protected: AKeypoINT();
	public: AKeypoINT(AKeypoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AKeypoINT();
AL2Alarm
	public: AL2Alarm();
	public: AL2Alarm(AL2Alarm const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AL2Alarm();
AL2Dice
	public: AL2Dice();
	public: AL2Dice(AL2Dice const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AL2Dice();
AL2Float
	public: AL2Float();
	public: AL2Float(AL2Float const&);
	public: FName GetBattleAnimName();
	public: FName GetCurAnimName();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AL2Float();
AL2Indicator
	protected: AL2Indicator();
	public: AL2Indicator(AL2Indicator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AL2Indicator();
AL2NMover
	public: AL2NMover();
	public: AL2NMover(AL2NMover const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsEnded();
	public: virtual INT IsEnded(AActor**);
	public: virtual INT IsPaused();
	public: virtual INT IsStarted();
	public: virtual INT MoveTick(FLOAT);
	public: virtual void AddMoveTarget(AActor*,INT);
	public: virtual void AddMoveTarget(FVector);
	public: virtual void ChangeTargetToLoc(AActor*);
	public: virtual void DeleteTarget(AActor*);
	public: virtual void DeleteTarget(FVector);
	public: virtual void MovePause();
	public: virtual void MovePlay();
	public: virtual void MoveStart(FLOAT,INT);
	public: virtual void MoveStop();
	public: virtual void PostScriptDestroyed();
	public: virtual ~AL2NMover();
AL2Pickup
	public: AL2Pickup();
	public: AL2Pickup(AL2Pickup const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void LostChild(AActor*);
	public: virtual void PostScriptDestroyed();
	public: virtual ~AL2Pickup();
AL2Radar
	protected: AL2Radar();
	public: AL2Radar(AL2Radar const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AL2Radar();
AL2SeamlessInfo
	public: AL2SeamlessInfo();
	public: AL2SeamlessInfo(AL2SeamlessInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AL2SeamlessInfo();
ALadder
	public: ALadder();
	public: ALadder(ALadder const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ProscribedPathTo(ANavigationPoINT*);
	public: virtual void ClearPaths();
	public: virtual void InitForPathFinding();
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~ALadder();
ALadderVolume
	public: ALadderVolume();
	public: ALadderVolume(ALadderVolume const&);
	public: FVector FindCenter();
	public: FVector FindTop(FVector);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~ALadderVolume();
ALevelInfo
	public: AAirVolume* GetAirVolume(FVector,AActor*,INT);
	public: AAirVolume* L2GetAirVolume(FVector,AActor*,INT);
	public: ALevelInfo();
	public: ALevelInfo(ALevelInfo const&);
	public: AMusicVolume* GetMusicVolume(FVector,AActor*,INT);
	public: AMusicVolume* L2GetMusicVolume(FVector,AActor*,INT);
	public: APhysicsVolume* GetDefaultPhysicsVolume();
	public: APhysicsVolume* GetPhysicsVolume(FVector,AActor*,INT);
	public: APhysicsVolume* L2GetPhysicsVolume(FVector,AActor*,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void CheckForErrors();
	public: virtual void PostNetReceive();
	public: virtual void PreNetReceive();
	public: virtual void SetVolumes();
	public: virtual void SetZone(INT,INT);
	public: virtual ~ALevelInfo();
	public: void eventFillPrecacheMaterialsArray();
	public: void eventFillPrecacheStaticMeshesArray();
	public: void eventServerTravel(FString const&,DWORD);
	public: void execDetailChange(struct FFrame&,void* const);
	public: void execGetAddressURL(struct FFrame&,void* const);
	public: void execGetLocalURL(struct FFrame&,void* const);
	public: void execIsDemoBuild(struct FFrame&,void* const);
	public: void execIsEntry(struct FFrame&,void* const);
ALiftCenter
	public: ALiftCenter();
	public: ALiftCenter(ALiftCenter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void FindBase();
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~ALiftCenter();
ALiftExit
	protected: ALiftExit();
	public: ALiftExit(ALiftExit const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ALiftExit();
ALight
	public: ALight();
	public: ALight(ALight const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ALight* GetLight();
	public: virtual FDynamicLight* GetLightRenderData();
	public: virtual FLOAT WorldLightRadius()const;
	public: virtual INT IsALight();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual ~ALight();
ALineOfSightTrigger
	public: ALineOfSightTrigger();
	public: ALineOfSightTrigger(ALineOfSightTrigger const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void TickAuthoritative(FLOAT);
	public: virtual ~ALineOfSightTrigger();
	public: void eventPlayerSeesMe(APlayerController*);
ALineagePlayerController
	public: ALineagePlayerController();
	public: ALineagePlayerController(ALineagePlayerController const&);
	public: FNViewShake* AddViewShakeState(INT,FLOAT,FLOAT,FLOAT,FLOAT,FVector,FVector,FVector,FVector,FLOAT,FLOAT,AActor*);
	public: FVector RotationToLocationWithDist(FRotator,FVector,FLOAT);
	public: FVector ViewToLocationWithDist(FVector,FVector,FLOAT);
	public: INT IntToShort(INT);
	public: INT IsBlockRotation(FRotator,FVector,FLOAT,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT HitWallNotify(FVector,AActor*);
	public: virtual INT IsBroadcastObserverMode();
	public: virtual INT IsObserverMode();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void CalcBehindView(FVector*,FRotator*);
	public: virtual void CalcVolumeCamera(FVector*,FRotator*);
	public: virtual void PlayerCalcView(AActor*,FVector*,FRotator*);
	public: virtual void PostScriptDestroyed();
	public: virtual void ResetMusicControll();
	public: virtual void SetBroadcastObserverMode(INT);
	public: virtual void SetRequestedServerMusic(TCHAR*,FLOAT);
	public: virtual void SetRequestedServerVoice(TCHAR*,FLOAT,INT);
	public: virtual void SetVehicleStatus(INT);
	public: virtual void SetViewTarget(AActor*);
	public: virtual void StopMove();
	public: virtual ~ALineagePlayerController();
	public: void DisableCameraManuallyRotationg(INT);
	public: void InvalidateZoneName();
	public: void ReleaseSpecialViewTarget();
	public: void ResetJoypadMoving(FLOAT,FLOAT);
	public: void ResetKeyboardMoving(INT,INT,INT);
	public: void SetSpecialViewTarget(AActor*,FLOAT,FRotator,FLOAT,FLOAT,FRotator,INT,INT,INT);
	public: void ShakeView(FVector*,FRotator*);
	public: void SpecialViewTick(FLOAT);
	public: void UpdateShakeState(FLOAT);
ALocationInfo
	protected: ALocationInfo();
	public: ALocationInfo(ALocationInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ALocationInfo();
ALookTarget
	protected: ALookTarget();
	public: ALookTarget(ALookTarget const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ALookTarget();
AMarkProjector
	protected: AMarkProjector();
	public: AMarkProjector(AMarkProjector const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AMarkProjector();
	public: void execUpdateDesireLocation(struct FFrame&,void* const);
AMatDemoActor
	protected: AMatDemoActor();
	public: AMatDemoActor(AMatDemoActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AMatDemoActor();
AMovableStaticMeshActor
	public: AMovableStaticMeshActor();
	public: AMovableStaticMeshActor(AMovableStaticMeshActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FName GetL2MovementTagName(INT);
	public: virtual void AttachL2MovementActor(AActor*);
	public: virtual void physL2Movement(FLOAT,INT);
	public: virtual ~AMovableStaticMeshActor();
AMover
	public: AMover();
	public: AMover(AMover const&);
	public: USound* GetBrokenSound(FLOAT&,FLOAT&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT CanBeAttacked();
	public: virtual INT IsAMover();
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual USound* GetAttackItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetAttackVoiceSound(FLOAT);
	public: virtual USound* GetDamageSound(FLOAT&,FLOAT&);
	public: virtual USound* GetDefenseItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetShieldItemSound(FLOAT&,FLOAT&);
	public: virtual void AssociateAttackedNotify(APawn*,AActor*,INT,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void AttackedNotify(APawn*,AActor*,INT,INT,INT);
	public: virtual void ClearMarker();
	public: virtual void GetTargetLocation(FVector,FVector&);
	public: virtual void PostEditChange();
	public: virtual void PostEditMove();
	public: virtual void PostLoad();
	public: virtual void PostNetReceive();
	public: virtual void PostRaytrace();
	public: virtual void PreNetReceive();
	public: virtual void PreRaytrace();
	public: virtual void SetBrushRaytraceKey();
	public: virtual void SetWorldRaytraceKey();
	public: virtual void Spawned();
	public: virtual void performPhysics(FLOAT);
	public: virtual ~AMover();
	public: void eventKeyFrameReached();
	public: void physMovingBrush(FLOAT);
AMusicVolume
	public: AMusicVolume();
	public: AMusicVolume(AMusicVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AMusicVolume();
AMutator
	protected: AMutator();
	public: AMutator(AMutator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AMutator();
ANCubics
	public: ANCubics();
	public: ANCubics(ANCubics const&);
	public: FVector GetVelocity(APawn*,FLOAT);
	public: INT GetMovementState(APawn*);
	public: INT NCubicSkillProcess(APawn*,FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual struct FNMagicInfo* GetMagicInfo();
	public: virtual void Initialize();
	public: virtual void PostScriptDestroyed();
	public: virtual ~ANCubics();
	public: void NCubicRotation(FLOAT);
	public: void NCubicSkillInit(APawn*,APawn*,INT);
ANLine
	public: ANLine();
	public: ANLine(ANLine const&);
	public: FBox GetBoundingBox();
	public: INT SetEndPositions(APawn*,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void Destroy();
	public: virtual ~ANLine();
	public: void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
ANMoon
	public: ANMoon();
	public: ANMoon(ANMoon const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~ANMoon();
ANMovableSunLight
	public: ANMovableSunLight();
	public: ANMovableSunLight(ANMovableSunLight const&);
	public: FVector GetSunLightDirection(FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~ANMovableSunLight();
ANProjectile
	public: ANProjectile();
	public: ANProjectile(ANProjectile const&);
	public: FLOAT PrepareInterpolation(INT,FVector);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual struct FNMagicInfo* GetMagicInfo();
	public: virtual void Destroy();
	public: virtual void PostScriptDestroyed();
	public: virtual void PreDestroy();
	public: virtual void TargetDestroyNotify(AActor*);
	public: virtual void processHitWall(FVector,AActor*);
	public: virtual ~ANProjectile();
	public: void SetTargetActor(AActor*);
	public: void eventPreshotNotify(APawn*);
	public: void eventShotNotify();
ANSkillProjectile
	public: ANSkillProjectile();
	public: ANSkillProjectile(ANSkillProjectile const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void Destroy();
	public: virtual void PostScriptDestroyed();
	public: virtual void PreDestroy();
	public: virtual void TargetDestroyNotify(AActor*);
	public: virtual void processHitWall(FVector,AActor*);
	public: virtual ~ANSkillProjectile();
	public: void SetSkillID(INT);
	public: void SkillEffectExplosion(FVector,AActor*);
ANSun
	public: ANSun();
	public: ANSun(ANSun const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~ANSun();
ANavigationPoint
	public: ANavigationPoINT();
	public: ANavigationPoINT(ANavigationPoINT const&);
	public: DWORD eventAccept(AActor*,AActor*);
	public: DWORD eventSuggestMovePreparation(APawn*);
	public: FLOAT eventDetourWeight(APawn*,FLOAT);
	public: INT CanReach(ANavigationPoINT*,FLOAT);
	public: INT FindAlternatePath(UReachSpec*,INT);
	public: INT PrunePaths();
	public: INT ShouldBeBased();
	public: INT eventSpecialCost(APawn*,UReachSpec*);
	public: UReachSpec* GetReachSpecTo(ANavigationPoINT*);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AInventorySpot* GetAInventorySpot();
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual INT ProscribedPathTo(ANavigationPoINT*);
	public: virtual INT ReviewPath(APawn*);
	public: virtual void CheckForErrors();
	public: virtual void CheckSymmetry(ANavigationPoINT*);
	public: virtual void ClearForPathFinding();
	public: virtual void ClearPaths();
	public: virtual void Destroy();
	public: virtual void FindBase();
	public: virtual void InitForPathFinding();
	public: virtual void PostEditMove();
	public: virtual void PostaddReachSpecs(APawn*);
	public: virtual void SetupForcedPath(APawn*,UReachSpec*);
	public: virtual void Spawned();
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~ANavigationPoINT();
	public: void CleanUpPruned();
ANote
	public: ANote();
	public: ANote(ANote const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void CheckForErrors();
	public: virtual ~ANote();
ANpcPosInfo
	protected: ANpcPosInfo();
	public: ANpcPosInfo(ANpcPosInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ANpcPosInfo();
APathNode
	public: APathNode();
	public: APathNode(APathNode const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT ReviewPath(APawn*);
	public: virtual void CheckSymmetry(ANavigationPoINT*);
	public: virtual ~APathNode();
APawn
	private: FLOAT Swim(FVector&,struct FCheckResult&);
	private: FVector findWaterLine(FVector,FVector);
	private: INT IsShowQuestMark();
	private: INT Pick3DWallAdjust(FVector);
	private: INT checkFloor(FVector,struct FCheckResult&);
	private: INT findNewFloor(FVector,FLOAT,FLOAT,INT);
	private: void SpiderstepUp(FVector,FVector,struct FCheckResult&);
	private: void calcVelocity(FVector,FLOAT,FLOAT,FLOAT,INT,INT,INT);
	public: AActor* AttachTrailer(AActor*,INT,FLOAT,INT);
	public: ANProjectile* SetAtkArrow(INT);
	public: ANSkillProjectile* SkillEffectShot();
	public: ANavigationPoINT* CheckDetour(ANavigationPoINT*,ANavigationPoINT*,INT);
	public: ANavigationPoINT* breadthPathTo(FLOAT (__cdecl*)(ANavigationPoINT*,APawn*,FLOAT),ANavigationPoINT*,INT,FLOAT*,INT);
	public: APawn();
	public: APawn(APawn const&);
	public: APawn* RiderEnd(FVector);
	public: APawn* RiderEnter(INT,INT,INT,FVector);
	public: FLOAT GetAtk01AnimRate();
	public: FLOAT GetAtk02AnimRate();
	public: FLOAT GetAtk03AnimRate();
	public: FLOAT GetAtkDownAnimRate();
	public: FLOAT GetAtkUpAnimRate();
	public: FLOAT GetAttackEffFrame();
	public: FLOAT GetAttackEndEffFrame();
	public: FLOAT GetAttackItemSoundFrame();
	public: FLOAT GetAttackRange();
	public: FLOAT GetCastLongAnimRate();
	public: FLOAT GetCastMidAnimRate();
	public: FLOAT GetCastShortAnimRate();
	public: FLOAT GetCastShortEndAnimRate();
	public: FLOAT GetCurAnimFrame(INT);
	public: FLOAT GetCurAnimRate(INT);
	public: FLOAT GetCurMoveAnimRate();
	public: FLOAT GetCurSpeed(INT);
	public: FLOAT GetMagicFriendAnimRate();
	public: FLOAT GetMagicNoTargetAnimRate();
	public: FLOAT GetMagicShotAnimRate();
	public: FLOAT GetMagicThrowAnimRate();
	public: FLOAT GetMaxSpeed();
	public: FLOAT GetRunAnimRate();
	public: FLOAT GetShieldAtkAnimRate();
	public: FLOAT GetSitAnimRate();
	public: FLOAT GetSocialAnimDuration(INT);
	public: FLOAT GetSpAtk01AnimRate();
	public: FLOAT GetSpAtk02AnimRate();
	public: FLOAT GetSpAtk03AnimRate();
	public: FLOAT GetSpAtk04AnimRate();
	public: FLOAT GetStandAnimRate();
	public: FLOAT GetThrowAnimRate();
	public: FLOAT GetWalkAnimRate();
	public: FLOAT findPathToward(AActor*,FVector,FLOAT (__cdecl*)(ANavigationPoINT*,APawn*,FLOAT),FLOAT,INT);
	public: FNPawnLight* AddPawnLight(FVector,FRotator,INT);
	public: FName GetAtk01AnimName();
	public: FName GetAtk02AnimName();
	public: FName GetAtk03AnimName();
	public: FName GetAtkDownAnimName();
	public: FName GetAtkUpAnimName();
	public: FName GetAtkWaitAnimName();
	public: FName GetBJumpAnimName();
	public: FName GetCastEndAnimName();
	public: FName GetCastLongAnimName();
	public: FName GetCastMidAnimName();
	public: FName GetCastShortAnimName();
	public: FName GetChairSitAnimName();
	public: FName GetChairStandAnimName();
	public: FName GetChairWaitAnimName();
	public: FName GetCurAnimName(INT);
	public: FName GetCurAtkAnimName();
	public: FName GetCurMoveAnimName();
	public: FName GetCurTurnAnimName();
	public: FName GetCurWaitAnimName();
	public: FName GetDamageAnimName();
	public: FName GetDamageFlyAnimName();
	public: FName GetDeathAnimName();
	public: FName GetDeathStandAnimName();
	public: FName GetDeathWaitAnimName();
	public: FName GetDefenceAnimName();
	public: FName GetDodgeAnimName();
	public: FName GetEnchantedWeaponEffect(FVector&,FLOAT&,FLOAT&,INT);
	public: FName GetFallAnimName();
	public: FName GetFishingControlAnimName();
	public: FName GetFishingEndAnimName();
	public: FName GetFishingPullAnimName();
	public: FName GetFishingStartAnimName();
	public: FName GetFishingWaitAnimName();
	public: FName GetJumpAnimName();
	public: FName GetLFootBoneName();
	public: FName GetMagicFriendAnimName();
	public: FName GetMagicNoTargetAnimName();
	public: FName GetMagicShotAnimName();
	public: FName GetMagicThrowAnimName();
	public: FName GetPicItemAnimName();
	public: FName GetRFootBoneName();
	public: FName GetRandomAtkAnimName();
	public: FName GetRiderAtkAnimName();
	public: FName GetRiderDeathAnimName();
	public: FName GetRiderDeathWaitAnimName();
	public: FName GetRiderRunAnimName();
	public: FName GetRiderWaitAnimName();
	public: FName GetRunAnimName();
	public: FName GetShieldAtkAnimName();
	public: FName GetSitAnimName();
	public: FName GetSitWaitAnimName();
	public: FName GetSocialAnimName(INT);
	public: FName GetSpAtk01AnimName();
	public: FName GetSpAtk02AnimName();
	public: FName GetSpAtk03AnimName();
	public: FName GetSpAtk04AnimName();
	public: FName GetSpAtk05AnimName();
	public: FName GetSpAtk06AnimName();
	public: FName GetSpAtk07AnimName();
	public: FName GetSpAtk08AnimName();
	public: FName GetSpAtk09AnimName();
	public: FName GetSpAtk10AnimName();
	public: FName GetSpAtk11AnimName();
	public: FName GetSpAtk12AnimName();
	public: FName GetSpAtk13AnimName();
	public: FName GetSpAtk14AnimName();
	public: FName GetSpAtk15AnimName();
	public: FName GetSpAtk16AnimName();
	public: FName GetSpAtk17AnimName();
	public: FName GetSpAtk18AnimName();
	public: FName GetSpAtk19AnimName();
	public: FName GetSpAtk20AnimName();
	public: FName GetSpAtk21AnimName();
	public: FName GetSpAtk22AnimName();
	public: FName GetSpAtk23AnimName();
	public: FName GetSpAtk24AnimName();
	public: FName GetSpAtk25AnimName();
	public: FName GetSpAtk26AnimName();
	public: FName GetSpAtk27AnimName();
	public: FName GetSpAtk28AnimName();
	public: FName GetStandAnimName();
	public: FName GetStunAnimName();
	public: FName GetSwimAnimName();
	public: FName GetSwimAttackWaitAnimName();
	public: FName GetSwimDeathAnimName();
	public: FName GetSwimDeathWaitAnimName();
	public: FName GetSwimWaitAnimName();
	public: FName GetThrowAnimName();
	public: FName GetTurnAnimName();
	public: FName GetVariationWeaponEffect(FVector&,FLOAT&,FLOAT&,INT);
	public: FName GetWaitAnimName();
	public: FName GetWalkAnimName();
	public: FVector CheckForLedges(FVector,FVector,FVector,INT&,INT&);
	public: FVector NewFallVelocity(FVector,FVector,FLOAT);
	public: FVector SuggestJumpVelocity(FVector,FLOAT,FLOAT);
	public: INT Action_Attack(AActor*);
	public: INT Action_Attack(AActor*,INT,INT,INT,INT,INT,INT,INT);
	public: INT AddNCubic(INT);
	public: INT AdjustLandPosition();
	public: INT CacheNetRelevancy(INT,APlayerController*,AActor*);
	public: INT CanCrouchWalk(FVector const&,FVector const&);
	public: INT CheckAbnormalState(INT);
	public: INT CheckAtkConsumeItem();
	public: INT CheckWaistRotation();
	public: INT GetAtkShotNum(FName);
	public: INT GetAtkType(FName);
	public: INT InitSkillProcess();
	public: INT IsAttackIntend();
	public: INT IsBigHead(FLOAT&);
	public: INT IsCameraWalkingMode();
	public: INT IsCastingMultiShotSkill();
	public: INT IsEnableFaceRotation();
	public: INT IsHumanControlled();
	public: INT IsLocallyControlled();
	public: INT IsVariationEffectEnabled();
	public: INT L2walkReachable(FVector,INT,AActor*);
	public: INT L2walkReachable2(FVector,INT,AActor*);
	public: INT PickWallAdjust(FVector);
	public: INT Reachable(FVector,AActor*);
	public: INT ReachedDestination(FVector,AActor*);
	public: INT SetMagicInfo(INT,INT,FLOAT,FLOAT,AActor*,FLOAT,struct FL2MagicSkillData*);
	public: INT SetSameNormal(enum EPawnSubMeshStyle,enum EPawnSubMeshStyle,INT);
	public: INT SetSkillAnim(INT,INT);
	public: INT SetSkillType(INT,INT);
	public: INT SpawnNEffect(INT,INT,FLOAT);
	public: INT SpawnNTransientEffect(APawn*,INT);
	public: INT UpdateAbnormalState(FLOAT);
	public: INT ValidAnchor();
	public: INT actorReachable(AActor*,INT,INT);
	public: INT calcMoveFlags();
	public: INT flyReachable(FVector,INT,AActor*);
	public: INT jumpReachable(FVector,INT,AActor*);
	public: INT ladderReachable(FVector,INT,AActor*);
	public: INT moveToward(FVector const&,AActor*);
	public: INT poINTReachable(FVector,INT);
	public: INT swimReachable(FVector,INT,AActor*);
	public: INT walkReachable(FVector,INT,AActor*);
	public: UMesh* GetEnchantedWeaponMesh(FVector&,FVector&,INT);
	public: UMesh* GetHeroMesh();
	public: UMeshInstance* GetWeaponMeshInstance(INT);
	public: USound* GetBootsSound();
	public: enum ETestMoveResult FindBestJump(FVector);
	public: enum ETestMoveResult FindJumpUp(FVector);
	public: enum ETestMoveResult HitGoal(AActor*);
	public: enum ETestMoveResult L2walkMove(FVector,struct FCheckResult&,AActor*,FLOAT);
	public: enum ETestMoveResult L2walkMove2(FVector,struct FCheckResult&,AActor*,FLOAT);
	public: enum ETestMoveResult flyMove(FVector,AActor*,FLOAT);
	public: enum ETestMoveResult jumpLanding(FVector,INT);
	public: enum ETestMoveResult swimMove(FVector,AActor*,FLOAT);
	public: enum ETestMoveResult walkMove(FVector,struct FCheckResult&,AActor*,FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FMeshAnimSeq* FindSeq(FName);
	public: virtual APawn* GetPawn();
	public: virtual APawn* GetPlayerPawn()const;
	public: virtual FLOAT GetDamageDist();
	public: virtual FLOAT GetNetPriority(AActor*,FLOAT,FLOAT);
	public: virtual FName GetCapeBoneName();
	public: virtual FName GetHeadBoneName();
	public: virtual FName GetLArmBoneName();
	public: virtual FName GetLHandBoneName();
	public: virtual FName GetLowbodyBoneName();
	public: virtual FName GetRArmBoneName();
	public: virtual FName GetRHandBoneName();
	public: virtual FName GetSpineBoneName();
	public: virtual FRotator FindSlopeRotation(FVector,FRotator);
	public: virtual INT CanBeAttacked();
	public: virtual INT CanBeTold();
	public: virtual INT CheckOwnerUpdated();
	public: virtual INT HurtByVolume(AActor*);
	public: virtual INT IsAPawn();
	public: virtual INT IsBroadcastObserverModeActor();
	public: virtual INT IsDamageAct();
	public: virtual INT IsLoaded();
	public: virtual INT IsNetRelevantFor(APlayerController*,AActor*,FVector);
	public: virtual INT IsObserverModeActor();
	public: virtual INT IsPlayer();
	public: virtual INT IsRendered();
	public: virtual INT IsSameAnim();
	public: virtual INT IsSpineRotation();
	public: virtual INT PlayAnim(INT,FName,FLOAT,FLOAT,INT,INT);
	public: virtual INT PlayerControlled();
	public: virtual INT PostLoadProcess();
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual UMaterial* GetCloakSkin(INT);
	public: virtual UMaterial* GetLeftArmSkin(INT);
	public: virtual UMaterial* GetLeftHandSkin(INT);
	public: virtual UMaterial* GetRightArmSkin(INT);
	public: virtual UMaterial* GetRightHandSkin(INT);
	public: virtual UMaterial* GetSubSkin(INT);
	public: virtual UMesh* GetCloakCoverMesh();
	public: virtual UMesh* GetCloakMesh();
	public: virtual UMesh* GetLeftArmMesh();
	public: virtual UMesh* GetLeftHandMesh();
	public: virtual UMesh* GetRightArmMesh();
	public: virtual UMesh* GetRightHandMesh();
	public: virtual UMesh* GetSubMesh(INT);
	public: virtual UMeshInstance* GetCloakCoverMeshInstance();
	public: virtual UMeshInstance* GetCloakMeshInstance();
	public: virtual UMeshInstance* GetLeftArmMeshInstance();
	public: virtual UMeshInstance* GetLeftHandMeshInstance();
	public: virtual UMeshInstance* GetRightArmMeshInstance();
	public: virtual UMeshInstance* GetRightHandMeshInstance();
	public: virtual UMeshInstance* GetSubMeshInstance(INT);
	public: virtual USound* GetAttackItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetAttackVoiceSound(FLOAT);
	public: virtual USound* GetDamageSound(FLOAT&,FLOAT&);
	public: virtual USound* GetDefenseItemSound(FLOAT&,FLOAT&);
	public: virtual USound* GetShieldItemSound(FLOAT&,FLOAT&);
	public: virtual struct FNMagicInfo* GetMagicInfo();
	public: virtual void AssociateAttackedNotify(APawn*,AActor*,INT,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void Attacked();
	public: virtual void AttackedNotify(APawn*,AActor*,INT,INT,INT);
	public: virtual void CheckForErrors();
	public: virtual void CheckSameAnim();
	public: virtual void ClearL2Game();
	public: virtual void CreateSkin(FRenderInterface*);
	public: virtual void Destroy();
	public: virtual void LostChild(AActor*);
	public: virtual void MoveToLocation(FVector,FVector);
	public: virtual void NotifyAnimEnd(INT);
	public: virtual void NotifyBump(AActor*);
	public: virtual void PostBeginPlay();
	public: virtual void PostNetReceive();
	public: virtual void PostNetReceiveLocation();
	public: virtual void PostRender();
	public: virtual void PostScriptDestroyed();
	public: virtual void PreNetReceive();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void SetBase(AActor*,FVector,INT);
	public: virtual void SetCapeBoneName(FName);
	public: virtual void SetCloakCoverMesh(UMesh*);
	public: virtual void SetCloakMesh(UMesh*);
	public: virtual void SetHeadBoneName(FName);
	public: virtual void SetLArmBoneName(FName);
	public: virtual void SetLHandBoneName(FName);
	public: virtual void SetLeftArmMesh(UMesh*);
	public: virtual void SetLeftHandMesh(UMesh*);
	public: virtual void SetLowbodyBoneName(FName);
	public: virtual void SetMeshes(INT,FName,INT);
	public: virtual void SetRArmBoneName(FName);
	public: virtual void SetRHandBoneName(FName);
	public: virtual void SetRightArmMesh(UMesh*);
	public: virtual void SetRightHandMesh(UMesh*);
	public: virtual void SetSpineBoneName(FName);
	public: virtual void SetSubMesh(INT,UMesh*);
	public: virtual void SetTexes(INT,FName,INT);
	public: virtual void SetVolumes();
	public: virtual void SetZone(INT,INT);
	public: virtual void SmoothHitWall(FVector,AActor*);
	public: virtual void Spawned();
	public: virtual void TickMoveInVehicle(FLOAT);
	public: virtual void TickSimulated(FLOAT);
	public: virtual void TickSpecial(FLOAT);
	public: virtual void UpdateAnimation(FLOAT);
	public: virtual void UpdateRenderData();
	public: virtual void performPhysics(FLOAT);
	public: virtual void physFalling(FLOAT,INT);
	public: virtual void physicsRotation(FLOAT,FVector);
	public: virtual void processHitWall(FVector,AActor*);
	public: virtual void processLanded(FVector,AActor*,FLOAT,INT);
	public: virtual void stepUp(FVector,FVector,FVector,struct FCheckResult&);
	public: virtual ~APawn();
	public: void AddAppendixEffect(enum AppendixVisualEffectBitType);
	public: void AddAssociatedActorNotify(INT,INT,AActor*,INT);
	public: void AddMonsterRaceMgr(INT,INT,INT*,FVector,FVector,INT);
	public: void AttackStop();
	public: void BowAttackProcess(FLOAT);
	public: void CheckCubicStatus(short,short*);
	public: void ClearSerpentine();
	public: void CreateOverHeadAlarm(INT);
	public: void Crouch(INT);
	public: void DeSpawnExitEvent();
	public: void DeleteAllAbnormalState();
	public: void DeleteAllAppendixEffect();
	public: void DeleteAllCursedWeaponEffect();
	public: void DeleteAllNCubic();
	public: void DeleteAllPawnLight();
	public: void DeleteAllWeaponEffect();
	public: void DeleteAppendixEffect(enum AppendixVisualEffectBitType);
	public: void DeleteDecoEffect();
	public: void DeleteNCubic(INT);
	public: void DeleteOverHeadAlarm();
	public: void DisableFaceRotation();
	public: void DisableSpineRotation();
	public: void EnableFaceRotation();
	public: void EnableSpineRotation();
	public: void FaceRotation(FRotator,FLOAT);
	public: void InitBoneScaler();
	public: void InitDecoEffect();
	public: void LoadAnimData(FName);
	public: void MagicCancel();
	public: void MagicProcess(FLOAT);
	public: void MagicStop();
	public: void NActionAnimEnd();
	public: void NActionProcess(FLOAT);
	public: void NActionStop();
	public: void NPrimeActionEnd();
	public: void NotifyDie();
	public: void PlaySkillSound(AActor*,AActor*,INT);
	public: void RefreshQuestMark();
	public: void SEtLFootBonName(FName);
	public: void SEtRFootBonName(FName);
	public: void SetAnchor(ANavigationPoINT*);
	public: void SetAtkConsumeItem(INT,INT);
	public: void SetCloakSkin(INT,UMaterial*);
	public: void SetExMeshesNTexes(INT,FName,FName);
	public: void SetForcedLodModel(INT);
	public: void SetLeftArmSkin(INT,UMaterial*);
	public: void SetLeftHandSkin(UMaterial*);
	public: void SetLobbyWaitAnimName(TCHAR*);
	public: void SetRelativeCoords(AActor*);
	public: void SetRightArmSkin(UMaterial*);
	public: void SetRightHandSkin(UMaterial*);
	public: void SetRotationRate(FRotator);
	public: void SetSubSkin(INT,UMaterial*);
	public: void SetUseSameNormal(enum EPawnSubMeshStyle,INT,INT);
	public: void ShotAttackProcess(FLOAT);
	public: void SkillEffectChanneling();
	public: void SkillEffectFinalize();
	public: void SkillEffectInit();
	public: void SkillEffectPreShot();
	public: void SkillEffectUnionDDTarget(AActor*);
	public: void SpawnEnterEvent();
	public: void SpelledTargetDestroyNotify(AActor*);
	public: void SpineRotation(FLOAT);
	public: void StartNewSerpentine(FVector,FVector);
	public: void StopSpellSound();
	public: void SwordAttackProcess(FLOAT);
	public: void ThrowAttackProcess(FLOAT);
	public: void UnCrouch(INT);
	public: void UpdateBubbles(FLOAT,FVector const&);
	public: void UpdateFootRotation(FLOAT);
	public: void UpdateMeshSound(FName,FName,FLOAT,FLOAT);
	public: void UpdateMovementAnimation(FLOAT);
	public: void UpdateWaistRotation(FLOAT);
	public: void UpdateWaterHitEffect(APhysicsVolume*);
	public: void UpdateWaterHitEffectMovement(FLOAT);
	public: void WaistRotation(FRotator,FLOAT,INT);
	public: void ZeroMovementAlpha(INT,INT,FLOAT);
	public: void eventAnimBegin(FName);
	public: void eventAssociateAttackedNotify(APawn*,AActor*,INT,INT,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD);
	public: void eventAttackedNotify(APawn*,AActor*,INT,DWORD,DWORD);
	public: void eventBreathTimer();
	public: void eventChangeAnimation();
	public: void eventClientMessage(FString const&,FName);
	public: void eventEndCrouch(FLOAT);
	public: void eventHeadVolumeChange(APhysicsVolume*);
	public: void eventModifyVelocity(FLOAT,FVector);
	public: void eventNotifyDie();
	public: void eventPlayDying(UClass*,FVector);
	public: void eventPlayFalling();
	public: void eventPlayJump();
	public: void eventPlayLandingAnimation(FLOAT);
	public: void eventSetAnimAction(FName);
	public: void eventSetHeadScale(FLOAT);
	public: void eventSetWalking(DWORD);
	public: void eventStartCrouch(FLOAT);
	public: void eventStopPlayFiring();
	public: void eventUpdateEyeHeight(FLOAT);
	public: void execForceCrouch(struct FFrame&,void* const);
	public: void execGetDefenseItemSound(struct FFrame&,void* const);
	public: void execGetRefSkeletonNum(struct FFrame&,void* const);
	public: void execGetShieldItemSound(struct FFrame&,void* const);
	public: void execPlayAnimUM(struct FFrame&,void* const);
	public: void execReachedDestination(struct FFrame&,void* const);
	public: void execSetRelativeCoords(struct FFrame&,void* const);
	public: void physFlying(FLOAT,INT);
	public: void physLadder(FLOAT,INT);
	public: void physNMover(FLOAT,INT);
	public: void physSpider(FLOAT,INT);
	public: void physSwimming(FLOAT,INT);
	public: void physWalking(FLOAT,INT);
	public: void rotateToward(AActor*,FVector);
	public: void setMoveTimer(FLOAT);
	public: void startNewPhysics(FLOAT,INT);
	public: void startSwimming(FVector,FVector,FLOAT,FLOAT,INT);
APhysicsVolume
	public: APhysicsVolume();
	public: APhysicsVolume(APhysicsVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void SetZone(INT,INT);
	public: virtual ~APhysicsVolume();
	public: void eventActorEnteredVolume(AActor*);
	public: void eventActorLeavingVolume(AActor*);
	public: void eventGetHitEffectName(FName&,FName&);
	public: void eventPawnEnteredVolume(APawn*);
	public: void eventPawnLeavingVolume(APawn*);
	public: void eventPhysicsChangedFor(AActor*);
APickup
	public: APickup();
	public: APickup(APickup const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void CheckForErrors();
	public: virtual void ClearMarker();
	public: virtual ~APickup();
	public: void execAddToNavigation(struct FFrame&,void* const);
	public: void execRemoveFromNavigation(struct FFrame&,void* const);
APlayerController
	public: APlayerController();
	public: APlayerController(APlayerController const&);
	public: DWORD eventRemoveCameraEffect(UCameraEffect*);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* GetViewTarget();
	public: virtual INT IsAPlayerController();
	public: virtual INT IsNetRelevantFor(APlayerController*,AActor*,FVector);
	public: virtual INT LocalPlayerController();
	public: virtual INT StopAtLedge();
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual INT WantsLedgeCheck();
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual UCheatManager* GetCheatManager();
	public: virtual UPlayerInput* GetPlayerInput();
	public: virtual void CheckHearSound(AActor*,INT,USound*,FVector,FLOAT,INT);
	public: virtual void PlayerCalcView(AActor*,FVector*,FRotator*);
	public: virtual void PostScriptDestroyed();
	public: virtual void SetCheatManager(UCheatManager*);
	public: virtual void SetPlayerInput(UPlayerInput*);
	public: virtual void SetRequestedServerMusic(TCHAR*,FLOAT);
	public: virtual void SetRequestedServerVoice(TCHAR*,FLOAT,INT);
	public: virtual ~APlayerController();
	public: void SetPlayer(UPlayer*);
	public: void eventAddCameraEffect(UCameraEffect*,DWORD);
	public: void eventAddCheatManager();
	public: void eventClientCloseMenu(DWORD,DWORD);
	public: void eventClientHearSound(AActor*,INT,USound*,FVector,FVector,DWORD);
	public: void eventClientMessage(FString const&,FName);
	public: void eventClientOpenMenu(FString const&,DWORD,FString const&,FString const&);
	public: void eventClientSetViewTarget(AActor*);
	public: void eventClientTravel(FString const&,unsigned char,DWORD);
	public: void eventClientValidate(FString const&);
	public: void eventInitInputSystem();
	public: void eventPlayerCalcView(AActor*&,FVector&,FRotator&);
	public: void eventPlayerTick(FLOAT);
	public: void eventPreClientTravel();
	public: void eventReceiveLocalizedMessage(UClass*,INT,APlayerReplicationInfo*,APlayerReplicationInfo*,UObject*);
	public: void eventServerChangeVoiceChatter(APlayerController*,INT,INT,DWORD);
	public: void eventServerGetVoiceChatters(APlayerController*);
	public: void eventServerValidationResponse(FString const&);
	public: void eventSetProgressMessage(INT,FString const&,FColor);
	public: void eventSetProgressTime(FLOAT);
	public: void eventTeamMessage(APlayerReplicationInfo*,FString const&,FName);
	public: void execChangeVoiceChatter(struct FFrame&,void* const);
	public: void execClientHearSound(struct FFrame&,void* const);
	public: void execClientTravel(struct FFrame&,void* const);
	public: void execClientValidate(struct FFrame&,void* const);
	public: void execConsoleCommand(struct FFrame&,void* const);
	public: void execCopyToClipboard(struct FFrame&,void* const);
	public: void execFindStairRotation(struct FFrame&,void* const);
	public: void execGetDefaultURL(struct FFrame&,void* const);
	public: void execGetEntryLevel(struct FFrame&,void* const);
	public: void execGetPlayerNetworkAddress(struct FFrame&,void* const);
	public: void execGetServerNetworkAddress(struct FFrame&,void* const);
	public: void execLeaveVoiceChat(struct FFrame&,void* const);
	public: void execPasteFromClipboard(struct FFrame&,void* const);
	public: void execResetKeyboard(struct FFrame&,void* const);
	public: void execServerValidationResponse(struct FFrame&,void* const);
	public: void execSetViewTarget(struct FFrame&,void* const);
	public: void execUpdateURL(struct FFrame&,void* const);
APlayerReplicationInfo
	public: APlayerReplicationInfo();
	public: APlayerReplicationInfo(APlayerReplicationInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void PostNetReceive();
	public: virtual ~APlayerReplicationInfo();
	public: void eventClientNameChange();
	public: void eventUpdateCharacter();
APlayerStart
	public: APlayerStart();
	public: APlayerStart(APlayerStart const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~APlayerStart();
APolyMarker
	protected: APolyMarker();
	public: APolyMarker(APolyMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~APolyMarker();
APotentialClimbWatcher
	protected: APotentialClimbWatcher();
	public: APotentialClimbWatcher(APotentialClimbWatcher const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~APotentialClimbWatcher();
APowerups
	public: APowerups();
	public: APowerups(APowerups const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~APowerups();
AProjectile
	public: AProjectile();
	public: AProjectile(AProjectile const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsAProjectile();
	public: virtual INT ShrinkCollision(AActor*);
	public: virtual void BoundProjectileVelocity();
	public: virtual ~AProjectile();
AProjector
	public: AProjector();
	public: AProjector(AProjector const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual UPrimitive* GetPrimitive();
	public: virtual void Abandon();
	public: virtual void Attach();
	public: virtual void CalcMatrix();
	public: virtual void Destroy();
	public: virtual void Detach(INT);
	public: virtual void PostEditChange();
	public: virtual void PostEditLoad();
	public: virtual void PostEditMove();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*,FDynamicActor*);
	public: virtual void TickSpecial(FLOAT);
	public: virtual void UpdateParticleMaterial(UParticleMaterial*,INT);
	public: virtual ~AProjector();
	public: void RenderWireframe(FRenderInterface*);
	public: void execAbandonProjector(struct FFrame&,void* const);
	public: void execAttachActor(struct FFrame&,void* const);
	public: void execAttachProjector(struct FFrame&,void* const);
	public: void execDetachActor(struct FFrame&,void* const);
	public: void execDetachProjector(struct FFrame&,void* const);
AReplicationInfo
	public: AReplicationInfo();
	public: AReplicationInfo(AReplicationInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AReplicationInfo();
ASavedMove
	protected: ASavedMove();
	public: ASavedMove(ASavedMove const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASavedMove();
ASceneManager
	public: ASceneManager();
	public: ASceneManager(ASceneManager const&);
	public: FLOAT GetActionPctFromScenePct(FLOAT);
	public: FLOAT GetTotalSceneTime();
	public: UMatAction* GetActionFromPct(FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual void CheckForErrors();
	public: virtual void PostBeginPlay();
	public: virtual void PostEditChange();
	public: virtual ~ASceneManager();
	public: void ChangeOrientation(struct FOrientation);
	public: void CleanupPreviewActors();
	public: void DeletePathSamples();
	public: void InitializePreviewActors();
	public: void PreparePath();
	public: void RefreshSubActions(FLOAT);
	public: void SceneEnded();
	public: void SceneStarted();
	public: void SetCurrentTime(FLOAT);
	public: void SetSceneStartTime();
	public: void UpdatePreviewActors(FLOAT);
	public: void UpdateViewerFromPct(FLOAT);
	public: void eventSceneEnded();
	public: void eventSceneStarted();
	public: void execGetTotalSceneTime(struct FFrame&,void* const);
AScout
	public: AScout();
	public: AScout(AScout const&);
	public: INT findStart(FVector);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT HurtByVolume(AActor*);
	public: virtual ~AScout();
	public: void InitForPathing();
ASecurity
	public: ASecurity();
	public: ASecurity(ASecurity const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASecurity();
	public: void eventServerCallback(INT,FString const&);
	public: void execNativePerform(struct FFrame&,void* const);
AServerPrimitive
	public: AServerPrimitive();
	public: AServerPrimitive(AServerPrimitive const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AServerPrimitive();
AShadowProjector
	protected: AShadowProjector();
	public: AShadowProjector(AShadowProjector const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AShadowProjector();
	public: void execCheckVisible(struct FFrame&,void* const);
	public: void execUpdateLightInfo(struct FFrame&,void* const);
ASkyZoneInfo
	protected: ASkyZoneInfo();
	public: ASkyZoneInfo(ASkyZoneInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASkyZoneInfo();
ASmallNavigationPoint
	protected: ASmallNavigationPoINT();
	public: ASmallNavigationPoINT(ASmallNavigationPoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASmallNavigationPoINT();
ASpawnableStaticMeshActor
	protected: ASpawnableStaticMeshActor();
	public: ASpawnableStaticMeshActor(ASpawnableStaticMeshActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ASpawnableStaticMeshActor();
AStatLog
	protected: AStatLog();
	public: AStatLog(AStatLog const&);
	public: FString eventGetLocalLogFileName();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AStatLog();
	public: void eventLogGameSpecial(FString const&,FString const&);
	public: void eventLogGameSpecial2(FString const&,FString const&,FString const&);
	public: void execBatchLocal(struct FFrame&,void* const);
	public: void execBrowseRelativeLocalURL(struct FFrame&,void* const);
	public: void execExecuteLocalLogBatcher(struct FFrame&,void* const);
	public: void execExecuteSilentLogBatcher(struct FFrame&,void* const);
	public: void execExecuteWorldLogBatcher(struct FFrame&,void* const);
	public: void execGetGMTRef(struct FFrame&,void* const);
	public: void execGetMapFileName(struct FFrame&,void* const);
	public: void execGetPlayerChecksum(struct FFrame&,void* const);
	public: void execInitialCheck(struct FFrame&,void* const);
	public: void execLogMutator(struct FFrame&,void* const);
AStatLogFile
	protected: AStatLogFile();
	public: AStatLogFile(AStatLogFile const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AStatLogFile();
	public: void execCloseLog(struct FFrame&,void* const);
	public: void execFileFlush(struct FFrame&,void* const);
	public: void execFileLog(struct FFrame&,void* const);
	public: void execGetChecksum(struct FFrame&,void* const);
	public: void execOpenLog(struct FFrame&,void* const);
	public: void execWatermark(struct FFrame&,void* const);
AStaticMeshActor
	public: AStaticMeshActor();
	public: AStaticMeshActor(AStaticMeshActor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual USound* GetStepSoundData();
	public: virtual ~AStaticMeshActor();
AStationaryWeapons
	public: AStationaryWeapons();
	public: AStationaryWeapons(AStationaryWeapons const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void PostNetReceive();
	public: virtual ~AStationaryWeapons();
	public: void eventActivated();
	public: void eventDeactivated();
ASuperPointInfo
	public: ASuperPoINTInfo();
	public: ASuperPoINTInfo(ASuperPoINTInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~ASuperPoINTInfo();
ATeamInfo
	public: ATeamInfo();
	public: ATeamInfo(ATeamInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~ATeamInfo();
ATeleporter
	public: ATeleporter();
	public: ATeleporter(ATeleporter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~ATeleporter();
ATerrainInfo
	const TCHAR* const `public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*)'::`26'::__FUNC_NAME__;
	const TCHAR* const `public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*)'::`30'::__FUNC_NAME__;
	const TCHAR* const `public: unsigned short GetHeightmap(INT,INT)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: void SetHeightmap(INT,INT,unsigned short)'::`3'::__FUNC_NAME__;
	public: ATerrainInfo();
	public: ATerrainInfo(ATerrainInfo const&);
	public: FBox GetSelectedVerticesBounds();
	public: FColor GetTextureColor(INT,INT,UTexture*);
	public: FCoords GetLayerToMap(INT);
	public: FLOAT GetLayerXScaleToHeightmap(INT);
	public: FLOAT GetLayerYScaleToHeightmap(INT);
	public: FVector GetSafeDirectionForIntMap(INT);
	public: FVector GetVertexNormal(INT,INT);
	public: FVector HeightmapToWorld(FVector);
	public: FVector MakeVertex2DWithLayerPos(INT,INT,INT);
	public: FVector Vertices(INT);
	public: FVector Vertices(INT,INT);
	public: FVector WorldToHeightmap(FVector);
	public: INT GetClosestTilePos(INT,FVector&,FVector*,INT*,INT*);
	public: INT GetClosestVertex(FVector&,FVector*,INT*,INT*);
	public: INT GetDecoLayerAlpha(FVector,INT,FLOAT);
	public: INT GetEdgeTurnBitmap(INT,INT);
	public: INT GetEdgeTurnBitmapOrig(INT,INT);
	public: INT GetGlobalVertex(INT,INT);
	public: INT GetLayerHeight(INT);
	public: INT GetLayerWidth(INT);
	public: INT GetQuadVisibilityBitmap(INT,INT);
	public: INT GetQuadVisibilityBitmapOrig(INT,INT);
	public: INT GetShadowMapIndex(FLOAT);
	public: INT LineCheck(struct FCheckResult&,FVector,FVector,FVector,DWORD,INT);
	public: INT LineCheckWithQuad(INT,INT,struct FCheckResult&,FVector,FVector,FVector,DWORD,INT);
	public: INT PoINTCheck(struct FCheckResult&,FVector,FVector,INT);
	public: INT SelectVertex(FVector);
	public: INT SelectVertexX(INT,INT);
	public: UMaterial* GetQuadDomMaterialBitmap(INT,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*);
	public: unsigned char GetLayerAlphaWithMaskPos(INT,INT,INT,UTexture*);
	public: unsigned short GetHeightmap(INT,INT);
	public: virtual UPrimitive* GetPrimitive();
	public: virtual void CheckForErrors();
	public: virtual void Destroy();
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~ATerrainInfo();
	public: void CalcCoords();
	public: void CalcLayerTexCoords();
	public: void CheckComputeDataOnLoad();
	public: void ClearDecorations();
	public: void ClearTerrain();
	public: void CombineLayerWeights();
	public: void ConvertHeightmapFormat();
	public: void InterpolateGlobalIntensityMap(struct FTerrainIntensityMap&,struct FTerrainIntensityMap const&,struct FTerrainIntensityMap const&,FLOAT,FLOAT);
	public: void MakeIntensityMap();
	public: void MoveVertices(FLOAT);
	public: void PrecomputeLayerWeights();
	public: void Render(FLevelSceneNode*,FRenderInterface*,FVisibilityInterface*,FDynamicLight**,INT,struct FProjectorRenderInfo**,INT);
	public: void RenderDecorations(FLevelSceneNode*,FRenderInterface*,FVisibilityInterface*);
	public: void RenderEditorSWTerrain(FLevelSceneNode*,FRenderInterface*,FVisibilityInterface*);
	public: void ResetMove();
	public: void SWUpdate(FLOAT,INT,INT,INT,INT,INT);
	public: void SWUpdateTriangles(INT,INT,INT,INT,INT);
	public: void SelectVerticesInBox(FBox&);
	public: void SetEdgeTurnBitmap(INT,INT,INT);
	public: void SetEditorSWTerrain(INT);
	public: void SetEndVertexZ(ATerrainInfo*);
	public: void SetHeightmap(INT,INT,unsigned short);
	public: void SetHoriEdge(ATerrainInfo*);
	public: void SetLayerAlpha(FLOAT,FLOAT,INT,unsigned char,UTexture*);
	public: void SetLayerAlphaWithMaskPos(INT,INT,INT,unsigned char);
	public: void SetQuadVisibilityBitmap(INT,INT,INT);
	public: void SetTextureColor(INT,INT,UTexture*,FColor&);
	public: void SetTimeForIndex(INT);
	public: void SetVertiEdge(ATerrainInfo*);
	public: void SetupSectors();
	public: void SoftDeselect();
	public: void SoftSelect(FLOAT,FLOAT);
	public: void SoftSelectNeighbor(ATerrainInfo*,FLOAT,FLOAT);
	public: void ToggleShowMapBug();
	public: void Update(FLOAT,INT,INT,INT,INT,INT);
	public: void UpdateDecorations(INT);
	public: void UpdateFromSelectedVertices();
	public: void UpdateShadow(INT*,INT);
	public: void UpdateShadow(UTerrainSector**,INT);
	public: void UpdateTriangles(INT,INT,INT,INT,INT);
	public: void UpdateVTGroup();
	public: void UpdateVertices(FLOAT,INT,INT,INT,INT);
ATerritoryInfo
	public: ATerritoryInfo();
	public: ATerritoryInfo(ATerritoryInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ATerritoryInfo();
ATrigger
	protected: ATrigger();
	public: ATrigger(ATrigger const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ATrigger();
ATriggers
	protected: ATriggers();
	public: ATriggers(ATriggers const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~ATriggers();
AVehicle
	public: AVehicle();
	public: AVehicle(AVehicle const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void performPhysics(FLOAT);
	public: virtual void physicsRotation(FLOAT,FVector);
	public: virtual ~AVehicle();
AVehiclePart
	protected: AVehiclePart();
	public: AVehiclePart(AVehiclePart const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AVehiclePart();
AVehicleRoutePoint
	public: AVehicleRoutePoINT();
	public: AVehicleRoutePoINT(AVehicleRoutePoINT const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~AVehicleRoutePoINT();
AViewportWindowController
	public: AViewportWindowController();
	public: AViewportWindowController(AViewportWindowController const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT Tick(FLOAT,enum ELevelTick);
	public: virtual ~AViewportWindowController();
	public: void CalcView(FVector&,FRotator&,FLOAT);
	public: void SetCalcStep(INT);
	public: void SetCameraEffectType(INT);
AVolume
	public: AVolume();
	public: AVolume(AVolume const&);
	public: INT Encompasses(FVector);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsAVolume();
	public: virtual INT ShouldTrace(AActor*,DWORD);
	public: virtual void PostBeginPlay();
	public: virtual void SetVolumes();
	public: virtual ~AVolume();
	public: void execEncompasses(struct FFrame&,void* const);
AWarpZoneInfo
	public: AWarpZoneInfo();
	public: AWarpZoneInfo(AWarpZoneInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AddMyMarker(AActor*);
	public: virtual ~AWarpZoneInfo();
	public: void eventForceGenerate();
	public: void eventGenerate();
	public: void execUnWarp(struct FFrame&,void* const);
	public: void execWarp(struct FFrame&,void* const);
AWarpZoneMarker
	public: AWarpZoneMarker();
	public: AWarpZoneMarker(AWarpZoneMarker const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT IsIdentifiedAs(FName);
	public: virtual void addReachSpecs(APawn*,INT);
	public: virtual ~AWarpZoneMarker();
AWaterHitEmitter
	protected: AWaterHitEmitter();
	public: AWaterHitEmitter(AWaterHitEmitter const&);
	public: FLOAT eventGetSpawnRate(FLOAT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~AWaterHitEmitter();
AWeapon
	public: AWeapon();
	public: AWeapon(AWeapon const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual ~AWeapon();
AWeaponAttachment
	public: AWeaponAttachment();
	public: AWeaponAttachment(AWeaponAttachment const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT* GetOptimizedRepList(unsigned char*,struct FPropertyRetirement*,INT*,UPackageMap*,UActorChannel*);
	public: virtual void PostNetReceive();
	public: virtual ~AWeaponAttachment();
	public: void eventThirdPersonEffects();
AZoneInfo
	public: AZoneInfo();
	public: AZoneInfo(AZoneInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~AZoneInfo();
	public: void eventActorEntered(AActor*);
	public: void eventActorLeaving(AActor*);
	public: void execZoneActors(struct FFrame&,void* const);
CGeoCellInfo
	public: CGeoCellInfo();
	public: CGeoCellInfo(CGeoCellInfo const&);
	public: CGeoCellInfo(INT,INT,INT,FVector,INT);
	public: virtual ~CGeoCellInfo();
CGeoZoneInfo
	public: CGeoCellInfo* FindCell(FVector);
	public: CGeoCellInfo* FindCell(INT,INT,INT);
	public: CGeoZoneInfo();
	public: FVector ConvToVector(CGeoCellInfo*);
	public: INT MAPPING_X(INT);
	public: INT MAPPING_Y(INT);
	public: INT POSITION_X(INT);
	public: INT POSITION_Y(INT);
	public: INT POSITION_Z(INT);
	public: INT RoundHeight(INT);
	public: bool AddCell(FVector,INT);
	public: bool AddCell(INT,INT,INT,FVector,INT);
	public: bool SetReachability(FVector,FVector,enum enum_direction,INT);
	public: void clear();
	public: ~CGeoZoneInfo();
CellQueueType
	public: CGeoCellInfo* Pop();
	public: CellQueueType();
	public: INT GetSize();
	public: void Push(CGeoCellInfo*);
ColosseumFence
	public: ColosseumFence();
	public: ColosseumFence(struct ColosseumFence const&);
	public: void DestroyColumn();
	public: void DestroyWall();
	public: void MakeColumn();
	public: void MakeWall();
	public: ~ColosseumFence();
ConnectInfo
	public: ConnectInfo();
FActorSceneNode
	public: FActorSceneNode(FActorSceneNode const&);
	public: FActorSceneNode(UViewport*,FRenderTarget*,AActor*,AActor*,FVector,FRotator,FLOAT);
	public: virtual FActorSceneNode* GetActorSceneNode();
	public: virtual void Render(FRenderInterface*);
	public: virtual ~FActorSceneNode();
FAnimMeshVertexStream
	public: FAnimMeshVertexStream();
	public: FAnimMeshVertexStream(FAnimMeshVertexStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetPartialSize();
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual INT SetPartialSize(INT);
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FAnimMeshVertexStream();
FAnywhereNpc
	public: FAnywhereNpc();
	public: FAnywhereNpc(struct FAnywhereNpc const&);
	public: ~FAnywhereNpc();
FAnywhereNpcMaker
	public: FAnywhereNpcMaker();
	public: FAnywhereNpcMaker(struct FAnywhereNpcMaker const&);
	public: ~FAnywhereNpcMaker();
FBezier
	public: FBezier();
	public: FBezier(FBezier const&);
	public: virtual ~FBezier();
FBspSection
	public: FBspSection();
	public: FBspSection(FBspSection const&);
	public: ~FBspSection();
FBspVertex
	public: FBspVertex();
FBspVertexStream
	public: FBspVertexStream();
	public: FBspVertexStream(FBspVertexStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FBspVertexStream();
FCameraSceneNode
	public: FCameraSceneNode(FCameraSceneNode const&);
	public: FCameraSceneNode(UViewport*,FRenderTarget*,AActor*,FVector,FRotator,FLOAT);
	public: virtual FCameraSceneNode* GetCameraSceneNode();
	public: virtual void Render(FRenderInterface*);
	public: virtual void UpdateMatrices();
	public: virtual ~FCameraSceneNode();
FCanvasUtil
	public: FCanvasUtil(FCanvasUtil const&);
	public: FCanvasUtil(FRenderTarget*,FRenderInterface*);
	public: INT DrawString(INT,INT,const TCHAR*,UFont*,FColor);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FCanvasUtil();
	public: void BeginPrimitive(enum EPrimitiveType,UMaterial*);
	public: void DrawCompassTile(FVector,FVector,FVector,FVector,UMaterial*);
	public: void DrawLine(FLOAT,FLOAT,FLOAT,FLOAT,FColor,INT);
	public: void DrawPoINT(FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FColor);
	public: void DrawTextSprite(INT,INT,INT,INT,TCHAR*,DWORD,INT,INT);
	public: void DrawTile(FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,UMaterial*,FColor);
	public: void Flush();
FCanvasVertex
	public: FCanvasVertex();
	public: FCanvasVertex(FVector,FColor,FLOAT,FLOAT);
FChatMsgInfo
	public: FChatMsgInfo();
	public: FChatMsgInfo(FChatMsgInfo const&);
	public: virtual TCHAR* GetChatMsgInfo();
FCollisionHash
	private: FLOAT DistanceToHashPlane(INT,FLOAT,FLOAT,INT);
	public: FCollisionHash();
	public: FCollisionHash(FCollisionHash const&);
	public: struct FCollisionLink*& GetHashLink(INT,INT,INT,INT&);
	public: virtual struct FCheckResult* ActorEncroachmentCheck(FMemStack&,AActor*,FVector,FRotator,DWORD,DWORD);
	public: virtual struct FCheckResult* ActorLineCheck(FMemStack&,FVector,FVector,FVector,DWORD,DWORD,AActor*);
	public: virtual struct FCheckResult* ActorOverlapCheck(FMemStack&,AActor*,FBox*,INT);
	public: virtual struct FCheckResult* ActorPoINTCheck(FMemStack&,FVector,FVector,DWORD,DWORD,INT);
	public: virtual struct FCheckResult* ActorRadiusCheck(FMemStack&,FVector,FLOAT,DWORD);
	public: virtual void AddActor(AActor*);
	public: virtual void CheckActorLocations(ULevel*);
	public: virtual void CheckActorNotReferenced(AActor*);
	public: virtual void CheckIsEmpty();
	public: virtual void RemoveActor(AActor*);
	public: virtual void Tick();
	public: virtual ~FCollisionHash();
	public: void GetActorExtent(AActor*,INT&,INT&,INT&,INT&,INT&,INT&);
	public: void GetHashIndices(FVector,INT&,INT&,INT&);
FCollisionOctree
	public: FCollisionOctree();
	public: FCollisionOctree(FCollisionOctree const&);
	public: virtual struct FCheckResult* ActorEncroachmentCheck(FMemStack&,AActor*,FVector,FRotator,DWORD,DWORD);
	public: virtual struct FCheckResult* ActorLineCheck(FMemStack&,FVector,FVector,FVector,DWORD,DWORD,AActor*);
	public: virtual struct FCheckResult* ActorOverlapCheck(FMemStack&,AActor*,FBox*,INT);
	public: virtual struct FCheckResult* ActorPoINTCheck(FMemStack&,FVector,FVector,DWORD,DWORD,INT);
	public: virtual struct FCheckResult* ActorRadiusCheck(FMemStack&,FVector,FLOAT,DWORD);
	public: virtual void AddActor(AActor*);
	public: virtual void CheckActorLocations(ULevel*);
	public: virtual void CheckActorNotReferenced(AActor*);
	public: virtual void CheckIsEmpty();
	public: virtual void RemoveActor(AActor*);
	public: virtual void Tick();
	public: virtual ~FCollisionOctree();
FColor
	public: DWORD TrueColor()const;
	public: DWORD const& DWColor()const;
	public: DWORD& DWColor();
	public: FColor Brighten(INT);
	public: FColor RenderColor();
	public: FColor();
	public: FColor(DWORD);
	public: FColor(FPlane const&);
	public: FColor(unsigned char,unsigned char,unsigned char,unsigned char);
	public: FLOAT FBrightness()const;
	public: FPlane Plane()const;
	public: INT Brightness()const;
	public: unsigned short HiColor4444()const;
	public: unsigned short HiColor555()const;
	public: unsigned short HiColor565()const;
FConsoleMessage
	public: FConsoleMessage();
	public: FConsoleMessage(struct FConsoleMessage const&);
	public: ~FConsoleMessage();
FConvexVolume
	public: FConvexVolume();
	public: FConvexVolume(FConvexVolume const&);
	public: FPoly ClipPolygon(FPoly);
	public: unsigned char BoxCheck(FVector,FVector);
	public: unsigned char SphereCheck(FSphere);
FDXTCompressionOptions
	public: FDXTCompressionOptions();
FDirectionalLightMapSceneNode
	const TCHAR* const `public: FDirectionalLightMapSceneNode(UViewport*,AActor*,FBspSurf&,FLightMap*)'::`3'::__FUNC_NAME__;
	public: FDirectionalLightMapSceneNode(FDirectionalLightMapSceneNode const&);
	public: FDirectionalLightMapSceneNode(UViewport*,AActor*,FBspSurf&,FLightMap*);
	public: virtual FConvexVolume GetViewFrustum();
	public: virtual ~FDirectionalLightMapSceneNode();
FDynamicActor
	public: FDynamicActor(AActor*);
	public: FDynamicActor(FDynamicActor const&);
	public: void DrawChat(FLevelSceneNode*,FRenderInterface*,FVector);
	public: void Render(FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*);
	public: void Update();
	public: ~FDynamicActor();
FDynamicLight
	public: FColor SampleLight(FVector,FVector,enum ELightColorType);
	public: FDynamicLight(AEmitterLight*);
	public: FDynamicLight(ALight*);
	public: FDynamicLight(FDynamicLight const&);
	public: FLOAT SampleIntensity(FVector,FVector);
	public: FPlane GetLightColor(enum ELightColorType);
	public: void SetLightColor(FPlane,enum ELightColorType);
	public: void Update();
FEngineStats
	public: FEngineStats();
	public: void Init();
FFadeColorMaterialInfo
	const TCHAR* const `public: FColor GetColor(FLOAT)'::`3'::__FUNC_NAME__;
	public: FColor GetColor(FLOAT);
	public: FFadeColorMaterialInfo();
FGPUSkinVertexStream
	public: FGPUSkinVertexStream();
	public: FGPUSkinVertexStream(FGPUSkinVertexStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FGPUSkinVertexStream();
FHitCause
	public: FHitCause(FHitObserver*,UViewport*,DWORD,FLOAT,FLOAT);
FHitObserver
	public: FHitObserver();
	public: FHitObserver(FHitObserver const&);
	public: virtual void Click(struct FHitCause const&,struct HHitProxy const&);
FInBunch
	public: FInBunch(FInBunch const&);
	public: FInBunch(UNetConnection*);
	public: virtual ~FInBunch();
FKAggregateGeom
	public: FKAggregateGeom();
	public: FKAggregateGeom(FKAggregateGeom const&);
	public: INT GetElementCount();
	public: void EmptyElements();
	public: ~FKAggregateGeom();
FKBoxElem
	public: FKBoxElem();
	public: FKBoxElem(FLOAT);
	public: FKBoxElem(FLOAT,FLOAT,FLOAT);
	public: ~FKBoxElem();
FKConvexElem
	public: FKConvexElem();
	public: FKConvexElem(FKConvexElem const&);
	public: ~FKConvexElem();
FKCylinderElem
	public: FKCylinderElem();
	public: FKCylinderElem(FLOAT,FLOAT);
	public: ~FKCylinderElem();
FKSphereElem
	public: FKSphereElem();
	public: FKSphereElem(FLOAT);
	public: ~FKSphereElem();
FKeyValuePair
	public: FKeyValuePair();
	public: FKeyValuePair(struct FKeyValuePair const&);
	public: ~FKeyValuePair();
FL2GameData
	private: FZoneNameInfo* processGetZoneNameInfo(INT,INT,INT);
	private: INT CheckSafePackage(FArchive&);
	private: void MakeSafePackage(FArchive&);
	protected: INT AccessaryHairDataLoad(INT);
	protected: INT ActionDataLoad(INT);
	protected: INT ArmorItemDataLoad(INT);
	protected: INT CastleNameDataLoad(INT);
	protected: INT CharDataLoad(INT);
	protected: INT ClassInfoLoad(INT);
	protected: INT CommandDataLoad(INT);
	protected: INT CreditDataLoad(INT);
	protected: INT EnterEventDataLoad(INT);
	protected: INT EtcItemDataLoad(INT);
	protected: INT EulaLoad(INT);
	protected: INT GameTipDataLoad(INT);
	protected: INT HairAcceLocDataLoad(INT);
	protected: INT HairDataLoad(INT);
	protected: INT HelmHairDataLoad(INT);
	protected: INT HennaDataLoad(INT);
	protected: INT HuntingZoneDataLoad(INT);
	protected: INT IDCNameLoad(INT);
	protected: INT ItemNameDataLoad(INT);
	protected: INT LogonDataLoad(INT);
	protected: INT MSItemDataLoad(INT);
	protected: INT MSItemNameDataLoad(INT);
	protected: INT MusicDataLoad(INT);
	protected: INT NpcDataLoad(INT);
	protected: INT NpcNameDataLoad(INT);
	protected: INT NpcSkillAnimDataLoad(INT);
	protected: INT ObsceneDataLoad(INT);
	protected: INT QuestDataLoad(INT);
	protected: INT RaidDataLoad(INT);
	protected: INT RecipeDataLoad(INT);
	protected: INT ServerNameLoad(INT);
	protected: INT SkillSndDataLoad(INT);
	protected: INT StaticObjectInfoLoad(INT);
	protected: INT SymbolInfoLoad(INT);
	protected: INT SysStringLoad(INT);
	protected: INT SystemMsgFormatLoad(INT);
	protected: INT VariationEffectDataLoad(INT);
	protected: INT VariationOptionDataLoad(INT);
	protected: INT WarningNoticeLoad(INT);
	protected: INT WeaponItemDataLoad(INT);
	protected: INT ZoneNameListLoad(INT);
	protected: void AbnormalDataClear();
	protected: void AbnormalNameDataClear();
	protected: void AccessaryHairDataClear();
	protected: void AccessaryHairDataSave(INT);
	protected: void ActionDataClear();
	protected: void ActionDataSave(INT);
	protected: void CastleNameDataClear();
	protected: void CastleNameDataSave(INT);
	protected: void CharDataClear();
	protected: void CharDataSave(INT);
	protected: void ClassInfoClear();
	protected: void ClassInfoSave(INT);
	protected: void ClassTypeClear();
	protected: void ClearAgitInfo();
	protected: void ClearHairAcceLocData();
	protected: void ClearStaticObjectInfo();
	protected: void ClearZoneNameInfo();
	protected: void ClientDataClear();
	protected: void CommandDataClear();
	protected: void CommandDataSave(INT);
	protected: void CommandStringClear();
	protected: void CommandStringLoad(INT);
	protected: void CreditDataClear();
	protected: void CreditDataSave(INT);
	protected: void EnterEventDataClear();
	protected: void EnterEventDataSave(INT);
	protected: void EulaClear();
	protected: void EulaSave(INT);
	protected: void GameTipDataClear();
	protected: void GameTipDataSave(INT);
	protected: void GetBinFileName(TCHAR*,TCHAR*);
	protected: void GetTextFileName(TCHAR*,TCHAR*);
	protected: void HairAcceLocDataSave(INT);
	protected: void HairDataClear();
	protected: void HairDataSave(INT);
	protected: void HelmHairDataClear();
	protected: void HelmHairDataSave(INT);
	protected: void HennaDataClear();
	protected: void HennaDataSave(INT);
	protected: void HuntingZoneDataClear();
	protected: void HuntingZoneDataSave(INT);
	protected: void IDCNameClear();
	protected: void IDCNameSave(INT);
	protected: void ItemDataClear();
	protected: void ItemDataSave(INT);
	protected: void ItemNameDataClear();
	protected: void LogonDataSave(INT);
	protected: void MSCommandDataClear();
	protected: void MSCommandDataLoad(INT);
	protected: void MSItemDataClear();
	protected: void MSItemDataSave(INT);
	protected: void MSItemNameDataClear();
	protected: void MusicDataClear();
	protected: void MusicDataSave(INT);
	protected: void NoticeClear();
	protected: void NoticeLoad();
	protected: void NpcDataClear();
	protected: void NpcDataSave(INT);
	protected: void NpcNameDataClear();
	protected: void NpcSkillAnimDataClear();
	protected: void NpcSkillAnimDataSave(INT);
	protected: void ObsceneDataClear();
	protected: void ObsceneDataSave(INT);
	protected: void PetActionDataClear();
	protected: void QuestDataClear();
	protected: void QuestDataSave(INT);
	protected: void RaidDataClear();
	protected: void RaidDataSave(INT);
	protected: void RecipeDataClear();
	protected: void RecipeDataSave(INT);
	protected: void ServerDataClear();
	protected: void ServerNameClear();
	protected: void ServerNameSave(INT);
	protected: void SkillSndDataClear();
	protected: void SkillSndDataSave(INT);
	protected: void SoulShotDataClear();
	protected: void SoulShotDataLoad();
	protected: void StaticObjectInfoSave(INT);
	protected: void SymbolInfoClear();
	protected: void SymbolInfoSave(INT);
	protected: void SysStringClear();
	protected: void SysStringSave(INT);
	protected: void SystemMsgFormatClear();
	protected: void SystemMsgFormatSave(INT);
	protected: void VariationEffectDataClear();
	protected: void VariationEffectDataSave(INT);
	protected: void VariationOptionDataClear();
	protected: void VariationOptionDataSave(INT);
	protected: void WarningNoticeClear();
	protected: void WarningNoticeSave(INT);
	protected: void ZoneNameListSave(INT);
	public: FAgitInfo* GetAgitInfo(INT);
	public: FL2GameData();
	public: FL2GameData(FL2GameData const&);
	public: FL2ItemDataBase* GetItemData(INT);
	public: FString GetItemSetListName(INT,INT,INT);
	public: FZoneNameInfo* GetZoneNameInfo(INT,INT,INT,FLOAT);
	public: INT ClientDataLoad(INT);
	public: INT GetAgitAccessoryInfo(INT,INT);
	public: INT GetCommandType(const TCHAR*);
	public: INT GetCommandTypeFromAction(const TCHAR*);
	public: INT GetCurrentZoneID();
	public: INT GetGameTipDataCount();
	public: INT GetItemPopMsgNum(INT);
	public: INT GetItemSetEnchantCount(INT);
	public: INT GetTextInformation(FArchive*,unsigned char**,INT&,INT);
	public: INT GetZoneID(FLOAT,FLOAT,FLOAT);
	public: INT GetZoneID(FVector);
	public: INT IsSetItem(INT);
	public: INT Load(INT);
	public: INT ServerDataCreate(INT);
	public: INT ServerDataLoad(INT);
	public: TCHAR* GetCmdStringByActionID(INT);
	public: TCHAR* GetCurrentZoneName();
	public: TCHAR* GetZoneName(FLOAT,FLOAT,FLOAT);
	public: TCHAR* GetZoneName(FVector);
	public: TCHAR* GetZoneName(INT);
	public: UMaterial* GetAgitWallPaper(INT);
	public: UTexture* GetSymbolTexture(INT);
	public: UTexture* GetSymbolTexture(TCHAR*);
	public: UTexture* GetZoneNameTexture(INT,INT);
	public: const TCHAR* GetItemAdditionalName(INT);
	public: const TCHAR* GetItemDescription(INT);
	public: const TCHAR* GetItemName(INT);
	public: const TCHAR* GetItemSetEffect(INT,INT);
	public: const TCHAR* GetItemSetEnchantEffect(INT);
	public: const TCHAR* GetItemSetListID(INT,INT);
	public: const TCHAR* GetMusicName(INT);
	public: const TCHAR* GetNpcName(INT);
	public: const TCHAR* GetStaticObjectName(INT);
	public: const TCHAR* GetStepSoundName(INT);
	public: struct FL2ClientData* GetClientData(INT);
	public: struct FL2EnterEventData* GetEnterEventData(INT);
	public: struct FL2EnterEventData* GetExitEventData(INT);
	public: struct FL2GameTipData* GetGameTipData(INT);
	public: struct FL2HennaData* GetHennaData(INT);
	public: struct FL2HuntingZoneData* GetHuntingZoneData(INT);
	public: struct FL2MagicSkillCommandData* GetMSCommandData(TCHAR*);
	public: struct FL2MagicSkillData* GetMSData(INT,INT);
	public: struct FL2NpcSkillAnimData* GetNpcSkillAnimData(INT,INT);
	public: struct FL2QuestData* GetQuestData(INT,INT);
	public: struct FL2RaidData* GetRaidData(INT);
	public: struct FL2RecipeData* GetRecipeDataBy2Condition(INT,INT);
	public: struct FL2RecipeData* GetRecipeDataByIndex(INT);
	public: struct FL2RecipeData* GetRecipeDataByProductID(INT);
	public: struct FL2RecipeData* GetRecipeDataByRecipeID(INT);
	public: struct FL2ServerData* GetServerData(INT);
	public: struct FL2SkillSoundData* GetSkillSoundData(INT,INT);
	public: struct FL2VariationEffectData* GetVariationEffectData(INT,INT,INT,INT);
	public: struct FL2VariationOptionData* GetVariationOptionData(INT);
	public: virtual ~FL2GameData();
	public: void AddAgitInfo(INT,unsigned char*);
	public: void ChangeAgitData(INT,INT,unsigned char);
	public: void Clear();
	public: void ClientDataSave(INT);
	public: void DeleteAgitInfo(INT);
	public: void Save(INT);
	public: void ServerDataSave(INT);
	public: void SetAgitWallPaper(INT,UMaterial*);
FL2NpcData
	public: FL2NpcData();
	public: FL2NpcData(struct FL2NpcData const&);
	public: bool HasProperQuest(INT,INT);
	public: void CheckResource(INT,INT,INT);
	public: void Serialize(FArchive&,INT);
	public: ~FL2NpcData();
FL2ReplayManager
	private: FString ImportLoadingTex();
	private: INT CameraInstructionBinLoad(INT);
	private: INT CameraInstructionSave();
	private: INT CameraInstructionTxtLoad(INT);
	private: INT EndPublicLoad();
	private: INT IsValidInstruction(INT);
	private: INT Load();
	private: INT PacketInstructionBinLoad(INT);
	private: INT PacketInstructionSave();
	private: INT PacketInstructionTxtLoad(INT);
	private: INT PrepareLoad();
	private: INT PublicModeLoad();
	private: INT PublicModeSave();
	private: INT ResourceListSave();
	private: INT ResourceLoad(INT);
	private: void CriticalError(const TCHAR*);
	private: void MakeUseCameraActionTable();
	private: void MakeUsePacketTable();
	private: void ProceedStep();
	private: void PublicModeLoadError(INT);
	private: void SetCameraPosition();
	private: void SetClientTime();
	public: FL2ReplayManager(FL2ReplayManager const&);
	public: FL2ReplayManager(INT);
	public: FLOAT GetPlaySpeed();
	public: INT AddCameraActionData(enum EInputKey,enum EInputAction,FLOAT);
	public: INT DrawName();
	public: INT GetState();
	public: INT GetStep();
	public: INT InputEvent(enum EInputKey,enum EInputAction,FLOAT);
	public: INT IsDiscardedBM();
	public: INT IsPaused();
	public: INT IsPublicMode();
	public: INT OnPublicLoad(FString,INT,INT);
	public: INT RewriteCameraInst();
	public: INT Save();
	public: INT SetSceneName(FString);
	public: INT UseBGM();
	public: INT UseBinCameraInst();
	public: INT UseCameraInst();
	public: INT UseChatData();
	public: TCHAR* GetBMScore();
	public: double GetStartTime();
	public: void AddCurrentUsingPackageNames();
	public: void AddMapName(INT,INT);
	public: void AddMusicName(FString,INT);
	public: void AddPacketData(struct NetworkPacket*);
	public: void AddSceneName(FString,INT);
	public: void Clear(INT);
	public: void OnSaveStart();
	public: void OnSaveStartStop();
	public: void OnSaveStop();
	public: void PrepareSave(FString);
	public: void ResetBMData();
	public: void SetBGM(INT,FString);
	public: void SetCameraInstMode(INT);
	public: void SetDrawName(INT);
	public: void SetLoadingTexName(FString);
	public: void SetPublicMode(INT);
	public: void SetRewriteCameraInst(INT);
	public: void SetState(INT);
	public: void SetUseBGM(INT);
	public: void SetUseBinCameraInst(INT);
	public: void SetUseChatData(INT);
	public: void StopPlaying();
	public: void Tick(FLOAT);
	public: void UpdateBMFrameTime(double);
	public: ~FL2ReplayManager();
FL2ResueOrCast
	public: FL2ResueOrCast();
	public: FLOAT GetLength(FLOAT);
	public: INT CanUse();
	public: void Add(FLOAT);
	public: void Disable();
	public: void Reset(INT,INT);
FL2TextAlignParser
	private: FString DivideTokenWithWidth(TCHAR*,INT);
	private: void GetNextTokenBuffer();
	public: FL2TextAlignParser();
	public: FL2TextAlignParser(FL2TextAlignParser const&);
	public: FL2TextAlignParser(TCHAR*,DWORD,UL2Font*,INT,INT,INT,INT,FRenderInterface*,INT);
	public: INT GetSpaceWidth();
	public: TCHAR* GetLineBuffer(INT&);
	public: void Clear();
	public: void SetParserParam(TCHAR*,DWORD,UL2Font*,INT,INT,INT,INT,FRenderInterface*,INT);
	public: void SetWidthParam(DWORD);
	public: ~FL2TextAlignParser();
FLandMark
	public: FLandMark(APawn*);
	public: FLandMark(FLandMark const&);
	public: virtual ~FLandMark();
	public: void AddLandMark(FVector,FVector,INT);
	public: void DeleteLandMark(INT);
	public: void SetOwner(APawn*);
	public: void Update(FLOAT);
FLeafRenderInfo
	public: FLeafRenderInfo();
	public: FLeafRenderInfo(struct FLeafRenderInfo const&);
	public: ~FLeafRenderInfo();
FLevelSceneNode
	public: FLevelSceneNode(FLevelSceneNode const&);
	public: FLevelSceneNode(FLevelSceneNode*,INT,FMatrix);
	public: FLevelSceneNode(UViewport*,FRenderTarget*);
	public: virtual FConvexVolume GetViewFrustum();
	public: virtual FLevelSceneNode* GetLevelSceneNode();
	public: virtual INT FilterActor(AActor*);
	public: virtual INT FilterAttachment(AActor*);
	public: virtual INT FilterLevelObject(ULevelObject*);
	public: virtual INT FilterProjector(AProjector*);
	public: virtual void Render(FRenderInterface*);
	public: virtual ~FLevelSceneNode();
FLightMap
	public: FLightMap();
	public: FLightMap(FLightMap const&);
	public: FLightMap(ULevel*,INT,INT);
	public: virtual INT GetFirstMip();
	public: virtual INT GetHeight();
	public: virtual INT GetNumMips();
	public: virtual INT GetRevision();
	public: virtual INT GetWidth();
	public: virtual UTexture* GetUTexture();
	public: virtual enum ETexClampMode GetUClamp();
	public: virtual enum ETexClampMode GetVClamp();
	public: virtual enum ETextureFormat GetFormat();
	public: virtual void GetTextureData(INT,void*,INT,enum ETextureFormat,INT);
	public: virtual void GetTextureData(INT,void*,INT,enum ETextureFormat,INT,INT,INT);
	public: virtual void UnloadRawTextureData(INT);
	public: virtual void* GetRawTextureData(INT);
	public: virtual ~FLightMap();
FLightMapIndex
	public: FLightMapIndex();
	public: ~FLightMapIndex();
FLightMapSceneNode
	public: FLightMapSceneNode(FLightMapSceneNode const&);
	public: FLightMapSceneNode(UViewport*,AActor*,FLightMap*);
	public: virtual INT FilterActor(AActor*);
	public: virtual void Render(FRenderInterface*);
	public: virtual ~FLightMapSceneNode();
FLightMapTexture
	public: FLightMapTexture();
	public: FLightMapTexture(FLightMapTexture const&);
	public: FLightMapTexture(ULevel*);
	public: virtual FTexture* GetChild(INT,INT*,INT*);
	public: virtual INT GetFirstMip();
	public: virtual INT GetHeight();
	public: virtual INT GetNumChildren();
	public: virtual INT GetNumMips();
	public: virtual INT GetRevision();
	public: virtual INT GetWidth();
	public: virtual enum ETexClampMode GetUClamp();
	public: virtual enum ETexClampMode GetVClamp();
	public: virtual enum ETextureFormat GetFormat();
	public: virtual ~FLightMapTexture();
FLineBatcher
	public: FLineBatcher(FLineBatcher const&);
	public: FLineBatcher(FRenderInterface*,INT);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FLineBatcher();
	public: void DrawBox(FBox,FColor);
	public: void DrawCircle(FVector,FVector,FVector,FColor,FLOAT,INT);
	public: void DrawConvexVolume(FConvexVolume,FColor);
	public: void DrawCylinder(FRenderInterface*,FVector,FVector,FVector,FVector,FColor,FLOAT,FLOAT,INT);
	public: void DrawCylinder(FRenderInterface*,FVector,FVector,FVector,FVector,FColor,FLOAT,FLOAT,INT,INT);
	public: void DrawDirectionalArrow(FVector,FRotator,FColor,FLOAT);
	public: void DrawLine(FVector,FVector,FColor);
	public: void DrawPoINT(FSceneNode*,FVector,FColor);
	public: void Flush(DWORD);
FLineVertex
	public: FLineVertex();
	public: FLineVertex(FVector,FColor);
FMaterialProperty
	public: FMaterialProperty();
	public: FMaterialProperty(struct FMaterialProperty const&);
	public: void Clear();
	public: ~FMaterialProperty();
FMatineeTools
	public: ASceneManager* GetCurrent();
	public: ASceneManager* SetCurrent(UEngine*,ULevel*,ASceneManager*);
	public: ASceneManager* SetCurrent(UEngine*,ULevel*,FString);
	public: FMatineeTools();
	public: FMatineeTools(FMatineeTools const&);
	public: FString GetOrientationDesc(INT);
	public: INT GetActionIdx(ASceneManager*,UMatAction*);
	public: INT GetPathStyle(UMatAction*);
	public: INT GetSubActionIdx(UMatSubAction*);
	public: UMatAction* GetCurrentAction();
	public: UMatAction* GetNextAction(ASceneManager*,UMatAction*);
	public: UMatAction* GetNextMovementAction(ASceneManager*,UMatAction*);
	public: UMatAction* GetPrevAction(ASceneManager*,UMatAction*);
	public: UMatAction* SetCurrentAction(UMatAction*);
	public: UMatSubAction* GetCurrentSubAction();
	public: UMatSubAction* SetCurrentSubAction(UMatSubAction*);
	public: virtual ~FMatineeTools();
	public: void Init();
FMipmap
	const TCHAR* const `public: void Clear()'::`3'::__FUNC_NAME__;
	public: FMipmap();
	public: FMipmap(struct FMipmap const&);
	public: FMipmap(unsigned char,unsigned char);
	public: FMipmap(unsigned char,unsigned char,INT);
	public: void Clear();
	public: ~FMipmap();
FMipmapBase
	public: FMipmapBase();
	public: FMipmapBase(unsigned char,unsigned char);
FMirrorSceneNode
	public: FMirrorSceneNode(FLevelSceneNode*,FPlane,INT,INT);
	public: FMirrorSceneNode(FMirrorSceneNode const&);
	public: virtual FMirrorSceneNode* GetMirrorSceneNode();
	public: virtual ~FMirrorSceneNode();
FMultiLightMapTexture
	public: FLightMapTexture* AddLightMapTexture();
	public: FMultiLightMapTexture();
	public: FMultiLightMapTexture(FMultiLightMapTexture const&);
	public: FMultiLightMapTexture(ULevel*);
	public: void AddLightMapIndex(INT);
	public: ~FMultiLightMapTexture();
FNAbnormalStat
	protected: void DeleteEffectActor();
	public: FNAbnormalStat(APawn*);
	public: FNAbnormalStat(FNAbnormalStat const&);
	public: INT CheckState(INT);
	public: INT GetType();
	public: virtual ~FNAbnormalStat();
FNAbnormalStat_BIGBODY
	public: FNAbnormalStat_BIGBODY(APawn*);
	public: FNAbnormalStat_BIGBODY(FNAbnormalStat_BIGBODY const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_BIGBODY();
FNAbnormalStat_BIGHEAD
	public: FNAbnormalStat_BIGHEAD(APawn*);
	public: FNAbnormalStat_BIGHEAD(FNAbnormalStat_BIGHEAD const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_BIGHEAD();
FNAbnormalStat_CHANGE_TEXTURE
	public: FNAbnormalStat_CHANGE_TEXTURE(APawn*);
	public: FNAbnormalStat_CHANGE_TEXTURE(FNAbnormalStat_CHANGE_TEXTURE const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_CHANGE_TEXTURE();
FNAbnormalStat_DANCE_ROOT
	public: FNAbnormalStat_DANCE_ROOT(APawn*);
	public: FNAbnormalStat_DANCE_ROOT(FNAbnormalStat_DANCE_ROOT const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_DANCE_ROOT();
FNAbnormalStat_DOT_BLEEDING
	public: FNAbnormalStat_DOT_BLEEDING(APawn*);
	public: FNAbnormalStat_DOT_BLEEDING(FNAbnormalStat_DOT_BLEEDING const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_DOT_BLEEDING();
FNAbnormalStat_DOT_FIRE
	public: FNAbnormalStat_DOT_FIRE(APawn*);
	public: FNAbnormalStat_DOT_FIRE(FNAbnormalStat_DOT_FIRE const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_DOT_FIRE();
FNAbnormalStat_DOT_FIRE_AREA
	public: FNAbnormalStat_DOT_FIRE_AREA(APawn*);
	public: FNAbnormalStat_DOT_FIRE_AREA(FNAbnormalStat_DOT_FIRE_AREA const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_DOT_FIRE_AREA();
FNAbnormalStat_DOT_MP
	public: FNAbnormalStat_DOT_MP(APawn*);
	public: FNAbnormalStat_DOT_MP(FNAbnormalStat_DOT_MP const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_DOT_MP();
FNAbnormalStat_DOT_POISON
	public: FNAbnormalStat_DOT_POISON(APawn*);
	public: FNAbnormalStat_DOT_POISON(FNAbnormalStat_DOT_POISON const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_DOT_POISON();
FNAbnormalStat_DOT_SOIL
	public: FNAbnormalStat_DOT_SOIL(APawn*);
	public: FNAbnormalStat_DOT_SOIL(FNAbnormalStat_DOT_SOIL const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_DOT_SOIL();
FNAbnormalStat_DOT_WATER
	public: FNAbnormalStat_DOT_WATER(APawn*);
	public: FNAbnormalStat_DOT_WATER(FNAbnormalStat_DOT_WATER const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_DOT_WATER();
FNAbnormalStat_DOT_WIND
	public: FNAbnormalStat_DOT_WIND(APawn*);
	public: FNAbnormalStat_DOT_WIND(FNAbnormalStat_DOT_WIND const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_DOT_WIND();
FNAbnormalStat_FLESH_STONE
	public: FNAbnormalStat_FLESH_STONE(APawn*);
	public: FNAbnormalStat_FLESH_STONE(FNAbnormalStat_FLESH_STONE const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_FLESH_STONE();
FNAbnormalStat_FLOATING_ROOT
	public: FNAbnormalStat_FLOATING_ROOT(APawn*);
	public: FNAbnormalStat_FLOATING_ROOT(FNAbnormalStat_FLOATING_ROOT const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_FLOATING_ROOT();
FNAbnormalStat_GHOST_STUN
	public: FNAbnormalStat_GHOST_STUN(APawn*);
	public: FNAbnormalStat_GHOST_STUN(FNAbnormalStat_GHOST_STUN const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_GHOST_STUN();
FNAbnormalStat_MAGIC_SQUARE
	public: FNAbnormalStat_MAGIC_SQUARE(APawn*);
	public: FNAbnormalStat_MAGIC_SQUARE(FNAbnormalStat_MAGIC_SQUARE const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_MAGIC_SQUARE();
FNAbnormalStat_PARALYZE
	public: FNAbnormalStat_PARALYZE(APawn*);
	public: FNAbnormalStat_PARALYZE(FNAbnormalStat_PARALYZE const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_PARALYZE();
FNAbnormalStat_ROOT
	public: FNAbnormalStat_ROOT(APawn*);
	public: FNAbnormalStat_ROOT(FNAbnormalStat_ROOT const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_ROOT();
FNAbnormalStat_SEIZURE1
	public: FNAbnormalStat_SEIZURE1(APawn*);
	public: FNAbnormalStat_SEIZURE1(FNAbnormalStat_SEIZURE1 const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_SEIZURE1();
FNAbnormalStat_SEIZURE2
	public: FNAbnormalStat_SEIZURE2(APawn*);
	public: FNAbnormalStat_SEIZURE2(FNAbnormalStat_SEIZURE2 const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_SEIZURE2();
FNAbnormalStat_SILENCE
	public: FNAbnormalStat_SILENCE(APawn*);
	public: FNAbnormalStat_SILENCE(FNAbnormalStat_SILENCE const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_SILENCE();
FNAbnormalStat_SLEEP
	public: FNAbnormalStat_SLEEP(APawn*);
	public: FNAbnormalStat_SLEEP(FNAbnormalStat_SLEEP const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_SLEEP();
FNAbnormalStat_STEALTH
	public: FNAbnormalStat_STEALTH(APawn*);
	public: FNAbnormalStat_STEALTH(FNAbnormalStat_STEALTH const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_STEALTH();
FNAbnormalStat_STUN
	public: FNAbnormalStat_STUN(APawn*);
	public: FNAbnormalStat_STUN(FNAbnormalStat_STUN const&);
	public: virtual INT Init();
	public: virtual INT Update(INT,FLOAT);
	public: virtual ~FNAbnormalStat_STUN();
FNActorResourceLoader
	const TCHAR* const `public: void Add(FNPawnResource*)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: void Remove(FNPawnResource*)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: void Remove(FNPawnResource*)'::`8'::__FUNC_NAME__;
	public: FNActorResourceLoader();
	public: FNActorResourceLoader(FNActorResourceLoader const&);
	public: FNPawnResource* FindPawnResource(FName,enum PawnResourceType);
	public: FNPawnResource* First();
	public: INT CheckLoadingResource(AActor*,INT);
	public: INT CheckLoadingResource(APawn*,INT);
	public: INT IsEquipResource(APawn*,INT,enum PawnResourceType);
	public: INT IsLoadedResource(APawn*,INT,enum PawnResourceType,FName,void**);
	public: INT Load(FNPawnResource*);
	public: INT LoadPawnResourceWithActor(APawn*);
	public: virtual ~FNActorResourceLoader();
	public: void Add(FNPawnResource*);
	public: void AddActorResourceArray(APawn*,FName,enum PawnResourceType,INT,INT);
	public: void ClearActorResourceArray();
	public: void Empty();
	public: void LoadActorResourceArray(FLOAT);
	public: void Remove(FNPawnResource*);
	public: void RemoveActorResourceArray(AActor*);
	public: void RemoveActorResourceArray(FName);
FNAppendixEffect
	public: FNAppendixEffect(AActor*);
	public: FNAppendixEffect(FNAppendixEffect const&);
	public: INT GetAppEffectType();
	public: virtual ~FNAppendixEffect();
FNAppendixEffect_COLOSSEUM_1
	public: FNAppendixEffect_COLOSSEUM_1(AActor*);
	public: FNAppendixEffect_COLOSSEUM_1(FNAppendixEffect_COLOSSEUM_1 const&);
	public: virtual INT Init();
	public: virtual ~FNAppendixEffect_COLOSSEUM_1();
FNAppendixEffect_COLOSSEUM_2
	public: FNAppendixEffect_COLOSSEUM_2(AActor*);
	public: FNAppendixEffect_COLOSSEUM_2(FNAppendixEffect_COLOSSEUM_2 const&);
	public: virtual INT Init();
	public: virtual ~FNAppendixEffect_COLOSSEUM_2();
FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE
	public: FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE(AActor*);
	public: FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE(FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE const&);
	public: virtual INT Init();
	public: virtual ~FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE();
FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED
	public: FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED(AActor*);
	public: FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED(FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED const&);
	public: virtual INT Init();
	public: virtual ~FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED();
FNAppendixEffect_COLOSSEUM_SELECTED_BLUE
	public: FNAppendixEffect_COLOSSEUM_SELECTED_BLUE(AActor*);
	public: FNAppendixEffect_COLOSSEUM_SELECTED_BLUE(FNAppendixEffect_COLOSSEUM_SELECTED_BLUE const&);
	public: virtual INT Init();
	public: virtual ~FNAppendixEffect_COLOSSEUM_SELECTED_BLUE();
FNAppendixEffect_COLOSSEUM_SELECTED_RED
	public: FNAppendixEffect_COLOSSEUM_SELECTED_RED(AActor*);
	public: FNAppendixEffect_COLOSSEUM_SELECTED_RED(FNAppendixEffect_COLOSSEUM_SELECTED_RED const&);
	public: virtual INT Init();
	public: virtual ~FNAppendixEffect_COLOSSEUM_SELECTED_RED();
FNBoneScalerStat
	public: FNBoneScalerStat(AActor*);
	public: FNBoneScalerStat(FNBoneScalerStat const&);
	public: virtual ~FNBoneScalerStat();
	public: void Update(FLOAT);
FNCursedWeaponEffect
	private: INT GetEffectLevel(INT);
	public: FNCursedWeaponEffect(AActor*,INT);
	public: FNCursedWeaponEffect(FNCursedWeaponEffect const&);
	public: INT CheckState(APawn*);
	public: virtual ~FNCursedWeaponEffect();
	public: void Init();
FNMagicInfo
	const TCHAR* const `public: void Clear(INT)'::`3'::__FUNC_NAME__;
	public: FNMagicInfo();
	public: FNMagicInfo(struct FNMagicInfo const&);
	public: void Clear(INT);
	public: ~FNMagicInfo();
FNMonsterRaceInfo
	const TCHAR* const `public: FNMonsterRaceInfo(APawn*,INT,INT,INT*,FVector,FVector)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: INT SetSection(FLOAT)'::`3'::__FUNC_NAME__;
	public: APawn* GetActor();
	public: FLOAT GetSpeedRate(INT);
	public: FLOAT SetPawnSpeed(INT);
	public: FNMonsterRaceInfo(APawn*,INT,INT,INT*,FVector,FVector);
	public: FNMonsterRaceInfo(FNMonsterRaceInfo const&);
	public: INT SetPrePivot();
	public: INT SetSection(FLOAT);
	public: virtual ~FNMonsterRaceInfo();
	public: void SetSpeedRate(INT,FLOAT);
FNMonsterRaceMgr
	const TCHAR* const `public: FNMonsterRaceInfo* FindMonsterRaceInfo(APawn*)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: INT RemoveMonsterRaceInfo(APawn*)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: virtual ~FNMonsterRaceMgr()'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: void Clear()'::`3'::__FUNC_NAME__;
	public: FLOAT GetElapsedTime();
	public: FNMonsterRaceInfo* FindMonsterRaceInfo(APawn*);
	public: FNMonsterRaceMgr();
	public: FNMonsterRaceMgr(FNMonsterRaceMgr const&);
	public: INT CheckFinished();
	public: INT RemoveMonsterRaceInfo(APawn*);
	public: virtual ~FNMonsterRaceMgr();
	public: void AddMonsterRaceInfo(APawn*,INT,INT,INT*,FVector,FVector);
	public: void AdjustLocation(APawn*);
	public: void AdjustLocation(FNMonsterRaceInfo*);
	public: void CheckMonsterRaceTime(FLOAT,FLOAT,INT);
	public: void Clear();
	public: void PlayFinished();
	public: void SetCheck(INT);
	public: void SetElapsedTime(FLOAT);
	public: void Tick(FLOAT);
	public: void UpdateMonsterRaceInfo(FNMonsterRaceInfo*,INT,INT,INT*,FVector,FVector);
FNMover
	public: FLOAT CalAngle(FVector const&,FVector const&);
	public: FNMover();
	public: FNMover(struct FNMover const&);
	public: FVector CalNormalVector(FVector const&,FVector const&);
	public: FVector GetVelocity_NMT_RADIAL(FLOAT&);
	public: FVector GetVelocity_NMT_STRAIGHT(FLOAT&);
	public: FVector GetVelocity_NMT_USEPATH(FLOAT&);
	public: INT GetVelocity(FLOAT&,FVector&);
	public: void AdjustPosition();
	public: void CalOffsetPoOnLine(FVector*,FVector const&,FVector const&,FLOAT);
	public: void GetOffsetPoINT();
	public: void Init(ANProjectile*,INT);
	public: void OffsetNormalLine(FVector const&,FVector const&,FLOAT,FVector&,FVector&);
	public: void SetOrigin(FVector&);
	public: void SetTarget(FVector&);
	public: void SetType(INT);
	public: ~FNMover();
FNPawnLight
	public: FColor SampleLight(FVector,FVector);
	public: FLOAT GetIntensity(FLOAT);
	public: FLOAT SampleIntensity(FVector,FVector);
	public: FNPawnLight(AActor*);
	public: FNPawnLight(FNPawnLight const&);
	public: FVector GetDirection();
	public: FVector GetPosition();
	public: INT Update(FLOAT);
	public: virtual ~FNPawnLight();
	public: void Init(INT,FVector,FRotator,unsigned char,unsigned char,FPlane,FLOAT,FLOAT,unsigned char);
FNPawnResource
	const TCHAR* const `public: FNPawnResourceInfo* FindResourceInfo(APawn*,INT,INT)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: void RemoveResourceInfo(FNPawnResourceInfo*)'::`3'::__FUNC_NAME__;
	public: APawn* GetNearActor();
	public: FLOAT GetDist();
	public: FLOAT SetDist(AActor*);
	public: FNPawnResource(APawn*,FName,enum PawnResourceType,INT,INT);
	public: FNPawnResource(FNPawnResource const&);
	public: FNPawnResourceInfo* FindResourceInfo(APawn*,INT,INT);
	public: FName GetPawnResourceName();
	public: INT GetPawnResourceType();
	public: INT IsSameInfo(APawn*,INT,INT);
	public: virtual ~FNPawnResource();
	public: void RemoveResourceInfo(FNPawnResourceInfo*);
	public: void SetPawnResourceInfo(APawn*,INT,INT);
	public: void SetPawnResourceName(FName);
	public: void SetPawnResourceType(enum PawnResourceType);
FNPrimeActionParam
	public: FNPrimeActionParam();
	public: FNPrimeActionParam(struct FNPrimeActionParam const&);
	public: ~FNPrimeActionParam();
FNViewShake
	public: FNViewShake(AActor*);
	public: FNViewShake(FNViewShake const&);
	public: INT CheckShake(FLOAT&,FLOAT&,FLOAT&,FLOAT&,FLOAT);
	public: INT Update(FLOAT);
	public: virtual ~FNViewShake();
	public: void Init(unsigned char,FLOAT);
FNViewShakeMgr
	public: FNViewShakeMgr(ALineagePlayerController*);
	public: FNViewShakeMgr(FNViewShakeMgr const&);
	public: INT Update(FLOAT);
	public: virtual ~FNViewShakeMgr();
	public: void Init(FVector,INT,INT,INT);
FNWeaponEffect
	public: FNWeaponEffect(AActor*,FName,enum EWeaponEffectSlot,FVector,FLOAT,FLOAT,INT,INT,INT,INT,INT);
	public: FNWeaponEffect(FNWeaponEffect const&);
	public: INT CheckState(APawn*);
	public: virtual ~FNWeaponEffect();
	public: void Init();
FNetworkNotify
	public: FNetworkNotify();
	public: FNetworkNotify(FNetworkNotify const&);
FNpcPos
	public: FNpcPos();
FNpcPrivate
	public: FNpcPrivate();
FOctreeNode
	private: void StoreActor(AActor*,FCollisionOctree*,FPlane const*);
	public: FOctreeNode();
	public: FOctreeNode(FOctreeNode const&);
	public: void ActorEncroachmentCheck(FCollisionOctree*,FPlane const*);
	public: void ActorNonZeroExtentLineCheck(FCollisionOctree*,FPlane const*);
	public: void ActorOverlapCheck(FCollisionOctree*,FPlane const*);
	public: void ActorPoINTCheck(FCollisionOctree*,FPlane const*);
	public: void ActorRadiusCheck(FCollisionOctree*,FPlane const*);
	public: void ActorZeroExtentLineCheck(FCollisionOctree*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane const*);
	public: void CheckActorNotReferenced(AActor*);
	public: void CheckIsEmpty();
	public: void Draw(FColor,INT,FPlane const*);
	public: void DrawFlaggedActors(FCollisionOctree*,FPlane const*);
	public: void MultiNodeFilter(AActor*,FCollisionOctree*,FPlane const*);
	public: void RemoveAllActors(FCollisionOctree*);
	public: void SingleNodeFilter(AActor*,FCollisionOctree*,FPlane const*);
	public: ~FOctreeNode();
FOrientation
	public: FOrientation();
FOutBunch
	public: FOutBunch();
	public: FOutBunch(FOutBunch const&);
	public: FOutBunch(UChannel*,INT);
	public: virtual ~FOutBunch();
FParser
	private: INT IsSeperator(unsigned short);
	private: TCHAR* GetToken();
	public: FParser();
	public: TCHAR* GetNextToken();
	public: TCHAR* GetRemainStr();
	public: TCHAR* SetString(TCHAR*);
	public: void SetSperator(TCHAR*);
	public: ~FParser();
FPathBuilder
	private: ANavigationPoINT* newPath(FVector);
	private: INT TestReach(FVector,FVector);
	private: INT TestWalk(FVector,struct FCheckResult,FLOAT);
	private: INT ValidNode(ANavigationPoINT*,AActor*);
	private: INT createPaths();
	private: void FindBlockingNormal(FVector&);
	private: void Pass2From(FVector,FVector,FLOAT);
	private: void SetPathCollision(INT);
	private: void getScout();
	private: void testPathsFrom(FVector);
	private: void testPathwithRadius(FVector,FLOAT);
	public: INT buildPaths(ULevel*);
	public: INT removePaths(ULevel*);
	public: void ReviewPaths(ULevel*);
	public: void defineChangedPaths(ULevel*);
	public: void definePaths(ULevel*);
	public: void undefinePaths(ULevel*);
FPlayerResponseLine
	public: FPlayerResponseLine();
	public: FPlayerResponseLine(struct FPlayerResponseLine const&);
	public: ~FPlayerResponseLine();
FPlayerSceneNode
	public: FPlayerSceneNode(FPlayerSceneNode const&);
	public: FPlayerSceneNode(UViewport*,FRenderTarget*,AActor*,FVector,FRotator,FLOAT);
	public: virtual void Render(FRenderInterface*);
	public: virtual ~FPlayerSceneNode();
FPointLightMapSceneNode
	const TCHAR* const `public: FPoINTLightMapSceneNode(UViewport*,AActor*,FBspSurf&,FLightMap*,INT,INT,INT,INT)'::`3'::__FUNC_NAME__;
	public: FPoINTLightMapSceneNode(FPoINTLightMapSceneNode const&);
	public: FPoINTLightMapSceneNode(UViewport*,AActor*,FBspSurf&,FLightMap*,INT,INT,INT,INT);
	public: virtual FConvexVolume GetViewFrustum();
	public: virtual ~FPoINTLightMapSceneNode();
FPointRegion
	public: FPoINTRegion();
	public: FPoINTRegion(AZoneInfo*);
	public: FPoINTRegion(AZoneInfo*,INT,unsigned char);
FPoly
	public: FLOAT Area();
	public: FPoly();
	public: FVector GetTextureSize();
	public: INT CalcNormal(INT);
	public: INT DoesLineIntersect(FVector,FVector,FVector*);
	public: INT Faces(FPoly const&)const;
	public: INT Finalize(INT);
	public: INT Fix();
	public: INT IsBackfaced(FVector const&)const;
	public: INT IsCoplanar(FPoly const&)const;
	public: INT OnPlane(FVector);
	public: INT OnPoly(FVector);
	public: INT RemoveColinears();
	public: INT Split(FVector const&,FVector const&,INT);
	public: INT SplitWithNode(UModel const*,INT,FPoly*,FPoly*,INT)const;
	public: INT SplitWithPlane(FVector const&,FVector const&,FPoly*,FPoly*,INT)const;
	public: INT SplitWithPlaneFast(FPlane,FPoly*,FPoly*)const;
	public: void Init();
	public: void InsertVertex(INT,FVector);
	public: void Reverse();
	public: void SplitInHalf(FPoly*);
	public: void Transform(FModelCoords const&,FVector const&,FVector const&,FLOAT);
FRaw32BitIndexBuffer
	public: FRaw32BitIndexBuffer();
	public: FRaw32BitIndexBuffer(FRaw32BitIndexBuffer const&);
	public: virtual INT GetIndexSize();
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual void GetContents(void*);
	public: virtual ~FRaw32BitIndexBuffer();
FRawColorStream
	public: FRawColorStream();
	public: FRawColorStream(FRawColorStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FRawColorStream();
FRawIndexBuffer
	public: FRawIndexBuffer();
	public: FRawIndexBuffer(FRawIndexBuffer const&);
	public: virtual INT GetIndexSize();
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT Stripify();
	public: virtual void CacheOptimize();
	public: virtual void GetContents(void*);
	public: virtual ~FRawIndexBuffer();
FRebuildOptions
	public: FRebuildOptions();
	public: FRebuildOptions(FRebuildOptions const&);
	public: FString GetName();
	public: void Init();
	public: ~FRebuildOptions();
FRebuildTools
	public: FRebuildOptions* GetCurrent();
	public: FRebuildOptions* GetFromName(FString);
	public: FRebuildOptions* Save(FString);
	public: FRebuildTools();
	public: FRebuildTools(FRebuildTools const&);
	public: INT GetIdxFromName(FString);
	public: void Delete(FString);
	public: void Init();
	public: void SetCurrent(FString);
	public: void Shutdown();
	public: ~FRebuildTools();
FRenderInterface
	public: FRenderInterface();
	public: FRenderInterface(FRenderInterface const&);
	public: virtual FLOAT GetCurrentZBias();
	public: virtual FLOAT* GetVertexShaderConstants();
	public: virtual FLOAT* GetVertexShaderSkinningData();
	public: virtual INT GetRenderTarget(FRenderTarget*);
	public: virtual INT GetTextureSTateState(DWORD,INT,DWORD*);
	public: virtual INT IsCurrentRenderTarget(FRenderTarget*);
	public: virtual INT IsShadow();
	public: virtual INT PossibleShader(INT,INT);
	public: virtual INT SetL2ShaderDynamicStream(FVertexStream*);
	public: virtual enum EPixelShader GetPixelShaderType();
	public: virtual void ClearMaterialCode();
	public: virtual void DisableMaterialTime();
	public: virtual void DrawTextW(INT,INT,INT,INT,TCHAR*,DWORD,INT,DWORD);
	public: virtual void EnableMaterialTime();
	public: virtual void GetCharSize(unsigned short,struct tagSIZE*,INT);
	public: virtual void QueryIssue();
	public: virtual void RenderUnderWaterEffect(unsigned __INT64);
	public: virtual void SetClipPlane(DWORD,FPlane,DWORD);
	public: virtual void SetL2ShaderFunction(DWORD);
	public: virtual void SetL2ShaderFunctionEx(DWORD);
	public: virtual void SetL2ShaderMaterial(UMaterial*);
	public: virtual void SetL2ShaderPostProcessType(INT);
	public: virtual void SetL2ShaderVertexStreams(FVertexStream**,INT);
	public: virtual void SetMaterialTime(double);
	public: virtual void SetOverrideMaterial(UMaterial*);
	public: virtual void SetPixelShader(enum EPixelShader);
	public: virtual void SetPixelShaderConstant(DWORD,void const*,DWORD);
	public: virtual void SetPixelShaderConstant(enum EShaderConstantType,TCHAR*,void*,INT);
	public: virtual void SetPixelShaderConstantByName(TCHAR*,FLOAT const*,unsigned INT);
	public: virtual void SetRefractionPass(INT);
	public: virtual void SetRefractionTex(FRenderTarget*,FRenderTarget*);
	public: virtual void SetShaderLight(INT,FDynamicLight*,enum ELightColorType,FLOAT);
	public: virtual void SetTextureStageState(DWORD,INT,DWORD);
	public: virtual void SetVertexShaderConstantByName(TCHAR*,FLOAT const*,unsigned INT);
	public: virtual void StartCompileMaterial(UMaterial*);
	public: virtual void TextSpriteBegin(TCHAR*);
	public: virtual void TextSpriteEnd();
	public: virtual void TextSpriteSetProjTranform(FMatrix);
	public: virtual void TextSpriteSetTranform(FMatrix);
	public: virtual void TextSpriteSetWorldViewTranform(FMatrix,FMatrix);
	public: virtual void UnSetClipPlane();
	public: virtual void UnSetL2ShaderFunction(DWORD);
	public: virtual void UnSetL2ShaderFunctionEx(DWORD);
FRenderResource
	public: FRenderResource();
	public: FRenderResource(FRenderResource const&);
	public: virtual unsigned __INT64 GetCacheId();
	public: virtual ~FRenderResource();
FRibbonPoint
	public: FRibbonPoINT();
FRotatorF
	public: FRotator Rotator();
	public: FRotatorF();
	public: FRotatorF(FLOAT,FLOAT,FLOAT);
	public: FRotatorF(FRotator);
	public: FVector Vector();
FSceneNode
	public: FPlane Project(FVector);
	public: FSceneNode(FSceneNode const&);
	public: FSceneNode(FSceneNode*);
	public: FSceneNode(UViewport*,FRenderTarget*);
	public: FVector Deproject(FPlane);
	public: virtual FActorSceneNode* GetActorSceneNode();
	public: virtual FCameraSceneNode* GetCameraSceneNode();
	public: virtual FLevelSceneNode* GetLevelSceneNode();
	public: virtual FMirrorSceneNode* GetMirrorSceneNode();
	public: virtual FSceneNode* GetLodSceneNode();
	public: virtual FSkySceneNode* GetSkySceneNode();
	public: virtual FWarpZoneSceneNode* GetWarpZoneSceneNode();
	public: virtual FWaterSheetSceneNode* GetWaterSheetSceneNode();
	public: virtual ~FSceneNode();
FScriptedPortalSceneNode
	public: FScriptedPortalSceneNode(FScriptedPortalSceneNode const&);
	public: FScriptedPortalSceneNode(UViewport*,FRenderTarget*,AActor*,FVector,FRotator,FLOAT);
	public: virtual FSceneNode* GetLodSceneNode();
	public: virtual ~FScriptedPortalSceneNode();
FServerResponseLine
	public: FServerResponseLine();
	public: FServerResponseLine(struct FServerResponseLine const&);
	public: ~FServerResponseLine();
FServerStaticObject
	public: FServerStaticObject();
FShadowSceneNode
	public: FShadowSceneNode(FShadowSceneNode const&);
	public: FShadowSceneNode(UViewport*,FRenderTarget*,AActor*,AActor*,FVector,FRotator,FLOAT);
	public: virtual FSceneNode* GetLodSceneNode();
	public: virtual INT FilterAttachment(AActor*);
	public: virtual ~FShadowSceneNode();
FSkinVertexStream
	public: FSkinVertexStream();
	public: FSkinVertexStream(FSkinVertexStream const&);
	public: virtual FVertexPool* GetStaticVertexPool();
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual INT SetOwner(FVertexStream*);
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual void SetStaticVertexPool(FVertexPool*);
	public: virtual ~FSkinVertexStream();
	public: void Copy(FSkinVertexStream*);
FSkySceneNode
	public: FSkySceneNode(FLevelSceneNode*,INT);
	public: FSkySceneNode(FSkySceneNode const&);
	public: virtual FSkySceneNode* GetSkySceneNode();
	public: virtual void Render(FRenderInterface*);
	public: virtual ~FSkySceneNode();
FSolidColorTexture
	public: FSolidColorTexture(FColor);
	public: FSolidColorTexture(FSolidColorTexture const&);
	public: virtual INT GetFirstMip();
	public: virtual INT GetHeight();
	public: virtual INT GetNumMips();
	public: virtual INT GetRevision();
	public: virtual INT GetWidth();
	public: virtual UTexture* GetUTexture();
	public: virtual enum ETexClampMode GetUClamp();
	public: virtual enum ETexClampMode GetVClamp();
	public: virtual enum ETextureFormat GetFormat();
	public: virtual void GetTextureData(INT,void*,INT,enum ETextureFormat,INT);
	public: virtual void UnloadRawTextureData(INT);
	public: virtual void* GetRawTextureData(INT);
	public: virtual ~FSolidColorTexture();
FSoundData
	public: FLOAT GetPeriod();
	public: FSoundData(FSoundData const&);
	public: FSoundData(USound*);
	public: virtual void Load();
	public: ~FSoundData();
FStatGraph
	public: FStatGraph();
	public: FStatGraph(FStatGraph const&);
	public: INT Exec(const TCHAR*,FOutputDevice&);
	public: void AddDataPoINT(FString,FLOAT,INT);
	public: void AddLine(FString,FColor,FLOAT,FLOAT);
	public: void AddLineAutoRange(FString,FColor);
	public: void Render(UViewport*,FRenderInterface*);
	public: void Reset();
	public: ~FStatGraph();
FStatGraphLine
	public: FStatGraphLine();
	public: FStatGraphLine(FStatGraphLine const&);
	public: ~FStatGraphLine();
FStaticCubemap
	public: FStaticCubemap(FStaticCubemap const&);
	public: FStaticCubemap(UCubemap*);
	public: virtual FTexture* GetFace(INT);
	public: virtual INT GetFirstMip();
	public: virtual INT GetHeight();
	public: virtual INT GetNumMips();
	public: virtual INT GetRevision();
	public: virtual INT GetWidth();
	public: virtual enum ETexClampMode GetUClamp();
	public: virtual enum ETexClampMode GetVClamp();
	public: virtual enum ETextureFormat GetFormat();
	public: virtual ~FStaticCubemap();
FStaticLODModelTriangle
	public: FStaticLODModelTriangle();
FStaticLightMapTexture
	public: FStaticLightMapTexture();
	public: FStaticLightMapTexture(FStaticLightMapTexture const&);
	public: virtual INT GetFirstMip();
	public: virtual INT GetHeight();
	public: virtual INT GetNumMips();
	public: virtual INT GetRevision();
	public: virtual INT GetWidth();
	public: virtual UTexture* GetUTexture();
	public: virtual enum ETexClampMode GetUClamp();
	public: virtual enum ETexClampMode GetVClamp();
	public: virtual enum ETextureFormat GetFormat();
	public: virtual void GetTextureData(INT,void*,INT,enum ETextureFormat,INT);
	public: virtual void UnloadRawTextureData(INT);
	public: virtual void* GetRawTextureData(INT);
	public: virtual ~FStaticLightMapTexture();
FStaticMeshBatch
	public: FStaticMeshBatch(FStaticMeshBatch const&);
	public: FStaticMeshBatch(UMaterial*,INT,INT);
	public: INT AddElement(AActor*,INT);
	public: ~FStaticMeshBatch();
FStaticMeshBatchIndexBuffer
	public: FStaticMeshBatchIndexBuffer();
	public: FStaticMeshBatchIndexBuffer(FStaticMeshBatchIndexBuffer const&);
	public: virtual INT GetIndexSize();
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual void GetContents(void*);
	public: virtual ~FStaticMeshBatchIndexBuffer();
FStaticMeshBatchNormalVertex
	public: FStaticMeshBatchNormalVertex();
FStaticMeshBatchVertex
	public: FStaticMeshBatchVertex();
FStaticMeshBatchVertexStream
	public: FStaticMeshBatchVertexStream(FStaticMeshBatchVertexStream const&);
	public: FStaticMeshBatchVertexStream(UMaterial*);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FStaticMeshBatchVertexStream();
FStaticMeshCollisionNode
	public: FStaticMeshCollisionNode();
FStaticMeshCollisionTriangle
	public: FStaticMeshCollisionTriangle();
	public: FStaticMeshCollisionTriangle(struct FStaticMeshCollisionTriangle const&);
FStaticMeshColorStream
	public: FStaticMeshColorStream();
	public: FStaticMeshColorStream(FStaticMeshColorStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual ~FStaticMeshColorStream();
FStaticMeshLightVisibilityStream
	public: FStaticMeshLightVisibilityStream();
	public: FStaticMeshLightVisibilityStream(FStaticMeshLightVisibilityStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FStaticMeshLightVisibilityStream();
FStaticMeshMaterial
	public: FStaticMeshMaterial(UMaterial*);
FStaticMeshSection
	public: FStaticMeshSection();
FStaticMeshTriangle
	public: FStaticMeshTriangle();
FStaticMeshUVStream
	public: FStaticMeshUVStream();
	public: FStaticMeshUVStream(FStaticMeshUVStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FStaticMeshUVStream();
FStaticMeshVertex
	public: FStaticMeshVertex();
FStaticMeshVertexStream
	public: FStaticMeshVertexStream();
	public: FStaticMeshVertexStream(FStaticMeshVertexStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FStaticMeshVertexStream();
FStaticProjectorInfo
	public: FStaticProjectorInfo();
	public: FStaticProjectorInfo(struct FStaticProjectorInfo const&);
	public: ~FStaticProjectorInfo();
FStaticProjectorVertex
	public: FStaticProjectorVertex();
FStaticTexture
	public: FStaticTexture(FStaticTexture const&);
	public: FStaticTexture(UTexture*);
	public: virtual INT GetFirstMip();
	public: virtual INT GetHeight();
	public: virtual INT GetNumMips();
	public: virtual INT GetRevision();
	public: virtual INT GetWidth();
	public: virtual UTexture* GetUTexture();
	public: virtual enum ETexClampMode GetUClamp();
	public: virtual enum ETexClampMode GetVClamp();
	public: virtual enum ETextureFormat GetFormat();
	public: virtual void GetTextureData(INT,void*,INT,enum ETextureFormat,INT);
	public: virtual void UnloadRawTextureData(INT);
	public: virtual void* GetRawTextureData(INT);
	public: virtual ~FStaticTexture();
FStats
	public: FStats();
	public: FStats(FStats const&);
	public: INT RegisterStats(enum EStatsType,enum EStatsDataType,FString,FString,enum EStatsUnit);
	public: void CalcMovingAverage(INT,DWORD);
	public: void Clear();
	public: void Release();
	public: void Render(UViewport*,UEngine*);
	public: void UpdateString(FString&,INT);
	public: ~FStats();
FTangent
	public: FTangent();
	public: FTangent(FVector);
FTangentStream
	public: FTangentStream();
	public: FTangentStream(FTangentStream const&);
	public: virtual INT GetComponents(struct FVertexComponent*);
	public: virtual INT GetRevision();
	public: virtual INT GetSize();
	public: virtual INT GetStride();
	public: virtual void GetRawStreamData(void**,INT);
	public: virtual void GetStreamData(void*);
	public: virtual ~FTangentStream();
FTempLineBatcher
	public: FTempLineBatcher();
	public: FTempLineBatcher(FTempLineBatcher const&);
	public: void AddBox(FBox,FColor);
	public: void AddLine(FVector,FVector,FColor);
	public: void Render(FRenderInterface*,INT);
	public: ~FTempLineBatcher();
FTerrainMaterialLayer
	public: FTerrainMaterialLayer();
	public: ~FTerrainMaterialLayer();
FTerrainTools
	public: ATerrainInfo* GetCurrentTerrainInfo();
	public: FString GetExecFromBrushName(FString&);
	public: FTerrainTools();
	public: FTerrainTools(FTerrainTools const&);
	public: INT GetAdjust();
	public: INT GetInnerRadius();
	public: INT GetMirrorAxis();
	public: INT GetOuterRadius();
	public: INT GetStrength();
	public: INT L2GetHeightmap(INT,INT,FLOAT&);
	public: virtual ~FTerrainTools();
	public: void AdjustAlignedActors();
	public: void FindActorsToAlign();
	public: void Init();
	public: void SetAdjust(INT);
	public: void SetCurrentBrush(INT);
	public: void SetCurrentTerrainInfo(ATerrainInfo*);
	public: void SetInnerRadius(INT);
	public: void SetMirrorAxis(INT);
	public: void SetOuterRadius(INT);
	public: void SetStrength(INT);
FTextureModifyinfo
	public: FTextureModifyinfo();
	public: void Clear();
FURL
	public: FString String(INT)const;
	public: FURL(FURL const&);
	public: FURL(FURL*,const TCHAR*,enum ETravelType);
	public: FURL(const TCHAR*);
	public: INT HasOption(const TCHAR*)const;
	public: INT IsInternal()const;
	public: INT IsLocalInternal()const;
	public: INT IsMapName(const TCHAR*)const;
	public: const TCHAR* GetOption(const TCHAR*,const TCHAR*)const;
	public: static void __cdecl StaticExit();
	public: static void __cdecl StaticInit();
	public: void AddOption(const TCHAR*);
	public: void LoadURLConfig(const TCHAR*,const TCHAR*);
	public: void SaveURLConfig(const TCHAR*,const TCHAR*,const TCHAR*)const;
	public: ~FURL();
FViewportWindowParam
	public: FViewportWindowParam();
	public: FViewportWindowParam(INT,INT,AActor*,FVector,FRotator,FLOAT);
	public: ~FViewportWindowParam();
FWarpZoneSceneNode
	public: FWarpZoneSceneNode(FLevelSceneNode*,AWarpZoneInfo*);
	public: FWarpZoneSceneNode(FWarpZoneSceneNode const&);
	public: virtual FWarpZoneSceneNode* GetWarpZoneSceneNode();
	public: virtual ~FWarpZoneSceneNode();
FWaterSheetSceneNode
	public: FWaterSheetSceneNode(FLevelSceneNode*,FPlane,INT,INT,INT);
	public: FWaterSheetSceneNode(FWaterSheetSceneNode const&);
	public: virtual FWaterSheetSceneNode* GetWaterSheetSceneNode();
	public: virtual INT FilterActor(AActor*);
	public: virtual INT FilterAttachment(AActor*);
	public: virtual INT FilterProjector(AProjector*);
	public: virtual void Render(FRenderInterface*);
	public: virtual ~FWaterSheetSceneNode();
	public: void AddNodeList(INT);
FWaveModInfo
	public: DWORD Pad16Bit(DWORD);
	public: FWaveModInfo();
	public: void HalveData();
	public: void HalveReduce16to8();
	public: void NoiseGateFilter();
	public: void Reduce16to8();
FWayPoint
	public: FWayPoINT();
	public: FWayPoINT(struct FWayPoINT const&);
	public: ~FWayPoINT();
FWhenExtinctionCreate
	public: FWhenExtinctionCreate();
	public: FWhenExtinctionCreate(struct FWhenExtinctionCreate const&);
	public: ~FWhenExtinctionCreate();
FWorldBuilder
	private: void getScout();
	public: FWorldBuilder();
	public: INT buildWorldStructure(ULevel*,TCHAR*,UViewport*,INT,INT);
	public: INT testWorldStructure(ULevel*,TCHAR*,UViewport*,INT,INT);
	public: void ComboPostProcessing(UViewport*);
FZoneRenderInfo
	public: FZoneRenderInfo();
	public: FZoneRenderInfo(struct FZoneRenderInfo const&);
	public: ~FZoneRenderInfo();
HActor
	public: HActor(AActor*);
	public: HActor(struct HActor const&);
	public: virtual AActor* GetActor();
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
HBspSurf
	public: HBspSurf(INT);
	public: HBspSurf(struct HBspSurf const&);
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
HCoords
	public: HCoords(FCameraSceneNode*);
	public: HCoords(struct HCoords const&);
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
HHitProxy
	public: HHitProxy();
	public: HHitProxy(struct HHitProxy const&);
	public: virtual AActor* GetActor();
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
	public: virtual void Click(struct FHitCause const&);
HLevelObject
	public: HLevelObject(ULevelObject*);
	public: HLevelObject(struct HLevelObject const&);
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual ULevelObject* GetLevelObject();
	public: virtual const TCHAR* GetName()const;
HMaterialTree
	public: HMaterialTree(UMaterial*,DWORD);
	public: HMaterialTree(struct HMaterialTree const&);
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
HMatineeAction
	public: HMatineeAction(ASceneManager*,UMatAction*);
	public: HMatineeAction(struct HMatineeAction const&);
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
HMatineeScene
	public: HMatineeScene(ASceneManager*);
	public: HMatineeScene(struct HMatineeScene const&);
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
HMatineeSubAction
	public: HMatineeSubAction(UMatSubAction*,UMatAction*);
	public: HMatineeSubAction(struct HMatineeSubAction const&);
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
HMatineeTimePath
	public: HMatineeTimePath(ASceneManager*);
	public: HMatineeTimePath(struct HMatineeTimePath const&);
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
HTerrain
	public: HTerrain(ATerrainInfo*);
	public: HTerrain(struct HTerrain const&);
	public: virtual AActor* GetActor();
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
HTerrainToolLayer
	public: HTerrainToolLayer(ATerrainInfo*,INT,UTexture*);
	public: HTerrainToolLayer(struct HTerrainToolLayer const&);
	public: virtual INT IsA(const TCHAR*)const;
	public: virtual const TCHAR* GetName()const;
L2AbnormalZone
	public: FAbnormalZone* GetCurrentZone(FVector const&);
	public: L2AbnormalZone(L2AbnormalZone const&);
	public: L2AbnormalZone(UGameEngine*);
	public: virtual ~L2AbnormalZone();
	public: void Init();
L2FName
	public: L2FName();
	public: L2FName(const TCHAR*,enum EFindName);
	public: L2FName(enum EName);
NCBoneSimul
	public: FVector GetPlaneAndVectorIntersection(FVector const&,struct NCFCollisionPlane const&);
	public: INT CheckBalsan();
	public: INT CheckForCollisions(APawn*);
	public: INT CheckForCollisions1(APawn*);
	public: INT CheckForCollisions2(APawn*);
	public: INT CheckForCollisions3(APawn*);
	public: INT CheckForCollisions4(APawn*);
	public: INT CheckForCollisions6(APawn*);
	public: INT CheckForCollisions7(APawn*);
	public: INT CheckForCollisions8(APawn*);
	public: INT CheckForCollisions9(APawn*);
	public: INT GetPropertyFile(INT);
	public: INT GetPropertyFileInfo(APawn*,USubSkeletalMeshInstance*);
	public: INT SetUserForce(APawn*,USubSkeletalMeshInstance*,FRenderInterface*);
	public: INT SetUserForce1(APawn*,USkeletalMesh&,FCoords&,FVector&,USubSkeletalMeshInstance*,FSceneNode*,struct FMeshAnimSeq*,FRenderInterface*);
	public: INT SetUserForce2(APawn*,USubSkeletalMeshInstance*,FRenderInterface*);
	public: INT SetUserForce3(APawn*,USkeletalMesh&,FCoords&,FVector&,USubSkeletalMeshInstance*,FSceneNode*,struct FMeshAnimSeq*,FRenderInterface*);
	public: INT SetUserForce4(APawn*,USkeletalMesh&,FCoords&,FVector&,USubSkeletalMeshInstance*,FSceneNode*,struct FMeshAnimSeq*,FRenderInterface*);
	public: INT SetUserForce6(APawn*,USubSkeletalMeshInstance*,FRenderInterface*);
	public: INT SetUserForce7(APawn*,USubSkeletalMeshInstance*,FRenderInterface*);
	public: INT SetUserForce8(APawn*,USubSkeletalMeshInstance*,FRenderInterface*);
	public: INT SetUserForce9(APawn*,USubSkeletalMeshInstance*,FRenderInterface*);
	public: NCBoneSimul();
	public: NCBoneSimul(NCBoneSimul const&);
	public: double DotProduct(FVector*,FVector*);
	public: double VectorLength(FVector*);
	public: double VectorSquaredDistance(FVector*,FVector*);
	public: double VectorSquaredLength(FVector*);
	public: virtual ~NCBoneSimul();
	public: void AddSpring(INT,INT,FLOAT,FLOAT,INT);
	public: void CalcForces(struct NCFParticle*,APawn*);
	public: void CrossProduct(FVector*,FVector*,FVector*);
	public: void EulerIntegrate(FLOAT);
	public: void Free();
	public: void Init(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void Init1(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void Init2(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void Init3(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void Init4(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void Init5(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void Init6(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void Init7(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void Init8(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void Init9(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void NormalizeVector(FVector*);
	public: void Reset(APawn*);
	public: void Reset1(APawn*);
	public: void Reset2(APawn*);
	public: void Reset3(APawn*);
	public: void Reset4(APawn*);
	public: void Reset6(APawn*);
	public: void Reset7(APawn*);
	public: void Reset8(APawn*);
	public: void Reset9(APawn*);
	public: void ResolveCollisions();
	public: void ScaleVector(FVector*,FLOAT,FVector*);
	public: void SetCacheFCoords(USubSkeletalMeshInstance*);
	public: void SetOutFCoords(USubSkeletalMeshInstance*);
	public: void SetOutFCoords1(USubSkeletalMeshInstance*);
	public: void SetOutFCoords2(USubSkeletalMeshInstance*);
	public: void SetOutFCoords3(USubSkeletalMeshInstance*);
	public: void SetOutFCoords4(USubSkeletalMeshInstance*);
	public: void SetOutFCoords6(USubSkeletalMeshInstance*);
	public: void SetOutFCoords7(USubSkeletalMeshInstance*);
	public: void SetOutFCoords8(USubSkeletalMeshInstance*);
	public: void SetOutFCoords9(USubSkeletalMeshInstance*);
	public: void Simulate(APawn*,FLOAT);
	public: void VectorDifference(FVector*,FVector*,FVector*);
	public: void VectorSum(FVector*,FVector*,FVector*);
NCCloakSimul
	public: FVector GetPlaneAndVectorIntersection(FVector const&,struct NCFCollisionPlane const&);
	public: INT CheckBalsan();
	public: INT CheckForCollisions(APawn*);
	public: INT GetPropertyFileInfo(APawn*,USubSkeletalMeshInstance*);
	public: INT SetUserForce(APawn*,USubSkeletalMeshInstance*,FRenderInterface*);
	public: NCCloakSimul();
	public: NCCloakSimul(NCCloakSimul const&);
	public: double DotProduct(FVector*,FVector*);
	public: double VectorLength(FVector*);
	public: double VectorSquaredDistance(FVector*,FVector*);
	public: double VectorSquaredLength(FVector*);
	public: virtual ~NCCloakSimul();
	public: void AddSpring(INT,INT,FLOAT,FLOAT,INT);
	public: void CalcForces(struct NCFParticle*,APawn*);
	public: void CrossProduct(FVector*,FVector*,FVector*);
	public: void EulerIntegrate(FLOAT);
	public: void Free();
	public: void Init(USkeletalMesh*,APawn*,FCoords&,USubSkeletalMeshInstance*);
	public: void NormalizeVector(FVector*);
	public: void Reset(APawn*);
	public: void ResolveCollisions();
	public: void ScaleVector(FVector*,FLOAT,FVector*);
	public: void SetCacheFCoords(USubSkeletalMeshInstance*);
	public: void SetOutFCoords(USubSkeletalMeshInstance*);
	public: void Simulate(APawn*,FLOAT);
	public: void VectorDifference(FVector*,FVector*,FVector*);
	public: void VectorSum(FVector*,FVector*,FVector*);
NCClothSimul
	private: FVector GetPlaneAndVectorIntersection(FVector const&,FVector const&,struct NCFCollisionPlane const&);
	private: FVector GetPlaneAndVectorIntersection(FVector const&,struct NCFCollisionPlane const&);
	private: INT CalPoINTSide(FVector const&,FVector const&,FVector const&);
	private: INT CheckBalsan();
	private: INT CheckForCollisions();
	private: INT GetPropertyFile(INT);
	private: INT GetPropertyFileInfo(APawn*);
	private: INT Int2ee(FVector const&,FVector const&,FVector const&,FVector const&);
	private: double DotProduct(FVector*,FVector*);
	private: double VectorLength(FVector*);
	private: double VectorSquaredDistance(FVector*,FVector*);
	private: double VectorSquaredLength(FVector*);
	private: void AddSpring(INT,INT,FLOAT,FLOAT,INT);
	private: void CalOffsetPoOnVector(FVector const&,FVector*,FVector*,double);
	private: void CalcForces(struct NCFParticle*,APawn*);
	private: void CrossProduct(FVector*,FVector*,FVector*);
	private: void EulerIntegrate(FLOAT);
	private: void GetSkeletalMeshUVIndex(USkeletalMesh*);
	private: void NormalizeVector(FVector*);
	private: void Reset(USkeletalMesh*,FCoords&);
	private: void ResolveCollisions();
	private: void RungeKutta4Integrate(FLOAT);
	private: void ScaleVector(FVector*,FLOAT,FVector*);
	private: void VectorDifference(FVector*,FVector*,FVector*);
	private: void VectorSum(FVector*,FVector*,FVector*);
	public: NCClothSimul();
	public: NCClothSimul(NCClothSimul const&);
	public: virtual ~NCClothSimul();
	public: void Free();
	public: void Init(USkeletalMesh*,FDynamicActor*,USkeletalMeshInstance*,FCoords&,APawn*);
	public: void SetOutVertex(USkeletalMesh&,FCoords&);
	public: void SetUserForce(USkeletalMesh&,FCoords&,FVector&,USkeletalMeshInstance*,FRenderInterface*,FCoords&,struct FMeshAnimSeq*);
	public: void SetUserForceIndex(USkeletalMesh&,FCoords&,USkeletalMeshInstance*);
	public: void Simulate(USkeletalMesh*,FCoords&,FLOAT,AActor*);
NCSpringSimul
	public: INT CalcPosition();
	public: INT Init(APawn*,INT);
	public: NCSpringSimul();
	public: NCSpringSimul(NCSpringSimul const&);
	public: ~NCSpringSimul();
UActionMoveCamera
	protected: UActionMoveCamera();
	public: UActionMoveCamera(UActionMoveCamera const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UActionMoveCamera();
UActionPause
	protected: UActionPause();
	public: UActionPause(UActionPause const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UActionPause();
UActionWarp
	protected: UActionWarp();
	public: UActionWarp(UActionWarp const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UActionWarp();
UActorChannel
	const TCHAR* const `public: void StaticConstructor()'::`3'::__FUNC_NAME__;
	public: AActor* GetActor();
	public: UActorChannel();
	public: UActorChannel(UActorChannel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString Describe();
	public: virtual void Close();
	public: virtual void Destroy();
	public: virtual void Init(UNetConnection*,INT,INT);
	public: virtual void ReceivedBunch(FInBunch&);
	public: virtual void ReceivedNak(INT);
	public: virtual void SetClosingFlag();
	public: virtual void Tick();
	public: virtual ~UActorChannel();
	public: void ReplicateActor();
	public: void SetChannelActor(AActor*);
	public: void StaticConstructor();
UAmbientSoundObject
	public: UAmbientSoundObject();
	public: UAmbientSoundObject(UAmbientSoundObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetAmbientVolume(FLOAT);
	public: virtual INT IsAAmbientSoundObject();
	public: virtual void Destroy();
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*);
	public: virtual ~UAmbientSoundObject();
UAnimNotify
	public: UAnimNotify();
	public: UAnimNotify(UAnimNotify const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString ExportToScript();
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual void PostEditChange();
	public: virtual ~UAnimNotify();
UAnimNotify_AttackItem
	public: UAnimNotify_AttackItem();
	public: UAnimNotify_AttackItem(UAnimNotify_AttackItem const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_AttackItem();
UAnimNotify_AttackPreShot
	public: UAnimNotify_AttackPreShot();
	public: UAnimNotify_AttackPreShot(UAnimNotify_AttackPreShot const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_AttackPreShot();
UAnimNotify_AttackShot
	public: UAnimNotify_AttackShot();
	public: UAnimNotify_AttackShot(UAnimNotify_AttackShot const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_AttackShot();
UAnimNotify_AttackVoice
	public: UAnimNotify_AttackVoice();
	public: UAnimNotify_AttackVoice(UAnimNotify_AttackVoice const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_AttackVoice();
UAnimNotify_BoneScale
	public: UAnimNotify_BoneScale();
	public: UAnimNotify_BoneScale(UAnimNotify_BoneScale const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_BoneScale();
UAnimNotify_Channeling
	public: UAnimNotify_Channeling();
	public: UAnimNotify_Channeling(UAnimNotify_Channeling const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_Channeling();
UAnimNotify_DestroyEffect
	public: UAnimNotify_DestroyEffect();
	public: UAnimNotify_DestroyEffect(UAnimNotify_DestroyEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_DestroyEffect();
UAnimNotify_Effect
	public: UAnimNotify_Effect();
	public: UAnimNotify_Effect(UAnimNotify_Effect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* GetLastSpawnedEffect();
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual void SetLastSpawnedEffect(AActor*);
	public: virtual ~UAnimNotify_Effect();
UAnimNotify_IdleSound
	public: UAnimNotify_IdleSound();
	public: UAnimNotify_IdleSound(UAnimNotify_IdleSound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual USound* GetSound(INT);
	public: virtual USound* LoadSound(TCHAR*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_IdleSound();
UAnimNotify_MatSubAction
	public: UAnimNotify_MatSubAction();
	public: UAnimNotify_MatSubAction(UAnimNotify_MatSubAction const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_MatSubAction();
UAnimNotify_ScreenFade
	public: UAnimNotify_ScreenFade();
	public: UAnimNotify_ScreenFade(UAnimNotify_ScreenFade const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_ScreenFade();
UAnimNotify_Script
	public: UAnimNotify_Script();
	public: UAnimNotify_Script(UAnimNotify_Script const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_Script();
UAnimNotify_Scripted
	public: UAnimNotify_Scripted();
	public: UAnimNotify_Scripted(UAnimNotify_Scripted const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_Scripted();
	public: void eventNotify(AActor*);
UAnimNotify_Sound
	public: UAnimNotify_Sound();
	public: UAnimNotify_Sound(UAnimNotify_Sound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual USound* GetSound(enum PMoveType,enum L2PawnSoundType);
	public: virtual USound* LoadSound(TCHAR*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual void PostLoad();
	public: virtual ~UAnimNotify_Sound();
UAnimNotify_SwimSound
	public: UAnimNotify_SwimSound();
	public: UAnimNotify_SwimSound(UAnimNotify_SwimSound const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_SwimSound();
UAnimNotify_ViewShake
	public: UAnimNotify_ViewShake();
	public: UAnimNotify_ViewShake(UAnimNotify_ViewShake const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Notify(UMeshInstance*,AActor*);
	public: virtual ~UAnimNotify_ViewShake();
UAnimation
	public: UAnimation();
	public: UAnimation(UAnimation const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UAnimation();
UAudioSubsystem
	protected: UAudioSubsystem();
	public: UAudioSubsystem(UAudioSubsystem const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual void CleanUp();
	public: virtual ~UAudioSubsystem();
UBaseGUIController
	protected: UBaseGUIController();
	public: DWORD eventCloseMenu(DWORD);
	public: DWORD eventNeedsMenuResolution();
	public: DWORD eventOpenMenu(FString const&,FString const&,FString const&);
	public: DWORD eventReplaceMenu(FString const&,FString const&,FString const&);
	public: UBaseGUIController(UBaseGUIController const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UBaseGUIController();
	public: void delegateOnAdminReply(FString const&);
	public: void eventCloseAll(DWORD);
	public: void eventInitializeController();
	public: void eventSetRequiredGameResolution(FString const&);
UBeamEmitter
	public: UBeamEmitter();
	public: UBeamEmitter(UBeamEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual void Scale(FLOAT);
	public: virtual void UpdateActorHitList();
	public: virtual ~UBeamEmitter();
UBitmapMaterial
	public: UBitmapMaterial();
	public: UBitmapMaterial(UBitmapMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual ~UBitmapMaterial();
UBlackWhite
	public: UBlackWhite();
	public: UBlackWhite(UBlackWhite const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostRender(UViewport*,FRenderInterface*);
	public: virtual void PreRender(UViewport*,FRenderInterface*);
	public: virtual ~UBlackWhite();
UBumpShader
	public: INT MakeBumpRawData(unsigned char*,INT,INT,unsigned char);
	public: UBumpShader();
	public: UBumpShader(UBumpShader const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual void Destroy();
	public: virtual void Modify();
	public: virtual void PostLoad();
	public: virtual ~UBumpShader();
	public: void RefreshBumpRawData();
UCameraEffect
	public: UCameraEffect();
	public: UCameraEffect(UCameraEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual void PostRender(UViewport*,FRenderInterface*);
	public: virtual void PreRender(UViewport*,FRenderInterface*);
	public: virtual ~UCameraEffect();
UCameraOverlay
	public: UCameraOverlay();
	public: UCameraOverlay(UCameraOverlay const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostRender(UViewport*,FRenderInterface*);
	public: virtual ~UCameraOverlay();
UCanvas
	private: void WrappedPrINT(enum ERenderStyle,INT&,INT&,UFont*,FLOAT,FLOAT,INT,const TCHAR*);
	protected: UCanvas();
	public: DWORD GetThaiCharType(unsigned short);
	public: INT SetViewportWindowParam(INT,INT,INT,AActor*,FVector,FRotator,FLOAT);
	public: UCanvas(UCanvas const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual DWORD DrawHtmlText(INT,INT,DWORD,const TCHAR*,DWORD,DWORD,DWORD,FLOAT,INT,enum L2FontType,INT,INT,DWORD,INT);
	public: virtual DWORD DrawSpecialDigit(INT,INT,INT,INT,DWORD,const TCHAR*,UTexture*,unsigned char);
	public: virtual DWORD DrawTrueFontSingleLineText(INT,INT,DWORD,const TCHAR*,FLOAT,enum L2FontType);
	public: virtual DWORD DrawTrueFontText(INT,INT,DWORD,const TCHAR*,DWORD,DWORD,DWORD,FLOAT,INT,enum L2FontType,INT,INT,DWORD);
	public: virtual DWORD GetTextExtent(const TCHAR*,struct tagSIZE*,DWORD,DWORD,INT,enum L2FontType,INT,DWORD);
	public: virtual DWORD GetTextSize(const TCHAR*,struct tagSIZE*,DWORD,DWORD,INT,enum L2FontType,INT,DWORD);
	public: virtual DWORD GetTrueFontTextSize(const TCHAR*,struct tagSIZE*,DWORD,DWORD,INT,enum L2FontType,INT,DWORD);
	public: virtual UMaterial* GetViewportSceneTexture(INT);
	public: virtual void ClippedPrINT(UFont*,FLOAT,FLOAT,INT,const TCHAR*);
	public: virtual void ClippedStrLen(UFont*,FLOAT,FLOAT,INT&,INT&,const TCHAR*);
	public: virtual void Destroy();
	public: virtual void DestroyFont(INT);
	public: virtual void Draw3DCoordText(FLevelSceneNode*,FRenderInterface*,FVector,DWORD,TCHAR*,UTexture*,INT,INT,enum L2FontType,INT);
	public: virtual void Draw3DCoordText(FVector,DWORD,TCHAR*,UTexture*,INT,INT,enum L2FontType,INT);
	public: virtual void DrawActor(INT,INT,AActor*,FLOAT);
	public: virtual void DrawBrightenTexture(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,DWORD);
	public: virtual void DrawBrightenTile(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane,FPlane);
	public: virtual void DrawCameraSceneNode();
	public: virtual void DrawCameraSceneNode(INT,INT,INT,INT,INT);
	public: virtual void DrawChatting(FVector,DWORD,TCHAR*,INT,INT,enum L2FontType,INT,INT,DWORD);
	public: virtual void DrawDepthBar(FLevelSceneNode*,FRenderInterface*,FVector,DWORD,DWORD,INT,FLOAT,bool);
	public: virtual void DrawIcon(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane,FPlane);
	public: virtual void DrawLine(INT,INT,INT,INT,DWORD,INT);
	public: virtual void DrawPattern(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane,FPlane);
	public: virtual void DrawRecordMark();
	public: virtual void DrawRect(INT,INT,INT,INT,UTexture*,DWORD);
	public: virtual void DrawStretchedTex(INT,INT,INT,INT,INT,INT,INT,INT,UTexture*,unsigned char);
	public: virtual void DrawStretchedTex(INT,INT,INT,INT,UTexture*,bool,unsigned char);
	public: virtual void DrawTargetName(FLevelSceneNode*,FRenderInterface*,FVector,DWORD,struct User*,enum TargetRenderType,enum L2FontType,DWORD);
	public: virtual void DrawTargetOptionName(FLevelSceneNode*,FRenderInterface*,FVector,DWORD,struct User*,enum TargetRenderType,enum L2FontType);
	public: virtual void DrawTargetTex(FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*);
	public: virtual void DrawTexture(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*,unsigned char,bool);
	public: virtual void DrawTile(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FPlane,FPlane);
	public: virtual void DrawTileBound(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT);
	public: virtual void DrawTileJustified(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT,unsigned char);
	public: virtual void DrawTileScaleBound(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT);
	public: virtual void DrawTileScaled(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT);
	public: virtual void DrawTileStretched(UMaterial*,FLOAT,FLOAT,FLOAT,FLOAT);
	public: virtual void FinishBroadcastObserverMode();
	public: virtual void Init(UViewport*);
	public: virtual void LoadFont(INT,TCHAR*,TCHAR*);
	public: virtual void ReleaseClip();
	public: virtual void SetClip(INT,INT,INT,INT);
	public: virtual void SetFontScale(FLOAT);
	public: virtual void StartBroadcastObserverMode();
	public: virtual void ToggleBroadcastObserverTargetName();
	public: virtual void Update();
	public: virtual void __cdecl DrawTextJustified(unsigned char,FLOAT,FLOAT,FLOAT,FLOAT,const TCHAR*,...);
	public: virtual void __cdecl WrappedPrINTf(UFont*,FLOAT,FLOAT,INT,const TCHAR*,...);
	public: virtual void __cdecl WrappedPrINTf(UFont*,INT,const TCHAR*,...);
	public: virtual void __cdecl WrappedStrLenf(UFont*,FLOAT,FLOAT,INT&,INT&,const TCHAR*,...);
	public: virtual void __cdecl WrappedStrLenf(UFont*,INT&,INT&,const TCHAR*,...);
	public: virtual ~UCanvas();
	public: void DeleteViewportWindowParam(INT);
	public: void DrawActor(AActor*,INT,INT,FLOAT);
	public: void DrawMinimapLoc(INT,INT,UMaterial*,unsigned char);
	public: void DrawMinimapTex(INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,UTexture*);
	public: void DrawQuestArrow();
	public: void DrawRadarBack(FColor);
	public: void DrawRadarEtc();
	public: void DrawRadarTarget(INT,INT);
	public: void DrawThaiCharacter(struct ThaiCharacter,INT,INT,FLOAT,UMaterial*,FColor,enum L2FontType);
	public: void EndTextAnim();
	public: void ImportCrestFile(INT,INT,INT,INT);
	public: void MakeBMPToDXT1(TCHAR*,TCHAR*,INT&,INT,INT,INT);
	public: void MakeDDSCrestFile(INT,INT,unsigned char*,INT,INT);
	public: void ModifyViewportWindowParam(INT,AActor*,FVector,FRotator,FLOAT);
	public: void SetTextAnim(bool,FLOAT);
	public: void StartTextAnim();
	public: void eventReset();
	public: void execDrawActor(struct FFrame&,void* const);
	public: void execDrawPortal(struct FFrame&,void* const);
	public: void execDrawText(struct FFrame&,void* const);
	public: void execDrawTextClipped(struct FFrame&,void* const);
	public: void execDrawTextJustified(struct FFrame&,void* const);
	public: void execDrawTile(struct FFrame&,void* const);
	public: void execDrawTileClipped(struct FFrame&,void* const);
	public: void execDrawTileJustified(struct FFrame&,void* const);
	public: void execDrawTileScaled(struct FFrame&,void* const);
	public: void execDrawTileStretched(struct FFrame&,void* const);
	public: void execStrLen(struct FFrame&,void* const);
	public: void execTextSize(struct FFrame&,void* const);
	public: void execWrapStringToArray(struct FFrame&,void* const);
UChannel
	public: INT IsNetReady(INT);
	public: INT MaxSendBytes();
	public: INT ReceivedSequencedBunch(FInBunch&);
	public: INT RouteDestroy();
	public: INT SendBunch(FOutBunch*,INT);
	public: UChannel();
	public: UChannel(UChannel const&);
	public: static INT __cdecl IsKnownChannelType(INT);
	public: static UClass* __cdecl StaticClass();
	public: virtual FString Describe();
	public: virtual void Close();
	public: virtual void Destroy();
	public: virtual void Init(UNetConnection*,INT,INT);
	public: virtual void ReceivedNak(INT);
	public: virtual void SetClosingFlag();
	public: virtual void Tick();
	public: virtual ~UChannel();
	public: void AssertInSequenced();
	public: void ReceivedAcks();
	public: void ReceivedRawBunch(FInBunch&);
UChannelDownload
	protected: UChannelDownload();
	public: UChannelDownload(UChannelDownload const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT TrySkipFile();
	public: virtual void Destroy();
	public: virtual void ReceiveFile(UNetConnection*,INT,const TCHAR*,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UChannelDownload();
	public: void StaticConstructor();
UCheatManager
	protected: UCheatManager();
	public: UCheatManager(UCheatManager const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UCheatManager();
UClient
	public: INT GetTextureLODBias(enum ELODSet);
	public: UClient();
	public: UClient(UClient const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual void Destroy();
	public: virtual void Flush(INT);
	public: virtual void Init(UEngine*);
	public: virtual void PostEditChange();
	public: virtual void RestoreGamma();
	public: virtual void Serialize(FArchive&);
	public: virtual void UpdateGamma();
	public: virtual ~UClient();
	public: void StaticConstructor();
UColorModifier
	protected: UColorModifier();
	public: UColorModifier(UColorModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UColorModifier();
UCombiner
	public: UCombiner();
	public: UCombiner(UCombiner const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetSortingLevel();
	public: virtual INT IsLoaded();
	public: virtual INT IsTransparent();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual INT RequiresSorting();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual ~UCombiner();
UConsole
	protected: UConsole();
	public: UConsole(UConsole const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UConsole();
UConstantColor
	public: UConstantColor();
	public: UConstantColor(UConstantColor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FColor GetColor(FLOAT);
	public: virtual ~UConstantColor();
UConstantMaterial
	public: UConstantMaterial();
	public: UConstantMaterial(UConstantMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FColor GetColor(FLOAT);
	public: virtual ~UConstantMaterial();
UControlChannel
	const TCHAR* const `public: void StaticConstructor()'::`3'::__FUNC_NAME__;
	public: UControlChannel();
	public: UControlChannel(UControlChannel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString Describe();
	public: virtual void Destroy();
	public: virtual void Init(UNetConnection*,INT,INT);
	public: virtual void ReceivedBunch(FInBunch&);
	public: virtual void Serialize(const TCHAR*,enum EName);
	public: virtual ~UControlChannel();
	public: void StaticConstructor();
UConvexVolume
	public: UConvexVolume();
	public: UConvexVolume(UConvexVolume const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UConvexVolume();
UCubemap
	public: UCubemap();
	public: UCubemap(UCubemap const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual void Destroy();
	public: virtual ~UCubemap();
UDemoRecConnection
	protected: UDemoRecConnection();
	public: UDemoRecConnection(UDemoRecConnection const&);
	public: UDemoRecConnection(UNetDriver*,FURL const&);
	public: UDemoRecDriver* GetDriver();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString LowLevelDescribe();
	public: virtual FString LowLevelGetRemoteAddress();
	public: virtual INT IsNetReady(INT);
	public: virtual void FlushNet();
	public: virtual void HandleClientPlayer(APlayerController*);
	public: virtual void LowLevelSend(void*,INT);
	public: virtual ~UDemoRecConnection();
	public: void StaticConstructor();
UDemoRecDriver
	public: INT InitBase(INT,FNetworkNotify*,FURL&,FString&);
	public: UDemoRecDriver();
	public: UDemoRecDriver(UDemoRecDriver const&);
	public: ULevel* GetLevel();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString LowLevelGetNetworkNumber();
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT InitConnect(FNetworkNotify*,FURL&,FString&);
	public: virtual INT InitListen(FNetworkNotify*,FURL&,FString&);
	public: virtual INT IsDemoDriver();
	public: virtual void LowLevelDestroy();
	public: virtual void TickDispatch(FLOAT);
	public: virtual ~UDemoRecDriver();
	public: void SpawnDemoRecSpectator(UNetConnection*);
	public: void StaticConstructor();
UDownload
	protected: UDownload();
	public: UDownload(UDownload const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT TrySkipFile();
	public: virtual void Destroy();
	public: virtual void DownloadDone();
	public: virtual void DownloadError(const TCHAR*);
	public: virtual void ReceiveData(unsigned char*,INT);
	public: virtual void ReceiveFile(UNetConnection*,INT,const TCHAR*,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual void Tick();
	public: virtual ~UDownload();
	public: void StaticConstructor();
UDummyAudio
	public: INT PlayMusic(FString,FLOAT);
	public: UDummyAudio();
	public: UDummyAudio(UDummyAudio const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetMusicVolume();
	public: virtual FLOAT GetOggVoiceVolume();
	public: virtual FLOAT GetSoundVolume();
	public: virtual FLOAT GetWavVoiceVolume();
	public: virtual INT CheckSoundResource(USound*);
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT Init();
	public: virtual INT IsMusicPlaying();
	public: virtual INT IsOggVoicePlaying();
	public: virtual INT IsPlaying(AActor*,USound*);
	public: virtual INT IsVaild();
	public: virtual INT IsVoiceEnd();
	public: virtual INT IsWavVoicePlaying();
	public: virtual INT LowQualitySound();
	public: virtual INT PlayMusic(FString,FLOAT,INT,INT,FLOAT,INT);
	public: virtual INT PlaySoundW(AActor*,INT,USound*,FVector,FLOAT,FLOAT,FLOAT,INT,FLOAT,FLOAT);
	public: virtual INT PlaySoundW(USound*,ULevelObject*,INT,FVector,FLOAT,FLOAT,FLOAT,INT,FLOAT,FLOAT);
	public: virtual INT PlayVoice(FString,FLOAT,INT,INT);
	public: virtual INT StopAllMusic(FLOAT,INT);
	public: virtual INT StopAllVoice(FLOAT,INT);
	public: virtual INT StopMusic(INT,FLOAT,INT);
	public: virtual INT StopSound(AActor*,USound*);
	public: virtual INT StopSound(USound*,ULevelObject*);
	public: virtual UViewport* GetViewport();
	public: virtual void ChangeVoiceChatter(DWORD,DWORD,INT);
	public: virtual void CleanUp();
	public: virtual void EnterVoiceChat();
	public: virtual void LeaveVoiceChat();
	public: virtual void NoteDestroy(AActor*);
	public: virtual void NoteDestroy(ULevelObject*);
	public: virtual void PlayPrevMusic(FLOAT,INT,INT,FLOAT,INT);
	public: virtual void RegisterSound(USound*);
	public: virtual void SetMusicVolume(FLOAT);
	public: virtual void SetMusicVolume(INT,FLOAT,FLOAT);
	public: virtual void SetOggVoiceVolume(FLOAT);
	public: virtual void SetSoundVolume(FLOAT);
	public: virtual void SetViewport(UViewport*);
	public: virtual void SetWavVoiceVolume(FLOAT);
	public: virtual void UnregisterSound(USound*);
	public: virtual void Update(FSceneNode*);
	public: virtual ~UDummyAudio();
UEngine
	public: UEngine();
	public: UEngine(UEngine const&);
	public: UL2ConsoleWnd* GetConsolePoINTer();
	public: static UClass* __cdecl StaticClass();
	public: virtual FLOAT GetMaxTickRate();
	public: virtual INT ChallengeResponse(INT);
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT InputEvent(UViewport*,enum EInputKey,enum EInputAction,FLOAT,INT);
	public: virtual INT Key(UViewport*,enum EInputKey,unsigned short);
	public: virtual INT edcamMode(UViewport*);
	public: virtual INT edcamMouseControl(UViewport*);
	public: virtual INT edcamTerrainBrush();
	public: virtual void Destroy();
	public: virtual void EdCallback(DWORD,INT,DWORD);
	public: virtual void Exit();
	public: virtual void Flush(INT);
	public: virtual void Init(INT);
	public: virtual void RestoreGamma();
	public: virtual void Serialize(FArchive&);
	public: virtual void SetProgress(const TCHAR*,const TCHAR*,FLOAT);
	public: virtual void UpdateGamma();
	public: virtual void edDrawAxisIndicator(FSceneNode*);
	public: virtual void edSetClickLocation(FVector&);
	public: virtual ~UEngine();
	public: void InitAudio();
	public: void ResumeDraw();
	public: void StaticConstructor();
	public: void StopDraw();
UExtraMeshData
	public: UExtraMeshData();
	public: UExtraMeshData(UExtraMeshData const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual UMeshInstance* GetExtraMeshInstance(INT);
	public: virtual ~UExtraMeshData();
UExtraSkeletalMeshInstance
	public: UExtraSkeletalMeshInstance();
	public: UExtraSkeletalMeshInstance(UExtraSkeletalMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetBonePosition(DWORD,FVector&);
	public: virtual INT GetBonePosition(FName,FVector&);
	public: virtual UMaterial* GetMaterial(INT,AActor*);
	public: virtual UMaterial* GetSubMaterial(INT,INT,AActor*);
	public: virtual void Destory();
	public: virtual void GetFrame(AActor*,FLevelSceneNode*,FVector*,INT,INT&,DWORD);
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*);
	public: virtual ~UExtraSkeletalMeshInstance();
UFadeBlackWhite
	public: UFadeBlackWhite();
	public: UFadeBlackWhite(UFadeBlackWhite const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostRender(UViewport*,FRenderInterface*);
	public: virtual void PreRender(UViewport*,FRenderInterface*);
	public: virtual ~UFadeBlackWhite();
UFadeColor
	public: UFadeColor();
	public: UFadeColor(UFadeColor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FColor GetColor(FLOAT);
	public: virtual ~UFadeColor();
UFileChannel
	const TCHAR* const `public: void StaticConstructor()'::`3'::__FUNC_NAME__;
	public: UFileChannel();
	public: UFileChannel(UFileChannel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString Describe();
	public: virtual void Destroy();
	public: virtual void Init(UNetConnection*,INT,INT);
	public: virtual void ReceivedBunch(FInBunch&);
	public: virtual void Tick();
	public: virtual ~UFileChannel();
	public: void StaticConstructor();
UFinalBlend
	public: UFinalBlend();
	public: UFinalBlend(UFinalBlend const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetSortingLevel();
	public: virtual INT GetValidated();
	public: virtual INT IsTransparent();
	public: virtual INT RequiresSorting();
	public: virtual void PostEditChange();
	public: virtual void SetValidated(INT);
	public: virtual ~UFinalBlend();
UFluidSurfacePrimitive
	protected: UFluidSurfacePrimitive();
	public: UFluidSurfacePrimitive(UFluidSurfacePrimitive const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetCollisionBoundingBox(AActor const*)const;
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector,FVector,FVector,DWORD,DWORD);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector,FVector,DWORD);
	public: virtual INT UseCylinderCollision(AActor const*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UFluidSurfacePrimitive();
UFont
	public: UFont();
	public: UFont(UFont const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned short RemapChar(unsigned short);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UFont();
UGameEngine
	const TCHAR* const `public: void GetSWMapXY(FVector,INT&,INT&)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: void GetSWMapXY(INT,INT,INT&,INT&)'::`3'::__FUNC_NAME__;
	public: FLOAT GetAverageDeltaSeconds();
	public: FString InitSpecial(const TCHAR*);
	public: INT CheckForRogues();
	public: INT EventLoadSWMap(INT,INT);
	public: INT FinishLoadMap();
	public: INT FinishLoadSWMap();
	public: INT FinishLoadTeleportMap(ULevel*);
	public: INT IsLimitContentForYoungUsers();
	public: INT LoadSWMap(FLOAT,FLOAT,FLOAT);
	public: INT LoadTeleportMap(INT,INT);
	public: INT PackageRevisionLevel();
	public: INT ValidatePackage(const TCHAR*,const TCHAR*);
	public: UGameEngine();
	public: UGameEngine(UGameEngine const&);
	public: ULevel* LoadLevel(INT,INT);
	public: ULevel* LoadMapThread(INT,INT);
	public: enum SEAMLESS_RESULT AdjustTerrain(FVector);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetMaxTickRate();
	public: virtual INT Browse(FURL,TMap<FString,FString> const*,FString&);
	public: virtual INT ChallengeResponse(INT);
	public: virtual INT CheckLoginType(INT);
	public: virtual INT CheckTutorialClientEvent(INT);
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT OnActionFail();
	public: virtual INT OnAddBuyList(struct ItemInfo&);
	public: virtual INT OnAddDepositList(struct ItemInfo&);
	public: virtual INT OnAddManorBuyList(struct ItemInfo&);
	public: virtual INT OnAddManorSellList(struct ItemInfo&);
	public: virtual INT OnAddPreviewList(struct ItemInfo&);
	public: virtual INT OnAddSellList(struct ItemInfo&);
	public: virtual INT OnAddWithdrawList(struct ItemInfo&);
	public: virtual INT OnAssociatedAttack(struct User*,struct User*,INT,INT,INT,INT,INT,FVector,INT);
	public: virtual INT OnAttack(struct User*,INT,INT,INT,INT,INT,FVector,INT);
	public: virtual INT OnAttack(struct User*,struct User*,INT,INT,INT,INT,INT,FVector,INT);
	public: virtual INT OnAttackCanceled(struct User*);
	public: virtual INT OnAttackDeadTarget(struct User*);
	public: virtual INT OnAttackOutofRange(struct User*);
	public: virtual INT OnAttackRangeUpdate(struct User*,INT);
	public: virtual INT OnAttacked(struct User*,INT);
	public: virtual INT OnAttacked(struct User*,struct User*);
	public: virtual INT OnAttackinCoolTime(struct User*);
	public: virtual INT OnAuthServerSelectFail(INT);
	public: virtual INT OnAuthServerSelectSuccess();
	public: virtual INT OnAutoAttackStart(struct User*);
	public: virtual INT OnAutoAttackStop(struct User*);
	public: virtual INT OnCarringWeightUpdate(struct User*,INT);
	public: virtual INT OnCarryWeightUpdate(struct User*,INT);
	public: virtual INT OnChangeMoveType(struct User*,INT,INT);
	public: virtual INT OnChangeWaitType(struct User*,INT,FVector);
	public: virtual INT OnCharInfo(struct User*,FVector,INT,L2ParamStack&);
	public: virtual INT OnCheckGeo(FVector);
	public: virtual INT OnClassUpdate(struct User*,INT);
	public: virtual INT OnClientSetTime(L2ParamStack&);
	public: virtual INT OnConUpdate(struct User*,INT);
	public: virtual INT OnCpUpdate(struct User*,INT);
	public: virtual INT OnCriminalRateUpdate(struct User*,INT);
	public: virtual INT OnCriticalRate(struct User*,INT);
	public: virtual INT OnDeleteItem(struct Item*);
	public: virtual INT OnDeleteRadar(INT,INT,INT);
	public: virtual INT OnDeleteUser(struct User*,INT,INT);
	public: virtual INT OnDeleteVehicle(struct FVehicle*);
	public: virtual INT OnDexUpdate(struct User*,INT);
	public: virtual INT OnDice(struct User*,INT,INT,FVector);
	public: virtual INT OnDie(struct User*,L2ParamStack&);
	public: virtual INT OnDoorInfo(L2ParamStack&,AActor**);
	public: virtual INT OnDoorStatusUpdate(L2ParamStack&,AActor*);
	public: virtual INT OnDropItem(struct User*,struct Item*,FVector,FRotator);
	public: virtual INT OnEarthQuake(FVector,INT,INT,INT);
	public: virtual INT OnEquipItem(struct User*,struct Item*,INT);
	public: virtual INT OnEquipItemPlaySound(INT);
	public: virtual INT OnEventTrigger(INT,INT);
	public: virtual INT OnExpUpdate(struct User*,__INT64);
	public: virtual INT OnFinishRotating(struct User*,INT,INT);
	public: virtual INT OnFlySelfDestination(struct User*,FVector);
	public: virtual INT OnFlyToLocation(struct User*,FVector,FVector,INT);
	public: virtual INT OnGMHide(INT);
	public: virtual INT OnGetItem(struct User*,struct Item*,FVector);
	public: virtual INT OnGetOffVehicle(struct User*,struct FVehicle*,FVector);
	public: virtual INT OnGetOnVehicle(struct User*,struct FVehicle*,FVector);
	public: virtual INT OnGuiltyUpdate(struct User*,INT);
	public: virtual INT OnHitRate(struct User*,INT);
	public: virtual INT OnHpUpdate(struct User*,INT);
	public: virtual INT OnIntUpdate(struct User*,INT);
	public: virtual INT OnLevelUpdate(struct User*,INT);
	public: virtual INT OnMagicCastingSpeed(struct User*,INT);
	public: virtual INT OnMagicDefense(struct User*,INT);
	public: virtual INT OnMagicalAttack(struct User*,INT);
	public: virtual INT OnMaxCpUpdate(struct User*,INT);
	public: virtual INT OnMaxHpUpdate(struct User*,INT);
	public: virtual INT OnMaxMpUpdate(struct User*,INT);
	public: virtual INT OnMenUpdate(struct User*,INT);
	public: virtual INT OnMoveBackwardToLocation(struct User*,FVector,FVector);
	public: virtual INT OnMoveToActor(struct User*,AActor*,INT,FVector);
	public: virtual INT OnMoveToLocation(struct User*,FVector,FVector);
	public: virtual INT OnMoveToLocationInVehicle(struct FVehicle*,struct User*,FVector,FVector);
	public: virtual INT OnMoveToPawn(struct User*,struct User*,INT,FVector);
	public: virtual INT OnMpUpdate(struct User*,INT);
	public: virtual INT OnMyTargetSelected(struct User*,INT,struct Item*,struct FServerStaticObject*,INT);
	public: virtual INT OnNormalCamera();
	public: virtual INT OnNpcHtmlMessage(struct User*,TCHAR*,INT);
	public: virtual INT OnNpcInfo(struct User*,FVector,INT,L2ParamStack&);
	public: virtual INT OnPhysicalAttack(struct User*,INT);
	public: virtual INT OnPhysicalAttackSpeed(struct User*,INT);
	public: virtual INT OnPhysicalAvoid(struct User*,INT);
	public: virtual INT OnPhysicalDefense(struct User*,INT);
	public: virtual INT OnPreviewInfo(INT*);
	public: virtual INT OnReceiveMagicSkillLaunched(struct User*,INT,INT,INT,INT);
	public: virtual INT OnReceiveMagicSkillLaunched(struct User*,struct User*,INT,INT,INT);
	public: virtual INT OnRevive(struct User*);
	public: virtual INT OnRide(struct User*,INT,INT,INT,FVector);
	public: virtual INT OnSPUpdate(struct User*,INT);
	public: virtual INT OnSearchOrc(char*);
	public: virtual INT OnServerObjectInfo(struct User*,FVector,INT,INT,INT,INT);
	public: virtual INT OnShowRadar(INT,INT,INT,INT,INT);
	public: virtual INT OnSkillRemainSec(struct User*,struct User*,INT,INT,INT,INT,FLOAT);
	public: virtual INT OnSocialAction(struct User*,INT);
	public: virtual INT OnSpawnItem(struct Item*,FVector,FRotator);
	public: virtual INT OnSpecialCamera(struct User*,FLOAT,INT,INT,FLOAT,FLOAT,INT,INT,INT,INT,INT);
	public: virtual INT OnStartBuyList(INT,INT);
	public: virtual INT OnStartDepositList(short,INT);
	public: virtual INT OnStartManorBuyList(INT,INT);
	public: virtual INT OnStartManorSellList(INT,INT);
	public: virtual INT OnStartPreviewList(INT,INT,INT);
	public: virtual INT OnStartRotating(struct User*,INT,INT,INT);
	public: virtual INT OnStartSellList(INT,INT);
	public: virtual INT OnStartWithdrawList(short,INT);
	public: virtual INT OnStaticObjectInfo(L2ParamStack&,AActor**);
	public: virtual INT OnStopMove(struct User*,FVector,INT);
	public: virtual INT OnStopMoveInVehicle(struct FVehicle*,struct User*,FVector,INT);
	public: virtual INT OnStopMoveWithLocation(struct User*,FVector);
	public: virtual INT OnStrUpdate(struct User*,INT);
	public: virtual INT OnTargetSelected(struct User*,INT,struct User*,struct Item*,struct FServerStaticObject*,FVector);
	public: virtual INT OnTargetUnselected(struct User*,FVector,INT);
	public: virtual INT OnTeleportToLocation(struct User*,FVector,INT);
	public: virtual INT OnTutorialCloseHtml();
	public: virtual INT OnTutorialEnableClientEvent(INT);
	public: virtual INT OnTutorialShowHtml(TCHAR*);
	public: virtual INT OnTutorialShowQuestionMark(INT);
	public: virtual INT OnUnequipItem(struct User*,struct Item*,INT);
	public: virtual INT OnUserInfo(struct User*,FVector,INT,INT,INT,char,char);
	public: virtual INT OnValidateLocation(struct User*,FVector,INT);
	public: virtual INT OnValidateLocationInVehicle(struct FVehicle*,struct User*,FVector,INT);
	public: virtual INT OnVehicleCheckLocation(struct FVehicle*,FVector,INT);
	public: virtual INT OnVehicleDeparture(struct FVehicle*,INT,INT,FVector);
	public: virtual INT OnVehicleInfo(struct FVehicle*,FVector,INT);
	public: virtual INT OnVersionCheck();
	public: virtual INT OnWitUpdate(struct User*,INT);
	public: virtual ULevel* LoadMap(FURL const&,UPendingLevel*,TMap<FString,FString> const*,FString&);
	public: virtual void AddAbnormalStatus(L2ParamStack&);
	public: virtual void AddAcquireSkillExtendedInfo(L2ParamStack&);
	public: virtual void AddAcquireSkillInfo(L2ParamStack&);
	public: virtual void AddEtcStatus(L2ParamStack&);
	public: virtual void AddHennaEquipInfo(struct HennaInfo);
	public: virtual void AddHennaInfo(INT,INT);
	public: virtual void AddHennaUnequipInfo(struct HennaInfo);
	public: virtual void AddInventoryItem(struct ItemInfo&);
	public: virtual void AddPackageToList(L2ParamStack&);
	public: virtual void AddPetInventoryItem(struct ItemInfo&);
	public: virtual void AddQuestID(INT,INT);
	public: virtual void AddQuestItem(struct ItemInfo&);
	public: virtual void AddRecipeBookItem(INT);
	public: virtual void AddRecipeShopManageItem(INT,INT);
	public: virtual void AddRecipeShopRegisterdItem(INT,INT,INT);
	public: virtual void AddRecipeShopSellItem(INT,INT,INT);
	public: virtual void AddRecommandedData(struct RecommandedDataStr);
	public: virtual void AddSendableItemList(INT,INT,INT,struct ItemInfo&);
	public: virtual void AddShortStatus(L2ParamStack&);
	public: virtual void BuildServerMasterMap(UNetDriver*,ULevel*);
	public: virtual void CancelPending();
	public: virtual void ClearAttackerList();
	public: virtual void ClearDefenderList();
	public: virtual void Click(UViewport*,DWORD,FLOAT,FLOAT);
	public: virtual void ContinueServerClose();
	public: virtual void Destroy();
	public: virtual void Draw(UViewport*,INT,unsigned char*,INT*);
	public: virtual void EndRecommandedData();
	public: virtual void Exit();
	public: virtual void GMAddHennaInfo(INT,INT);
	public: virtual void GMReceiveHennaInfo(struct HennaInfo,INT);
	public: virtual void GMViewAddInventoryItem(struct ItemInfo&);
	public: virtual void GMViewAddQuestID(INT,INT);
	public: virtual void GMViewAddQuestItem(struct ItemInfo&);
	public: virtual void Init(INT);
	public: virtual void MouseDelta(UViewport*,DWORD,FLOAT,FLOAT);
	public: virtual void MousePosition(UViewport*,DWORD,FLOAT,FLOAT);
	public: virtual void MouseWheel(UViewport*,DWORD,INT);
	public: virtual void NotifyLevelChange();
	public: virtual void OnAcceptCharacterCreate(INT);
	public: virtual void OnAcceptCharacterDelete(INT);
	public: virtual void OnAcceptGameStart(INT);
	public: virtual void OnAcceptLogOut();
	public: virtual void OnAcceptNewCharacter(INT);
	public: virtual void OnAddL2Friend(INT,TCHAR*,INT,INT);
	public: virtual void OnAddPledgeMember(L2ParamStack&);
	public: virtual void OnAddPledgeMemberMultiple(L2ParamStack&);
	public: virtual void OnAddSelectableTime(INT);
	public: virtual void OnAgitInfo(INT,unsigned char const*);
	public: virtual void OnCameraMode(INT);
	public: virtual void OnChairSitPacket(L2ParamStack&);
	public: virtual void OnColosseumFence(struct ColosseumFence*,enum ColosseumFenceState);
	public: virtual void OnDeleteAllPledgeMember();
	public: virtual void OnDeletePledgeMember(TCHAR*);
	public: virtual void OnDeleteStaticObject(struct FServerStaticObject*);
	public: virtual void OnDuelAskStart(L2ParamStack&);
	public: virtual void OnDuelEnd(L2ParamStack&);
	public: virtual void OnDuelEnemyRelation(L2ParamStack&);
	public: virtual void OnDuelReady(L2ParamStack&);
	public: virtual void OnDuelStart(L2ParamStack&);
	public: virtual void OnDuelUpdateUserInfo(L2ParamStack&);
	public: virtual void OnEndItemList();
	public: virtual void OnEndL2FriendList();
	public: virtual void OnEndQuestList();
	public: virtual void OnEndSiegeAttackerlist();
	public: virtual void OnEndSiegeDefenderlist();
	public: virtual void OnEventMatchCreate(INT);
	public: virtual void OnEventMatchGMTest();
	public: virtual void OnEventMatchMessage(char,FString);
	public: virtual void OnEventMatchObserver(INT,char,char,FString,FString,INT,INT,INT);
	public: virtual void OnEventMatchScore(INT,INT,INT);
	public: virtual void OnEventMatchSpellInfo(INT,INT,INT,INT);
	public: virtual void OnEventMatchSpellInfoEnd();
	public: virtual void OnEventMatchSpellInfoStart(INT,INT,INT);
	public: virtual void OnEventMatchTeamInfo(INT,INT,FString,INT,INT,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void OnEventMatchTeamInfoEnd();
	public: virtual void OnEventMatchTeamInfoStart(INT,char,INT);
	public: virtual void OnEventMatchTeamUnlocked(INT,char);
	public: virtual void OnEventMatchUserInfo(INT,FString,INT,INT,INT,INT,INT,INT,INT,INT);
	public: virtual void OnExAskJoinMPCC(L2ParamStack&);
	public: virtual void OnExAskJoinPartyRoom(L2ParamStack&);
	public: virtual void OnExAutoSoulShot(L2ParamStack&);
	public: virtual void OnExCloseMPCC(L2ParamStack&);
	public: virtual void OnExClosePartyRoom(L2ParamStack&);
	public: virtual void OnExEventMatchManage(L2ParamStack&);
	public: virtual void OnExEventMatchManageAddMember(L2ParamStack&);
	public: virtual void OnExGetBossRecord(L2ParamStack&);
	public: virtual void OnExListPartyMatchingWaitingRoom(L2ParamStack&);
	public: virtual void OnExListPartyMatchingWaitingRoomStart(L2ParamStack&);
	public: virtual void OnExMPCCPartyInfoUpdate(L2ParamStack&);
	public: virtual void OnExMailArrivedPacket();
	public: virtual void OnExManagePartyRoomMember(L2ParamStack&);
	public: virtual void OnExMultiPartyCommandChannelInfo(L2ParamStack&);
	public: virtual void OnExMultiPartyCommandChannelInfoAddMember(L2ParamStack&);
	public: virtual void OnExMultiPartyCommandChannelInfoAddPartyMember(L2ParamStack&);
	public: virtual void OnExNeedToChangeName(L2ParamStack&);
	public: virtual void OnExOpenMPCC(L2ParamStack&);
	public: virtual void OnExPCCafePoINTInfo(L2ParamStack&);
	public: virtual void OnExPartyRoomMember(L2ParamStack&);
	public: virtual void OnExSetCompassZoneCode(L2ParamStack&);
	public: virtual void OnExSetMpccRouting(L2ParamStack&);
	public: virtual void OnExShowAdventurerGuideBook(L2ParamStack&);
	public: virtual void OnExShowScreenMessage(L2ParamStack&);
	public: virtual void OnExStorageMaxCountPacket(L2ParamStack&);
	public: virtual void OnFirecracker(APawn*,INT);
	public: virtual void OnFishingCombatStart(APawn*,L2ParamStack&);
	public: virtual void OnFishingEnd(APawn*,unsigned char);
	public: virtual void OnFishingHPRegen(APawn*,L2ParamStack&);
	public: virtual void OnFishingStart(APawn*,INT,FVector,INT,INT);
	public: virtual void OnGMViewAddPledgeMember(L2ParamStack&);
	public: virtual void OnGMViewAddWithdrawList(struct ItemInfo&);
	public: virtual void OnGMViewCharacterInfo(struct User&);
	public: virtual void OnGMViewMagicListPacket(L2ParamStack&);
	public: virtual void OnGMViewReceivePledgeInfo(struct PledgeInfo&);
	public: virtual void OnGMViewReceivePledgeMemberList();
	public: virtual void OnGMViewReceiveQuestList();
	public: virtual void OnGMViewReceiveQuestListEnd();
	public: virtual void OnGMViewShowMagicWnd();
	public: virtual void OnGMViewShowSkillWnd();
	public: virtual void OnGMViewSkillListPacket(L2ParamStack&);
	public: virtual void OnGMViewStartWithdrawList(INT);
	public: virtual void OnHeroList(L2ParamStack*);
	public: virtual void OnHidePetWnd(INT);
	public: virtual void OnHideTrainWnd();
	public: virtual void OnImportCrestFile(INT,INT,INT,INT);
	public: virtual void OnInterfacePlaySound(const TCHAR*);
	public: virtual void OnInterfacePlayVoice(TCHAR*);
	public: virtual void OnInterfaceStopSound(FString const&)const;
	public: virtual void OnListPartyWating(L2ParamStack&);
	public: virtual void OnMagicListPacket(L2ParamStack&);
	public: virtual void OnMakeDDSCrestFile(INT,INT,unsigned char*,INT,INT);
	public: virtual void OnObserverEndPacket(L2ParamStack&);
	public: virtual void OnObserverStartPacket(L2ParamStack&);
	public: virtual void OnOlympiadMatchEnd();
	public: virtual void OnOlympiadMode(char);
	public: virtual void OnOlympiadSpelledInfo(L2ParamStack&);
	public: virtual void OnOlympiadUserInfo(L2ParamStack&);
	public: virtual void OnPartyAddMemberPacket(L2ParamStack&);
	public: virtual void OnPartyDeleteAllPacket(L2ParamStack&);
	public: virtual void OnPartyDeleteMemberPacket(L2ParamStack&);
	public: virtual void OnPartyRoomInfo(L2ParamStack&);
	public: virtual void OnPartyUpdateMemberPacket(L2ParamStack&);
	public: virtual void OnPetitionVote();
	public: virtual void OnPlayAnimation(APawn*,INT,unsigned char,FName);
	public: virtual void OnPlaySound(L2ParamStack&);
	public: virtual void OnPledgePower(L2ParamStack&);
	public: virtual void OnPrivateStoreBuyList(struct ItemInfo&);
	public: virtual void OnPrivateStoreBuyManageList(struct ItemInfo&,struct ItemInfo&);
	public: virtual void OnPrivateStoreBuyMsg(TCHAR*,INT);
	public: virtual void OnPrivateStoreList(struct ItemInfo&);
	public: virtual void OnPrivateStoreManageList(struct ItemInfo&,struct ItemInfo&);
	public: virtual void OnReceiveAbnormalStatus();
	public: virtual void OnReceiveAction(INT);
	public: virtual void OnReceiveAddTradeInventoryItem(struct ItemInfo&);
	public: virtual void OnReceiveAddTradeOtherItem(struct ItemInfo&);
	public: virtual void OnReceiveAddTradeOwnItem(struct ItemInfo&);
	public: virtual void OnReceiveAskJoinAlly(L2ParamStack&);
	public: virtual void OnReceiveAskJoinParty(L2ParamStack&);
	public: virtual void OnReceiveAskJoinPledge(L2ParamStack&);
	public: virtual void OnReceiveBlockList(L2ParamStack&);
	public: virtual void OnReceiveCharacterSelectedPacket(INT,INT,INT,INT,void*,INT,INT*);
	public: virtual void OnReceiveConfirmCancelItemResult(INT,INT,INT,INT,__INT64,INT);
	public: virtual void OnReceiveConfirmGemStoneResult(INT,INT,INT,INT,INT);
	public: virtual void OnReceiveConfirmRefinerItemResult(INT,INT,INT,INT,INT);
	public: virtual void OnReceiveConfirmTargetItemResult(INT,INT,INT);
	public: virtual void OnReceiveCreatePledge(L2ParamStack&);
	public: virtual void OnReceiveDismissAlly(L2ParamStack&);
	public: virtual void OnReceiveDismissParty(L2ParamStack&);
	public: virtual void OnReceiveDismissPartyMessage(L2ParamStack&);
	public: virtual void OnReceiveDismissPledge(L2ParamStack&);
	public: virtual void OnReceiveDismissPledgeMessage(L2ParamStack&);
	public: virtual void OnReceiveEnchantResult(INT);
	public: virtual void OnReceiveEtcStatus();
	public: virtual void OnReceiveFriendAdd(L2ParamStack&);
	public: virtual void OnReceiveFriendAddRequest(L2ParamStack&);
	public: virtual void OnReceiveFriendAddRequestResult(L2ParamStack&);
	public: virtual void OnReceiveFriendList(L2ParamStack&);
	public: virtual void OnReceiveFriendRemove(L2ParamStack&);
	public: virtual void OnReceiveFriendStatus(L2ParamStack&);
	public: virtual void OnReceiveHtmlMessage(L2ParamStack&);
	public: virtual void OnReceiveItemList(INT);
	public: virtual void OnReceiveJoinAlly(L2ParamStack&);
	public: virtual void OnReceiveJoinParty(L2ParamStack&);
	public: virtual void OnReceiveJoinPledge(L2ParamStack&);
	public: virtual void OnReceiveL2FriendList();
	public: virtual void OnReceiveL2FriendSay(INT,TCHAR*,TCHAR*);
	public: virtual void OnReceiveMagicSkillCanceled(struct User*);
	public: virtual void OnReceiveMagicSkillListPacket(L2ParamStack&);
	public: virtual void OnReceiveMagicSkillUse(struct User*,INT,L2ParamStack&);
	public: virtual void OnReceiveMagicSkillUse(struct User*,struct User*,L2ParamStack&);
	public: virtual void OnReceiveOustAlly(L2ParamStack&);
	public: virtual void OnReceiveOustPartyMember(L2ParamStack&);
	public: virtual void OnReceiveOustPartyMessage(L2ParamStack&);
	public: virtual void OnReceiveOustPledgeMember(L2ParamStack&);
	public: virtual void OnReceiveOustPledgeMessage(L2ParamStack&);
	public: virtual void OnReceivePetItemList();
	public: virtual void OnReceivePetStatusInfo(INT,L2ParamStack&);
	public: virtual void OnReceivePledgeExtendedInfo(struct PledgeInfo&);
	public: virtual void OnReceivePledgeInfo(L2ParamStack&);
	public: virtual void OnReceivePledgeInfoUpdate(struct PledgeInfo&);
	public: virtual void OnReceivePledgeMemberInfo(L2ParamStack&);
	public: virtual void OnReceivePledgeMemberList();
	public: virtual void OnReceivePledgeMyAuth(L2ParamStack&);
	public: virtual void OnReceivePledgePower(L2ParamStack&);
	public: virtual void OnReceivePledgePowerGradeList(L2ParamStack&);
	public: virtual void OnReceivePledgeSkillAdd(L2ParamStack&);
	public: virtual void OnReceivePledgeSkillList(L2ParamStack&);
	public: virtual void OnReceivePledgeWarList(L2ParamStack&);
	public: virtual void OnReceiveQuestList();
	public: virtual void OnReceiveRecipeBookItemList(INT,INT);
	public: virtual void OnReceiveRefineCancelResult(INT);
	public: virtual void OnReceiveRefineResult(INT,INT,INT);
	public: virtual void OnReceiveReplyStartPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveReplyStopPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveReplySurrenderPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveServerTime(INT);
	public: virtual void OnReceiveSetAcademyMaster(L2ParamStack&);
	public: virtual void OnReceiveShortCutDelete(INT);
	public: virtual void OnReceiveShortCutList();
	public: virtual void OnReceiveShortStatus();
	public: virtual void OnReceiveShowPlaySceneInterface();
	public: virtual void OnReceiveShowRefineryCancelInterface();
	public: virtual void OnReceiveShowRefineryInterface();
	public: virtual void OnReceiveSiegeAttackerList(L2ParamStack&);
	public: virtual void OnReceiveSiegeDefenderList(L2ParamStack&);
	public: virtual void OnReceiveSiegeInfo(L2ParamStack&);
	public: virtual void OnReceiveStartPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveStopPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveSubPledgeCreated(L2ParamStack&);
	public: virtual void OnReceiveSurrenderPersonally(L2ParamStack&);
	public: virtual void OnReceiveSurrenderPledgeWar(L2ParamStack&);
	public: virtual void OnReceiveTradeDemand(L2ParamStack&);
	public: virtual void OnReceiveTradeDoneMsg(INT);
	public: virtual void OnReceiveTradePressOtherOk();
	public: virtual void OnReceiveTradeStart(INT);
	public: virtual void OnReceiveTradeUpdate(INT,struct ItemInfo&);
	public: virtual void OnReceiveUpdateItemList(INT,struct ItemInfo&);
	public: virtual void OnReceiveUseSharedGroupItem(INT,INT,INT,INT);
	public: virtual void OnReceiveVersionCheck(L2ParamStack&);
	public: virtual void OnReceiveWareHouseDonePacket(L2ParamStack&);
	public: virtual void OnReceiveWidthdrawalPledge(L2ParamStack&);
	public: virtual void OnReceiveWithdrawAlly(L2ParamStack&);
	public: virtual void OnReceiveWithdrawalParty(L2ParamStack&);
	public: virtual void OnRedSky(INT);
	public: virtual void OnRegenStatus(INT,INT,INT,double);
	public: virtual void OnRequestTimeCheckPacket(L2ParamStack&);
	public: virtual void OnRestartResponse(L2ParamStack&);
	public: virtual void OnSSQInfo(char,char);
	public: virtual void OnSay2(L2ParamStack&);
	public: virtual void OnSelectItemToEnchant(INT);
	public: virtual void OnSendManorList(L2ParamStack*);
	public: virtual void OnServerClose(INT);
	public: virtual void OnSetSSQMainEvent(L2ParamStack&);
	public: virtual void OnSetSSQPreStatus(L2ParamStack&);
	public: virtual void OnSetSSQSealStatus(L2ParamStack&);
	public: virtual void OnSetSSQStatus(L2ParamStack&);
	public: virtual void OnSetupGaugePacket(L2ParamStack&);
	public: virtual void OnShowCalc(INT);
	public: virtual void OnShowCropInfo(L2ParamStack*);
	public: virtual void OnShowCropSetting(L2ParamStack*);
	public: virtual void OnShowMagicWnd();
	public: virtual void OnShowManorDefaultInfo(L2ParamStack*);
	public: virtual void OnShowMinimap(INT);
	public: virtual void OnShowPetNameBtn(INT);
	public: virtual void OnShowPetPartyWnd(INT);
	public: virtual void OnShowPetStatusWnd(INT);
	public: virtual void OnShowProcureCropDetail(L2ParamStack*);
	public: virtual void OnShowQuestInfo(L2ParamStack&);
	public: virtual void OnShowQuestMark(L2ParamStack&);
	public: virtual void OnShowSeedInfo(L2ParamStack*);
	public: virtual void OnShowSeedSetting(L2ParamStack*);
	public: virtual void OnShowSellCropList(L2ParamStack*);
	public: virtual void OnShowSkillWnd();
	public: virtual void OnShowTrainInfoWnd(L2ParamStack&);
	public: virtual void OnShowTrainListWnd(L2ParamStack&);
	public: virtual void OnShowXMasSeal(INT);
	public: virtual void OnShowboardPacket(bool,L2ParamStack&);
	public: virtual void OnSkillCoolTimePacket(L2ParamStack&);
	public: virtual void OnSkillCoolTimeReset(L2ParamStack&);
	public: virtual void OnSkillListPacket(L2ParamStack&);
	public: virtual void OnSnoop(L2ParamStack&);
	public: virtual void OnStartAllianceWar(L2ParamStack&);
	public: virtual void OnStartPartyMatch();
	public: virtual void OnStartPrivateStoreBuyList(L2ParamStack&);
	public: virtual void OnStartPrivateStoreBuyManageList(L2ParamStack&);
	public: virtual void OnStartPrivateStoreList(L2ParamStack&);
	public: virtual void OnStartPrivateStoreManageList(L2ParamStack&);
	public: virtual void OnStartSSQMainEvent();
	public: virtual void OnStopAllianceWar(L2ParamStack&);
	public: virtual void OnUpdateEquipItem(L2ParamStack&);
	public: virtual void OnUpdateL2Friend(INT,INT,TCHAR*,INT,INT);
	public: virtual void OnUpdateL2FriendStatus(INT,TCHAR*,INT);
	public: virtual void OnUpdatePetShortCutItem(INT);
	public: virtual void OnUpdatePlayerInfo(L2ParamStack&);
	public: virtual void OnUpdatePledgeMember(L2ParamStack&);
	public: virtual void OnUpdateShortCutItem(INT);
	public: virtual void OnVehicleStartPacket(L2ParamStack&);
	public: virtual void PaINTProgress();
	public: virtual void ReceiveHennaEquipList(INT,INT);
	public: virtual void ReceiveHennaInfo(struct HennaInfo,INT);
	public: virtual void ReceiveHennaItemInfo(struct HennaInfo,INT);
	public: virtual void ReceiveHennaUnequipItemInfo(struct HennaInfo,INT);
	public: virtual void ReceiveHennaUnequipList(INT,INT);
	public: virtual void ReceiveMacroListInfo(char,char,struct MacroInfo,char,INT);
	public: virtual void ReceiveRecipeItemMakeInfo(L2ParamStack&);
	public: virtual void ReceiveRecipeShopItemInfo(INT,INT,INT,INT,INT,INT);
	public: virtual void ReceiveRecipeShopManageList(INT,INT,INT);
	public: virtual void ReceiveRecipeShopSellList(INT,INT,INT,INT);
	public: virtual void SaveGame(INT);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetClientTravel(UPlayer*,const TCHAR*,INT,enum ETravelType);
	public: virtual void SetProgress(const TCHAR*,const TCHAR*,FLOAT);
	public: virtual void Tick(FLOAT);
	public: virtual void UnClick(UViewport*,DWORD,INT,INT);
	public: virtual void UpdateChatWndStatus();
	public: virtual void UpdateConnectingMessage();
	public: virtual void UpdatePetInventoryItem(INT,struct ItemInfo&);
	public: virtual ~UGameEngine();
	public: void AddMD5(const TCHAR*,const TCHAR*,INT);
	public: void AdjustPawnLocation(APawn*,FVector);
	public: void AttachLevel(ULevel*,ULevel*,FVector*);
	public: void AuthorizeClient(ULevel*);
	public: void CheckPurgeLevel(FVector,INT);
	public: void DefaultMD5();
	public: void DetachLevel(ULevel*,INT,INT);
	public: void DetachLevelWithAllSubLevel(ULevel*);
	public: void EndLoadSWLevel(ULevel*);
	public: void FadeUpdate(FLOAT);
	public: void FindMouseTargetObject(UViewport*,FCameraSceneNode*);
	public: void FinishRemain();
	public: void FixUpLevel();
	public: void GetSWMapXY(FVector,INT&,INT&);
	public: void GetSWMapXY(INT,INT,INT&,INT&);
	public: void InitClick();
	public: void L2CollectGarbage(DWORD);
	public: void L2EventTrigger(INT,INT);
	public: void L2PurgeGarbage();
	public: void L2SerializeRootSet(FArchive&,DWORD,DWORD);
	public: void L2ThrCollectGarbage(DWORD);
	public: void L2_Teleport(AActor*,FVector,INT,INT,INT);
	public: void ModifyGlobalClippingRange(FLOAT);
	public: void OnAddVIPItemList(INT,INT,INT,INT,INT,INT,INT,INT,INT,INT,INT,INT);
	public: void OnAddVIPNeedItemList(INT,INT,INT,INT,INT,INT,INT,INT);
	public: void OnColosseumFenceTest(FVector,INT,INT,enum ColosseumFenceState);
	public: void OnGameGuardQuery(DWORD,DWORD,DWORD,DWORD,INT);
	public: void OnSetSummonRemainTime(INT,INT);
	public: void OnSetVIPShopID(INT);
	public: void OnSpawnPc(INT);
	public: void OnVIPItemListEnd();
	public: void RenderCameraEffect(FCameraSceneNode*);
	public: void SaveMD5Database();
	public: void ScreenFadeBlink(FLOAT,FColor,FLOAT,FLOAT);
	public: void ScreenFadeDone(INT,INT);
	public: void ScreenFadeIn(FLOAT,INT);
	public: void ScreenFadeOut(FLOAT,FColor,INT);
	public: void ServerUpdateMD5();
	public: void SetLastDeltaSeconds(FLOAT);
	public: void StartCommandMacro(TCHAR*);
	public: void TickCommandMacro(FLOAT);
UGlowEffect
	public: INT AspectRender(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: INT BloomRender(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*,FLOAT);
	public: INT Blur1Render(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: INT Blur2Render(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: INT BlurRender(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: INT BrightPassFilter1Render(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: INT BrightPassFilter2Render(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: INT BrightPassFilterRender(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: INT CombineRender(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*,FRenderTarget*);
	public: INT DownFilter4Render(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: INT PowRender(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: INT UpFilterRender(UViewport*,FRenderInterface*,FRenderTarget*,FRenderTarget*);
	public: UGlowEffect();
	public: UGlowEffect(UGlowEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Destroy();
	public: virtual void PostRender(UViewport*,FRenderInterface*);
	public: virtual void PreRender(UViewport*,FRenderInterface*);
	public: virtual ~UGlowEffect();
	public: void UpdateGlowEffectParms();
UGlowModifier
	public: UGlowModifier();
	public: UGlowModifier(UGlowModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT RequiresSortingEx(FDynamicActor*);
	public: virtual ~UGlowModifier();
UHDREffect
	public: INT DownFilter4Render(FRenderInterface*,FRenderTarget*,FRenderTarget*,INT);
	public: UHDREffect();
	public: UHDREffect(UHDREffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Destroy();
	public: virtual void PostRender(UViewport*,FRenderInterface*);
	public: virtual void PreRender(UViewport*,FRenderInterface*);
	public: virtual ~UHDREffect();
	public: void UpdateParams();
UI3DL2Listener
	public: UI3DL2Listener();
	public: UI3DL2Listener(UI3DL2Listener const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~UI3DL2Listener();
UIndexBuffer
	public: UIndexBuffer();
	public: UIndexBuffer(UIndexBuffer const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UIndexBuffer();
UInput
	private: static const TCHAR* __cdecl StaticConfigName();
	protected: virtual FLOAT* FindAxisName(AActor*,const TCHAR*)const;
	protected: virtual unsigned char* FindButtonName(AActor*,const TCHAR*)const;
	protected: virtual void ExecInputCommands(const TCHAR*,FOutputDevice&);
	public: FLOAT GetInputDelta();
	public: UInput();
	public: UInput(UInput const&);
	public: enum EInputAction GetInputAction();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: static void __cdecl StaticInitInput();
	public: unsigned char ArrowKeyDown();
	public: unsigned char KeyDown(INT);
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT FindKeyName(const TCHAR*,enum EInputKey&)const;
	public: virtual INT PreProcess(enum EInputKey,enum EInputAction,FLOAT);
	public: virtual INT Process(FOutputDevice&,enum EInputKey,enum EInputAction,FLOAT);
	public: virtual const TCHAR* GetKeyName(enum EInputKey)const;
	public: virtual const TCHAR* GetLocalizedKeyName(enum EInputKey)const;
	public: virtual void DirectAxis(enum EInputKey,FLOAT,FLOAT);
	public: virtual void Init(UViewport*);
	public: virtual void ReadInput(FLOAT,FOutputDevice&);
	public: virtual void ResetInput();
	public: virtual void Serialize(FArchive&);
	public: virtual ~UInput();
	public: void ExecJoyPad(const TCHAR*);
	public: void SetInputAction(enum EInputAction,FLOAT);
	public: void StaticConstructor();
UInteraction
	public: UInteraction();
	public: UInteraction(UInteraction const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT NativeKeyEvent(unsigned char&,unsigned char&,FLOAT);
	public: virtual INT NativeKeyType(unsigned char&,unsigned short);
	public: virtual void NativeMessage(FString,FLOAT);
	public: virtual void NativePostRender(UCanvas*);
	public: virtual void NativePreRender(UCanvas*);
	public: virtual void NativeTick(FLOAT);
	public: virtual ~UInteraction();
	public: void eventInitialized();
	public: void execConsoleCommand(struct FFrame&,void* const);
	public: void execInitialize(struct FFrame&,void* const);
	public: void execScreenToWorld(struct FFrame&,void* const);
	public: void execWorldToScreen(struct FFrame&,void* const);
UInteractionMaster
	public: INT Exec(const TCHAR*,FOutputDevice&);
	public: INT MasterProcessKeyEvent(enum EInputKey,enum EInputAction,FLOAT);
	public: INT MasterProcessKeyType(enum EInputKey,unsigned short);
	public: UInteraction* eventAddInteraction(FString const&,UPlayer*);
	public: UInteractionMaster();
	public: UInteractionMaster(UInteractionMaster const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UInteractionMaster();
	public: void DisplayCopyright();
	public: void MasterProcessMessage(FString const&,FLOAT);
	public: void MasterProcessPostRender(UCanvas*);
	public: void MasterProcessPreRender(UCanvas*);
	public: void MasterProcessTick(FLOAT);
	public: void eventRemoveInteraction(UInteraction*);
	public: void eventSetFocusTo(UInteraction*,UPlayer*);
	public: void execTravel(struct FFrame&,void* const);
UInteractions
	protected: UInteractions();
	public: UInteractions(UInteractions const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UInteractions();
UKMeshProps
	const TCHAR* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
	public: UKMeshProps();
	public: UKMeshProps(UKMeshProps const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UKMeshProps();
UKarmaParams
	public: UKarmaParams();
	public: UKarmaParams(UKarmaParams const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UKarmaParams();
UKarmaParamsCollision
	protected: UKarmaParamsCollision();
	public: UKarmaParamsCollision(UKarmaParamsCollision const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UKarmaParamsCollision();
UKarmaParamsRBFull
	protected: UKarmaParamsRBFull();
	public: UKarmaParamsRBFull(UKarmaParamsRBFull const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UKarmaParamsRBFull();
UKarmaParamsSkel
	protected: UKarmaParamsSkel();
	public: UKarmaParamsSkel(UKarmaParamsSkel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UKarmaParamsSkel();
UL2ColorModifier
	protected: UL2ColorModifier();
	public: UL2ColorModifier(UL2ColorModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UL2ColorModifier();
UL2ConsoleWnd
	public: INT IsShowRadarTime();
	public: UL2ConsoleWnd();
	public: UL2ConsoleWnd(UL2ConsoleWnd const&);
	public: enum L2ConsoleState GetState();
	public: static UClass* __cdecl StaticClass();
	public: virtual void DefaultCharacterStop(INT);
	public: virtual void DefaultCharacterTurn(INT,FLOAT);
	public: virtual void DestroyDefaultCharacter();
	public: virtual void ExecLobbyEvent(TCHAR*,INT);
	public: virtual void InsertSelectCharacterInfo(INT,struct User);
	public: virtual void L2KeyRemapping(unsigned INT&,unsigned INT&,long&);
	public: virtual void LoadDefaultCharacterInfo();
	public: virtual void MoveCameraByCharacter(enum RaceType,enum ClassType,enum L2GenderType);
	public: virtual void MoveCameraByState(enum L2ConsoleState,enum L2ConsoleState);
	public: virtual void PlayIntroMusic();
	public: virtual void ResetDefaultCharacterYaw(INT);
	public: virtual void ResetSelectCharacterInfo();
	public: virtual void RestoreLobbyMusic();
	public: virtual void SelectedCharacterNum(INT);
	public: virtual void SetCurrentMakingRace(INT);
	public: virtual void ShowAllDefaultCharacter();
	public: virtual void ShowOnlyOneDefaultCharacter(INT);
	public: virtual void SpawnDefaultCharacter();
	public: virtual void SpawnDefaultCharacter(INT);
	public: virtual void StopIntroMusic();
	public: virtual void Tick(FLOAT);
	public: virtual ~UL2ConsoleWnd();
	public: void SetShowRadarTime(INT);
	public: void SetState(enum L2ConsoleState);
UL2Font
	public: UL2Font();
	public: UL2Font(UL2Font const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual ~UL2Font();
UL2NEnvLight
	public: UL2NEnvLight();
	public: UL2NEnvLight(UL2NEnvLight const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void GetActorAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetBSPAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetMoonColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetMoonScale(FLOAT,FLOAT&);
	public: virtual void GetSkyBoxColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetStaticMeshAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetSunColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetSunScale(FLOAT,FLOAT&);
	public: virtual void GetTerrainAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void Load(const TCHAR*);
	public: virtual void UpdateNTime(FLOAT);
	public: virtual ~UL2NEnvLight();
UL2NEnvManager
	public: DWORD GetSecond();
	public: FLOAT CalcEnvDelta(FLOAT);
	public: FLOAT GetEnvBrightness(FLOAT,FLOAT,FLOAT,FLOAT);
	public: FVector GetSunLightDirection(FLOAT);
	public: INT GetHour();
	public: INT GetMin();
	public: INT GetNTimeRatio();
	public: INT GetNumCloud();
	public: INT GetNumHazeRing();
	public: INT IsDay();
	public: INT IsSoundDay();
	public: INT IsSoundNight();
	public: TCHAR* GetCloudName(INT);
	public: TCHAR* GetHazeRingName(INT);
	public: UL2NEnvManager();
	public: UL2NEnvManager(UL2NEnvManager const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetBrightness_HSVActorSunLight(FLOAT);
	public: virtual FLOAT GetBrightness_HSVBSPSunLight(FLOAT);
	public: virtual FLOAT GetBrightness_HSVStaticMeshSunLight(FLOAT);
	public: virtual FLOAT GetBrightness_HSVTerrainSunLight(FLOAT);
	public: virtual void GetActorAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetBSPAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetBaseColorPlane_HSVActorSunLight(FLOAT,FPlane&);
	public: virtual void GetBaseColorPlane_HSVBSPSunLight(FLOAT,FPlane&);
	public: virtual void GetBaseColorPlane_HSVStaticMeshSunLight(FLOAT,FPlane&);
	public: virtual void GetBaseColorPlane_HSVTerrainSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVActorSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVBSPSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVStaticMeshSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVTerrainSunLight(FLOAT,FPlane&);
	public: virtual void GetMoonColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetMoonScale(FLOAT,FLOAT&);
	public: virtual void GetSkyBoxColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetStaticMeshAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetSunColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void GetSunScale(FLOAT,FLOAT&);
	public: virtual void GetTerrainAmbientColor(FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: virtual void Load(const TCHAR*);
	public: virtual void UpdateNTime(FLOAT);
	public: virtual ~UL2NEnvManager();
	public: void ChangeEnv(char,char,FLOAT,FLOAT,FLOAT,FLOAT,INT);
	public: void Clear();
	public: void DecreaseNTimeRatio(INT&);
	public: void GetEnvColor(FColor const&,FColor const&,FColor const&,FLOAT,unsigned char&,unsigned char&,unsigned char&);
	public: void GetEnvColorPlane(FPlane const&,FPlane const&,FPlane const&,FLOAT,FPlane&);
	public: void GetMoonModifierInfo(FLOAT,FLOAT&,FLOAT&,FLOAT&);
	public: void GetSunModifierInfo(FLOAT,FLOAT&,FLOAT&,FLOAT&);
	public: void IncreaseNTimeRatio(INT&);
	public: void SetNTime(unsigned char&,unsigned char&,FLOAT&);
	public: void SetNTimeRatio(INT&);
	public: void SetOrigin(FVector);
	public: void SetShadowTick(INT);
	public: void SetTimeToLobbyTime();
UL2NTimeLight
	public: UL2NTimeLight();
	public: UL2NTimeLight(UL2NTimeLight const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetBrightness_HSVActorSunLight(FLOAT);
	public: virtual FLOAT GetBrightness_HSVBSPSunLight(FLOAT);
	public: virtual FLOAT GetBrightness_HSVStaticMeshSunLight(FLOAT);
	public: virtual FLOAT GetBrightness_HSVTerrainSunLight(FLOAT);
	public: virtual void GetBaseColorPlane_HSVActorSunLight(FLOAT,FPlane&);
	public: virtual void GetBaseColorPlane_HSVBSPSunLight(FLOAT,FPlane&);
	public: virtual void GetBaseColorPlane_HSVStaticMeshSunLight(FLOAT,FPlane&);
	public: virtual void GetBaseColorPlane_HSVTerrainSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVActorSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVBSPSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVStaticMeshSunLight(FLOAT,FPlane&);
	public: virtual void GetColorPlane_HSVTerrainSunLight(FLOAT,FPlane&);
	public: virtual void Load(const TCHAR*);
	public: virtual void UpdateNTime(FLOAT);
	public: virtual ~UL2NTimeLight();
UL2NetHandler
	public: UL2NetHandler();
	public: UL2NetHandler(UL2NetHandler const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual void AnswerJoinPartyRoom(L2ParamStack&);
	public: virtual void RequestAskJoinPartyRoom(L2ParamStack&);
	public: virtual void RequestAutoSoulShot(L2ParamStack&);
	public: virtual void RequestConfirmCancelItem(INT);
	public: virtual void RequestConfirmGemStone(INT,INT,INT,INT);
	public: virtual void RequestConfirmRefinerItem(INT,INT);
	public: virtual void RequestConfirmTargetItem(INT);
	public: virtual void RequestDismissPartyRoom(L2ParamStack&);
	public: virtual void RequestDuelAnswerStart(L2ParamStack&);
	public: virtual void RequestDuelStart(L2ParamStack&);
	public: virtual void RequestDuelSurrender(L2ParamStack&);
	public: virtual void RequestExChangeName(L2ParamStack&);
	public: virtual void RequestExFishRanking();
	public: virtual void RequestExitPartyMatchingWaitingRoom(L2ParamStack&);
	public: virtual void RequestHandOverPartyMaster(L2ParamStack&);
	public: virtual void RequestJoinPartyRoom(L2ParamStack&);
	public: virtual void RequestListPartyMatchingWaitingRoom(L2ParamStack&);
	public: virtual void RequestListPartyWating(L2ParamStack&);
	public: virtual void RequestManagePartyRoom(L2ParamStack&);
	public: virtual void RequestManorList();
	public: virtual void RequestOlympiadMatchList();
	public: virtual void RequestOlympiadObserverEnd();
	public: virtual void RequestOustFromPartyRoom(L2ParamStack&);
	public: virtual void RequestProcureCropList(L2ParamStack*);
	public: virtual void RequestRefine(INT,INT,INT,INT);
	public: virtual void RequestRefineCancel(INT);
	public: virtual void RequestSetCrop(L2ParamStack*);
	public: virtual void RequestSetSeed(L2ParamStack*);
	public: virtual void RequestWithdrawPartyRoom(L2ParamStack&);
	public: virtual void RequestWriteHeroWords(FString);
	public: virtual ~UL2NetHandler();
UL2OrcMove
	public: UL2OrcMove();
	public: UL2OrcMove(UL2OrcMove const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual ~UL2OrcMove();
UL2TextureFactory
	public: UL2TextureFactory();
	public: UL2TextureFactory(UL2TextureFactory const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual UObject* FactoryCreateBinary(UClass*,UObject*,FName,DWORD,UObject*,const TCHAR*,unsigned char const*&,unsigned char const*,FFeedbackContext*);
	public: virtual ~UL2TextureFactory();
	public: void StaticConstructor();
ULevel
	const TCHAR* const `public: INT GetActorIndex(AActor*)'::`3'::__FUNC_NAME__;
	const TCHAR* const `public: INT GetLevelObjectIndex(ULevelObject*)'::`3'::__FUNC_NAME__;
	protected: ULevel();
	public: ABrush* Brush();
	public: ALevelInfo* GetLevelInfo();
	public: ATerrainInfo* GetSWTerrainInfo(FVector const&);
	public: ATerrainInfo* GetTerrainInfo();
	public: AZoneInfo* GetZoneActor(INT);
	public: INT DeleteL2EventActors(AActor*);
	public: INT EditorDestroyActor(AActor*);
	public: INT EndLoadSWLevel(INT);
	public: INT GetActorIndex(AActor*);
	public: INT GetLevelObjectIndex(ULevelObject*);
	public: INT LoadActors(INT);
	public: INT LoadCleanup(INT);
	public: INT PostloadObjects(INT);
	public: INT PreloadObjects(INT);
	public: INT ToFloor(AActor*,INT,AActor*);
	public: INT _L2_DestroyActor(AActor*);
	public: ULevel(UEngine*,INT);
	public: ULevel(ULevel const&);
	public: ULevel* GetCurrentSWLevel(FVector const&);
	public: ULevel* GetRemovalSWLevel();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* FindActorWithCreatureID(INT);
	public: virtual AActor* SpawnActor(UClass*,FName,FVector,FRotator,AActor*,INT,INT,AActor*,APawn*);
	public: virtual ABrush* SpawnBrush();
	public: virtual APlayerController* SpawnPlayActor(UPlayer*,enum ENetRole,FURL const&,FString&);
	public: virtual FLOAT CalculateRadiusMultiplier(INT,INT);
	public: virtual INT CheckEncroachment(AActor*,FVector,FRotator,INT);
	public: virtual INT CheckSlice(FVector&,FVector,INT&);
	public: virtual INT DestroyActor(AActor*,INT);
	public: virtual INT DestroyLevelObject(ULevelObject*);
	public: virtual INT EncroachingWorldGeometry(struct FCheckResult&,FVector,FVector,DWORD,ALevelInfo*);
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT FarMoveActor(AActor*,FVector,INT,INT,INT);
	public: virtual INT FindSpot(FVector,FVector&);
	public: virtual INT IsAudibleAt(FVector,FVector,AActor*,enum ESoundOcclusion);
	public: virtual INT IsPaused();
	public: virtual INT IsServer();
	public: virtual INT L2SingleLineCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,DWORD,FVector);
	public: virtual INT Listen(FString&);
	public: virtual INT MoveActor(AActor*,FVector,FRotator,struct FCheckResult&,INT,INT,INT,INT);
	public: virtual INT NotifyAcceptingChannel(UChannel*);
	public: virtual INT NotifySendingFile(UNetConnection*,FGuid);
	public: virtual INT ServerTickClient(UNetConnection*,FLOAT);
	public: virtual INT SingleLineCheck(struct FCheckResult&,AActor*,FVector const&,FVector const&,DWORD,FVector);
	public: virtual INT SinglePoINTCheck(struct FCheckResult&,FVector,FVector,DWORD,ALevelInfo*,INT);
	public: virtual INT TickDemoPlayback(FLOAT);
	public: virtual INT TickDemoRecord(FLOAT);
	public: virtual ULevel* NotifyGetLevel();
	public: virtual ULevelObject* SpawnLevelObject(UClass*,FName,FVector,ULevelObject*);
	public: virtual enum EAcceptConnection NotifyAcceptingConnection();
	public: virtual struct FCheckResult* GetPawnListExtent(FMemStack&,INT,INT,INT,INT,INT);
	public: virtual struct FCheckResult* GetPawnListExtent2(FMemStack&,AActor*,FVector const&,FVector const&,FVector);
	public: virtual struct FCheckResult* L2MultiLineCheck(FMemStack&,FVector,FVector,FVector,ALevelInfo*,DWORD,AActor*);
	public: virtual struct FCheckResult* MultiLineCheck(FMemStack&,FVector,FVector,FVector,ALevelInfo*,DWORD,AActor*);
	public: virtual struct FCheckResult* MultiPoINTCheck(FMemStack&,FVector,FVector,DWORD,ALevelInfo*,INT,INT,INT);
	public: virtual void BuildRenderData();
	public: virtual void CleanupDestroyed(INT);
	public: virtual void CleanupDestroyedLevelObject(INT);
	public: virtual void CompactActors();
	public: virtual void CompactLevelObjects();
	public: virtual void Destroy();
	public: virtual void DetailChange(enum EDetailMode);
	public: virtual void L2TickNetClient(FLOAT);
	public: virtual void Modify(INT);
	public: virtual void NotifyAcceptedConnection(UNetConnection*);
	public: virtual void NotifyReceivedFile(UNetConnection*,INT,const TCHAR*,INT);
	public: virtual void NotifyReceivedText(UNetConnection*,const TCHAR*);
	public: virtual void PostLoad();
	public: virtual void ReconcileActors();
	public: virtual void RememberActors();
	public: virtual void ResetActorStaticLight();
	public: virtual void Serialize(FArchive&);
	public: virtual void SetActorCollision(INT,INT);
	public: virtual void ShrinkLevel();
	public: virtual void SpawnViewActor(UViewport*);
	public: virtual void Tick(enum ELevelTick,FLOAT);
	public: virtual void TickNetClient(FLOAT);
	public: virtual void TickNetServer(FLOAT);
	public: virtual void UpdateTime(ALevelInfo*);
	public: virtual void WelcomePlayer(UNetConnection*,TCHAR*);
	public: virtual ~ULevel();
	public: void AddSWLevel(ULevel*,FVector*);
	public: void DeleteAllL2EventActors();
	public: void DeleteSWLevel(ULevel*);
	public: void ExecL2EventActors(FName,FVector,FLOAT,FLOAT);
	public: void Load();
	public: void UpdateTerrainArrays();
	public: void _L2_SpawnActor(AActor*);
ULevelBase
	protected: ULevelBase();
	public: ULevelBase(UEngine*,FURL const&);
	public: ULevelBase(ULevelBase const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual void Destroy();
	public: virtual void NotifyProgress(const TCHAR*,const TCHAR*,FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~ULevelBase();
	public: void AddL2AvtActors(AActor*);
	public: void AddL2VehicleInfo(AActor*);
	public: void DeleteL2AvtActors(AActor*);
	public: void DeleteL2VehicleInfo(AActor*);
ULevelObject
	public: INT IsHiddenEd();
	public: ULevelObject();
	public: ULevelObject(ULevelObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetAmbientVolume(FLOAT);
	public: virtual INT IsAAmbientSoundObject();
	public: virtual void RenderEditorInfo(FLevelSceneNode*,FRenderInterface*);
	public: virtual void RenderEditorSelected(FLevelSceneNode*,FRenderInterface*);
	public: virtual ~ULevelObject();
	public: void Render(FLevelSceneNode*,FRenderInterface*);
ULevelSummary
	const TCHAR* const `public: virtual void PostLoad()'::`3'::__FUNC_NAME__;
	public: ULevelSummary();
	public: ULevelSummary(ULevelSummary const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostLoad();
	public: virtual ~ULevelSummary();
ULodMesh
	public: ULodMesh();
	public: ULodMesh(ULodMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT MemFootprINT(INT);
	public: virtual UClass* ExtraMeshGetInstanceClass();
	public: virtual UClass* MeshGetInstanceClass();
	public: virtual UClass* SubMeshGetInstanceClass();
	public: virtual void Serialize(FArchive&);
	public: virtual ~ULodMesh();
ULodMeshInstance
	public: ULodMeshInstance();
	public: ULodMeshInstance(ULodMeshInstance const&);
	public: UMesh* GetLeftArmMesh();
	public: UMesh* GetLeftHandMesh();
	public: UMesh* GetRightArmMesh();
	public: UMesh* GetRightHandMesh();
	public: UMesh* GetSubMesh(INT&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FMeshAnimSeq* GetAnimSeq(FName);
	public: virtual AActor* GetActor();
	public: virtual INT ActiveVertStreamSize();
	public: virtual INT GetStatus();
	public: virtual UMaterial* GetMaterial(INT,AActor*);
	public: virtual UMesh* GetMesh();
	public: virtual void GetFrame(AActor*,FLevelSceneNode*,FVector*,INT,INT&,DWORD);
	public: virtual void GetMeshVerts(AActor*,FVector*,INT,INT&);
	public: virtual void MeshSkinVertsCallback(void*);
	public: virtual void PoseFrame(INT,FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetActor(AActor*);
	public: virtual void SetMesh(UMesh*);
	public: virtual void SetStatus(INT);
	public: virtual ~ULodMeshInstance();
UMatAction
	public: UMatAction();
	public: UMatAction(UMatAction const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual ~UMatAction();
UMatObject
	protected: UMatObject();
	public: UMatObject(UMatObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UMatObject();
UMatSubAction
	public: FString GetStatusDesc();
	public: UMatSubAction();
	public: UMatSubAction(UMatSubAction const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT IsRunning();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual void PostEditChange();
	public: virtual ~UMatSubAction();
UMaterial
	public: UMaterial();
	public: UMaterial(UMaterial const&);
	public: UMaterial* ConvertPolyFlagsToMaterial(UMaterial*,DWORD);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl ClearFallbacks();
	public: virtual INT GetSortingLevel();
	public: virtual INT GetValidated();
	public: virtual INT HasFallback();
	public: virtual INT IsLoaded();
	public: virtual INT IsTransparent();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual INT RequiresNormal();
	public: virtual INT RequiresSorting();
	public: virtual INT RequiresSortingEx(FDynamicActor*);
	public: virtual UMaterial* CheckFallback();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetValidated(INT);
	public: virtual ~UMaterial();
UMaterialSequence
	public: UMaterialSequence();
	public: UMaterialSequence(UMaterialSequence const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UMaterialSequence();
	public: void Reset();
	public: void Trigger();
UMaterialSwitch
	public: UMaterialSwitch();
	public: UMaterialSwitch(UMaterialSwitch const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~UMaterialSwitch();
UMesh
	public: UMesh();
	public: UMesh(UMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual UClass* ExtraMeshGetInstanceClass();
	public: virtual UClass* MeshGetInstanceClass();
	public: virtual UClass* SubMeshGetInstanceClass();
	public: virtual UMeshInstance* CloakCoverMeshGetInstance(AActor*);
	public: virtual UMeshInstance* CloakMeshGetInstance(AActor*);
	public: virtual UMeshInstance* ExtraMeshGetInstance(AActor*,INT,INT,UMaterial*);
	public: virtual UMeshInstance* LeftArmMeshGetInstance(AActor*);
	public: virtual UMeshInstance* LeftHandMeshGetInstance(AActor*);
	public: virtual UMeshInstance* MeshGetInstance(AActor const*);
	public: virtual UMeshInstance* RightArmMeshGetInstance(AActor*);
	public: virtual UMeshInstance* RightHandMeshGetInstance(AActor*);
	public: virtual UMeshInstance* SubMeshGetInstance(AActor*,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UMesh();
UMeshAnimation
	public: UMeshAnimation();
	public: UMeshAnimation(UMeshAnimation const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT AdjustMovement(FName,FCoords);
	public: virtual INT LoadMovementData(FName);
	public: virtual INT MemFootprINT();
	public: virtual INT SequenceMemFootprINT(FName);
	public: virtual MotionChunk* GetMovement(FName);
	public: virtual struct FMeshAnimSeq* GetAnimSeq(FName);
	public: virtual void ConformBones(UMeshAnimation*,USkeletalMesh*);
	public: virtual void InitForDigestion();
	public: virtual void LoadAllMovement();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual void SortMovesData();
	public: virtual ~UMeshAnimation();
UMeshEmitter
	public: UMeshEmitter();
	public: UMeshEmitter(UMeshEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual void Reset();
	public: virtual ~UMeshEmitter();
UMeshInstance
	public: UMeshInstance();
	public: UMeshInstance(UMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AActor* GetActor();
	public: virtual FBox GetCollisionBoundingBox(AActor const*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FLOAT AnimGetFrameCount(void*);
	public: virtual FLOAT AnimGetNotifyTime(void*,INT);
	public: virtual FLOAT AnimGetRate(void*);
	public: virtual FLOAT GetActiveAnimFrame(INT);
	public: virtual FLOAT GetActiveAnimRate(INT);
	public: virtual FMatrix MeshToWorld(FLOAT);
	public: virtual FName AnimGetGroup(void*);
	public: virtual FName AnimGetName(void*);
	public: virtual FName GetActiveAnimSequence(INT);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual INT ActiveVertStreamSize();
	public: virtual INT AnimForcePose(FName,FLOAT,FLOAT,INT);
	public: virtual INT AnimGetNotifyCount(void*);
	public: virtual INT AnimIsInGroup(void*,FName);
	public: virtual INT AnimStopLooping(INT);
	public: virtual INT FreezeAnimAt(FLOAT,INT);
	public: virtual INT GetAnimCount();
	public: virtual INT GetStatus();
	public: virtual INT IsAnimLooping(INT);
	public: virtual INT IsAnimPastLastFrame(INT);
	public: virtual INT IsAnimTweening(INT);
	public: virtual INT IsAnimating(INT);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector,FVector,FVector,DWORD,DWORD);
	public: virtual INT PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector,FVector,DWORD);
	public: virtual INT StopAnimating();
	public: virtual INT UpdateAnimation(FLOAT);
	public: virtual UAnimNotify* AnimGetNotifyObject(void*,INT);
	public: virtual UMaterial* GetAttachedWeaponTexture(INT,INT,AActor*);
	public: virtual UMaterial* GetMaterial(INT,AActor*);
	public: virtual UMaterial* GetSubMaterial(INT,INT,AActor*);
	public: virtual UMesh* GetMesh();
	public: virtual const TCHAR* AnimGetNotifyText(void*,INT);
	public: virtual void GetFrame(AActor*,FLevelSceneNode*,FVector*,INT,INT&,DWORD);
	public: virtual void MeshBuildBounds();
	public: virtual void MeshSkinVertsCallback(void*);
	public: virtual void PoseFrame(INT,FLOAT);
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*);
	public: virtual void SetActor(AActor*);
	public: virtual void SetAnimFrame(INT,FLOAT,INT);
	public: virtual void SetMesh(UMesh*);
	public: virtual void SetScale(FVector);
	public: virtual void SetStatus(INT);
	public: virtual void SetSubMeshIndex(INT);
	public: virtual void* GetAnimIndexed(INT);
	public: virtual void* GetAnimNamed(FName);
	public: virtual ~UMeshInstance();
UMeshObject
	protected: UMeshObject();
	public: UMeshObject(UMeshObject const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UMeshObject();
UModel
	public: FLOAT FindNearestVertex(FVector const&,FVector&,FLOAT,INT&)const;
	public: INT PotentiallyVisible(INT,INT);
	public: UModel();
	public: UModel(ABrush*,INT);
	public: UModel(UModel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FPoINTRegion PoINTRegion(AZoneInfo*,FVector)const;
	public: unsigned char FastLineCheck(FVector,FVector);
	public: virtual FBox GetCollisionBoundingBox(AActor const*)const;
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FVector GetEncroachCenter(AActor*);
	public: virtual FVector GetEncroachExtent(AActor*);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector,FVector,FVector,DWORD,DWORD);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector,FVector,DWORD);
	public: virtual INT UseCylinderCollision(AActor const*);
	public: virtual void Destroy();
	public: virtual void Illuminate(AActor*,INT);
	public: virtual void PostLoad();
	public: virtual void Rename(const TCHAR*,UObject*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UModel();
	public: void AttachProjector(INT,struct FProjectorRenderInfo*,FPlane*);
	public: void BuildBound();
	public: void BuildRenderData();
	public: void ClearRenderData(URenderDevice*);
	public: void CompressLightmaps();
	public: void EmptyModel(INT,INT);
	public: void Modify(INT);
	public: void ModifyAllSurfs(INT);
	public: void ModifySelectedSurfs(INT);
	public: void ModifySurf(INT,INT);
	public: void PrecomputeSphereFilter(FPlane const&);
	public: void Render(FDynamicActor*,FLevelSceneNode*,FRenderInterface*,INT,FColor);
	public: void ShrinkModel();
	public: void Transform(ABrush*);
UModifier
	public: UModifier();
	public: UModifier(UModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetSortingLevel();
	public: virtual INT IsLoaded();
	public: virtual INT IsTransparent();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual INT RequiresSorting();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual ~UModifier();
UMotionBlur
	public: UMotionBlur();
	public: UMotionBlur(UMotionBlur const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Destroy();
	public: virtual void PostRender(UViewport*,FRenderInterface*);
	public: virtual void PreRender(UViewport*,FRenderInterface*);
	public: virtual ~UMotionBlur();
UNetConnection
	public: INT SendRawBunch(FOutBunch&,INT);
	public: UChannel* CreateChannel(enum EChannelType,INT,INT);
	public: UNetConnection();
	public: UNetConnection(UNetConnection const&);
	public: UNetConnection(UNetDriver*,FURL const&);
	public: UNetDriver* GetDriver();
	public: static UClass* __cdecl StaticClass();
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT IsNetReady(INT);
	public: virtual void AssertValid();
	public: virtual void Destroy();
	public: virtual void FlushNet();
	public: virtual void HandleClientPlayer(APlayerController*);
	public: virtual void InitOut();
	public: virtual void ReadInput(FLOAT);
	public: virtual void SendAck(INT,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual void Serialize(const TCHAR*,enum EName);
	public: virtual void Tick();
	public: virtual ~UNetConnection();
	public: void PostSend();
	public: void PreSend(INT);
	public: void PurgeAcks();
	public: void ReceiveFile(INT);
	public: void ReceivedNak(INT);
	public: void ReceivedPacket(struct FBitReader&);
	public: void ReceivedRawPacket(void*,INT);
	public: void SendPackageMap();
	public: void SetActorDirty(AActor*);
	public: void SlowAssertValid();
UNetDriver
	public: UNetDriver();
	public: UNetDriver(UNetDriver const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT InitConnect(FNetworkNotify*,FURL&,FString&);
	public: virtual INT InitListen(FNetworkNotify*,FURL&,FString&);
	public: virtual INT IsDemoDriver();
	public: virtual void AssertValid();
	public: virtual void Destroy();
	public: virtual void NotifyActorDestroyed(AActor*);
	public: virtual void Serialize(FArchive&);
	public: virtual void TickDispatch(FLOAT);
	public: virtual void TickFlush();
	public: virtual ~UNetDriver();
	public: void StaticConstructor();
UNetworkHandler
	public: UNetworkHandler();
	public: UNetworkHandler(UNetworkHandler const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetDistance(FObjectMap*,FObjectMap*);
	public: virtual FObjectMap* GetNearestObject(INT,FLOAT,INT);
	public: virtual FObjectMap* GetNextObject(INT,FLOAT,INT);
	public: virtual FObjectMap* GetPetNearestObject(INT,FLOAT,INT);
	public: virtual INT AddNetworkQueue(struct NetworkPacket*);
	public: virtual INT DispatchNetworkQueue(struct NetworkPacket**);
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT GetRequestedPledgeID(INT);
	public: virtual INT GetServerID();
	public: virtual INT GetUserOneTimePassword();
	public: virtual INT IsEnemyPledge(INT,INT);
	public: virtual INT IsGNOMatch(INT,FObjectMap*);
	public: virtual INT IsPawnCreatePacket(struct NetworkPacket,INT&);
	public: virtual INT IsSurrender(INT,INT);
	public: virtual INT RL();
	public: virtual INT RequestAddTradeItem(struct ItemInfo);
	public: virtual INT RequestAllyCrest(INT);
	public: virtual INT RequestAllyInfo();
	public: virtual INT RequestAnswerJoinAlly(L2ParamStack&);
	public: virtual INT RequestAnswerJoinParty(L2ParamStack&);
	public: virtual INT RequestAnswerJoinPledge(L2ParamStack&);
	public: virtual INT RequestAuthLogin(TCHAR*,TCHAR*,INT);
	public: virtual INT RequestBBSWrite(L2ParamStack&);
	public: virtual INT RequestBuyItem(L2ParamStack&);
	public: virtual INT RequestBuySeed(L2ParamStack&);
	public: virtual INT RequestBypassToServer(L2ParamStack&);
	public: virtual INT RequestCharacterCreate(struct CharacterInfo);
	public: virtual INT RequestCharacterDelete(INT);
	public: virtual INT RequestCharacterRestore(INT);
	public: virtual INT RequestCreatePledge(L2ParamStack&);
	public: virtual INT RequestDestroyItem(struct ItemInfo);
	public: virtual INT RequestDestroyQuest(INT);
	public: virtual INT RequestDismissAlly();
	public: virtual INT RequestDismissParty(L2ParamStack&);
	public: virtual INT RequestDismissPledge();
	public: virtual INT RequestDropItem(struct ItemInfo,FVector);
	public: virtual INT RequestEnchantItem(INT);
	public: virtual INT RequestEnterWorldPacket(INT,INT*,DWORD,DWORD,DWORD,DWORD);
	public: virtual INT RequestExPledgeCrestLarge(INT);
	public: virtual INT RequestExSetPledgeCrestLarge(INT,char*);
	public: virtual INT RequestFriendAddReply(L2ParamStack&);
	public: virtual INT RequestFriendDel(L2ParamStack&);
	public: virtual INT RequestFriendInvite(L2ParamStack&);
	public: virtual INT RequestFriendList();
	public: virtual INT RequestGMCommand(const TCHAR*,INT);
	public: virtual INT RequestGMList();
	public: virtual INT RequestGameStart(INT,short,INT,INT,INT);
	public: virtual INT RequestGiveNickName(L2ParamStack&);
	public: virtual INT RequestItemList();
	public: virtual INT RequestJoinAlly(L2ParamStack&);
	public: virtual INT RequestJoinParty(L2ParamStack&);
	public: virtual INT RequestJoinPledge(L2ParamStack&);
	public: virtual INT RequestLinkHtml(L2ParamStack&);
	public: virtual INT RequestNewCharacter();
	public: virtual INT RequestOustAlly(L2ParamStack&);
	public: virtual INT RequestOustPartyMember(L2ParamStack&);
	public: virtual INT RequestOustPledgeMember(L2ParamStack&);
	public: virtual INT RequestPetition(TCHAR*,INT);
	public: virtual INT RequestPetitionCancel();
	public: virtual INT RequestPledgeCrest(INT);
	public: virtual INT RequestPledgeExtendedInfo(L2ParamStack&);
	public: virtual INT RequestPledgeInfo(INT);
	public: virtual INT RequestPledgeMemberList();
	public: virtual INT RequestPreviewItem(L2ParamStack&);
	public: virtual INT RequestProcureCrop(L2ParamStack&);
	public: virtual INT RequestQuestList();
	public: virtual INT RequestReplyStartPledgeWar(L2ParamStack&);
	public: virtual INT RequestReplyStopPledgeWar(L2ParamStack&);
	public: virtual INT RequestReplySurrenderPledgeWar(L2ParamStack&);
	public: virtual INT RequestSCCheck(INT,INT);
	public: virtual INT RequestSellItem(L2ParamStack&);
	public: virtual INT RequestServerList();
	public: virtual INT RequestServerLogin(L2ParamStack&);
	public: virtual INT RequestSetAllyCrest(INT,char*);
	public: virtual INT RequestSetPledgeCrest(INT,char*);
	public: virtual INT RequestStartPledgeWar(L2ParamStack&);
	public: virtual INT RequestStopPledgeWar(L2ParamStack&);
	public: virtual INT RequestSurrenderPersonally(L2ParamStack&);
	public: virtual INT RequestSurrenderPledgeWar(L2ParamStack&);
	public: virtual INT RequestTeleport(INT,INT,INT,INT,INT);
	public: virtual INT RequestTrade(INT);
	public: virtual INT RequestTradeDone(INT);
	public: virtual INT RequestTutorialClientEvent(INT);
	public: virtual INT RequestTutorialLinkHtml(L2ParamStack&);
	public: virtual INT RequestTutorialPassCmdToServer(L2ParamStack&);
	public: virtual INT RequestTutorialQuestionMarkPressed(INT);
	public: virtual INT RequestUseItem(L2ParamStack&);
	public: virtual INT RequestWithDrawalParty(L2ParamStack&);
	public: virtual INT RequestWithDrawalPledge();
	public: virtual INT RequestWithdrawAlly();
	public: virtual INT ResponseAuthGameGuard();
	public: virtual TCHAR* GetUserAccount();
	public: virtual TCHAR* GetUserPassword();
	public: virtual UTexture* GetAllianceCrestTexFromAllianceCrestID(INT);
	public: virtual UTexture* GetAllyCrestTex(INT);
	public: virtual UTexture* GetPledgeCrestTex(INT);
	public: virtual UTexture* GetPledgeCrestTexFromPledgeCrestID(INT);
	public: virtual bool IsNotYetLogin();
	public: virtual struct FServerStaticObject* GetStaticObject(INT);
	public: virtual struct FVehicle* GetVehicle(INT);
	public: virtual struct Item* GetItem(INT);
	public: virtual struct Item* GetNearestItem(FLOAT,INT);
	public: virtual struct Item* GetNextItem(FLOAT,INT);
	public: virtual struct Item* GetPetNearestItem(FLOAT,INT);
	public: virtual struct MyQuestInfo& GetQuestList();
	public: virtual struct PetInfo GetPetInfo();
	public: virtual struct PledgeInfo* GetPledgeInfo(INT);
	public: virtual struct User* GetNearestCreature(FLOAT,INT);
	public: virtual struct User* GetNearestEnemy(FLOAT,INT);
	public: virtual struct User* GetNearestFriend(FLOAT,INT);
	public: virtual struct User* GetNearestNPC(FLOAT,INT);
	public: virtual struct User* GetNearestParty(FLOAT,INT);
	public: virtual struct User* GetNextCreature(FLOAT,INT);
	public: virtual struct User* GetNextEnemy(FLOAT,INT);
	public: virtual struct User* GetNextFriend(FLOAT,INT);
	public: virtual struct User* GetNextNPC(FLOAT,INT);
	public: virtual struct User* GetNextParty(FLOAT,INT);
	public: virtual struct User* GetNextPartyUsingJoyPad(FLOAT,INT);
	public: virtual struct User* GetUser(INT);
	public: virtual struct User* GetUser(TCHAR*);
	public: virtual void Action(INT,FVector,INT);
	public: virtual void AddServerPingList(INT,INT,INT);
	public: virtual void AnswerJoinPartyRoom(L2ParamStack&);
	public: virtual void AnswerTradeRequest(L2ParamStack&);
	public: virtual void Atk(INT,FVector,INT);
	public: virtual void AuthReconnect();
	public: virtual void BypassUserCmd(L2ParamStack&);
	public: virtual void CanNotMoveAnymore(AActor*,FVector,INT,INT);
	public: virtual void ChangeMoveType(INT);
	public: virtual void ChangeWaitType(INT);
	public: virtual void ClearObjectMap(struct User*);
	public: virtual void ConfirmDlg(L2ParamStack&);
	public: virtual void ContinueServerClose();
	public: virtual void Destroy();
	public: virtual void EW(INT);
	public: virtual void EndServerPingList();
	public: virtual void FinishRotating(INT);
	public: virtual void GMSnoopEnd(INT);
	public: virtual void GNOManager(FLOAT);
	public: virtual void GetOffVehicle(INT,FVector);
	public: virtual void GetOnVehicle(INT,FVector);
	public: virtual void GetPartyInfoMap(TMap<INT,struct PartyInfo*>*&);
	public: virtual void Init(INT,UGameEngine*);
	public: virtual void MTL(AActor*,FVector,FVector,AActor*,INT);
	public: virtual void MoveBackwardToLocation(FVector,FVector);
	public: virtual void MoveToPawn(INT);
	public: virtual void MoveWithDelta(FVector);
	public: virtual void NetPing(INT);
	public: virtual void PetitionVote(L2ParamStack&);
	public: virtual void RefreshWSAAsyncSelect();
	public: virtual void ReplyGameGuardQuery(DWORD,DWORD,DWORD,DWORD);
	public: virtual void ReplyStartAllianceWar(L2ParamStack&);
	public: virtual void ReplyStopAllianceWar(L2ParamStack&);
	public: virtual void RequestAcquireSkill(L2ParamStack&);
	public: virtual void RequestAcquireSkillInfo(L2ParamStack&);
	public: virtual void RequestActionUse(L2ParamStack&);
	public: virtual void RequestAskJoinPartyRoom(L2ParamStack&);
	public: virtual void RequestAttack(INT,FVector);
	public: virtual void RequestAutoSoulShot(L2ParamStack&);
	public: virtual void RequestBlock(L2ParamStack&);
	public: virtual void RequestCastleSiegeAttackerList(L2ParamStack&);
	public: virtual void RequestCastleSiegeDefenderList(L2ParamStack&);
	public: virtual void RequestCastleSiegeInfo(L2ParamStack&);
	public: virtual void RequestChangePetName(TCHAR*);
	public: virtual void RequestConfirmCancelItem(INT);
	public: virtual void RequestConfirmCastleSiegeWaitingList(L2ParamStack&);
	public: virtual void RequestConfirmGemStone(INT,INT,INT,INT);
	public: virtual void RequestConfirmRefinerItem(INT,INT);
	public: virtual void RequestConfirmTargetItem(INT);
	public: virtual void RequestCrystallizeItem(INT,INT);
	public: virtual void RequestCursedWeaponList();
	public: virtual void RequestCursedWeaponLocation();
	public: virtual void RequestDeleteMacro(L2ParamStack&);
	public: virtual void RequestDismissPartyRoom(L2ParamStack&);
	public: virtual void RequestDropItemFromPet(struct ItemInfo,FVector);
	public: virtual void RequestDuelAnswerStart(L2ParamStack&);
	public: virtual void RequestDuelStart(L2ParamStack&);
	public: virtual void RequestDuelSurrender(L2ParamStack&);
	public: virtual void RequestEquipItem(L2ParamStack&);
	public: virtual void RequestExAcceptJoinMPCC(L2ParamStack&);
	public: virtual void RequestExAskJoinMPCC(L2ParamStack&);
	public: virtual void RequestExChangeName(L2ParamStack&);
	public: virtual void RequestExEnchantSkill(L2ParamStack&);
	public: virtual void RequestExEnchantSkillInfo(L2ParamStack&);
	public: virtual void RequestExFishRanking();
	public: virtual void RequestExMPCCShowPartyMembersInfo(L2ParamStack&);
	public: virtual void RequestExMagicSkillUseGround(L2ParamStack&);
	public: virtual void RequestExOustFromMPCC(L2ParamStack&);
	public: virtual void RequestExitPartyMatchingWaitingRoom(L2ParamStack&);
	public: virtual void RequestGetBossRecord(L2ParamStack&);
	public: virtual void RequestGetItemFromPet(L2ParamStack&);
	public: virtual void RequestGiveItemToPet(L2ParamStack&);
	public: virtual void RequestHandOverPartyMaster(L2ParamStack&);
	public: virtual void RequestHennaEquip(INT);
	public: virtual void RequestHennaItemInfo(INT);
	public: virtual void RequestHennaItemList();
	public: virtual void RequestHennaUnequip(INT);
	public: virtual void RequestHennaUnequipInfo(INT);
	public: virtual void RequestHennaUnequipList();
	public: virtual void RequestJoinCastleSiege(L2ParamStack&);
	public: virtual void RequestJoinPartyRoom(L2ParamStack&);
	public: virtual void RequestListPartyMatchingWaitingRoom(L2ParamStack&);
	public: virtual void RequestListPartyWating(L2ParamStack&);
	public: virtual void RequestMagicItem(L2ParamStack&);
	public: virtual void RequestMagicSkillList(L2ParamStack&);
	public: virtual void RequestMagicSkillUse(L2ParamStack&);
	public: virtual void RequestMakeMacro(L2ParamStack&);
	public: virtual void RequestManagePartyRoom(L2ParamStack&);
	public: virtual void RequestManorList();
	public: virtual void RequestMultiSellChoose(L2ParamStack&);
	public: virtual void RequestObserverEndPacket(L2ParamStack&);
	public: virtual void RequestOlympiadMatchList();
	public: virtual void RequestOlympiadObserverEnd();
	public: virtual void RequestOpenMinimap(L2ParamStack&);
	public: virtual void RequestOustFromPartyRoom(L2ParamStack&);
	public: virtual void RequestPCCafeCouponUse(FString);
	public: virtual void RequestPackageSend(L2ParamStack&);
	public: virtual void RequestPackageSendableItemList(L2ParamStack&);
	public: virtual void RequestPetGetItem(INT);
	public: virtual void RequestPetUseItem(INT);
	public: virtual void RequestPledgeMemberInfo(INT,const TCHAR*);
	public: virtual void RequestPledgeMemberPowerInfo(INT,const TCHAR*);
	public: virtual void RequestPledgePower(INT,INT,unsigned char*);
	public: virtual void RequestPledgePowerGradeList();
	public: virtual void RequestPledgeReorganizeMember(L2ParamStack&);
	public: virtual void RequestPledgeSetAcademyMasterPupil(INT,const TCHAR*,const TCHAR*);
	public: virtual void RequestPledgeSetMemberPowerGrade(const TCHAR*,INT);
	public: virtual void RequestPledgeWarList(INT,INT);
	public: virtual void RequestPrivateStoreBuyList(INT);
	public: virtual void RequestPrivateStoreBuyManage();
	public: virtual void RequestPrivateStoreBuyManageCancel();
	public: virtual void RequestPrivateStoreBuyQuit();
	public: virtual void RequestPrivateStoreList(INT);
	public: virtual void RequestPrivateStoreManage();
	public: virtual void RequestPrivateStoreManageCancel();
	public: virtual void RequestPrivateStoreQuit();
	public: virtual void RequestProcureCropList(L2ParamStack*);
	public: virtual void RequestRecipeBookOpen(L2ParamStack&);
	public: virtual void RequestRecipeItemDelete(INT);
	public: virtual void RequestRecipeItemMakeInfo(INT);
	public: virtual void RequestRecipeItemMakeSelf(INT);
	public: virtual void RequestRecipeShopListSet(L2ParamStack&);
	public: virtual void RequestRecipeShopMakeDo(INT,INT,INT);
	public: virtual void RequestRecipeShopMakeInfo(INT,INT);
	public: virtual void RequestRecipeShopManageCancel();
	public: virtual void RequestRecipeShopManageList();
	public: virtual void RequestRecipeShopManageQuit();
	public: virtual void RequestRecipeShopMessageSet(TCHAR*);
	public: virtual void RequestRecipeShopSellList(INT);
	public: virtual void RequestRefine(INT,INT,INT,INT);
	public: virtual void RequestRefineCancel(INT);
	public: virtual void RequestReload();
	public: virtual void RequestRemainTime();
	public: virtual void RequestRestart(L2ParamStack&);
	public: virtual void RequestRestartPoINT(L2ParamStack&);
	public: virtual void RequestSEKCustom(L2ParamStack&);
	public: virtual void RequestSSQStatus(INT);
	public: virtual void RequestSendL2FriendSay(TCHAR*,TCHAR*);
	public: virtual void RequestSendMsnChatLog(TCHAR*,TCHAR*,INT);
	public: virtual void RequestSetCastleSiegeTime(L2ParamStack&);
	public: virtual void RequestSetCrop(L2ParamStack*);
	public: virtual void RequestSetSeed(L2ParamStack*);
	public: virtual void RequestShortCutDel(L2ParamStack&);
	public: virtual void RequestShortCutReg(L2ParamStack&);
	public: virtual void RequestShortCutUse(L2ParamStack&);
	public: virtual void RequestShowboard(L2ParamStack&);
	public: virtual void RequestSiegeInfo(L2ParamStack&);
	public: virtual void RequestSkillCoolTime();
	public: virtual void RequestSkillItem(L2ParamStack&);
	public: virtual void RequestStartAllianceWar(L2ParamStack&);
	public: virtual void RequestStopAllianceWar(L2ParamStack&);
	public: virtual void RequestSurrenderAllianceWar(L2ParamStack&);
	public: virtual void RequestTargetCancel(L2ParamStack&);
	public: virtual void RequestUnEquipItem(L2ParamStack&);
	public: virtual void RequestWithdrawPartyRoom(L2ParamStack&);
	public: virtual void RequestWriteHeroWords(FString);
	public: virtual void ReviveReply(L2ParamStack&);
	public: virtual void Ride(INT,INT);
	public: virtual void SAP();
	public: virtual void Say(TCHAR*);
	public: virtual void Say2(L2ParamStack&);
	public: virtual void SendBypassBuildCmd(L2ParamStack&);
	public: virtual void SendCharacterInfo(L2ParamStack&);
	public: virtual void SendDestroyItem(INT,INT);
	public: virtual void SendL2ParamSetting(L2ParamStack&);
	public: virtual void SendLogOutPacket();
	public: virtual void SendPrivateStoreBuyBuyList(L2ParamStack&);
	public: virtual void SendPrivateStoreBuyList(L2ParamStack&);
	public: virtual void SendServerStatus(L2ParamStack&);
	public: virtual void SendSummonCmd(L2ParamStack&);
	public: virtual void SendTimeCheckPacket(L2ParamStack&);
	public: virtual void SendWareHouseDepositList(L2ParamStack&);
	public: virtual void SendWareHouseWithdrawList(L2ParamStack&);
	public: virtual void ServerExPacketCountStart();
	public: virtual void ServerExPacketCountStop();
	public: virtual void ServerPacketCountStart();
	public: virtual void ServerPacketCountStop();
	public: virtual void SetImportedAllyCrestID(INT,UTexture*);
	public: virtual void SetImportedPledgeCrestID(INT,UTexture*);
	public: virtual void SetMatchedStore(TCHAR*);
	public: virtual void SetPrivateStoreBuyList(L2ParamStack&);
	public: virtual void SetPrivateStoreBuyMsg(TCHAR*);
	public: virtual void SetPrivateStoreList(L2ParamStack&);
	public: virtual void SetPrivateStoreMsg(TCHAR*);
	public: virtual void ShowQuestList();
	public: virtual void SocialAction(INT);
	public: virtual void StartRotating(INT,INT);
	public: virtual void Tick(FLOAT);
	public: virtual void UpdateLargePledgeCrest(INT,INT);
	public: virtual void ValidatePosition(FVector,INT,INT);
	public: virtual void VoteSociality(INT);
	public: virtual ~UNetworkHandler();
	public: void NotifyQuestMark();
UNullRenderDevice
	public: UNullRenderDevice();
	public: UNullRenderDevice(UNullRenderDevice const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual DWORD GetCreateTextureBytes();
	public: virtual FRenderInterface* GetRenderInterface();
	public: virtual FRenderInterface* Lock(UViewport*,unsigned char*,INT*);
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT GetRefreshRate(INT,INT,INT,INT,INT*);
	public: virtual INT GetRes(INT,INT*,INT*,INT*);
	public: virtual INT Init();
	public: virtual INT IsUseTrilinear();
	public: virtual INT SetRes(UViewport*,INT,INT,INT,INT,INT);
	public: virtual INT SetRes(UViewport*,INT,INT,INT,INT,INT,INT);
	public: virtual INT SupportsTextureFormat(enum ETextureFormat);
	public: virtual struct FRenderCaps* GetRenderCaps();
	public: virtual void DeleteAllTexture();
	public: virtual void Exit(UViewport*);
	public: virtual void Flush(UViewport*);
	public: virtual void FlushResource(unsigned __INT64);
	public: virtual void HoldBackBuffer();
	public: virtual void Present(UViewport*);
	public: virtual void ReLoadPixelShader();
	public: virtual void ReadPixels(UViewport*,FColor*);
	public: virtual void RestoreGamma();
	public: virtual void SetEmulationMode(enum EHardwareEmulationMode);
	public: virtual void SetUseTrilinear(INT);
	public: virtual void Unlock(FRenderInterface*);
	public: virtual void UpdateGamma(UViewport*);
	public: virtual ~UNullRenderDevice();
	public: void StaticConstructor();
UOpacityModifier
	protected: UOpacityModifier();
	public: UOpacityModifier(UOpacityModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UOpacityModifier();
UOrcMove
	public: UOrcMove();
	public: UOrcMove(UOrcMove const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual DWORD GetLocalCRC();
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual char* GetResultVariable();
	public: virtual void CalSearchOrc(char*);
	public: virtual void CalculateCRC32();
	public: virtual void SetLocalCRC(DWORD);
	public: virtual ~UOrcMove();
UPackageCheckInfo
	protected: UPackageCheckInfo();
	public: UPackageCheckInfo(UPackageCheckInfo const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT VerifyID(FString);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UPackageCheckInfo();
UPackageMapLevel
	public: UPackageMapLevel();
	public: UPackageMapLevel(UNetConnection*);
	public: UPackageMapLevel(UPackageMapLevel const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT CanSerializeObject(UObject*);
	public: virtual INT SerializeObject(FArchive&,UClass*,UObject*&);
	public: virtual ~UPackageMapLevel();
UPalette
	public: UPalette();
	public: UPalette(UPalette const&);
	public: UPalette* ReplaceWithExisting();
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char BestMatch(FColor,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UPalette();
	public: void FixPalette();
UParticleEmitter
	public: UParticleEmitter();
	public: UParticleEmitter(UParticleEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT SpawnParticles(FLOAT,FLOAT,FLOAT);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Destroy();
	public: virtual void HandleActorForce(AActor*,FLOAT);
	public: virtual void Initialize(INT);
	public: virtual void NotifyPreDestroy();
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Reset();
	public: virtual void Scale(FLOAT);
	public: virtual void UpdateParticle(FLOAT,INT);
	public: virtual ~UParticleEmitter();
	public: void execSpawnParticle(struct FFrame&,void* const);
	public: void execTrigger(struct FFrame&,void* const);
UParticleMaterial
	protected: UParticleMaterial();
	public: UParticleMaterial(UParticleMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UParticleMaterial();
UPlayer
	public: UPlayer();
	public: UPlayer(UPlayer const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual void Destroy();
	public: virtual void Serialize(FArchive&);
	public: virtual ~UPlayer();
UPlayerInput
	protected: UPlayerInput();
	public: UPlayerInput(UPlayerInput const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UPlayerInput();
	public: void eventPlayerInput(FLOAT);
UPolys
	const TCHAR* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
	public: UPolys();
	public: UPolys(UPolys const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UPolys();
UPrimitive
	public: UPrimitive();
	public: UPrimitive(UPrimitive const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetCollisionBoundingBox(AActor const*)const;
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual FVector GetEncroachCenter(AActor*);
	public: virtual FVector GetEncroachExtent(AActor*);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector,FVector,FVector,DWORD,DWORD);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector,FVector,DWORD);
	public: virtual INT UseCylinderCollision(AActor const*);
	public: virtual void Illuminate(AActor*,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UPrimitive();
UProjectorMaterial
	protected: UProjectorMaterial();
	public: UProjectorMaterial(UProjectorMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UProjectorMaterial();
UProjectorPrimitive
	public: UProjectorPrimitive();
	public: UProjectorPrimitive(UProjectorPrimitive const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetCollisionBoundingBox(AActor const*)const;
	public: virtual FVector GetEncroachCenter(AActor*);
	public: virtual FVector GetEncroachExtent(AActor*);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector,FVector,FVector,DWORD,DWORD);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector,FVector,DWORD);
	public: virtual INT UseCylinderCollision(AActor const*);
	public: virtual void Destroy();
	public: virtual ~UProjectorPrimitive();
UProxyBitmapMaterial
	public: UProxyBitmapMaterial();
	public: UProxyBitmapMaterial(UProxyBitmapMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual ~UProxyBitmapMaterial();
	public: void SetTextureInterface(FBaseTexture*);
UReachSpec
	public: FPlane PathColor();
	public: INT BotOnlyPath();
	public: INT PlaceScout(AScout*);
	public: INT defineFor(ANavigationPoINT*,ANavigationPoINT*,APawn*);
	public: INT findBestReachable(AScout*);
	public: INT supports(INT,INT,INT,INT);
	public: UReachSpec();
	public: UReachSpec(UReachSpec const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UReachSpec();
	public: void Init();
URenderDevice
	public: URenderDevice();
	public: URenderDevice(URenderDevice const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual INT GetMultiSample();
	public: virtual INT GetResParams(INT&,INT&,INT&,INT&,INT&);
	public: virtual INT ResourceCached(unsigned __INT64);
	public: virtual INT SupportsTextureFormat(enum ETextureFormat);
	public: virtual void ClearCompiledShader(DWORD,UMaterial*);
	public: virtual void ClearCompiledShaders();
	public: virtual void GetShaderVersion(INT&,INT&);
	public: virtual ~URenderDevice();
	public: void StaticConstructor();
URenderResource
	public: URenderResource();
	public: URenderResource(URenderResource const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual void Serialize(FArchive&);
	public: virtual ~URenderResource();
URenderedMaterial
	public: URenderedMaterial();
	public: URenderedMaterial(URenderedMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual ~URenderedMaterial();
URibbonEmitter
	public: URibbonEmitter();
	public: URibbonEmitter(URibbonEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetGlobalScale(FLOAT);
	public: virtual FLOAT GetPoINTScale(FLOAT,INT);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Destroy();
	public: virtual void GetNewRibbonPoINT(FVector*,FVector*,FLOAT*);
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Scale(FLOAT);
	public: virtual ~URibbonEmitter();
UScriptedTexture
	public: UScriptedTexture();
	public: UScriptedTexture(UScriptedTexture const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual void Destroy();
	public: virtual void PostEditChange();
	public: virtual ~UScriptedTexture();
	public: void execDrawPortal(struct FFrame&,void* const);
	public: void execDrawText(struct FFrame&,void* const);
	public: void execDrawTile(struct FFrame&,void* const);
	public: void execSetSize(struct FFrame&,void* const);
	public: void execTextSize(struct FFrame&,void* const);
UShader
	public: UShader();
	public: UShader(UShader const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetSortingLevel();
	public: virtual INT HasFallback();
	public: virtual INT IsLoaded();
	public: virtual INT IsTransparent();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual INT RequiresNormal();
	public: virtual INT RequiresSorting();
	public: virtual UMaterial* CheckFallback();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void PostEditChange();
	public: virtual void PreSetMaterial(FLOAT);
	public: virtual ~UShader();
UShadowBitmapMaterial
	public: UShadowBitmapMaterial();
	public: UShadowBitmapMaterial(UShadowBitmapMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual void Destroy();
	public: virtual ~UShadowBitmapMaterial();
	public: void execDestroy(struct FFrame&,void* const);
USkeletalMesh
	public: INT ConformSkeletonTo(USkeletalMesh*);
	public: INT LODFootprINT(INT,INT);
	public: INT MatchRefBone(FName);
	public: INT RenderPreProcess();
	public: INT SetAttachAlias(FName,FName,FCoords&);
	public: INT SetAttachmentLocation(AActor*,AActor*);
	public: INT SetBoundaryNormalVertex(USkeletalMesh*);
	public: USkeletalMesh();
	public: USkeletalMesh(USkeletalMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual INT MemFootprINT(INT);
	public: virtual UClass* ExtraMeshGetInstanceClass();
	public: virtual UClass* MeshGetInstanceClass();
	public: virtual UClass* SubMeshGetInstanceClass();
	public: virtual void Destroy();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~USkeletalMesh();
	public: void ConvertRigidOnly();
	public: void ExtractRigidParts(INT,INT,INT,INT);
	public: void FlipFaces();
	public: void GenerateLodModel(INT,FLOAT,FLOAT,INT,INT);
	public: void GenerateLodModel(INT,FLOAT,FLOAT,INT,USkeletalMesh*,INT);
	public: void InsertLodModel(INT,USkeletalMesh*,FLOAT,INT);
	public: void MakeVertexBuffer();
	public: void NormalizeInfluences(INT);
	public: void RecalcSkinningStream();
	public: void ReconstructRawMesh();
USkeletalMeshInstance
	public: FCoords GetAliasesTagCoords(FName);
	public: FCoords GetTagCoords(FName);
	public: FLOAT AnimGetAttackShotNotifyTime(FName,INT);
	public: FLOAT AnimGetAttackShotNotifyTimeRev(FName,FName&);
	public: FLOAT GetAnimFrame(INT);
	public: FLOAT GetAnimRateOnChannel(INT);
	public: FLOAT GetBlendAlpha(INT);
	public: FName GetAliasesTagBoneName(FName);
	public: FName GetAnimSequence(INT);
	public: FRotator GetBoneRotation(DWORD,INT);
	public: FRotator GetBoneRotation(FName,INT);
	public: FRotator GetRootRotation();
	public: FRotator GetRootRotationDelta();
	public: FVector GetRootLocation();
	public: FVector GetRootLocationDelta();
	public: INT CheckSameAnim(AActor*);
	public: INT ClearBoneDirection(FName);
	public: INT ClearBoneScaler(FName);
	public: INT EnableChannelNotify(INT,INT);
	public: INT FindLinkedBoneIndex(INT*,INT);
	public: INT GetAnimChannelCount();
	public: INT IsBoneScaler(INT,FLOAT&);
	public: INT LockRootMotion(INT);
	public: INT SetBlendParams(INT,FLOAT,FLOAT,FLOAT,FName,INT);
	public: INT SetBoneDirection(FName,FRotator,FVector,FLOAT,INT);
	public: INT SetBoneLocation(FName,FVector,FLOAT);
	public: INT SetBoneRotation(FName,FRotator,INT,FLOAT);
	public: INT SetBoneScale(FLOAT,INT);
	public: INT SetBoneScale(INT,FLOAT,FName,INT);
	public: INT SetSkelAnim(UMeshAnimation*,USkeletalMesh*);
	public: INT StopAnimating(INT);
	public: INT ValidateAnimChannel(INT);
	public: USkeletalMeshInstance();
	public: USkeletalMeshInstance(USkeletalMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FLOAT AnimGetFrameCount(void*);
	public: virtual FLOAT AnimGetNotifyTime(void*,INT);
	public: virtual FLOAT AnimGetRate(void*);
	public: virtual FLOAT GetActiveAnimFrame(INT);
	public: virtual FLOAT GetActiveAnimRate(INT);
	public: virtual FMatrix MeshToWorld(FLOAT);
	public: virtual FName AnimGetGroup(void*);
	public: virtual FName AnimGetName(void*);
	public: virtual FName GetActiveAnimSequence(INT);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual INT ActiveVertStreamSize();
	public: virtual INT AnimForcePose(FName,FLOAT,FLOAT,INT);
	public: virtual INT AnimGetNotifyCount(void*);
	public: virtual INT AnimIsInGroup(void*,FName);
	public: virtual INT AnimStopLooping(INT);
	public: virtual INT FreezeAnimAt(FLOAT,INT);
	public: virtual INT GetAnimCount();
	public: virtual INT GetBonePosition(DWORD,FVector&);
	public: virtual INT GetBonePosition(FName,FVector&);
	public: virtual INT IsAnimLooping(INT);
	public: virtual INT IsAnimPastLastFrame(INT);
	public: virtual INT IsAnimTweening(INT);
	public: virtual INT IsAnimating(INT);
	public: virtual INT PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: virtual INT UpdateAnimation(FLOAT);
	public: virtual UAnimNotify* AnimGetNotifyObject(void*,INT);
	public: virtual UMaterial* GetMaterial(INT,AActor*);
	public: virtual UMeshAnimation* CurrentSkelAnim(INT);
	public: virtual UMeshAnimation* FindAnimObjectForSequence(FName);
	public: virtual const TCHAR* AnimGetNotifyText(void*,INT);
	public: virtual void ActualizeAnimLinkups();
	public: virtual void DrawSection(FDynamicActor*,USkeletalMesh*,FLevelSceneNode*,FMatrix const&,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT,INT,INT);
	public: virtual void ForceBoneRefresh();
	public: virtual void GetFrame(AActor*,FLevelSceneNode*,FVector*,INT,INT&,DWORD);
	public: virtual void GetMeshVerts(AActor*,FVector*,INT,INT&);
	public: virtual void MeshBuildBounds();
	public: virtual void MeshSkinVertsCallback(void*);
	public: virtual void PoseFrame(INT,FLOAT);
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetAnimFrame(INT,FLOAT,INT);
	public: virtual void SetMesh(UMesh*);
	public: virtual void SetScale(FVector);
	public: virtual void* GetAnimIndexed(INT);
	public: virtual void* GetAnimNamed(FName);
	public: virtual ~USkeletalMeshInstance();
	public: void BlendToAlpha(INT,FLOAT,FLOAT);
	public: void ClearSkelAnims();
	public: void CopyAnimation(INT,INT);
	public: void ForceAnimRate(INT,FLOAT);
	public: void SetAnimRate(INT,FLOAT);
	public: void SetAnimSequence(INT,FName);
	public: void SetBlendAlpha(INT,FLOAT);
	public: void UpdateBlendAlpha(INT,FLOAT,FLOAT);
USkillAction
	public: USkillAction();
	public: USkillAction(USkillAction const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AEmitter* Notify(AActor*,AActor*);
	public: virtual void PostEditChange();
	public: virtual ~USkillAction();
USkillAction_LocateEffect
	public: USkillAction_LocateEffect();
	public: USkillAction_LocateEffect(USkillAction_LocateEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AEmitter* Notify(AActor*,AActor*);
	public: virtual void PostEditChange();
	public: virtual ~USkillAction_LocateEffect();
USkillAction_SwordTrail
	public: USkillAction_SwordTrail();
	public: USkillAction_SwordTrail(USkillAction_SwordTrail const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual AEmitter* Notify(AActor*,AActor*);
	public: virtual void PostEditChange();
	public: virtual ~USkillAction_SwordTrail();
USkillVisualEffect
	public: USkillVisualEffect();
	public: USkillVisualEffect(USkillVisualEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~USkillVisualEffect();
	public: void TriggerCasting(APawn*,AActor*);
	public: void TriggerChanneling(APawn*,AActor*);
	public: void TriggerExplosion(ANSkillProjectile*);
	public: void TriggerPreshot(APawn*);
	public: void TriggerShot(APawn*);
	public: void TriggerTransientEffect(APawn*,AActor*,INT);
USkinVertexBuffer
	public: USkinVertexBuffer();
	public: USkinVertexBuffer(USkinVertexBuffer const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~USkinVertexBuffer();
USound
	public: FLOAT AddTimeStamp(FLOAT);
	public: INT IsPlaying();
	public: USound();
	public: USound(USound const&);
	public: USound(const TCHAR*,INT);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FLOAT GetDuration();
	public: virtual void Destroy();
	public: virtual void PS2Convert();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~USound();
	public: void ClearTimeStamp();
	public: void SetPlaySound(INT);
USparkEmitter
	public: USparkEmitter();
	public: USparkEmitter(USparkEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual ~USparkEmitter();
USpriteEmitter
	public: USpriteEmitter();
	public: USpriteEmitter(USpriteEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT FillVertexBuffer(FSpriteParticleVertex*,FLevelSceneNode*);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual ~USpriteEmitter();
UStaticMesh
	public: INT GetNumCollisionNodes();
	public: INT GetNumCollisionTriangles();
	public: INT IsDynamicShadowCast(INT);
	public: UMaterial* GetSkin(AActor*,INT);
	public: UStaticMesh();
	public: UStaticMesh(UStaticMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FStaticMeshCollisionNode* GetCollisionNode(INT);
	public: struct FStaticMeshCollisionTriangle* GetCollisionTriangle(INT);
	public: virtual FBox GetCollisionBoundingBox(AActor const*)const;
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual FVector GetEncroachCenter(AActor*);
	public: virtual FVector GetEncroachExtent(AActor*);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector,FVector,FVector,DWORD,DWORD);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector,FVector,DWORD);
	public: virtual INT UseCylinderCollision(AActor const*);
	public: virtual void Destroy();
	public: virtual void Illuminate(AActor*,INT);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Rename(const TCHAR*,UObject*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UStaticMesh();
	public: void Build();
	public: void BuildNotforShadow();
	public: void BuildforShadow();
	public: void StaticConstructor();
UStaticMeshInstance
	public: UStaticMeshInstance();
	public: UStaticMeshInstance(UStaticMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UStaticMeshInstance();
USubActionCameraEffect
	public: USubActionCameraEffect();
	public: USubActionCameraEffect(USubActionCameraEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionCameraEffect();
USubActionCameraShake
	public: USubActionCameraShake();
	public: USubActionCameraShake(USubActionCameraShake const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionCameraShake();
USubActionFOV
	public: USubActionFOV();
	public: USubActionFOV(USubActionFOV const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionFOV();
USubActionFade
	public: USubActionFade();
	public: USubActionFade(USubActionFade const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionFade();
USubActionGameSpeed
	public: USubActionGameSpeed();
	public: USubActionGameSpeed(USubActionGameSpeed const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionGameSpeed();
USubActionOrientation
	public: USubActionOrientation();
	public: USubActionOrientation(USubActionOrientation const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT IsRunning();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual void PostLoad();
	public: virtual ~USubActionOrientation();
USubActionSceneSpeed
	public: USubActionSceneSpeed();
	public: USubActionSceneSpeed(USubActionSceneSpeed const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionSceneSpeed();
USubActionTrigger
	public: USubActionTrigger();
	public: USubActionTrigger(USubActionTrigger const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FString GetStatString();
	public: virtual INT Update(FLOAT,ASceneManager*);
	public: virtual ~USubActionTrigger();
USubSkeletalMeshInstance
	public: FCoords GetBoneCoords(DWORD);
	public: FMatrix AttachedMeshToWorld(FLOAT);
	public: FMatrix EnchantedWeaponMeshToWorld(USkeletalMesh*,FVector,FVector,FVector);
	public: FMatrix WeaponMeshToWorld(FLOAT);
	public: INT DynamicHairGetFrame(AActor*,FLevelSceneNode*,FVector*,INT,INT&,DWORD,INT);
	public: INT MatchRefBone(FName);
	public: UMaterial* GetEffectMaterial(USkeletalMesh*,INT,AActor*,enum EActorEffectType);
	public: USubSkeletalMeshInstance();
	public: USubSkeletalMeshInstance(USubSkeletalMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix MeshToWorld(FLOAT);
	public: virtual FMatrix MeshToWorld(USkeletalMesh*,FVector,FVector);
	public: virtual INT ActiveVertStreamSize();
	public: virtual INT GetBonePosition(DWORD,FVector&);
	public: virtual INT GetBonePosition(FName,FVector&);
	public: virtual UMaterial* GetAttachedWeaponTexture(INT,INT,AActor*);
	public: virtual UMaterial* GetSubMaterial(INT,INT,AActor*);
	public: virtual void Destroy();
	public: virtual void DrawSection(FDynamicActor*,USkeletalMesh*,FLevelSceneNode*,FMatrix const&,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT,INT,INT);
	public: virtual void DrawSection(FDynamicActor*,USkeletalMesh*,FLevelSceneNode*,FMatrix const&,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT,INT,INT,FLOAT,enum EActorEffectType);
	public: virtual void MeshSkinVertsCallback(void*);
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*);
	public: virtual void SetGPUSkinningConstants(FRenderInterface*,struct FSkelMeshSection*,USubSkeletalMeshInstance*);
	public: virtual void SetMesh(UMesh*);
	public: virtual void SetScale(FVector);
	public: virtual void SetSubMeshIndex(INT);
	public: virtual ~USubSkeletalMeshInstance();
	public: void AttachedMeshRender(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT);
	public: void EnchantedMeshRender(AActor*,USkeletalMesh*,FVector,FVector,FLevelSceneNode*,FRenderInterface*);
	public: void HairAcceMeshRender(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT,FVector,FRotator);
	public: void RenderCloakMesh(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT);
	public: void RenderDynamicHairMesh(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*,INT);
UTerrainBrush
	public: INT BeginPaINTing(UTexture**,ATerrainInfo**);
	public: UTerrainBrush();
	public: UTerrainBrush(UTerrainBrush const&);
	public: virtual FBox GetRect();
	public: virtual void Execute(INT);
	public: virtual void MouseButtonDown(UViewport*);
	public: virtual void MouseButtonUp(UViewport*);
	public: virtual void MouseMove(FLOAT,FLOAT);
	public: virtual ~UTerrainBrush();
	public: void EndPaINTing(UTexture*,ATerrainInfo*);
UTerrainBrushColor
	public: UTerrainBrushColor();
	public: UTerrainBrushColor(UTerrainBrushColor const&);
	public: virtual void Execute(INT);
	public: virtual ~UTerrainBrushColor();
UTerrainBrushEdgeTurn
	public: UTerrainBrushEdgeTurn();
	public: UTerrainBrushEdgeTurn(UTerrainBrushEdgeTurn const&);
	public: virtual FBox GetRect();
	public: virtual void Execute(INT);
	public: virtual ~UTerrainBrushEdgeTurn();
UTerrainBrushFlatten
	public: UTerrainBrushFlatten();
	public: UTerrainBrushFlatten(UTerrainBrushFlatten const&);
	public: virtual void Execute(INT);
	public: virtual ~UTerrainBrushFlatten();
UTerrainBrushNoise
	public: UTerrainBrushNoise();
	public: UTerrainBrushNoise(UTerrainBrushNoise const&);
	public: virtual void Execute(INT);
	public: virtual ~UTerrainBrushNoise();
UTerrainBrushPaint
	public: UTerrainBrushPaINT();
	public: UTerrainBrushPaINT(UTerrainBrushPaINT const&);
	public: virtual void Execute(INT);
	public: virtual ~UTerrainBrushPaINT();
UTerrainBrushSelect
	public: UTerrainBrushSelect();
	public: UTerrainBrushSelect(UTerrainBrushSelect const&);
	public: virtual FBox GetRect();
	public: virtual void Execute(INT);
	public: virtual void MouseButtonDown(UViewport*);
	public: virtual void MouseMove(FLOAT,FLOAT);
	public: virtual ~UTerrainBrushSelect();
UTerrainBrushSmooth
	public: UTerrainBrushSmooth();
	public: UTerrainBrushSmooth(UTerrainBrushSmooth const&);
	public: virtual void Execute(INT);
	public: virtual ~UTerrainBrushSmooth();
UTerrainBrushTexPan
	public: UTerrainBrushTexPan();
	public: UTerrainBrushTexPan(UTerrainBrushTexPan const&);
	public: virtual void MouseMove(FLOAT,FLOAT);
	public: virtual ~UTerrainBrushTexPan();
UTerrainBrushTexRotate
	public: UTerrainBrushTexRotate();
	public: UTerrainBrushTexRotate(UTerrainBrushTexRotate const&);
	public: virtual void MouseMove(FLOAT,FLOAT);
	public: virtual ~UTerrainBrushTexRotate();
UTerrainBrushTexScale
	public: UTerrainBrushTexScale();
	public: UTerrainBrushTexScale(UTerrainBrushTexScale const&);
	public: virtual void MouseMove(FLOAT,FLOAT);
	public: virtual ~UTerrainBrushTexScale();
UTerrainBrushVertexEdit
	public: UTerrainBrushVertexEdit();
	public: UTerrainBrushVertexEdit(UTerrainBrushVertexEdit const&);
	public: virtual ~UTerrainBrushVertexEdit();
UTerrainBrushVisibility
	public: UTerrainBrushVisibility();
	public: UTerrainBrushVisibility(UTerrainBrushVisibility const&);
	public: virtual FBox GetRect();
	public: virtual void Execute(INT);
	public: virtual ~UTerrainBrushVisibility();
UTerrainMaterial
	public: UTerrainMaterial();
	public: UTerrainMaterial(UTerrainMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT HasFallback();
	public: virtual UMaterial* CheckFallback();
	public: virtual ~UTerrainMaterial();
UTerrainPrimitive
	protected: UTerrainPrimitive();
	public: FBox GetRenderBoundingBox(AActor const*,INT);
	public: UTerrainPrimitive(ATerrainInfo*);
	public: UTerrainPrimitive(UTerrainPrimitive const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT LineCheck(struct FCheckResult&,AActor*,FVector,FVector,FVector,DWORD,DWORD);
	public: virtual INT PoINTCheck(struct FCheckResult&,AActor*,FVector,FVector,DWORD);
	public: virtual void Illuminate(AActor*,INT);
	public: virtual void Serialize(FArchive&);
	public: virtual ~UTerrainPrimitive();
UTerrainSector
	const TCHAR* const `public: INT IsTriangleAll(INT,INT,INT,INT,INT,unsigned char)'::`3'::__FUNC_NAME__;
	protected: UTerrainSector();
	public: FColor GetVertexColor(INT,INT);
	public: FVector GetVertex(INT,INT);
	public: FVector GetVertexNormal(INT,INT);
	public: INT GetGlobalVertex(INT,INT);
	public: INT GetLocalVertex(INT,INT);
	public: INT IsSectorAll(INT,unsigned char);
	public: INT IsTriangleAll(INT,INT,INT,INT,INT,unsigned char);
	public: INT LocalIntMap(INT);
	public: INT PassShouldRenderTriangle(INT,INT,INT,INT,INT);
	public: UTerrainSector(ATerrainInfo*,INT,INT,INT,INT);
	public: UTerrainSector(UTerrainSector const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char GetLayerAlpha(INT,INT,INT,UTexture*);
	public: virtual void Destroy();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~UTerrainSector();
	public: void AttachProjector(AProjector*,struct FProjectorRenderInfo*,INT,INT,INT,INT);
	public: void CalcLocation();
	public: void DeleteTriangles();
	public: void GenerateCompleteIndexBuffer();
	public: void GenerateTriangles();
	public: void MakeIntensityMap();
	public: void MakeIntensityMapOnTime();
	public: void PregenerateTriangles();
	public: void SetIntensityMap(struct FTerrainIntensityMap*,FColor,FPlane,FLOAT);
	public: void SetInterpolatedIntensityMap(struct FTerrainIntensityMap*,struct FTerrainIntensityMap*,FLOAT,FLOAT);
	public: void StaticLight(INT);
	public: void TriangulateLayer(INT);
UTexCoordMaterial
	public: UTexCoordMaterial();
	public: UTexCoordMaterial(UTexCoordMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual ~UTexCoordMaterial();
UTexCoordSource
	public: UTexCoordSource();
	public: UTexCoordSource(UTexCoordSource const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void PostEditChange();
	public: virtual ~UTexCoordSource();
UTexEnvMap
	public: UTexEnvMap();
	public: UTexEnvMap(UTexEnvMap const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexEnvMap();
UTexMatrix
	public: UTexMatrix();
	public: UTexMatrix(UTexMatrix const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexMatrix();
UTexModifier
	public: UTexModifier();
	public: UTexModifier(UTexModifier const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual INT GetValidated();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual unsigned char RequiredUVStreams();
	public: virtual void SetValidated(INT);
	public: virtual ~UTexModifier();
UTexOscillator
	public: UTexOscillator();
	public: UTexOscillator(UTexOscillator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual void PostEditChange();
	public: virtual ~UTexOscillator();
UTexOscillatorTriggered
	public: UTexOscillatorTriggered();
	public: UTexOscillatorTriggered(UTexOscillatorTriggered const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexOscillatorTriggered();
UTexPanner
	public: UTexPanner();
	public: UTexPanner(UTexPanner const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexPanner();
UTexPannerTriggered
	public: UTexPannerTriggered();
	public: UTexPannerTriggered(UTexPannerTriggered const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexPannerTriggered();
UTexRotator
	public: UTexRotator();
	public: UTexRotator(UTexRotator const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual void PostLoad();
	public: virtual ~UTexRotator();
UTexScaler
	public: UTexScaler();
	public: UTexScaler(UTexScaler const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FMatrix* GetMatrix(FLOAT);
	public: virtual ~UTexScaler();
UTexture
	public: DWORD GetColorsIndex();
	public: FColor GetTexel(FLOAT,FLOAT,FLOAT,FLOAT);
	public: FColor* GetColors();
	public: FString GetFormatDesc();
	public: INT Compress(enum ETextureFormat,INT,struct FDXTCompressionOptions*);
	public: INT Crest_Compress(INT);
	public: INT Decompress(enum ETextureFormat);
	public: INT DefaultLOD();
	public: INT GetNumMips();
	public: INT TM_Compress();
	public: INT TM_Decompress();
	public: UTexture();
	public: UTexture(UTexture const&);
	public: double GetLastUpdateTime();
	public: enum ETextureFormat ConvertDXT();
	public: enum ETextureFormat ConvertDXT(INT,INT,INT,unsigned char**);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FMipmapBase* GetMip(INT);
	public: virtual FBaseTexture* GetRenderInterface();
	public: virtual INT GetSortingLevel();
	public: virtual INT IsTransparent();
	public: virtual INT RequiresSorting();
	public: virtual UBitmapMaterial* Get(double,UViewport*);
	public: virtual void ArithOp(UTexture*,enum ETextureArithOp);
	public: virtual void Clear(DWORD);
	public: virtual void Clear(FColor);
	public: virtual void Click(DWORD,FLOAT,FLOAT);
	public: virtual void ConstantTimeTick();
	public: virtual void Destroy();
	public: virtual void Init(INT,INT);
	public: virtual void MousePosition(DWORD,FLOAT,FLOAT);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Prime();
	public: virtual void Serialize(FArchive&);
	public: virtual void Tick(FLOAT);
	public: virtual void Tick(double);
	public: virtual void TimeReset();
	public: virtual void Update(double);
	public: virtual ~UTexture();
	public: void CreateColorRange();
	public: void CreateMips(INT,INT);
	public: void SetLastUpdateTime(double);
UTrailEmitter
	public: UTrailEmitter();
	public: UTrailEmitter(UTrailEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Initialize(INT);
	public: virtual void NotifyPreDestroy();
	public: virtual void PostEditChange();
	public: virtual void UpdateParticle(FLOAT,INT);
	public: virtual ~UTrailEmitter();
UUnderWaterEffect
	public: UUnderWaterEffect();
	public: UUnderWaterEffect(UUnderWaterEffect const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual void Destroy();
	public: virtual void PostRender(UViewport*,FRenderInterface*);
	public: virtual void PreRender(UViewport*,FRenderInterface*);
	public: virtual ~UUnderWaterEffect();
	public: void ClearSetting();
	public: void SetPhysicsVolume(APhysicsVolume*);
	public: void SetPlayerController(APlayerController*);
UUnderWaterMaterial
	public: UUnderWaterMaterial();
	public: UUnderWaterMaterial(UUnderWaterMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual ~UUnderWaterMaterial();
UUnderWaterShader
	public: UUnderWaterShader();
	public: UUnderWaterShader(UUnderWaterShader const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: unsigned char* GetBumpRawData();
	public: virtual INT MaterialMappingUSize();
	public: virtual INT MaterialMappingVSize();
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual void Destroy();
	public: virtual ~UUnderWaterShader();
	public: void MakeUnderWaterData(INT,INT);
	public: void SetDiffuseMaterial(UMaterial*);
UVertMesh
	public: INT RenderPreProcess();
	public: UVertMesh();
	public: UVertMesh(UVertMesh const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual UClass* MeshGetInstanceClass();
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Serialize(FArchive&);
	public: virtual ~UVertMesh();
	public: void StaticConstructor();
UVertMeshEmitter
	public: UVertMeshEmitter();
	public: UVertMeshEmitter(UVertMeshEmitter const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT RenderParticles(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,FRenderInterface*);
	public: virtual INT SpawnParticle(INT,FLOAT,INT,INT,FVector const&);
	public: virtual INT UpdateParticles(FLOAT);
	public: virtual void CleanUp();
	public: virtual void Destroy();
	public: virtual void Initialize(INT);
	public: virtual void PostEditChange();
	public: virtual void PostLoad();
	public: virtual void Reset();
	public: virtual void Spawned();
	public: virtual ~UVertMeshEmitter();
UVertMeshInstance
	public: INT RenderPreProcess(FAnimMeshVertexStream&);
	public: UVertMeshInstance();
	public: UVertMeshInstance(UVertMeshInstance const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: struct FMeshAnimSeq* GetAnimSeq(FName);
	public: virtual FBox GetRenderBoundingBox(AActor const*);
	public: virtual FLOAT AnimGetFrameCount(void*);
	public: virtual FLOAT AnimGetNotifyTime(void*,INT);
	public: virtual FLOAT AnimGetRate(void*);
	public: virtual FLOAT GetActiveAnimFrame(INT);
	public: virtual FLOAT GetActiveAnimRate(INT);
	public: virtual FMatrix MeshToWorld(FLOAT);
	public: virtual FName AnimGetGroup(void*);
	public: virtual FName AnimGetName(void*);
	public: virtual FName GetActiveAnimSequence(INT);
	public: virtual FSphere GetRenderBoundingSphere(AActor const*);
	public: virtual INT AnimForcePose(FName,FLOAT,FLOAT,INT);
	public: virtual INT AnimGetNotifyCount(void*);
	public: virtual INT AnimIsInGroup(void*,FName);
	public: virtual INT AnimStopLooping(INT);
	public: virtual INT GetAnimCount();
	public: virtual INT IsAnimLooping(INT);
	public: virtual INT IsAnimPastLastFrame(INT);
	public: virtual INT IsAnimTweening(INT);
	public: virtual INT IsAnimating(INT);
	public: virtual INT PlayAnim(INT,FName,FLOAT,FLOAT,INT);
	public: virtual INT StopAnimating();
	public: virtual INT UpdateAnimation(FLOAT);
	public: virtual UAnimNotify* AnimGetNotifyObject(void*,INT);
	public: virtual UMaterial* GetMaterial(INT,AActor*);
	public: virtual const TCHAR* AnimGetNotifyText(void*,INT);
	public: virtual void GetFrame(AActor*,FLevelSceneNode*,FVector*,INT,INT&,DWORD);
	public: virtual void GetMeshVerts(AActor*,FVector*,INT,INT&);
	public: virtual void MeshBuildBounds();
	public: virtual void Render(FDynamicActor*,FLevelSceneNode*,TList<FDynamicLight*>*,TList<struct FProjectorRenderInfo*>*,FRenderInterface*);
	public: virtual void Serialize(FArchive&);
	public: virtual void SetAnimFrame(INT,FLOAT,INT);
	public: virtual void SetScale(FVector);
	public: virtual void* GetAnimIndexed(INT);
	public: virtual void* GetAnimNamed(FName);
	public: virtual ~UVertMeshInstance();
UVertexBuffer
	const TCHAR* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
	public: UVertexBuffer();
	public: UVertexBuffer(DWORD);
	public: UVertexBuffer(UVertexBuffer const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetDataSize();
	public: virtual void Serialize(FArchive&);
	public: virtual void* GetData();
	public: virtual ~UVertexBuffer();
UVertexColor
	protected: UVertexColor();
	public: UVertexColor(UVertexColor const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual ~UVertexColor();
UVertexStreamBase
	public: UVertexStreamBase(INT,DWORD,DWORD);
	public: UVertexStreamBase(UVertexStreamBase const&);
	public: static UClass* __cdecl StaticClass();
	public: virtual void Serialize(FArchive&);
	public: virtual ~UVertexStreamBase();
	public: void SetPolyFlags(DWORD);
UVertexStreamCOLOR
	const TCHAR* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
	public: UVertexStreamCOLOR();
	public: UVertexStreamCOLOR(DWORD);
	public: UVertexStreamCOLOR(UVertexStreamCOLOR const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetDataSize();
	public: virtual void Serialize(FArchive&);
	public: virtual void* GetData();
	public: virtual ~UVertexStreamCOLOR();
UVertexStreamPosNormTex
	const TCHAR* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
	public: UVertexStreamPosNormTex();
	public: UVertexStreamPosNormTex(DWORD);
	public: UVertexStreamPosNormTex(UVertexStreamPosNormTex const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetDataSize();
	public: virtual void Serialize(FArchive&);
	public: virtual void* GetData();
	public: virtual ~UVertexStreamPosNormTex();
UVertexStreamUV
	const TCHAR* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
	public: UVertexStreamUV();
	public: UVertexStreamUV(DWORD);
	public: UVertexStreamUV(UVertexStreamUV const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetDataSize();
	public: virtual void Serialize(FArchive&);
	public: virtual void* GetData();
	public: virtual ~UVertexStreamUV();
UVertexStreamVECTOR
	const TCHAR* const `public: virtual void Serialize(FArchive&)'::`3'::__FUNC_NAME__;
	public: UVertexStreamVECTOR();
	public: UVertexStreamVECTOR(DWORD);
	public: UVertexStreamVECTOR(UVertexStreamVECTOR const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT GetDataSize();
	public: virtual void Serialize(FArchive&);
	public: virtual void* GetData();
	public: virtual ~UVertexStreamVECTOR();
UViewport
	public: INT IsDepthComplexity();
	public: INT IsEditing();
	public: INT IsLit();
	public: INT IsOrtho();
	public: INT IsPerspective();
	public: INT IsRealtime();
	public: INT IsTopView();
	public: INT IsWire();
	public: UClient* GetOuterUClient()const;
	public: UViewport();
	public: UViewport(UViewport const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl RefreshAll();
	public: unsigned char* _Screen(INT,INT);
	public: virtual INT Exec(const TCHAR*,FOutputDevice&);
	public: virtual INT IsMouseCaptured();
	public: virtual INT Lock(unsigned char*,INT*);
	public: virtual INT SetDrag(INT);
	public: virtual void Destroy();
	public: virtual void Present();
	public: virtual void ReadInput(FLOAT);
	public: virtual void Serialize(FArchive&);
	public: virtual void Serialize(const TCHAR*,enum EName);
	public: virtual void TryRenderDevice(const TCHAR*,INT,INT,INT);
	public: virtual void Unlock();
	public: virtual void* GetServer();
	public: virtual ~UViewport();
	public: void ExecMacro(const TCHAR*,FOutputDevice&);
	public: void ExecuteHits(struct FHitCause const&,unsigned char*,INT,TCHAR*,FColor*,AActor**);
	public: void LockOnActor(AActor*);
	public: void PopHit(INT);
	public: void PushHit(struct HHitProxy const&,INT);
	public: void SetForceUnWire(INT);
	public: void SetScreenToClientInOrtho(INT);
UWaterMaterial
	public: UWaterMaterial();
	public: UWaterMaterial(UWaterMaterial const&);
	public: static UClass* __cdecl StaticClass();
	public: static void __cdecl InternalConstructor(void*);
	public: virtual INT MaterialUSize();
	public: virtual INT MaterialVSize();
	public: virtual ~UWaterMaterial();
User
	public: DWORD GetNameColor(bool);
	public: DWORD GetNickColor();
	public: DWORD GetUniqueNameColor();
	public: FName GetClassNameW();
	public: FName GetDamageEffect();
	public: FName GetNpcMeshName();
	public: FName GetNpcTexName(INT);
	public: FName GetPcExMeshName(INT);
	public: FName GetPcExTexName(INT);
	public: FName GetPcMeshName(INT);
	public: FName GetPcTexName(INT,INT);
	public: INT GetAnimType(APawn*);
	public: INT GetArrowItemID();
	public: INT GetCriminalRate();
	public: INT GetGuiltyStatus();
	public: INT GetHairMeshType(enum EPawnSubMeshStyle);
	public: INT GetItemClassID(INT);
	public: INT GetMeshType();
	public: INT GetNpcTexNum();
	public: INT GetPcTexNum(INT);
	public: INT GetPetID();
	public: INT GetPledgeID();
	public: INT GetPrivateStoreState();
	public: INT GetSummonedID();
	public: INT GetSurrenderWarID();
	public: INT HasBootsSound(INT);
	public: INT HaveItem(enum ItemSlotType);
	public: INT IsMyPartyMember();
	public: INT IsMyPledgeMember();
	public: INT IsPartyMaster();
	public: INT IsPartyMember();
	public: INT IsPledgeMaster();
	public: TCHAR* GetClassNamePoINTer();
	public: TCHAR* GetName();
	public: TCHAR* GetNickName();
	public: User();
	public: void IsMatchedStoreMsg(TCHAR*);
	public: void SetAttackItemVariationOption();
	public: void SetEventmatchEffect(INT);
	public: void SetItemSlotByItemClassID();
	public: void SetName(TCHAR*);
	public: void SetNickName(TCHAR*);
	public: void SetPawnResource();
	public: void SetPledgePower(unsigned INT);

Globals:
	 CORE_API extern class FCollisionHashBase * __cdecl GNewCollisionHash(void)
	 CORE_API extern class FEngineStats GEngineStats
	 CORE_API extern class FL2GameData GL2GameData
	 CORE_API extern class FMatineeTools GMatineeTools
	 CORE_API extern class FMemCache GCache
	 CORE_API extern class FMemStack GEngineMem
	 CORE_API extern class FNActorResourceLoader GL2ActorResourceLoader
	 CORE_API extern class FNMonsterRaceMgr GL2MonsterRaceMgr
	 CORE_API extern class FRebuildTools GRebuildTools
	 CORE_API extern class FStatGraph * GStatGraph
	 CORE_API extern class FStats GStats
	 CORE_API extern class FString __cdecl GetCDKeyHash(void)
	 CORE_API extern class FString __cdecl GetCDKeyResponse(unsigned short const *)
	 CORE_API extern class FTempLineBatcher * GTempLineBatcher
	 CORE_API extern class FTerrainTools GTerrainTools
	 CORE_API extern class UGlobalTempObjects * GGlobalTempObjects
	 CORE_API extern class UL2ConsoleWnd * GL2Console
	 CORE_API extern int __cdecl GetFROTATOR(unsigned short const *,class FRotator &,int)
	 CORE_API extern int __cdecl GetFROTATOR(unsigned short const *,unsigned short const *,class FRotator &,int)
	 CORE_API extern int __cdecl GetFVECTOR(unsigned short const *,class FVector &)
	 CORE_API extern int __cdecl GetFVECTOR(unsigned short const *,unsigned short const *,class FVector &)
	 CORE_API extern int __cdecl GetSUBSTRING(unsigned short const *,unsigned short const *,unsigned short *,int)

Functions:


Skipped:
	_DllMain@12
	autoclassAActor
	autoclassAAIController
	autoclassAAIMarker
	autoclassAAirEmitter
	autoclassAAirVolume
	autoclassAAIScript
	autoclassAAmbientSound
	autoclassAAmmo
	autoclassAAmmunition
	autoclassAAntiPortalActor
	autoclassAAutoDoor
	autoclassAAutoLadder
	autoclassAAvoidMarker
	autoclassABlockingVolume
	autoclassABrush
	autoclassACamera
	autoclassACarriedObject
	autoclassAClipMarker
	autoclassAController
	autoclassADamageType
	autoclassADecoration
	autoclassADecorationList
	autoclassADecoVolumeObject
	autoclassADefaultPhysicsVolume
	autoclassADoor
	autoclassAEmitter
	autoclassAEmitterLight
	autoclassAEnvCreatureManagerInfo
	autoclassAFileLog
	autoclassAFluidSurfaceInfo
	autoclassAFluidSurfaceOscillator
	autoclassAGameInfo
	autoclassAGameReplicationInfo
	autoclassAGameStats
	autoclassAHUD
	autoclassAInfo
	autoclassAInspector
	autoclassAInternetInfo
	autoclassAInterpolationPoint
	autoclassAInventory
	autoclassAInventoryAttachment
	autoclassAInventorySpot
	autoclassAJumpDest
	autoclassAJumpPad
	autoclassAKActor
	autoclassAKBSJoint
	autoclassAKCarWheelJoint
	autoclassAKConeLimit
	autoclassAKConstraint
	autoclassAKeypoint
	autoclassAKHinge
	autoclassAKTire
	autoclassAKVehicle
	autoclassAL2Alarm
	autoclassAL2Dice
	autoclassAL2Float
	autoclassAL2FogInfo
	autoclassAL2Indicator
	autoclassAL2NMover
	autoclassAL2Pickup
	autoclassAL2Radar
	autoclassAL2SeamlessInfo
	autoclassALadder
	autoclassALadderVolume
	autoclassALevelInfo
	autoclassALiftCenter
	autoclassALiftExit
	autoclassALight
	autoclassALineagePlayerController
	autoclassALineOfSightTrigger
	autoclassALocationInfo
	autoclassALookTarget
	autoclassAMarkProjector
	autoclassAMatDemoActor
	autoclassAMovableStaticMeshActor
	autoclassAMover
	autoclassAMusicVolume
	autoclassAMutator
	autoclassANavigationPoint
	autoclassANCubics
	autoclassANLine
	autoclassANMoon
	autoclassANMovableSunLight
	autoclassANote
	autoclassANpcPosInfo
	autoclassANProjectile
	autoclassANSkillProjectile
	autoclassANSun
	autoclassAPathNode
	autoclassAPawn
	autoclassAPhysicsVolume
	autoclassAPickup
	autoclassAPlayerController
	autoclassAPlayerReplicationInfo
	autoclassAPlayerStart
	autoclassAPolyMarker
	autoclassAPotentialClimbWatcher
	autoclassAPowerups
	autoclassAProjectile
	autoclassAProjector
	autoclassAReplicationInfo
	autoclassASavedMove
	autoclassASceneManager
	autoclassAScout
	autoclassASecurity
	autoclassAServerPrimitive
	autoclassAShadowProjector
	autoclassASkyZoneInfo
	autoclassASmallNavigationPoint
	autoclassASpawnableStaticMeshActor
	autoclassAStaticMeshActor
	autoclassAStationaryWeapons
	autoclassAStatLog
	autoclassAStatLogFile
	autoclassASuperPointInfo
	autoclassATeamInfo
	autoclassATeleporter
	autoclassATerrainInfo
	autoclassATerritoryInfo
	autoclassATrigger
	autoclassATriggers
	autoclassAVehicle
	autoclassAVehiclePart
	autoclassAVehicleRoutePoint
	autoclassAViewportWindowController
	autoclassAVolume
	autoclassAWarpZoneInfo
	autoclassAWarpZoneMarker
	autoclassAWaterHitEmitter
	autoclassAWeapon
	autoclassAWeaponAttachment
	autoclassAZoneInfo
	autoclassCAuthSocket
	autoclassCClientSocket
	autoclassCDummySocket
	autoclassCPingSocket
	autoclassUActionMoveCamera
	autoclassUActionPause
	autoclassUActionWarp
	autoclassUActorChannel
	autoclassUAmbientSoundObject
	autoclassUAnimation
	autoclassUAnimNotify
	autoclassUAnimNotify_AttackItem
	autoclassUAnimNotify_AttackPreShot
	autoclassUAnimNotify_AttackShot
	autoclassUAnimNotify_AttackVoice
	autoclassUAnimNotify_BoneScale
	autoclassUAnimNotify_Channeling
	autoclassUAnimNotify_DestroyEffect
	autoclassUAnimNotify_Effect
	autoclassUAnimNotify_IdleSound
	autoclassUAnimNotify_MatSubAction
	autoclassUAnimNotify_ScreenFade
	autoclassUAnimNotify_Script
	autoclassUAnimNotify_Scripted
	autoclassUAnimNotify_Sound
	autoclassUAnimNotify_SwimSound
	autoclassUAnimNotify_ViewShake
	autoclassUAudioSubsystem
	autoclassUBaseGUIController
	autoclassUBeamEmitter
	autoclassUBitmapMaterial
	autoclassUBlackWhite
	autoclassUBumpShader
	autoclassUCameraEffect
	autoclassUCameraOverlay
	autoclassUCanvas
	autoclassUChannel
	autoclassUChannelDownload
	autoclassUCheatManager
	autoclassUClient
	autoclassUColorModifier
	autoclassUCombiner
	autoclassUConsole
	autoclassUConstantColor
	autoclassUConstantMaterial
	autoclassUControlChannel
	autoclassUConvertOggCommandlet
	autoclassUConvexVolume
	autoclassUCubemap
	autoclassUDemoPlayPendingLevel
	autoclassUDemoRecConnection
	autoclassUDemoRecDriver
	autoclassUDownload
	autoclassUDummyAudio
	autoclassUEngine
	autoclassUExtraMeshData
	autoclassUExtraSkeletalMeshInstance
	autoclassUFadeBlackWhite
	autoclassUFadeColor
	autoclassUFileChannel
	autoclassUFinalBlend
	autoclassUFluidSurfacePrimitive
	autoclassUFont
	autoclassUGameEngine
	autoclassUGlobalTempObjects
	autoclassUGlowEffect
	autoclassUGlowModifier
	autoclassUHDREffect
	autoclassUI3DL2Listener
	autoclassUIndexBuffer
	autoclassUInput
	autoclassUInteraction
	autoclassUInteractionMaster
	autoclassUInteractions
	autoclassUKarmaParams
	autoclassUKarmaParamsCollision
	autoclassUKarmaParamsRBFull
	autoclassUKarmaParamsSkel
	autoclassUKMeshProps
	autoclassUL2ColorModifier
	autoclassUL2ConsoleWnd
	autoclassUL2Font
	autoclassUL2NEnvLight
	autoclassUL2NEnvManager
	autoclassUL2NetHandler
	autoclassUL2NTimeLight
	autoclassUL2OrcMove
	autoclassUL2TextureFactory
	autoclassULevel
	autoclassULevelBase
	autoclassULevelObject
	autoclassULevelSummary
	autoclassULodMesh
	autoclassULodMeshInstance
	autoclassUMasterMD5Commandlet
	autoclassUMatAction
	autoclassUMaterial
	autoclassUMaterialSequence
	autoclassUMaterialSwitch
	autoclassUMatObject
	autoclassUMatSubAction
	autoclassUMesh
	autoclassUMeshAnimation
	autoclassUMeshEmitter
	autoclassUMeshInstance
	autoclassUMeshObject
	autoclassUModel
	autoclassUModifier
	autoclassUMotionBlur
	autoclassUNetConnection
	autoclassUNetDriver
	autoclassUNetPendingLevel
	autoclassUNetworkHandler
	autoclassUNullRenderDevice
	autoclassUOpacityModifier
	autoclassUOrcMove
	autoclassUPackageCheckInfo
	autoclassUPackageMapLevel
	autoclassUPalette
	autoclassUParticleEmitter
	autoclassUParticleMaterial
	autoclassUPendingLevel
	autoclassUPlayer
	autoclassUPlayerInput
	autoclassUPolys
	autoclassUPrimitive
	autoclassUProjectorMaterial
	autoclassUProjectorPrimitive
	autoclassUProxyBitmapMaterial
	autoclassUReachSpec
	autoclassURenderDevice
	autoclassURenderedMaterial
	autoclassURenderResource
	autoclassURibbonEmitter
	autoclassUSaveReplayResourceCommandlet
	autoclassUScriptConvertCommandlet
	autoclassUScriptedTexture
	autoclassUServerCommandlet
	autoclassUServerDataConvertCommandlet
	autoclassUShader
	autoclassUShadowBitmapMaterial
	autoclassUSkeletalMesh
	autoclassUSkeletalMeshInstance
	autoclassUSkillAction
	autoclassUSkillAction_LocateEffect
	autoclassUSkillAction_SwordTrail
	autoclassUSkillVisualEffect
	autoclassUSkinVertexBuffer
	autoclassUSound
	autoclassUSparkEmitter
	autoclassUSpriteEmitter
	autoclassUStaticMesh
	autoclassUStaticMeshInstance
	autoclassUSubActionCameraEffect
	autoclassUSubActionCameraShake
	autoclassUSubActionFade
	autoclassUSubActionFOV
	autoclassUSubActionGameSpeed
	autoclassUSubActionOrientation
	autoclassUSubActionSceneSpeed
	autoclassUSubActionTrigger
	autoclassUSubSkeletalMeshInstance
	autoclassUTerrainMaterial
	autoclassUTerrainPrimitive
	autoclassUTerrainSector
	autoclassUTexCoordMaterial
	autoclassUTexCoordSource
	autoclassUTexEnvMap
	autoclassUTexMatrix
	autoclassUTexModifier
	autoclassUTexOscillator
	autoclassUTexOscillatorTriggered
	autoclassUTexPanner
	autoclassUTexPannerTriggered
	autoclassUTexRotator
	autoclassUTexScaler
	autoclassUTexture
	autoclassUTrailEmitter
	autoclassUUnderWaterEffect
	autoclassUUnderWaterMaterial
	autoclassUUnderWaterShader
	autoclassUVertexBuffer
	autoclassUVertexColor
	autoclassUVertexStreamBase
	autoclassUVertexStreamCOLOR
	autoclassUVertexStreamPosNormTex
	autoclassUVertexStreamUV
	autoclassUVertexStreamVECTOR
	autoclassUVertMesh
	autoclassUVertMeshEmitter
	autoclassUVertMeshInstance
	autoclassUViewport
	autoclassUWaterMaterial
	autoclassUXMLConvertCommandlet
	class FArchive & __cdecl operator<<(class FArchive &,class FAnimMeshVertexStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FBspNode &)
	class FArchive & __cdecl operator<<(class FArchive &,class FBspSection &)
	class FArchive & __cdecl operator<<(class FArchive &,class FBspSurf &)
	class FArchive & __cdecl operator<<(class FArchive &,class FBspVertexStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FLightMap &)
	class FArchive & __cdecl operator<<(class FArchive &,class FLightMapTexture &)
	class FArchive & __cdecl operator<<(class FArchive &,class FMultiLightMapTexture &)
	class FArchive & __cdecl operator<<(class FArchive &,class FPoly &)
	class FArchive & __cdecl operator<<(class FArchive &,class FRaw32BitIndexBuffer &)
	class FArchive & __cdecl operator<<(class FArchive &,class FRawColorStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FRawIndexBuffer &)
	class FArchive & __cdecl operator<<(class FArchive &,class FSkinVertexStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FSpringVertexStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FStaticLightMapTexture &)
	class FArchive & __cdecl operator<<(class FArchive &,class FStaticMeshLightInfo &)
	class FArchive & __cdecl operator<<(class FArchive &,class FStaticMeshLightVisibilityStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FStaticMeshMaterial &)
	class FArchive & __cdecl operator<<(class FArchive &,class FStaticMeshSection &)
	class FArchive & __cdecl operator<<(class FArchive &,class FStaticMeshUVStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FStaticMeshVertexStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FTangentStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FTerrainVertexStream &)
	class FArchive & __cdecl operator<<(class FArchive &,class FURL &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FBspVertex &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FKeyValuePair &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FPlayerResponseLine &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FPosNormTexData &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FProjectorRenderInfo *)
	class FArchive & __cdecl operator<<(class FArchive &,struct FServerResponseLine &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FSkinVertex &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FSpringVertex &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FStaticMeshCollisionNode &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FStaticMeshCollisionTriangle &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FStaticMeshUV &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FStaticMeshVertex &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FStaticProjectorInfo *)
	class FArchive & __cdecl operator<<(class FArchive &,struct FTangent &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FTerrainVertex &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FUntransformedVertex &)
	class FArchive & __cdecl operator<<(class FArchive &,struct FUV2Data &)
	class FName ENGINE_Accept
	class FName ENGINE_AcceptInventory
	class FName ENGINE_Activated
	class FName ENGINE_ActorEntered
	class FName ENGINE_ActorEnteredVolume
	class FName ENGINE_ActorLeaving
	class FName ENGINE_ActorLeavingVolume
	class FName ENGINE_AddCameraEffect
	class FName ENGINE_AddCheatManager
	class FName ENGINE_AddInteraction
	class FName ENGINE_AIHearSound
	class FName ENGINE_AllowDetourTo
	class FName ENGINE_AnimBegin
	class FName ENGINE_AnimEnd
	class FName ENGINE_AssociateAttackedNotify
	class FName ENGINE_Attach
	class FName ENGINE_AttackedNotify
	class FName ENGINE_BaseChange
	class FName ENGINE_BeginEvent
	class FName ENGINE_BeginPlay
	class FName ENGINE_BreathTimer
	class FName ENGINE_Broadcast
	class FName ENGINE_BroadcastLocalized
	class FName ENGINE_BroadcastLocalizedMessage
	class FName ENGINE_Bump
	class FName ENGINE_ChangeAnimation
	class FName ENGINE_ClearL2Game
	class FName ENGINE_ClientCloseMenu
	class FName ENGINE_ClientHearSound
	class FName ENGINE_ClientMessage
	class FName ENGINE_ClientNameChange
	class FName ENGINE_ClientOpenMenu
	class FName ENGINE_ClientSetViewTarget
	class FName ENGINE_ClientTravel
	class FName ENGINE_ClientValidate
	class FName ENGINE_CloseAll
	class FName ENGINE_CloseMenu
	class FName ENGINE_ConnectFailure
	class FName ENGINE_Deactivated
	class FName ENGINE_DemoPlaySound
	class FName ENGINE_Desireability
	class FName ENGINE_Destroyed
	class FName ENGINE_Detach
	class FName ENGINE_DetailChange
	class FName ENGINE_DetourWeight
	class FName ENGINE_EncroachedBy
	class FName ENGINE_EncroachingOn
	class FName ENGINE_EndCrouch
	class FName ENGINE_EndedRotation
	class FName ENGINE_EndEvent
	class FName ENGINE_EnemyNotVisible
	class FName ENGINE_Falling
	class FName ENGINE_FellOutOfWorld
	class FName ENGINE_FillPrecacheMaterialsArray
	class FName ENGINE_FillPrecacheStaticMeshesArray
	class FName ENGINE_FinishedInterpolation
	class FName ENGINE_ForceGenerate
	class FName ENGINE_ForceKill
	class FName ENGINE_GainedChild
	class FName ENGINE_GameEnding
	class FName ENGINE_Generate
	class FName ENGINE_GetBeaconText
	class FName ENGINE_GetDestination
	class FName ENGINE_GetEffTargetLocation
	class FName ENGINE_GetHitEffectName
	class FName ENGINE_GetLocalLogFileName
	class FName ENGINE_GetSlaveDestination
	class FName ENGINE_GetSpawnRate
	class FName ENGINE_HeadVolumeChange
	class FName ENGINE_HearNoise
	class FName ENGINE_HitWall
	class FName ENGINE_InitGame
	class FName ENGINE_InitializeController
	class FName ENGINE_Initialized
	class FName ENGINE_InitInputSystem
	class FName ENGINE_Inspection
	class FName ENGINE_KApplyForce
	class FName ENGINE_KeyFrameReached
	class FName ENGINE_KForceExceed
	class FName ENGINE_KilledBy
	class FName ENGINE_KImpact
	class FName ENGINE_KSkelConvulse
	class FName ENGINE_KUpdateState
	class FName ENGINE_KVehicleUpdateParams
	class FName ENGINE_KVelDropBelow
	class FName ENGINE_L2GameActionNotify
	class FName ENGINE_L2NetLogin
	class FName ENGINE_L2NetPostLogin
	class FName ENGINE_Landed
	class FName ENGINE_LogGameSpecial
	class FName ENGINE_LogGameSpecial2
	class FName ENGINE_Login
	class FName ENGINE_LongFall
	class FName ENGINE_LostChild
	class FName ENGINE_MayFall
	class FName ENGINE_ModifyVelocity
	class FName ENGINE_MonitoredPawnAlert
	class FName ENGINE_NeedsMenuResolution
	class FName ENGINE_Notify
	class FName ENGINE_NotifyBump
	class FName ENGINE_NotifyDie
	class FName ENGINE_NotifyHeadVolumeChange
	class FName ENGINE_NotifyHitMover
	class FName ENGINE_NotifyHitWall
	class FName ENGINE_NotifyJumpApex
	class FName ENGINE_NotifyLanded
	class FName ENGINE_NotifyMissedJump
	class FName ENGINE_NotifyPhysicsVolumeChange
	class FName ENGINE_OnAdminReply
	class FName ENGINE_OpenMenu
	class FName ENGINE_OwnerPossess
	class FName ENGINE_PawnEnteredVolume
	class FName ENGINE_PawnLeavingVolume
	class FName ENGINE_PhysicsChangedFor
	class FName ENGINE_PhysicsVolumeChange
	class FName ENGINE_PlayDying
	class FName ENGINE_PlayerCalcView
	class FName ENGINE_PlayerInput
	class FName ENGINE_PlayerSeesMe
	class FName ENGINE_PlayerTick
	class FName ENGINE_PlayFalling
	class FName ENGINE_PlayJump
	class FName ENGINE_PlayLandingAnimation
	class FName ENGINE_PostBeginPlay
	class FName ENGINE_PostLogin
	class FName ENGINE_PostNetBeginPlay
	class FName ENGINE_PostNetReceive
	class FName ENGINE_PostRender
	class FName ENGINE_PostSetPawnResource
	class FName ENGINE_PostTeleport
	class FName ENGINE_PostTouch
	class FName ENGINE_PreBeginPlay
	class FName ENGINE_PreClientTravel
	class FName ENGINE_PreLogin
	class FName ENGINE_PrepareForMove
	class FName ENGINE_PreshotNotify
	class FName ENGINE_PreTeleport
	class FName ENGINE_Process_KeyEvent
	class FName ENGINE_Process_KeyType
	class FName ENGINE_Process_Message
	class FName ENGINE_Process_PostRender
	class FName ENGINE_Process_PreRender
	class FName ENGINE_Process_Tick
	class FName ENGINE_ReceiveLocalizedMessage
	class FName ENGINE_RemoveCameraEffect
	class FName ENGINE_RemoveInteraction
	class FName ENGINE_RenderTexture
	class FName ENGINE_ReplaceMenu
	class FName ENGINE_SceneEnded
	class FName ENGINE_SceneStarted
	class FName ENGINE_SeeMonster
	class FName ENGINE_SeePlayer
	class FName ENGINE_ServerCallback
	class FName ENGINE_ServerChangeVoiceChatter
	class FName ENGINE_ServerGetVoiceChatters
	class FName ENGINE_ServerTravel
	class FName ENGINE_ServerValidationResponse
	class FName ENGINE_SetAirVolume
	class FName ENGINE_SetAnimAction
	class FName ENGINE_SetFocusTo
	class FName ENGINE_SetHeadScale
	class FName ENGINE_SetInitialState
	class FName ENGINE_SetProgressMessage
	class FName ENGINE_SetProgressTime
	class FName ENGINE_SetRequiredGameResolution
	class FName ENGINE_SetupSpecialPathAbilities
	class FName ENGINE_SetWalking
	class FName ENGINE_ShotNotify
	class FName ENGINE_ShowUpgradeMenu
	class FName ENGINE_SoakStop
	class FName ENGINE_SpawnDefaultPlayerPawn
	class FName ENGINE_SpawnPlayerPawn
	class FName ENGINE_SpecialCost
	class FName ENGINE_SpecialHandling
	class FName ENGINE_StartCrouch
	class FName ENGINE_StopPlayFiring
	class FName ENGINE_SuggestMovePreparation
	class FName ENGINE_TakeDamage
	class FName ENGINE_TeamMessage
	class FName ENGINE_ThirdPersonEffects
	class FName ENGINE_Tick
	class FName ENGINE_Timer
	class FName ENGINE_TornOff
	class FName ENGINE_Touch
	class FName ENGINE_TravelPostAccept
	class FName ENGINE_TravelPreAccept
	class FName ENGINE_Trigger
	class FName ENGINE_TriggerEvent
	class FName ENGINE_UnTouch
	class FName ENGINE_UnTrigger
	class FName ENGINE_UpdateCharacter
	class FName ENGINE_UpdateEyeHeight
	class FName ENGINE_UsedBy
	class FName ENGINE_VehicleStateReceived
	class FName ENGINE_WorldSpaceOverlays
	class FName ENGINE_ZoneChange
	class FPlane __cdecl FGetHSV(unsigned char,unsigned char,unsigned char)
	const AActor::`vftable'
	const AAIController::`vftable'
	const AAIMarker::`vftable'
	const AAirEmitter::`vftable'
	const AAirVolume::`vftable'
	const AAIScript::`vftable'
	const AAmbientSound::`vftable'
	const AAmmo::`vftable'
	const AAmmunition::`vftable'
	const AAntiPortalActor::`vftable'
	const AAutoDoor::`vftable'
	const AAutoLadder::`vftable'
	const AAvoidMarker::`vftable'
	const ABlockingVolume::`vftable'
	const ABrush::`vftable'
	const ACamera::`vftable'
	const ACarriedObject::`vftable'
	const AClipMarker::`vftable'
	const AController::`vftable'
	const ADamageType::`vftable'
	const ADecoration::`vftable'
	const ADecorationList::`vftable'
	const ADecoVolumeObject::`vftable'
	const ADefaultPhysicsVolume::`vftable'
	const ADoor::`vftable'
	const AEmitter::`vftable'
	const AEmitterLight::`vftable'
	const AEnvCreatureManagerInfo::`vftable'
	const AFileLog::`vftable'
	const AFluidSurfaceInfo::`vftable'
	const AFluidSurfaceOscillator::`vftable'
	const AGameInfo::`vftable'
	const AGameReplicationInfo::`vftable'
	const AGameStats::`vftable'
	const AHUD::`vftable'
	const AInfo::`vftable'
	const AInspector::`vftable'
	const AInternetInfo::`vftable'
	const AInterpolationPoint::`vftable'
	const AInventory::`vftable'
	const AInventoryAttachment::`vftable'
	const AInventorySpot::`vftable'
	const AJumpDest::`vftable'
	const AJumpPad::`vftable'
	const AKActor::`vftable'
	const AKBSJoint::`vftable'
	const AKCarWheelJoint::`vftable'
	const AKConeLimit::`vftable'
	const AKConstraint::`vftable'
	const AKeypoint::`vftable'
	const AKHinge::`vftable'
	const AKTire::`vftable'
	const AKVehicle::`vftable'
	const AL2Alarm::`vftable'
	const AL2Dice::`vftable'
	const AL2Float::`vftable'
	const AL2Indicator::`vftable'
	const AL2NMover::`vftable'
	const AL2Pickup::`vftable'
	const AL2Radar::`vftable'
	const AL2SeamlessInfo::`vftable'
	const ALadder::`vftable'
	const ALadderVolume::`vftable'
	const ALevelInfo::`vftable'
	const ALiftCenter::`vftable'
	const ALiftExit::`vftable'
	const ALight::`vftable'
	const ALineagePlayerController::`vftable'
	const ALineOfSightTrigger::`vftable'
	const ALocationInfo::`vftable'
	const ALookTarget::`vftable'
	const AMarkProjector::`vftable'
	const AMatDemoActor::`vftable'
	const AMovableStaticMeshActor::`vftable'
	const AMover::`vftable'
	const AMusicVolume::`vftable'
	const AMutator::`vftable'
	const ANavigationPoint::`vftable'
	const ANCubics::`vftable'
	const ANLine::`vftable'
	const ANMoon::`vftable'
	const ANMovableSunLight::`vftable'
	const ANote::`vftable'
	const ANpcPosInfo::`vftable'
	const ANProjectile::`vftable'
	const ANSkillProjectile::`vftable'
	const ANSun::`vftable'
	const APathNode::`vftable'
	const APawn::`vftable'
	const APhysicsVolume::`vftable'
	const APickup::`vftable'
	const APlayerController::`vftable'
	const APlayerReplicationInfo::`vftable'
	const APlayerStart::`vftable'
	const APolyMarker::`vftable'
	const APotentialClimbWatcher::`vftable'
	const APowerups::`vftable'
	const AProjectile::`vftable'
	const AProjector::`vftable'
	const AReplicationInfo::`vftable'
	const ASavedMove::`vftable'
	const ASceneManager::`vftable'
	const AScout::`vftable'
	const ASecurity::`vftable'
	const AServerPrimitive::`vftable'
	const AShadowProjector::`vftable'
	const ASkyZoneInfo::`vftable'
	const ASmallNavigationPoint::`vftable'
	const ASpawnableStaticMeshActor::`vftable'
	const AStaticMeshActor::`vftable'
	const AStationaryWeapons::`vftable'
	const AStatLog::`vftable'
	const AStatLogFile::`vftable'
	const ASuperPointInfo::`vftable'
	const ATeamInfo::`vftable'
	const ATeleporter::`vftable'
	const ATerrainInfo::`vftable'
	const ATerritoryInfo::`vftable'
	const ATrigger::`vftable'
	const ATriggers::`vftable'
	const AVehicle::`vftable'
	const AVehiclePart::`vftable'
	const AVehicleRoutePoint::`vftable'
	const AViewportWindowController::`vftable'
	const AVolume::`vftable'
	const AWarpZoneInfo::`vftable'
	const AWarpZoneMarker::`vftable'
	const AWaterHitEmitter::`vftable'
	const AWeapon::`vftable'
	const AWeaponAttachment::`vftable'
	const AZoneInfo::`vftable'
	const CGeoCellInfo::`vftable'
	const FActorSceneNode::`vftable'
	const FAnimMeshVertexStream::`vftable'
	const FBezier::`vftable'
	const FBspVertexStream::`vftable'
	const FCameraSceneNode::`vftable'
	const FCanvasUtil::`vftable'
	const FChatMsgInfo::`vftable'
	const FCollisionHash::`vftable'
	const FCollisionOctree::`vftable'
	const FDirectionalLightMapSceneNode::`vftable'
	const FGPUSkinVertexStream::`vftable'
	const FHitObserver::`vftable'
	const FInBunch::`vftable'
	const FL2GameData::`vftable'
	const FLandMark::`vftable'
	const FLevelSceneNode::`vftable'
	const FLightMap::`vftable'
	const FLightMapSceneNode::`vftable'
	const FLightMapTexture::`vftable'
	const FLineBatcher::`vftable'
	const FMatineeTools::`vftable'
	const FMirrorSceneNode::`vftable'
	const FNAbnormalStat::`vftable'
	const FNAbnormalStat_BIGBODY::`vftable'
	const FNAbnormalStat_BIGHEAD::`vftable'
	const FNAbnormalStat_CHANGE_TEXTURE::`vftable'
	const FNAbnormalStat_DANCE_ROOT::`vftable'
	const FNAbnormalStat_DOT_BLEEDING::`vftable'
	const FNAbnormalStat_DOT_FIRE::`vftable'
	const FNAbnormalStat_DOT_FIRE_AREA::`vftable'
	const FNAbnormalStat_DOT_MP::`vftable'
	const FNAbnormalStat_DOT_POISON::`vftable'
	const FNAbnormalStat_DOT_SOIL::`vftable'
	const FNAbnormalStat_DOT_WATER::`vftable'
	const FNAbnormalStat_DOT_WIND::`vftable'
	const FNAbnormalStat_FLESH_STONE::`vftable'
	const FNAbnormalStat_FLOATING_ROOT::`vftable'
	const FNAbnormalStat_GHOST_STUN::`vftable'
	const FNAbnormalStat_MAGIC_SQUARE::`vftable'
	const FNAbnormalStat_PARALYZE::`vftable'
	const FNAbnormalStat_ROOT::`vftable'
	const FNAbnormalStat_SEIZURE1::`vftable'
	const FNAbnormalStat_SEIZURE2::`vftable'
	const FNAbnormalStat_SILENCE::`vftable'
	const FNAbnormalStat_SLEEP::`vftable'
	const FNAbnormalStat_STEALTH::`vftable'
	const FNAbnormalStat_STUN::`vftable'
	const FNActorResourceLoader::`vftable'
	const FNAppendixEffect::`vftable'
	const FNAppendixEffect_COLOSSEUM_1::`vftable'
	const FNAppendixEffect_COLOSSEUM_2::`vftable'
	const FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE::`vftable'
	const FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED::`vftable'
	const FNAppendixEffect_COLOSSEUM_SELECTED_BLUE::`vftable'
	const FNAppendixEffect_COLOSSEUM_SELECTED_RED::`vftable'
	const FNBoneScalerStat::`vftable'
	const FNCursedWeaponEffect::`vftable'
	const FNetworkNotify::`vftable'
	const FNMonsterRaceInfo::`vftable'
	const FNMonsterRaceMgr::`vftable'
	const FNPawnLight::`vftable'
	const FNPawnResource::`vftable'
	const FNViewShake::`vftable'
	const FNViewShakeMgr::`vftable'
	const FNWeaponEffect::`vftable'
	const FOutBunch::`vftable'
	const FPlayerSceneNode::`vftable'
	const FPointLightMapSceneNode::`vftable'
	const FRaw32BitIndexBuffer::`vftable'
	const FRawColorStream::`vftable'
	const FRawIndexBuffer::`vftable'
	const FRenderInterface::`vftable'
	const FRenderResource::`vftable'
	const FSceneNode::`vftable'
	const FScriptedPortalSceneNode::`vftable'
	const FShadowSceneNode::`vftable'
	const FSkinVertexStream::`vftable'
	const FSkySceneNode::`vftable'
	const FSolidColorTexture::`vftable'
	const FSoundData::`vftable'
	const FStaticCubemap::`vftable'
	const FStaticLightMapTexture::`vftable'
	const FStaticMeshBatchIndexBuffer::`vftable'
	const FStaticMeshBatchVertexStream::`vftable'
	const FStaticMeshColorStream::`vftable'
	const FStaticMeshLightVisibilityStream::`vftable'
	const FStaticMeshUVStream::`vftable'
	const FStaticMeshVertexStream::`vftable'
	const FStaticTexture::`vftable'
	const FTangentStream::`vftable'
	const FTerrainTools::`vftable'
	const FWarpZoneSceneNode::`vftable'
	const FWaterSheetSceneNode::`vftable'
	const HActor::`vftable'
	const HBspSurf::`vftable'
	const HCoords::`vftable'
	const HHitProxy::`vftable'
	const HLevelObject::`vftable'
	const HMaterialTree::`vftable'
	const HMatineeAction::`vftable'
	const HMatineeScene::`vftable'
	const HMatineeSubAction::`vftable'
	const HMatineeTimePath::`vftable'
	const HTerrain::`vftable'
	const HTerrainToolLayer::`vftable'
	const L2AbnormalZone::`vftable'
	const NCBoneSimul::`vftable'
	const NCCloakSimul::`vftable'
	const NCClothSimul::`vftable'
	const TLazyArray<unsigned char>::`vftable'
	const UActionMoveCamera::`vftable'
	const UActionPause::`vftable'
	const UActionWarp::`vftable'
	const UActorChannel::`vftable'
	const UAmbientSoundObject::`vftable'
	const UAnimation::`vftable'
	const UAnimNotify::`vftable'
	const UAnimNotify_AttackItem::`vftable'
	const UAnimNotify_AttackPreShot::`vftable'
	const UAnimNotify_AttackShot::`vftable'
	const UAnimNotify_AttackVoice::`vftable'
	const UAnimNotify_BoneScale::`vftable'
	const UAnimNotify_Channeling::`vftable'
	const UAnimNotify_DestroyEffect::`vftable'
	const UAnimNotify_Effect::`vftable'
	const UAnimNotify_IdleSound::`vftable'
	const UAnimNotify_MatSubAction::`vftable'
	const UAnimNotify_ScreenFade::`vftable'
	const UAnimNotify_Script::`vftable'
	const UAnimNotify_Scripted::`vftable'
	const UAnimNotify_Sound::`vftable'
	const UAnimNotify_SwimSound::`vftable'
	const UAnimNotify_ViewShake::`vftable'
	const UAudioSubsystem::`vftable'{for `FExec'}
	const UAudioSubsystem::`vftable'{for `UObject'}
	const UBaseGUIController::`vftable'
	const UBeamEmitter::`vftable'
	const UBitmapMaterial::`vftable'
	const UBlackWhite::`vftable'
	const UBumpShader::`vftable'
	const UCameraEffect::`vftable'
	const UCameraOverlay::`vftable'
	const UCanvas::`vftable'
	const UChannel::`vftable'
	const UChannelDownload::`vftable'
	const UCheatManager::`vftable'
	const UClient::`vftable'
	const UColorModifier::`vftable'
	const UCombiner::`vftable'
	const UConsole::`vftable'
	const UConstantColor::`vftable'
	const UConstantMaterial::`vftable'
	const UControlChannel::`vftable'{for `FOutputDevice'}
	const UControlChannel::`vftable'{for `UChannel'}
	const UConvexVolume::`vftable'
	const UCubemap::`vftable'
	const UDemoRecConnection::`vftable'{for `FExec'}
	const UDemoRecConnection::`vftable'{for `FOutputDevice'}
	const UDemoRecConnection::`vftable'{for `UObject'}
	const UDemoRecDriver::`vftable'{for `FExec'}
	const UDemoRecDriver::`vftable'{for `UObject'}
	const UDownload::`vftable'
	const UDummyAudio::`vftable'{for `FExec'}
	const UDummyAudio::`vftable'{for `UObject'}
	const UEngine::`vftable'{for `FExec'}
	const UEngine::`vftable'{for `UObject'}
	const UExtraMeshData::`vftable'
	const UExtraSkeletalMeshInstance::`vftable'
	const UFadeBlackWhite::`vftable'
	const UFadeColor::`vftable'
	const UFileChannel::`vftable'
	const UFinalBlend::`vftable'
	const UFluidSurfacePrimitive::`vftable'
	const UFont::`vftable'
	const UGameEngine::`vftable'{for `FExec'}
	const UGameEngine::`vftable'{for `UObject'}
	const UGlowEffect::`vftable'
	const UGlowModifier::`vftable'
	const UHDREffect::`vftable'
	const UI3DL2Listener::`vftable'
	const UIndexBuffer::`vftable'
	const UInput::`vftable'{for `FExec'}
	const UInput::`vftable'{for `UObject'}
	const UInteraction::`vftable'
	const UInteractionMaster::`vftable'
	const UInteractions::`vftable'
	const UKarmaParams::`vftable'
	const UKarmaParamsCollision::`vftable'
	const UKarmaParamsRBFull::`vftable'
	const UKarmaParamsSkel::`vftable'
	const UKMeshProps::`vftable'
	const UL2ColorModifier::`vftable'
	const UL2ConsoleWnd::`vftable'{for `FExec'}
	const UL2ConsoleWnd::`vftable'{for `UObject'}
	const UL2Font::`vftable'{for `FExec'}
	const UL2Font::`vftable'{for `UObject'}
	const UL2NEnvLight::`vftable'
	const UL2NEnvManager::`vftable'
	const UL2NetHandler::`vftable'{for `FExec'}
	const UL2NetHandler::`vftable'{for `UObject'}
	const UL2NTimeLight::`vftable'
	const UL2OrcMove::`vftable'{for `FExec'}
	const UL2OrcMove::`vftable'{for `UObject'}
	const UL2TextureFactory::`vftable'
	const ULevel::`vftable'{for `FNetworkNotify'}
	const ULevel::`vftable'{for `UObject'}
	const ULevelBase::`vftable'{for `FNetworkNotify'}
	const ULevelBase::`vftable'{for `UObject'}
	const ULevelObject::`vftable'
	const ULevelSummary::`vftable'
	const ULodMesh::`vftable'
	const ULodMeshInstance::`vftable'
	const UMatAction::`vftable'
	const UMaterial::`vftable'
	const UMaterialSequence::`vftable'
	const UMaterialSwitch::`vftable'
	const UMatObject::`vftable'
	const UMatSubAction::`vftable'
	const UMesh::`vftable'
	const UMeshAnimation::`vftable'
	const UMeshEmitter::`vftable'
	const UMeshInstance::`vftable'
	const UMeshObject::`vftable'
	const UModel::`vftable'
	const UModifier::`vftable'
	const UMotionBlur::`vftable'
	const UNetConnection::`vftable'{for `FExec'}
	const UNetConnection::`vftable'{for `FOutputDevice'}
	const UNetConnection::`vftable'{for `UObject'}
	const UNetDriver::`vftable'{for `FExec'}
	const UNetDriver::`vftable'{for `UObject'}
	const UNetworkHandler::`vftable'{for `FExec'}
	const UNetworkHandler::`vftable'{for `UObject'}
	const UNullRenderDevice::`vftable'{for `FExec'}
	const UNullRenderDevice::`vftable'{for `UObject'}
	const UOpacityModifier::`vftable'
	const UOrcMove::`vftable'{for `FExec'}
	const UOrcMove::`vftable'{for `UObject'}
	const UPackageCheckInfo::`vftable'
	const UPackageMapLevel::`vftable'
	const UPalette::`vftable'
	const UParticleEmitter::`vftable'
	const UParticleMaterial::`vftable'
	const UPlayer::`vftable'{for `FExec'}
	const UPlayer::`vftable'{for `FOutputDevice'}
	const UPlayer::`vftable'{for `UObject'}
	const UPlayerInput::`vftable'
	const UPolys::`vftable'
	const UPrimitive::`vftable'
	const UProjectorMaterial::`vftable'
	const UProjectorPrimitive::`vftable'
	const UProxyBitmapMaterial::`vftable'
	const UReachSpec::`vftable'
	const URenderDevice::`vftable'{for `FExec'}
	const URenderDevice::`vftable'{for `UObject'}
	const URenderedMaterial::`vftable'
	const URenderResource::`vftable'
	const URibbonEmitter::`vftable'
	const UScriptedTexture::`vftable'
	const UShader::`vftable'
	const UShadowBitmapMaterial::`vftable'
	const USkeletalMesh::`vftable'
	const USkeletalMeshInstance::`vftable'
	const USkillAction::`vftable'
	const USkillAction_LocateEffect::`vftable'
	const USkillAction_SwordTrail::`vftable'
	const USkillVisualEffect::`vftable'
	const USkinVertexBuffer::`vftable'
	const USound::`vftable'
	const USparkEmitter::`vftable'
	const USpriteEmitter::`vftable'
	const UStaticMesh::`vftable'
	const UStaticMeshInstance::`vftable'
	const USubActionCameraEffect::`vftable'
	const USubActionCameraShake::`vftable'
	const USubActionFade::`vftable'
	const USubActionFOV::`vftable'
	const USubActionGameSpeed::`vftable'
	const USubActionOrientation::`vftable'
	const USubActionSceneSpeed::`vftable'
	const USubActionTrigger::`vftable'
	const USubSkeletalMeshInstance::`vftable'
	const UTerrainBrush::`vftable'
	const UTerrainBrushColor::`vftable'
	const UTerrainBrushEdgeTurn::`vftable'
	const UTerrainBrushFlatten::`vftable'
	const UTerrainBrushNoise::`vftable'
	const UTerrainBrushPaint::`vftable'
	const UTerrainBrushSelect::`vftable'
	const UTerrainBrushSmooth::`vftable'
	const UTerrainBrushTexPan::`vftable'
	const UTerrainBrushTexRotate::`vftable'
	const UTerrainBrushTexScale::`vftable'
	const UTerrainBrushVertexEdit::`vftable'
	const UTerrainBrushVisibility::`vftable'
	const UTerrainMaterial::`vftable'
	const UTerrainPrimitive::`vftable'
	const UTerrainSector::`vftable'
	const UTexCoordMaterial::`vftable'
	const UTexCoordSource::`vftable'
	const UTexEnvMap::`vftable'
	const UTexMatrix::`vftable'
	const UTexModifier::`vftable'
	const UTexOscillator::`vftable'
	const UTexOscillatorTriggered::`vftable'
	const UTexPanner::`vftable'
	const UTexPannerTriggered::`vftable'
	const UTexRotator::`vftable'
	const UTexScaler::`vftable'
	const UTexture::`vftable'
	const UTrailEmitter::`vftable'
	const UUnderWaterEffect::`vftable'
	const UUnderWaterMaterial::`vftable'
	const UUnderWaterShader::`vftable'
	const UVertexBuffer::`vftable'
	const UVertexColor::`vftable'
	const UVertexStreamBase::`vftable'
	const UVertexStreamCOLOR::`vftable'
	const UVertexStreamPosNormTex::`vftable'
	const UVertexStreamUV::`vftable'
	const UVertexStreamVECTOR::`vftable'
	const UVertMesh::`vftable'
	const UVertMeshEmitter::`vftable'
	const UVertMeshInstance::`vftable'
	const UViewport::`vftable'{for `FExec'}
	const UViewport::`vftable'{for `FOutputDevice'}
	const UViewport::`vftable'{for `UObject'}
	const UWaterMaterial::`vftable'
	GPackage
	int __cdecl DispatchSocketWindowMsg(struct HWND__ *,unsigned int,unsigned int,long)
	int gbNoCalcStaticLight
	int gbShowBorderLine
	int gbShowLoadLine
	int gbShowMapBug
	int gbShowSectors
	int gbStretchTerrainMask
	intAActorexecAdd_ColorColor
	intAActorexecAllActors
	intAActorexecAnimBlendParams
	intAActorexecAnimBlendToAlpha
	intAActorexecAnimIsInGroup
	intAActorexecAttachToBone
	intAActorexecAttachToBoneWithIndex
	intAActorexecAutonomousPhysics
	intAActorexecBasedActors
	intAActorexecBoneRefresh
	intAActorexecChildActors
	intAActorexecClock
	intAActorexecCollidingActors
	intAActorexecConsoleCommand
	intAActorexecDebugClock
	intAActorexecDebugUnclock
	intAActorexecDemoPlaySound
	intAActorexecDestroy
	intAActorexecDetachFromBone
	intAActorexecDrawDebugLine
	intAActorexecDynamicActors
	intAActorexecEnableChannelNotify
	intAActorexecError
	intAActorexecFastTrace
	intAActorexecFinishAnim
	intAActorexecFinishInterpolation
	intAActorexecFreezeAnimAt
	intAActorexecGetAnimParams
	intAActorexecGetBoneCoords
	intAActorexecGetBoneCoordsWithBoneIndex
	intAActorexecGetBoneRotation
	intAActorexecGetCacheEntry
	intAActorexecGetMapName
	intAActorexecGetMeshName
	intAActorexecGetNextInt
	intAActorexecGetNextIntDesc
	intAActorexecGetNextSkin
	intAActorexecGetNotifyChannel
	intAActorexecGetRenderBoundingSphere
	intAActorexecGetRootLocation
	intAActorexecGetRootLocationDelta
	intAActorexecGetRootRotation
	intAActorexecGetRootRotationDelta
	intAActorexecGetSoundDuration
	intAActorexecGetURLMap
	intAActorexecGetViewport
	intAActorexecHasAnim
	intAActorexecHasBoneName
	intAActorexecIsAnimating
	intAActorexecIsTweening
	intAActorexecKAddBoneLifter
	intAActorexecKAddImpulse
	intAActorexecKDisableCollision
	intAActorexecKDrawRigidBodyState
	intAActorexecKEnableCollision
	intAActorexecKFreezeRagdoll
	intAActorexecKGetActorGravScale
	intAActorexecKGetCOMOffset
	intAActorexecKGetCOMPosition
	intAActorexecKGetDampingProps
	intAActorexecKGetFriction
	intAActorexecKGetImpactThreshold
	intAActorexecKGetInertiaTensor
	intAActorexecKGetMass
	intAActorexecKGetRBQuaternion
	intAActorexecKGetRestitution
	intAActorexecKGetRigidBodyState
	intAActorexecKGetSkelMass
	intAActorexecKIsAwake
	intAActorexecKIsRagdollAvailable
	intAActorexecKMakeRagdollAvailable
	intAActorexecKRBVecFromVector
	intAActorexecKRBVecToVector
	intAActorexecKRemoveAllBoneLifters
	intAActorexecKRemoveLifterFromBone
	intAActorexecKSetActorGravScale
	intAActorexecKSetBlockKarma
	intAActorexecKSetCOMOffset
	intAActorexecKSetDampingProps
	intAActorexecKSetFriction
	intAActorexecKSetImpactThreshold
	intAActorexecKSetInertiaTensor
	intAActorexecKSetMass
	intAActorexecKSetRestitution
	intAActorexecKSetSkelVel
	intAActorexecKSetStayUpright
	intAActorexecKWake
	intAActorexecLinkMesh
	intAActorexecLinkSkelAnim
	intAActorexecLockRootMotion
	intAActorexecLoopAnim
	intAActorexecMakeNoise
	intAActorexecMove
	intAActorexecMoveCacheEntry
	intAActorexecMoveSmooth
	intAActorexecMultiply_ColorFloat
	intAActorexecMultiply_FloatColor
	intAActorexecNDestroy
	intAActorexecOnlyAffectPawns
	intAActorexecPlayAnim
	intAActorexecPlayerCanSeeMe
	intAActorexecPlayMusic
	intAActorexecPlayOwnedSound
	intAActorexecPlaySound
	intAActorexecPlaySoundOnVehicle
	intAActorexecPollFinishAnim
	intAActorexecPollFinishInterpolation
	intAActorexecPollSleep
	intAActorexecRadiusActors
	intAActorexecSetAnimFrame
	intAActorexecSetBase
	intAActorexecSetBoneDirection
	intAActorexecSetBoneLocation
	intAActorexecSetBoneRotation
	intAActorexecSetBoneScale
	intAActorexecSetCollision
	intAActorexecSetCollisionSize
	intAActorexecSetDrawScale
	intAActorexecSetDrawScale3D
	intAActorexecSetDrawType
	intAActorexecSetLocation
	intAActorexecSetOwner
	intAActorexecSetPhysics
	intAActorexecSetRelativeLocation
	intAActorexecSetRelativeRotation
	intAActorexecSetRotation
	intAActorexecSetStaticMesh
	intAActorexecSetTimer
	intAActorexecSleep
	intAActorexecSpawn
	intAActorexecStopAllMusic
	intAActorexecStopAnimating
	intAActorexecStopMusic
	intAActorexecSubtract_ColorColor
	intAActorexecSuggestFallVelocity
	intAActorexecTouchingActors
	intAActorexecTrace
	intAActorexecTraceActors
	intAActorexecTweenAnim
	intAActorexecUnClock
	intAActorexecVisibleActors
	intAActorexecVisibleCollidingActors
	intAAIControllerexecPollWaitToSeeEnemy
	intAAIControllerexecWaitToSeeEnemy
	intAControllerexecactorReachable
	intAControllerexecAddController
	intAControllerexecCanSee
	intAControllerexecEAdjustJump
	intAControllerexecEndClimbLadder
	intAControllerexecFindBestInventoryPath
	intAControllerexecFindPathTo
	intAControllerexecFindPathToIntercept
	intAControllerexecFindPathToward
	intAControllerexecFindPathTowardNearest
	intAControllerexecFindRandomDest
	intAControllerexecFinishRotation
	intAControllerexecInLatentExecution
	intAControllerexecLineOfSightTo
	intAControllerexecMoveTo
	intAControllerexecMoveToward
	intAControllerexecPickAnyTarget
	intAControllerexecPickTarget
	intAControllerexecPickWallAdjust
	intAControllerexecpointReachable
	intAControllerexecPollFinishRotation
	intAControllerexecPollMoveTo
	intAControllerexecPollMoveToward
	intAControllerexecPollWaitForLanding
	intAControllerexecRemoveController
	intAControllerexecStopWaiting
	intAControllerexecWaitForLanding
	intAEmitterexecKill
	intAEmitterexecSetSizeScale
	intAFileLogexecCloseLog
	intAFileLogexecLogf
	intAFileLogexecOpenLog
	intAFluidSurfaceInfoexecPling
	intAGameInfoexecGetNetworkNumber
	intAGameInfoexecParseKillMessage
	intAGameStatsexecGetMapFileName
	intAGameStatsexecGetStatsIdentifier
	intAHUDexecDraw3DLine
	intAInspectorexecInspectorFunc001
	intAInspectorexecInspectorFunc002
	intAInspectorexecInspectorFunc003
	intAInspectorexecInspectorFunc004
	intAInspectorexecInspectorFunc005
	intAInspectorexecInspectorFunc006
	intAKConstraintexecKGetConstraintForce
	intAKConstraintexecKGetConstraintTorque
	intAKConstraintexecKUpdateConstraintParams
	intAKVehicleexecGraphData
	intALevelInfoexecDetailChange
	intALevelInfoexecGetAddressURL
	intALevelInfoexecGetLocalURL
	intALevelInfoexecIsDemoBuild
	intALevelInfoexecIsEntry
	intAMarkProjectorexecUpdateDesireLocation
	intAPawnexecForceCrouch
	intAPawnexecGetDefenseItemSound
	intAPawnexecGetRefSkeletonNum
	intAPawnexecGetShieldItemSound
	intAPawnexecPlayAnimUM
	intAPawnexecReachedDestination
	intAPawnexecSetRelativeCoords
	intAPickupexecAddToNavigation
	intAPickupexecRemoveFromNavigation
	intAPlayerControllerexecChangeVoiceChatter
	intAPlayerControllerexecClientHearSound
	intAPlayerControllerexecClientTravel
	intAPlayerControllerexecClientValidate
	intAPlayerControllerexecConsoleCommand
	intAPlayerControllerexecCopyToClipboard
	intAPlayerControllerexecFindStairRotation
	intAPlayerControllerexecGetDefaultURL
	intAPlayerControllerexecGetEntryLevel
	intAPlayerControllerexecGetPlayerNetworkAddress
	intAPlayerControllerexecGetServerNetworkAddress
	intAPlayerControllerexecLeaveVoiceChat
	intAPlayerControllerexecPasteFromClipboard
	intAPlayerControllerexecResetKeyboard
	intAPlayerControllerexecServerValidationResponse
	intAPlayerControllerexecSetViewTarget
	intAPlayerControllerexecUpdateURL
	intAProjectorexecAbandonProjector
	intAProjectorexecAttachActor
	intAProjectorexecAttachProjector
	intAProjectorexecDetachActor
	intAProjectorexecDetachProjector
	intASceneManagerexecGetTotalSceneTime
	intASecurityexecNativePerform
	intAShadowProjectorexecCheckVisible
	intAShadowProjectorexecUpdateLightInfo
	intAStatLogexecBatchLocal
	intAStatLogexecBrowseRelativeLocalURL
	intAStatLogexecExecuteLocalLogBatcher
	intAStatLogexecExecuteSilentLogBatcher
	intAStatLogexecExecuteWorldLogBatcher
	intAStatLogexecGetGMTRef
	intAStatLogexecGetMapFileName
	intAStatLogexecGetPlayerChecksum
	intAStatLogexecInitialCheck
	intAStatLogexecLogMutator
	intAStatLogFileexecCloseLog
	intAStatLogFileexecFileFlush
	intAStatLogFileexecFileLog
	intAStatLogFileexecGetChecksum
	intAStatLogFileexecOpenLog
	intAStatLogFileexecWatermark
	intAVolumeexecEncompasses
	intAWarpZoneInfoexecUnWarp
	intAWarpZoneInfoexecWarp
	intAZoneInfoexecZoneActors
	intUCanvasexecDrawActor
	intUCanvasexecDrawPortal
	intUCanvasexecDrawText
	intUCanvasexecDrawTextClipped
	intUCanvasexecDrawTextJustified
	intUCanvasexecDrawTile
	intUCanvasexecDrawTileClipped
	intUCanvasexecDrawTileJustified
	intUCanvasexecDrawTileScaled
	intUCanvasexecDrawTileStretched
	intUCanvasexecStrLen
	intUCanvasexecTextSize
	intUCanvasexecWrapStringToArray
	intUInteractionexecConsoleCommand
	intUInteractionexecInitialize
	intUInteractionexecScreenToWorld
	intUInteractionexecWorldToScreen
	intUInteractionMasterexecTravel
	intUParticleEmitterexecSpawnParticle
	intUParticleEmitterexecTrigger
	intUScriptedTextureexecDrawPortal
	intUScriptedTextureexecDrawText
	intUScriptedTextureexecDrawTile
	intUScriptedTextureexecSetSize
	intUScriptedTextureexecTextSize
	intUShadowBitmapMaterialexecDestroy
	private: static class UClass AActor::PrivateStaticClass
	private: static class UClass AAIController::PrivateStaticClass
	private: static class UClass AAIMarker::PrivateStaticClass
	private: static class UClass AAirEmitter::PrivateStaticClass
	private: static class UClass AAirVolume::PrivateStaticClass
	private: static class UClass AAIScript::PrivateStaticClass
	private: static class UClass AAmbientSound::PrivateStaticClass
	private: static class UClass AAmmo::PrivateStaticClass
	private: static class UClass AAmmunition::PrivateStaticClass
	private: static class UClass AAntiPortalActor::PrivateStaticClass
	private: static class UClass AAutoDoor::PrivateStaticClass
	private: static class UClass AAutoLadder::PrivateStaticClass
	private: static class UClass AAvoidMarker::PrivateStaticClass
	private: static class UClass ABlockingVolume::PrivateStaticClass
	private: static class UClass ABrush::PrivateStaticClass
	private: static class UClass ACamera::PrivateStaticClass
	private: static class UClass ACarriedObject::PrivateStaticClass
	private: static class UClass AClipMarker::PrivateStaticClass
	private: static class UClass AController::PrivateStaticClass
	private: static class UClass ADamageType::PrivateStaticClass
	private: static class UClass ADecoration::PrivateStaticClass
	private: static class UClass ADecorationList::PrivateStaticClass
	private: static class UClass ADecoVolumeObject::PrivateStaticClass
	private: static class UClass ADefaultPhysicsVolume::PrivateStaticClass
	private: static class UClass ADoor::PrivateStaticClass
	private: static class UClass AEmitter::PrivateStaticClass
	private: static class UClass AEmitterLight::PrivateStaticClass
	private: static class UClass AEnvCreatureManagerInfo::PrivateStaticClass
	private: static class UClass AFileLog::PrivateStaticClass
	private: static class UClass AFluidSurfaceInfo::PrivateStaticClass
	private: static class UClass AFluidSurfaceOscillator::PrivateStaticClass
	private: static class UClass AGameInfo::PrivateStaticClass
	private: static class UClass AGameReplicationInfo::PrivateStaticClass
	private: static class UClass AGameStats::PrivateStaticClass
	private: static class UClass AHUD::PrivateStaticClass
	private: static class UClass AInfo::PrivateStaticClass
	private: static class UClass AInspector::PrivateStaticClass
	private: static class UClass AInternetInfo::PrivateStaticClass
	private: static class UClass AInterpolationPoint::PrivateStaticClass
	private: static class UClass AInventory::PrivateStaticClass
	private: static class UClass AInventoryAttachment::PrivateStaticClass
	private: static class UClass AInventorySpot::PrivateStaticClass
	private: static class UClass AJumpDest::PrivateStaticClass
	private: static class UClass AJumpPad::PrivateStaticClass
	private: static class UClass AKActor::PrivateStaticClass
	private: static class UClass AKBSJoint::PrivateStaticClass
	private: static class UClass AKCarWheelJoint::PrivateStaticClass
	private: static class UClass AKConeLimit::PrivateStaticClass
	private: static class UClass AKConstraint::PrivateStaticClass
	private: static class UClass AKeypoint::PrivateStaticClass
	private: static class UClass AKHinge::PrivateStaticClass
	private: static class UClass AKTire::PrivateStaticClass
	private: static class UClass AKVehicle::PrivateStaticClass
	private: static class UClass AL2Alarm::PrivateStaticClass
	private: static class UClass AL2Dice::PrivateStaticClass
	private: static class UClass AL2Float::PrivateStaticClass
	private: static class UClass AL2Indicator::PrivateStaticClass
	private: static class UClass AL2NMover::PrivateStaticClass
	private: static class UClass AL2Pickup::PrivateStaticClass
	private: static class UClass AL2Radar::PrivateStaticClass
	private: static class UClass AL2SeamlessInfo::PrivateStaticClass
	private: static class UClass ALadder::PrivateStaticClass
	private: static class UClass ALadderVolume::PrivateStaticClass
	private: static class UClass ALevelInfo::PrivateStaticClass
	private: static class UClass ALiftCenter::PrivateStaticClass
	private: static class UClass ALiftExit::PrivateStaticClass
	private: static class UClass ALight::PrivateStaticClass
	private: static class UClass ALineagePlayerController::PrivateStaticClass
	private: static class UClass ALineOfSightTrigger::PrivateStaticClass
	private: static class UClass ALocationInfo::PrivateStaticClass
	private: static class UClass ALookTarget::PrivateStaticClass
	private: static class UClass AMarkProjector::PrivateStaticClass
	private: static class UClass AMatDemoActor::PrivateStaticClass
	private: static class UClass AMovableStaticMeshActor::PrivateStaticClass
	private: static class UClass AMover::PrivateStaticClass
	private: static class UClass AMusicVolume::PrivateStaticClass
	private: static class UClass AMutator::PrivateStaticClass
	private: static class UClass ANavigationPoint::PrivateStaticClass
	private: static class UClass ANCubics::PrivateStaticClass
	private: static class UClass ANLine::PrivateStaticClass
	private: static class UClass ANMoon::PrivateStaticClass
	private: static class UClass ANMovableSunLight::PrivateStaticClass
	private: static class UClass ANote::PrivateStaticClass
	private: static class UClass ANpcPosInfo::PrivateStaticClass
	private: static class UClass ANProjectile::PrivateStaticClass
	private: static class UClass ANSkillProjectile::PrivateStaticClass
	private: static class UClass ANSun::PrivateStaticClass
	private: static class UClass APathNode::PrivateStaticClass
	private: static class UClass APawn::PrivateStaticClass
	private: static class UClass APhysicsVolume::PrivateStaticClass
	private: static class UClass APickup::PrivateStaticClass
	private: static class UClass APlayerController::PrivateStaticClass
	private: static class UClass APlayerReplicationInfo::PrivateStaticClass
	private: static class UClass APlayerStart::PrivateStaticClass
	private: static class UClass APolyMarker::PrivateStaticClass
	private: static class UClass APotentialClimbWatcher::PrivateStaticClass
	private: static class UClass APowerups::PrivateStaticClass
	private: static class UClass AProjectile::PrivateStaticClass
	private: static class UClass AProjector::PrivateStaticClass
	private: static class UClass AReplicationInfo::PrivateStaticClass
	private: static class UClass ASavedMove::PrivateStaticClass
	private: static class UClass ASceneManager::PrivateStaticClass
	private: static class UClass AScout::PrivateStaticClass
	private: static class UClass ASecurity::PrivateStaticClass
	private: static class UClass AServerPrimitive::PrivateStaticClass
	private: static class UClass AShadowProjector::PrivateStaticClass
	private: static class UClass ASkyZoneInfo::PrivateStaticClass
	private: static class UClass ASmallNavigationPoint::PrivateStaticClass
	private: static class UClass ASpawnableStaticMeshActor::PrivateStaticClass
	private: static class UClass AStaticMeshActor::PrivateStaticClass
	private: static class UClass AStationaryWeapons::PrivateStaticClass
	private: static class UClass AStatLog::PrivateStaticClass
	private: static class UClass AStatLogFile::PrivateStaticClass
	private: static class UClass ASuperPointInfo::PrivateStaticClass
	private: static class UClass ATeamInfo::PrivateStaticClass
	private: static class UClass ATeleporter::PrivateStaticClass
	private: static class UClass ATerrainInfo::PrivateStaticClass
	private: static class UClass ATerritoryInfo::PrivateStaticClass
	private: static class UClass ATrigger::PrivateStaticClass
	private: static class UClass ATriggers::PrivateStaticClass
	private: static class UClass AVehicle::PrivateStaticClass
	private: static class UClass AVehiclePart::PrivateStaticClass
	private: static class UClass AVehicleRoutePoint::PrivateStaticClass
	private: static class UClass AViewportWindowController::PrivateStaticClass
	private: static class UClass AVolume::PrivateStaticClass
	private: static class UClass AWarpZoneInfo::PrivateStaticClass
	private: static class UClass AWarpZoneMarker::PrivateStaticClass
	private: static class UClass AWaterHitEmitter::PrivateStaticClass
	private: static class UClass AWeapon::PrivateStaticClass
	private: static class UClass AWeaponAttachment::PrivateStaticClass
	private: static class UClass AZoneInfo::PrivateStaticClass
	private: static class UClass UActionMoveCamera::PrivateStaticClass
	private: static class UClass UActionPause::PrivateStaticClass
	private: static class UClass UActionWarp::PrivateStaticClass
	private: static class UClass UActorChannel::PrivateStaticClass
	private: static class UClass UAmbientSoundObject::PrivateStaticClass
	private: static class UClass UAnimation::PrivateStaticClass
	private: static class UClass UAnimNotify::PrivateStaticClass
	private: static class UClass UAnimNotify_AttackItem::PrivateStaticClass
	private: static class UClass UAnimNotify_AttackPreShot::PrivateStaticClass
	private: static class UClass UAnimNotify_AttackShot::PrivateStaticClass
	private: static class UClass UAnimNotify_AttackVoice::PrivateStaticClass
	private: static class UClass UAnimNotify_BoneScale::PrivateStaticClass
	private: static class UClass UAnimNotify_Channeling::PrivateStaticClass
	private: static class UClass UAnimNotify_DestroyEffect::PrivateStaticClass
	private: static class UClass UAnimNotify_Effect::PrivateStaticClass
	private: static class UClass UAnimNotify_IdleSound::PrivateStaticClass
	private: static class UClass UAnimNotify_MatSubAction::PrivateStaticClass
	private: static class UClass UAnimNotify_ScreenFade::PrivateStaticClass
	private: static class UClass UAnimNotify_Script::PrivateStaticClass
	private: static class UClass UAnimNotify_Scripted::PrivateStaticClass
	private: static class UClass UAnimNotify_Sound::PrivateStaticClass
	private: static class UClass UAnimNotify_SwimSound::PrivateStaticClass
	private: static class UClass UAnimNotify_ViewShake::PrivateStaticClass
	private: static class UClass UAudioSubsystem::PrivateStaticClass
	private: static class UClass UBaseGUIController::PrivateStaticClass
	private: static class UClass UBeamEmitter::PrivateStaticClass
	private: static class UClass UBitmapMaterial::PrivateStaticClass
	private: static class UClass UBlackWhite::PrivateStaticClass
	private: static class UClass UBumpShader::PrivateStaticClass
	private: static class UClass UCameraEffect::PrivateStaticClass
	private: static class UClass UCameraOverlay::PrivateStaticClass
	private: static class UClass UCanvas::PrivateStaticClass
	private: static class UClass UChannel::PrivateStaticClass
	private: static class UClass UChannelDownload::PrivateStaticClass
	private: static class UClass UCheatManager::PrivateStaticClass
	private: static class UClass UClient::PrivateStaticClass
	private: static class UClass UColorModifier::PrivateStaticClass
	private: static class UClass UCombiner::PrivateStaticClass
	private: static class UClass UConsole::PrivateStaticClass
	private: static class UClass UConstantColor::PrivateStaticClass
	private: static class UClass UConstantMaterial::PrivateStaticClass
	private: static class UClass UControlChannel::PrivateStaticClass
	private: static class UClass UConvexVolume::PrivateStaticClass
	private: static class UClass UCubemap::PrivateStaticClass
	private: static class UClass UDemoRecConnection::PrivateStaticClass
	private: static class UClass UDemoRecDriver::PrivateStaticClass
	private: static class UClass UDownload::PrivateStaticClass
	private: static class UClass UDummyAudio::PrivateStaticClass
	private: static class UClass UEngine::PrivateStaticClass
	private: static class UClass UExtraMeshData::PrivateStaticClass
	private: static class UClass UExtraSkeletalMeshInstance::PrivateStaticClass
	private: static class UClass UFadeBlackWhite::PrivateStaticClass
	private: static class UClass UFadeColor::PrivateStaticClass
	private: static class UClass UFileChannel::PrivateStaticClass
	private: static class UClass UFinalBlend::PrivateStaticClass
	private: static class UClass UFluidSurfacePrimitive::PrivateStaticClass
	private: static class UClass UFont::PrivateStaticClass
	private: static class UClass UGameEngine::PrivateStaticClass
	private: static class UClass UGlowEffect::PrivateStaticClass
	private: static class UClass UGlowModifier::PrivateStaticClass
	private: static class UClass UHDREffect::PrivateStaticClass
	private: static class UClass UI3DL2Listener::PrivateStaticClass
	private: static class UClass UIndexBuffer::PrivateStaticClass
	private: static class UClass UInput::PrivateStaticClass
	private: static class UClass UInteraction::PrivateStaticClass
	private: static class UClass UInteractionMaster::PrivateStaticClass
	private: static class UClass UInteractions::PrivateStaticClass
	private: static class UClass UKarmaParams::PrivateStaticClass
	private: static class UClass UKarmaParamsCollision::PrivateStaticClass
	private: static class UClass UKarmaParamsRBFull::PrivateStaticClass
	private: static class UClass UKarmaParamsSkel::PrivateStaticClass
	private: static class UClass UKMeshProps::PrivateStaticClass
	private: static class UClass UL2ColorModifier::PrivateStaticClass
	private: static class UClass UL2ConsoleWnd::PrivateStaticClass
	private: static class UClass UL2Font::PrivateStaticClass
	private: static class UClass UL2NEnvLight::PrivateStaticClass
	private: static class UClass UL2NEnvManager::PrivateStaticClass
	private: static class UClass UL2NetHandler::PrivateStaticClass
	private: static class UClass UL2NTimeLight::PrivateStaticClass
	private: static class UClass UL2OrcMove::PrivateStaticClass
	private: static class UClass UL2TextureFactory::PrivateStaticClass
	private: static class UClass ULevel::PrivateStaticClass
	private: static class UClass ULevelBase::PrivateStaticClass
	private: static class UClass ULevelObject::PrivateStaticClass
	private: static class UClass ULevelSummary::PrivateStaticClass
	private: static class UClass ULodMesh::PrivateStaticClass
	private: static class UClass ULodMeshInstance::PrivateStaticClass
	private: static class UClass UMatAction::PrivateStaticClass
	private: static class UClass UMaterial::PrivateStaticClass
	private: static class UClass UMaterialSequence::PrivateStaticClass
	private: static class UClass UMaterialSwitch::PrivateStaticClass
	private: static class UClass UMatObject::PrivateStaticClass
	private: static class UClass UMatSubAction::PrivateStaticClass
	private: static class UClass UMesh::PrivateStaticClass
	private: static class UClass UMeshAnimation::PrivateStaticClass
	private: static class UClass UMeshEmitter::PrivateStaticClass
	private: static class UClass UMeshInstance::PrivateStaticClass
	private: static class UClass UMeshObject::PrivateStaticClass
	private: static class UClass UModel::PrivateStaticClass
	private: static class UClass UModifier::PrivateStaticClass
	private: static class UClass UMotionBlur::PrivateStaticClass
	private: static class UClass UNetConnection::PrivateStaticClass
	private: static class UClass UNetDriver::PrivateStaticClass
	private: static class UClass UNetworkHandler::PrivateStaticClass
	private: static class UClass UNullRenderDevice::PrivateStaticClass
	private: static class UClass UOpacityModifier::PrivateStaticClass
	private: static class UClass UOrcMove::PrivateStaticClass
	private: static class UClass UPackageCheckInfo::PrivateStaticClass
	private: static class UClass UPackageMapLevel::PrivateStaticClass
	private: static class UClass UPalette::PrivateStaticClass
	private: static class UClass UParticleEmitter::PrivateStaticClass
	private: static class UClass UParticleMaterial::PrivateStaticClass
	private: static class UClass UPlayer::PrivateStaticClass
	private: static class UClass UPlayerInput::PrivateStaticClass
	private: static class UClass UPolys::PrivateStaticClass
	private: static class UClass UPrimitive::PrivateStaticClass
	private: static class UClass UProjectorMaterial::PrivateStaticClass
	private: static class UClass UProjectorPrimitive::PrivateStaticClass
	private: static class UClass UProxyBitmapMaterial::PrivateStaticClass
	private: static class UClass UReachSpec::PrivateStaticClass
	private: static class UClass URenderDevice::PrivateStaticClass
	private: static class UClass URenderedMaterial::PrivateStaticClass
	private: static class UClass URenderResource::PrivateStaticClass
	private: static class UClass URibbonEmitter::PrivateStaticClass
	private: static class UClass UScriptedTexture::PrivateStaticClass
	private: static class UClass UShader::PrivateStaticClass
	private: static class UClass UShadowBitmapMaterial::PrivateStaticClass
	private: static class UClass USkeletalMesh::PrivateStaticClass
	private: static class UClass USkeletalMeshInstance::PrivateStaticClass
	private: static class UClass USkillAction::PrivateStaticClass
	private: static class UClass USkillAction_LocateEffect::PrivateStaticClass
	private: static class UClass USkillAction_SwordTrail::PrivateStaticClass
	private: static class UClass USkillVisualEffect::PrivateStaticClass
	private: static class UClass USkinVertexBuffer::PrivateStaticClass
	private: static class UClass USound::PrivateStaticClass
	private: static class UClass USparkEmitter::PrivateStaticClass
	private: static class UClass USpriteEmitter::PrivateStaticClass
	private: static class UClass UStaticMesh::PrivateStaticClass
	private: static class UClass UStaticMeshInstance::PrivateStaticClass
	private: static class UClass USubActionCameraEffect::PrivateStaticClass
	private: static class UClass USubActionCameraShake::PrivateStaticClass
	private: static class UClass USubActionFade::PrivateStaticClass
	private: static class UClass USubActionFOV::PrivateStaticClass
	private: static class UClass USubActionGameSpeed::PrivateStaticClass
	private: static class UClass USubActionOrientation::PrivateStaticClass
	private: static class UClass USubActionSceneSpeed::PrivateStaticClass
	private: static class UClass USubActionTrigger::PrivateStaticClass
	private: static class UClass USubSkeletalMeshInstance::PrivateStaticClass
	private: static class UClass UTerrainMaterial::PrivateStaticClass
	private: static class UClass UTerrainPrimitive::PrivateStaticClass
	private: static class UClass UTerrainSector::PrivateStaticClass
	private: static class UClass UTexCoordMaterial::PrivateStaticClass
	private: static class UClass UTexCoordSource::PrivateStaticClass
	private: static class UClass UTexEnvMap::PrivateStaticClass
	private: static class UClass UTexMatrix::PrivateStaticClass
	private: static class UClass UTexModifier::PrivateStaticClass
	private: static class UClass UTexOscillator::PrivateStaticClass
	private: static class UClass UTexOscillatorTriggered::PrivateStaticClass
	private: static class UClass UTexPanner::PrivateStaticClass
	private: static class UClass UTexPannerTriggered::PrivateStaticClass
	private: static class UClass UTexRotator::PrivateStaticClass
	private: static class UClass UTexScaler::PrivateStaticClass
	private: static class UClass UTexture::PrivateStaticClass
	private: static class UClass UTrailEmitter::PrivateStaticClass
	private: static class UClass UUnderWaterEffect::PrivateStaticClass
	private: static class UClass UUnderWaterMaterial::PrivateStaticClass
	private: static class UClass UUnderWaterShader::PrivateStaticClass
	private: static class UClass UVertexBuffer::PrivateStaticClass
	private: static class UClass UVertexColor::PrivateStaticClass
	private: static class UClass UVertexStreamBase::PrivateStaticClass
	private: static class UClass UVertexStreamCOLOR::PrivateStaticClass
	private: static class UClass UVertexStreamPosNormTex::PrivateStaticClass
	private: static class UClass UVertexStreamUV::PrivateStaticClass
	private: static class UClass UVertexStreamVECTOR::PrivateStaticClass
	private: static class UClass UVertMesh::PrivateStaticClass
	private: static class UClass UVertMeshEmitter::PrivateStaticClass
	private: static class UClass UVertMeshInstance::PrivateStaticClass
	private: static class UClass UViewport::PrivateStaticClass
	private: static class UClass UWaterMaterial::PrivateStaticClass
	private: static unsigned char const FNAbnormalStat_FLESH_STONE::B
	private: static unsigned char const FNAbnormalStat_FLESH_STONE::G
	private: static unsigned char const FNAbnormalStat_FLESH_STONE::R
	private: static unsigned char const FNAbnormalStat_STEALTH::A
	protected: virtual float __thiscall UL2NTimeLight::GetBrightness(class TArray<struct FNTimeHSV> &,float)
	protected: virtual void __thiscall UL2NTimeLight::GetBaseColorPlane(class TArray<struct FNTimeHSV> &,float,class FPlane &)
	protected: virtual void __thiscall UL2NTimeLight::GetColor(class TArray<struct FNTimeColor> &,float,unsigned char &,unsigned char &,unsigned char &)
	protected: virtual void __thiscall UL2NTimeLight::GetColor(class TArray<struct FNTimeColor> &,int,int,float,unsigned char &,unsigned char &,unsigned char &)
	protected: virtual void __thiscall UL2NTimeLight::GetColorPlane(class TArray<struct FNTimeHSV> &,float,class FPlane &)
	protected: virtual void __thiscall UL2NTimeLight::GetScale(class TArray<struct FNTimeScale> &,float,float &)
	protected: virtual void __thiscall UL2NTimeLight::LoadColor(class TArray<struct FNTimeColor> &,unsigned short const *,unsigned short const *)
	protected: virtual void __thiscall UL2NTimeLight::LoadColors(class TArray<int> &,class TArray<struct FNTimeColor> &,unsigned short const *,unsigned short const *)
	protected: virtual void __thiscall UL2NTimeLight::LoadHSV(class TArray<struct FNTimeHSV> &,unsigned short const *,unsigned short const *)
	protected: virtual void __thiscall UL2NTimeLight::LoadScale(class TArray<struct FNTimeScale> &,unsigned short const *,unsigned short const *)
	public: __thiscall FColor::operator class FPlane(void)const 
	public: __thiscall FColor::operator class FVector(void)const 
	public: __thiscall FColor::operator unsigned long(void)const 
	public: __thiscall TArray<unsigned char>::TArray<unsigned char>(class TArray<unsigned char> const &)
	public: __thiscall TArray<unsigned char>::TArray<unsigned char>(enum ENoInit)
	public: __thiscall TArray<unsigned char>::TArray<unsigned char>(int)
	public: __thiscall TArray<unsigned char>::TArray<unsigned char>(void)
	public: __thiscall TArray<unsigned char>::~TArray<unsigned char>(void)
	public: __thiscall TLazyArray<unsigned char>::TLazyArray<unsigned char>(class TLazyArray<unsigned char> const &)
	public: __thiscall TLazyArray<unsigned char>::TLazyArray<unsigned char>(int)
	public: __thiscall TLazyArray<unsigned char>::~TLazyArray<unsigned char>(void)
	public: class AActor & __thiscall AActor::operator=(class AActor const &)
	public: class AAIController & __thiscall AAIController::operator=(class AAIController const &)
	public: class AAIMarker & __thiscall AAIMarker::operator=(class AAIMarker const &)
	public: class AAirEmitter & __thiscall AAirEmitter::operator=(class AAirEmitter const &)
	public: class AAirVolume & __thiscall AAirVolume::operator=(class AAirVolume const &)
	public: class AAIScript & __thiscall AAIScript::operator=(class AAIScript const &)
	public: class AAmbientSound & __thiscall AAmbientSound::operator=(class AAmbientSound const &)
	public: class AAmmo & __thiscall AAmmo::operator=(class AAmmo const &)
	public: class AAmmunition & __thiscall AAmmunition::operator=(class AAmmunition const &)
	public: class AAntiPortalActor & __thiscall AAntiPortalActor::operator=(class AAntiPortalActor const &)
	public: class AAutoDoor & __thiscall AAutoDoor::operator=(class AAutoDoor const &)
	public: class AAutoLadder & __thiscall AAutoLadder::operator=(class AAutoLadder const &)
	public: class AAvoidMarker & __thiscall AAvoidMarker::operator=(class AAvoidMarker const &)
	public: class ABlockingVolume & __thiscall ABlockingVolume::operator=(class ABlockingVolume const &)
	public: class ABrush & __thiscall ABrush::operator=(class ABrush const &)
	public: class ACamera & __thiscall ACamera::operator=(class ACamera const &)
	public: class ACarriedObject & __thiscall ACarriedObject::operator=(class ACarriedObject const &)
	public: class AClipMarker & __thiscall AClipMarker::operator=(class AClipMarker const &)
	public: class AController & __thiscall AController::operator=(class AController const &)
	public: class ADamageType & __thiscall ADamageType::operator=(class ADamageType const &)
	public: class ADecoration & __thiscall ADecoration::operator=(class ADecoration const &)
	public: class ADecorationList & __thiscall ADecorationList::operator=(class ADecorationList const &)
	public: class ADecoVolumeObject & __thiscall ADecoVolumeObject::operator=(class ADecoVolumeObject const &)
	public: class ADefaultPhysicsVolume & __thiscall ADefaultPhysicsVolume::operator=(class ADefaultPhysicsVolume const &)
	public: class ADoor & __thiscall ADoor::operator=(class ADoor const &)
	public: class AEmitter & __thiscall AEmitter::operator=(class AEmitter const &)
	public: class AEmitterLight & __thiscall AEmitterLight::operator=(class AEmitterLight const &)
	public: class AEnvCreatureManagerInfo & __thiscall AEnvCreatureManagerInfo::operator=(class AEnvCreatureManagerInfo const &)
	public: class AFileLog & __thiscall AFileLog::operator=(class AFileLog const &)
	public: class AFluidSurfaceInfo & __thiscall AFluidSurfaceInfo::operator=(class AFluidSurfaceInfo const &)
	public: class AFluidSurfaceOscillator & __thiscall AFluidSurfaceOscillator::operator=(class AFluidSurfaceOscillator const &)
	public: class AGameInfo & __thiscall AGameInfo::operator=(class AGameInfo const &)
	public: class AGameReplicationInfo & __thiscall AGameReplicationInfo::operator=(class AGameReplicationInfo const &)
	public: class AGameStats & __thiscall AGameStats::operator=(class AGameStats const &)
	public: class AHUD & __thiscall AHUD::operator=(class AHUD const &)
	public: class AInfo & __thiscall AInfo::operator=(class AInfo const &)
	public: class AInspector & __thiscall AInspector::operator=(class AInspector const &)
	public: class AInternetInfo & __thiscall AInternetInfo::operator=(class AInternetInfo const &)
	public: class AInterpolationPoint & __thiscall AInterpolationPoint::operator=(class AInterpolationPoint const &)
	public: class AInventory & __thiscall AInventory::operator=(class AInventory const &)
	public: class AInventoryAttachment & __thiscall AInventoryAttachment::operator=(class AInventoryAttachment const &)
	public: class AInventorySpot & __thiscall AInventorySpot::operator=(class AInventorySpot const &)
	public: class AJumpDest & __thiscall AJumpDest::operator=(class AJumpDest const &)
	public: class AJumpPad & __thiscall AJumpPad::operator=(class AJumpPad const &)
	public: class AKActor & __thiscall AKActor::operator=(class AKActor const &)
	public: class AKBSJoint & __thiscall AKBSJoint::operator=(class AKBSJoint const &)
	public: class AKCarWheelJoint & __thiscall AKCarWheelJoint::operator=(class AKCarWheelJoint const &)
	public: class AKConeLimit & __thiscall AKConeLimit::operator=(class AKConeLimit const &)
	public: class AKConstraint & __thiscall AKConstraint::operator=(class AKConstraint const &)
	public: class AKeypoint & __thiscall AKeypoint::operator=(class AKeypoint const &)
	public: class AKHinge & __thiscall AKHinge::operator=(class AKHinge const &)
	public: class AKTire & __thiscall AKTire::operator=(class AKTire const &)
	public: class AKVehicle & __thiscall AKVehicle::operator=(class AKVehicle &)
	public: class AL2Alarm & __thiscall AL2Alarm::operator=(class AL2Alarm const &)
	public: class AL2Dice & __thiscall AL2Dice::operator=(class AL2Dice const &)
	public: class AL2Float & __thiscall AL2Float::operator=(class AL2Float const &)
	public: class AL2Indicator & __thiscall AL2Indicator::operator=(class AL2Indicator const &)
	public: class AL2NMover & __thiscall AL2NMover::operator=(class AL2NMover const &)
	public: class AL2Pickup & __thiscall AL2Pickup::operator=(class AL2Pickup const &)
	public: class AL2Radar & __thiscall AL2Radar::operator=(class AL2Radar const &)
	public: class AL2SeamlessInfo & __thiscall AL2SeamlessInfo::operator=(class AL2SeamlessInfo const &)
	public: class ALadder & __thiscall ALadder::operator=(class ALadder const &)
	public: class ALadderVolume & __thiscall ALadderVolume::operator=(class ALadderVolume const &)
	public: class ALevelInfo & __thiscall ALevelInfo::operator=(class ALevelInfo const &)
	public: class ALiftCenter & __thiscall ALiftCenter::operator=(class ALiftCenter const &)
	public: class ALiftExit & __thiscall ALiftExit::operator=(class ALiftExit const &)
	public: class ALight & __thiscall ALight::operator=(class ALight const &)
	public: class ALineagePlayerController & __thiscall ALineagePlayerController::operator=(class ALineagePlayerController const &)
	public: class ALineOfSightTrigger & __thiscall ALineOfSightTrigger::operator=(class ALineOfSightTrigger const &)
	public: class ALocationInfo & __thiscall ALocationInfo::operator=(class ALocationInfo const &)
	public: class ALookTarget & __thiscall ALookTarget::operator=(class ALookTarget const &)
	public: class AMarkProjector & __thiscall AMarkProjector::operator=(class AMarkProjector const &)
	public: class AMatDemoActor & __thiscall AMatDemoActor::operator=(class AMatDemoActor const &)
	public: class AMovableStaticMeshActor & __thiscall AMovableStaticMeshActor::operator=(class AMovableStaticMeshActor const &)
	public: class AMover & __thiscall AMover::operator=(class AMover const &)
	public: class AMusicVolume & __thiscall AMusicVolume::operator=(class AMusicVolume const &)
	public: class AMutator & __thiscall AMutator::operator=(class AMutator const &)
	public: class ANavigationPoint & __thiscall ANavigationPoint::operator=(class ANavigationPoint const &)
	public: class ANCubics & __thiscall ANCubics::operator=(class ANCubics &)
	public: class ANLine & __thiscall ANLine::operator=(class ANLine const &)
	public: class ANMoon & __thiscall ANMoon::operator=(class ANMoon const &)
	public: class ANMovableSunLight & __thiscall ANMovableSunLight::operator=(class ANMovableSunLight const &)
	public: class ANote & __thiscall ANote::operator=(class ANote const &)
	public: class ANpcPosInfo & __thiscall ANpcPosInfo::operator=(class ANpcPosInfo const &)
	public: class ANProjectile & __thiscall ANProjectile::operator=(class ANProjectile &)
	public: class ANSkillProjectile & __thiscall ANSkillProjectile::operator=(class ANSkillProjectile &)
	public: class ANSun & __thiscall ANSun::operator=(class ANSun const &)
	public: class APathNode & __thiscall APathNode::operator=(class APathNode const &)
	public: class APawn & __thiscall APawn::operator=(class APawn &)
	public: class APhysicsVolume & __thiscall APhysicsVolume::operator=(class APhysicsVolume const &)
	public: class APickup & __thiscall APickup::operator=(class APickup const &)
	public: class APlayerController & __thiscall APlayerController::operator=(class APlayerController const &)
	public: class APlayerReplicationInfo & __thiscall APlayerReplicationInfo::operator=(class APlayerReplicationInfo const &)
	public: class APlayerStart & __thiscall APlayerStart::operator=(class APlayerStart const &)
	public: class APolyMarker & __thiscall APolyMarker::operator=(class APolyMarker const &)
	public: class APotentialClimbWatcher & __thiscall APotentialClimbWatcher::operator=(class APotentialClimbWatcher const &)
	public: class APowerups & __thiscall APowerups::operator=(class APowerups const &)
	public: class AProjectile & __thiscall AProjectile::operator=(class AProjectile const &)
	public: class AProjector & __thiscall AProjector::operator=(class AProjector const &)
	public: class AReplicationInfo & __thiscall AReplicationInfo::operator=(class AReplicationInfo const &)
	public: class ASavedMove & __thiscall ASavedMove::operator=(class ASavedMove const &)
	public: class ASceneManager & __thiscall ASceneManager::operator=(class ASceneManager const &)
	public: class AScout & __thiscall AScout::operator=(class AScout &)
	public: class ASecurity & __thiscall ASecurity::operator=(class ASecurity const &)
	public: class AServerPrimitive & __thiscall AServerPrimitive::operator=(class AServerPrimitive const &)
	public: class AShadowProjector & __thiscall AShadowProjector::operator=(class AShadowProjector const &)
	public: class ASkyZoneInfo & __thiscall ASkyZoneInfo::operator=(class ASkyZoneInfo const &)
	public: class ASmallNavigationPoint & __thiscall ASmallNavigationPoint::operator=(class ASmallNavigationPoint const &)
	public: class ASpawnableStaticMeshActor & __thiscall ASpawnableStaticMeshActor::operator=(class ASpawnableStaticMeshActor const &)
	public: class AStaticMeshActor & __thiscall AStaticMeshActor::operator=(class AStaticMeshActor const &)
	public: class AStationaryWeapons & __thiscall AStationaryWeapons::operator=(class AStationaryWeapons const &)
	public: class AStatLog & __thiscall AStatLog::operator=(class AStatLog const &)
	public: class AStatLogFile & __thiscall AStatLogFile::operator=(class AStatLogFile const &)
	public: class ASuperPointInfo & __thiscall ASuperPointInfo::operator=(class ASuperPointInfo const &)
	public: class ATeamInfo & __thiscall ATeamInfo::operator=(class ATeamInfo const &)
	public: class ATeleporter & __thiscall ATeleporter::operator=(class ATeleporter const &)
	public: class ATerrainInfo & __thiscall ATerrainInfo::operator=(class ATerrainInfo const &)
	public: class ATerritoryInfo & __thiscall ATerritoryInfo::operator=(class ATerritoryInfo const &)
	public: class ATrigger & __thiscall ATrigger::operator=(class ATrigger const &)
	public: class ATriggers & __thiscall ATriggers::operator=(class ATriggers const &)
	public: class AVehicle & __thiscall AVehicle::operator=(class AVehicle &)
	public: class AVehiclePart & __thiscall AVehiclePart::operator=(class AVehiclePart const &)
	public: class AVehicleRoutePoint & __thiscall AVehicleRoutePoint::operator=(class AVehicleRoutePoint &)
	public: class AViewportWindowController & __thiscall AViewportWindowController::operator=(class AViewportWindowController const &)
	public: class AVolume & __thiscall AVolume::operator=(class AVolume const &)
	public: class AWarpZoneInfo & __thiscall AWarpZoneInfo::operator=(class AWarpZoneInfo const &)
	public: class AWarpZoneMarker & __thiscall AWarpZoneMarker::operator=(class AWarpZoneMarker const &)
	public: class AWaterHitEmitter & __thiscall AWaterHitEmitter::operator=(class AWaterHitEmitter const &)
	public: class AWeapon & __thiscall AWeapon::operator=(class AWeapon const &)
	public: class AWeaponAttachment & __thiscall AWeaponAttachment::operator=(class AWeaponAttachment const &)
	public: class AZoneInfo & __thiscall AZoneInfo::operator=(class AZoneInfo const &)
	public: class CellQueueType & __thiscall CellQueueType::operator=(class CellQueueType const &)
	public: class CGeoCellInfo & __thiscall CGeoCellInfo::operator=(class CGeoCellInfo const &)
	public: class CGeoZoneInfo & __thiscall CGeoZoneInfo::operator=(class CGeoZoneInfo const &)
	public: class FActorSceneNode & __thiscall FActorSceneNode::operator=(class FActorSceneNode const &)
	public: class FAnimMeshVertexStream & __thiscall FAnimMeshVertexStream::operator=(class FAnimMeshVertexStream const &)
	public: class FBezier & __thiscall FBezier::operator=(class FBezier const &)
	public: class FBspSection & __thiscall FBspSection::operator=(class FBspSection const &)
	public: class FBspVertexStream & __thiscall FBspVertexStream::operator=(class FBspVertexStream const &)
	public: class FCameraSceneNode & __thiscall FCameraSceneNode::operator=(class FCameraSceneNode const &)
	public: class FCanvasUtil & __thiscall FCanvasUtil::operator=(class FCanvasUtil const &)
	public: class FCanvasVertex & __thiscall FCanvasVertex::operator=(class FCanvasVertex const &)
	public: class FChatMsgInfo & __thiscall FChatMsgInfo::operator=(class FChatMsgInfo const &)
	public: class FCollisionHash & __thiscall FCollisionHash::operator=(class FCollisionHash const &)
	public: class FCollisionOctree & __thiscall FCollisionOctree::operator=(class FCollisionOctree const &)
	public: class FColor & __thiscall FColor::operator=(class FColor const &)
	public: class FConvexVolume & __thiscall FConvexVolume::operator=(class FConvexVolume const &)
	public: class FDirectionalLightMapSceneNode & __thiscall FDirectionalLightMapSceneNode::operator=(class FDirectionalLightMapSceneNode const &)
	public: class FDynamicActor & __thiscall FDynamicActor::operator=(class FDynamicActor const &)
	public: class FDynamicLight & __thiscall FDynamicLight::operator=(class FDynamicLight const &)
	public: class FEngineStats & __thiscall FEngineStats::operator=(class FEngineStats const &)
	public: class FGPUSkinVertexStream & __thiscall FGPUSkinVertexStream::operator=(class FGPUSkinVertexStream const &)
	public: class FHitObserver & __thiscall FHitObserver::operator=(class FHitObserver const &)
	public: class FInBunch & __thiscall FInBunch::operator=(class FInBunch const &)
	public: class FKAggregateGeom & __thiscall FKAggregateGeom::operator=(class FKAggregateGeom const &)
	public: class FKBoxElem & __thiscall FKBoxElem::operator=(class FKBoxElem const &)
	public: class FKConvexElem & __thiscall FKConvexElem::operator=(class FKConvexElem const &)
	public: class FKCylinderElem & __thiscall FKCylinderElem::operator=(class FKCylinderElem const &)
	public: class FKSphereElem & __thiscall FKSphereElem::operator=(class FKSphereElem const &)
	public: class FL2ColorFontInfo & __thiscall FL2ColorFontInfo::operator=(class FL2ColorFontInfo const &)
	public: class FL2GameData & __thiscall FL2GameData::operator=(class FL2GameData const &)
	public: class FL2ReplayManager & __thiscall FL2ReplayManager::operator=(class FL2ReplayManager const &)
	public: class FL2TextAlignParser & __thiscall FL2TextAlignParser::operator=(class FL2TextAlignParser const &)
	public: class FLandMark & __thiscall FLandMark::operator=(class FLandMark const &)
	public: class FLevelSceneNode & __thiscall FLevelSceneNode::operator=(class FLevelSceneNode const &)
	public: class FLightMap & __thiscall FLightMap::operator=(class FLightMap const &)
	public: class FLightMapIndex & __thiscall FLightMapIndex::operator=(class FLightMapIndex const &)
	public: class FLightMapSceneNode & __thiscall FLightMapSceneNode::operator=(class FLightMapSceneNode const &)
	public: class FLightMapTexture & __thiscall FLightMapTexture::operator=(class FLightMapTexture const &)
	public: class FLineBatcher & __thiscall FLineBatcher::operator=(class FLineBatcher const &)
	public: class FLineVertex & __thiscall FLineVertex::operator=(class FLineVertex const &)
	public: class FMatineeTools & __thiscall FMatineeTools::operator=(class FMatineeTools const &)
	public: class FMirrorSceneNode & __thiscall FMirrorSceneNode::operator=(class FMirrorSceneNode const &)
	public: class FMultiLightMapTexture & __thiscall FMultiLightMapTexture::operator=(class FMultiLightMapTexture const &)
	public: class FNAbnormalStat & __thiscall FNAbnormalStat::operator=(class FNAbnormalStat const &)
	public: class FNAbnormalStat_BIGBODY & __thiscall FNAbnormalStat_BIGBODY::operator=(class FNAbnormalStat_BIGBODY const &)
	public: class FNAbnormalStat_BIGHEAD & __thiscall FNAbnormalStat_BIGHEAD::operator=(class FNAbnormalStat_BIGHEAD const &)
	public: class FNAbnormalStat_CHANGE_TEXTURE & __thiscall FNAbnormalStat_CHANGE_TEXTURE::operator=(class FNAbnormalStat_CHANGE_TEXTURE const &)
	public: class FNAbnormalStat_DANCE_ROOT & __thiscall FNAbnormalStat_DANCE_ROOT::operator=(class FNAbnormalStat_DANCE_ROOT const &)
	public: class FNAbnormalStat_DOT_BLEEDING & __thiscall FNAbnormalStat_DOT_BLEEDING::operator=(class FNAbnormalStat_DOT_BLEEDING const &)
	public: class FNAbnormalStat_DOT_FIRE & __thiscall FNAbnormalStat_DOT_FIRE::operator=(class FNAbnormalStat_DOT_FIRE const &)
	public: class FNAbnormalStat_DOT_FIRE_AREA & __thiscall FNAbnormalStat_DOT_FIRE_AREA::operator=(class FNAbnormalStat_DOT_FIRE_AREA const &)
	public: class FNAbnormalStat_DOT_MP & __thiscall FNAbnormalStat_DOT_MP::operator=(class FNAbnormalStat_DOT_MP const &)
	public: class FNAbnormalStat_DOT_POISON & __thiscall FNAbnormalStat_DOT_POISON::operator=(class FNAbnormalStat_DOT_POISON const &)
	public: class FNAbnormalStat_DOT_SOIL & __thiscall FNAbnormalStat_DOT_SOIL::operator=(class FNAbnormalStat_DOT_SOIL const &)
	public: class FNAbnormalStat_DOT_WATER & __thiscall FNAbnormalStat_DOT_WATER::operator=(class FNAbnormalStat_DOT_WATER const &)
	public: class FNAbnormalStat_DOT_WIND & __thiscall FNAbnormalStat_DOT_WIND::operator=(class FNAbnormalStat_DOT_WIND const &)
	public: class FNAbnormalStat_FLESH_STONE & __thiscall FNAbnormalStat_FLESH_STONE::operator=(class FNAbnormalStat_FLESH_STONE const &)
	public: class FNAbnormalStat_FLOATING_ROOT & __thiscall FNAbnormalStat_FLOATING_ROOT::operator=(class FNAbnormalStat_FLOATING_ROOT const &)
	public: class FNAbnormalStat_GHOST_STUN & __thiscall FNAbnormalStat_GHOST_STUN::operator=(class FNAbnormalStat_GHOST_STUN const &)
	public: class FNAbnormalStat_MAGIC_SQUARE & __thiscall FNAbnormalStat_MAGIC_SQUARE::operator=(class FNAbnormalStat_MAGIC_SQUARE const &)
	public: class FNAbnormalStat_PARALYZE & __thiscall FNAbnormalStat_PARALYZE::operator=(class FNAbnormalStat_PARALYZE const &)
	public: class FNAbnormalStat_ROOT & __thiscall FNAbnormalStat_ROOT::operator=(class FNAbnormalStat_ROOT const &)
	public: class FNAbnormalStat_SEIZURE1 & __thiscall FNAbnormalStat_SEIZURE1::operator=(class FNAbnormalStat_SEIZURE1 const &)
	public: class FNAbnormalStat_SEIZURE2 & __thiscall FNAbnormalStat_SEIZURE2::operator=(class FNAbnormalStat_SEIZURE2 const &)
	public: class FNAbnormalStat_SILENCE & __thiscall FNAbnormalStat_SILENCE::operator=(class FNAbnormalStat_SILENCE const &)
	public: class FNAbnormalStat_SLEEP & __thiscall FNAbnormalStat_SLEEP::operator=(class FNAbnormalStat_SLEEP const &)
	public: class FNAbnormalStat_STEALTH & __thiscall FNAbnormalStat_STEALTH::operator=(class FNAbnormalStat_STEALTH const &)
	public: class FNAbnormalStat_STUN & __thiscall FNAbnormalStat_STUN::operator=(class FNAbnormalStat_STUN const &)
	public: class FNActorResourceLoader & __thiscall FNActorResourceLoader::operator=(class FNActorResourceLoader const &)
	public: class FNAppendixEffect & __thiscall FNAppendixEffect::operator=(class FNAppendixEffect const &)
	public: class FNAppendixEffect_COLOSSEUM_1 & __thiscall FNAppendixEffect_COLOSSEUM_1::operator=(class FNAppendixEffect_COLOSSEUM_1 const &)
	public: class FNAppendixEffect_COLOSSEUM_2 & __thiscall FNAppendixEffect_COLOSSEUM_2::operator=(class FNAppendixEffect_COLOSSEUM_2 const &)
	public: class FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE & __thiscall FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE::operator=(class FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE const &)
	public: class FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED & __thiscall FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED::operator=(class FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED const &)
	public: class FNAppendixEffect_COLOSSEUM_SELECTED_BLUE & __thiscall FNAppendixEffect_COLOSSEUM_SELECTED_BLUE::operator=(class FNAppendixEffect_COLOSSEUM_SELECTED_BLUE const &)
	public: class FNAppendixEffect_COLOSSEUM_SELECTED_RED & __thiscall FNAppendixEffect_COLOSSEUM_SELECTED_RED::operator=(class FNAppendixEffect_COLOSSEUM_SELECTED_RED const &)
	public: class FNBoneScalerStat & __thiscall FNBoneScalerStat::operator=(class FNBoneScalerStat const &)
	public: class FNCursedWeaponEffect & __thiscall FNCursedWeaponEffect::operator=(class FNCursedWeaponEffect const &)
	public: class FNetworkNotify & __thiscall FNetworkNotify::operator=(class FNetworkNotify const &)
	public: class FNMonsterRaceInfo & __thiscall FNMonsterRaceInfo::operator=(class FNMonsterRaceInfo const &)
	public: class FNMonsterRaceMgr & __thiscall FNMonsterRaceMgr::operator=(class FNMonsterRaceMgr const &)
	public: class FNPawnLight & __thiscall FNPawnLight::operator=(class FNPawnLight const &)
	public: class FNPawnResource & __thiscall FNPawnResource::operator=(class FNPawnResource const &)
	public: class FNViewShake & __thiscall FNViewShake::operator=(class FNViewShake const &)
	public: class FNViewShakeMgr & __thiscall FNViewShakeMgr::operator=(class FNViewShakeMgr const &)
	public: class FNWeaponEffect & __thiscall FNWeaponEffect::operator=(class FNWeaponEffect const &)
	public: class FOctreeNode & __thiscall FOctreeNode::operator=(class FOctreeNode const &)
	public: class FOutBunch & __thiscall FOutBunch::operator=(class FOutBunch const &)
	public: class FParser & __thiscall FParser::operator=(class FParser const &)
	public: class FPathBuilder & __thiscall FPathBuilder::operator=(class FPathBuilder const &)
	public: class FPlayerSceneNode & __thiscall FPlayerSceneNode::operator=(class FPlayerSceneNode const &)
	public: class FPointLightMapSceneNode & __thiscall FPointLightMapSceneNode::operator=(class FPointLightMapSceneNode const &)
	public: class FPoly & __thiscall FPoly::operator=(class FPoly const &)
	public: class FRaw32BitIndexBuffer & __thiscall FRaw32BitIndexBuffer::operator=(class FRaw32BitIndexBuffer const &)
	public: class FRawColorStream & __thiscall FRawColorStream::operator=(class FRawColorStream const &)
	public: class FRawIndexBuffer & __thiscall FRawIndexBuffer::operator=(class FRawIndexBuffer const &)
	public: class FReachSpec & __thiscall FReachSpec::operator=(class FReachSpec const &)
	public: class FRebuildOptions __thiscall FRebuildOptions::operator=(class FRebuildOptions)
	public: class FRebuildTools & __thiscall FRebuildTools::operator=(class FRebuildTools const &)
	public: class FRenderInterface & __thiscall FRenderInterface::operator=(class FRenderInterface const &)
	public: class FRenderResource & __thiscall FRenderResource::operator=(class FRenderResource const &)
	public: class FRotator __thiscall ASceneManager::GetRotation(class TArray<class FVector> *,float,class FVector,class FRotator,class UMatAction *,int)
	public: class FRotatorF & __thiscall FRotatorF::operator=(class FRotatorF const &)
	public: class FRotatorF __thiscall FRotatorF::operator*(float)const 
	public: class FRotatorF __thiscall FRotatorF::operator*=(float)
	public: class FRotatorF __thiscall FRotatorF::operator+(class FRotatorF)const 
	public: class FRotatorF __thiscall FRotatorF::operator+=(class FRotatorF)
	public: class FRotatorF __thiscall FRotatorF::operator-(class FRotatorF)const 
	public: class FRotatorF __thiscall FRotatorF::operator-=(class FRotatorF)
	public: class FSceneNode & __thiscall FSceneNode::operator=(class FSceneNode const &)
	public: class FScriptedPortalSceneNode & __thiscall FScriptedPortalSceneNode::operator=(class FScriptedPortalSceneNode const &)
	public: class FShadowSceneNode & __thiscall FShadowSceneNode::operator=(class FShadowSceneNode const &)
	public: class FSkinVertexStream & __thiscall FSkinVertexStream::operator=(class FSkinVertexStream const &)
	public: class FSkySceneNode & __thiscall FSkySceneNode::operator=(class FSkySceneNode const &)
	public: class FSolidColorTexture & __thiscall FSolidColorTexture::operator=(class FSolidColorTexture const &)
	public: class FSoundData & __thiscall FSoundData::operator=(class FSoundData const &)
	public: class FStatGraph & __thiscall FStatGraph::operator=(class FStatGraph const &)
	public: class FStatGraphLine & __thiscall FStatGraphLine::operator=(class FStatGraphLine const &)
	public: class FStaticCubemap & __thiscall FStaticCubemap::operator=(class FStaticCubemap const &)
	public: class FStaticLightMapTexture & __thiscall FStaticLightMapTexture::operator=(class FStaticLightMapTexture const &)
	public: class FStaticMeshBatch & __thiscall FStaticMeshBatch::operator=(class FStaticMeshBatch const &)
	public: class FStaticMeshBatchIndexBuffer & __thiscall FStaticMeshBatchIndexBuffer::operator=(class FStaticMeshBatchIndexBuffer const &)
	public: class FStaticMeshBatchVertexStream & __thiscall FStaticMeshBatchVertexStream::operator=(class FStaticMeshBatchVertexStream const &)
	public: class FStaticMeshColorStream & __thiscall FStaticMeshColorStream::operator=(class FStaticMeshColorStream const &)
	public: class FStaticMeshLightVisibilityStream & __thiscall FStaticMeshLightVisibilityStream::operator=(class FStaticMeshLightVisibilityStream const &)
	public: class FStaticMeshMaterial & __thiscall FStaticMeshMaterial::operator=(class FStaticMeshMaterial const &)
	public: class FStaticMeshSection & __thiscall FStaticMeshSection::operator=(class FStaticMeshSection const &)
	public: class FStaticMeshUVStream & __thiscall FStaticMeshUVStream::operator=(class FStaticMeshUVStream const &)
	public: class FStaticMeshVertexStream & __thiscall FStaticMeshVertexStream::operator=(class FStaticMeshVertexStream const &)
	public: class FStaticTexture & __thiscall FStaticTexture::operator=(class FStaticTexture const &)
	public: class FStats & __thiscall FStats::operator=(class FStats const &)
	public: class FTangentStream & __thiscall FTangentStream::operator=(class FTangentStream const &)
	public: class FTempLineBatcher & __thiscall FTempLineBatcher::operator=(class FTempLineBatcher const &)
	public: class FTerrainTools & __thiscall FTerrainTools::operator=(class FTerrainTools const &)
	public: class FURL & __thiscall FURL::operator=(class FURL const &)
	public: class FVector __thiscall ASceneManager::GetLocation(class TArray<class FVector> *,float)
	public: class FViewportWindowParam & __thiscall FViewportWindowParam::operator=(class FViewportWindowParam const &)
	public: class FWarpZoneSceneNode & __thiscall FWarpZoneSceneNode::operator=(class FWarpZoneSceneNode const &)
	public: class FWaterSheetSceneNode & __thiscall FWaterSheetSceneNode::operator=(class FWaterSheetSceneNode const &)
	public: class FWaveModInfo & __thiscall FWaveModInfo::operator=(class FWaveModInfo const &)
	public: class FWorldBuilder & __thiscall FWorldBuilder::operator=(class FWorldBuilder const &)
	public: class FZoneProperties & __thiscall FZoneProperties::operator=(class FZoneProperties const &)
	public: class L2AbnormalZone & __thiscall L2AbnormalZone::operator=(class L2AbnormalZone const &)
	public: class L2FName & __thiscall L2FName::operator=(class L2FName const &)
	public: class NCBoneSimul & __thiscall NCBoneSimul::operator=(class NCBoneSimul const &)
	public: class NCCloakSimul & __thiscall NCCloakSimul::operator=(class NCCloakSimul const &)
	public: class NCClothSimul & __thiscall NCClothSimul::operator=(class NCClothSimul const &)
	public: class NCSpringSimul & __thiscall NCSpringSimul::operator=(class NCSpringSimul const &)
	public: class TArray<int> __thiscall UModel::BoxLeaves(class FBox,class FName,int)
	public: class TArray<unsigned char> & __thiscall TArray<unsigned char>::operator+(class TArray<unsigned char> const &)
	public: class TArray<unsigned char> & __thiscall TArray<unsigned char>::operator+=(class TArray<unsigned char> const &)
	public: class TArray<unsigned char> & __thiscall TArray<unsigned char>::operator=(class TArray<unsigned char> const &)
	public: class TLazyArray<unsigned char> & __thiscall TLazyArray<unsigned char>::operator=(class TLazyArray<unsigned char> const &)
	public: class TMap<int,class TArray<class FVector> > * __thiscall ASuperPointInfo::GetPaths(void)
	public: class TMap<int,class TArray<class FVector> > * __thiscall AVehicleRoutePoint::GetPaths(void)
	public: class UActionMoveCamera & __thiscall UActionMoveCamera::operator=(class UActionMoveCamera const &)
	public: class UActionPause & __thiscall UActionPause::operator=(class UActionPause const &)
	public: class UActionWarp & __thiscall UActionWarp::operator=(class UActionWarp const &)
	public: class UActorChannel & __thiscall UActorChannel::operator=(class UActorChannel const &)
	public: class UAmbientSoundObject & __thiscall UAmbientSoundObject::operator=(class UAmbientSoundObject const &)
	public: class UAnimation & __thiscall UAnimation::operator=(class UAnimation const &)
	public: class UAnimNotify & __thiscall UAnimNotify::operator=(class UAnimNotify const &)
	public: class UAnimNotify_AttackItem & __thiscall UAnimNotify_AttackItem::operator=(class UAnimNotify_AttackItem const &)
	public: class UAnimNotify_AttackPreShot & __thiscall UAnimNotify_AttackPreShot::operator=(class UAnimNotify_AttackPreShot const &)
	public: class UAnimNotify_AttackShot & __thiscall UAnimNotify_AttackShot::operator=(class UAnimNotify_AttackShot const &)
	public: class UAnimNotify_AttackVoice & __thiscall UAnimNotify_AttackVoice::operator=(class UAnimNotify_AttackVoice const &)
	public: class UAnimNotify_BoneScale & __thiscall UAnimNotify_BoneScale::operator=(class UAnimNotify_BoneScale const &)
	public: class UAnimNotify_Channeling & __thiscall UAnimNotify_Channeling::operator=(class UAnimNotify_Channeling const &)
	public: class UAnimNotify_DestroyEffect & __thiscall UAnimNotify_DestroyEffect::operator=(class UAnimNotify_DestroyEffect const &)
	public: class UAnimNotify_Effect & __thiscall UAnimNotify_Effect::operator=(class UAnimNotify_Effect const &)
	public: class UAnimNotify_IdleSound & __thiscall UAnimNotify_IdleSound::operator=(class UAnimNotify_IdleSound const &)
	public: class UAnimNotify_MatSubAction & __thiscall UAnimNotify_MatSubAction::operator=(class UAnimNotify_MatSubAction const &)
	public: class UAnimNotify_ScreenFade & __thiscall UAnimNotify_ScreenFade::operator=(class UAnimNotify_ScreenFade const &)
	public: class UAnimNotify_Script & __thiscall UAnimNotify_Script::operator=(class UAnimNotify_Script const &)
	public: class UAnimNotify_Scripted & __thiscall UAnimNotify_Scripted::operator=(class UAnimNotify_Scripted const &)
	public: class UAnimNotify_Sound & __thiscall UAnimNotify_Sound::operator=(class UAnimNotify_Sound const &)
	public: class UAnimNotify_SwimSound & __thiscall UAnimNotify_SwimSound::operator=(class UAnimNotify_SwimSound const &)
	public: class UAnimNotify_ViewShake & __thiscall UAnimNotify_ViewShake::operator=(class UAnimNotify_ViewShake const &)
	public: class UAudioSubsystem & __thiscall UAudioSubsystem::operator=(class UAudioSubsystem const &)
	public: class UBaseGUIController & __thiscall UBaseGUIController::operator=(class UBaseGUIController const &)
	public: class UBeamEmitter & __thiscall UBeamEmitter::operator=(class UBeamEmitter const &)
	public: class UBitmapMaterial & __thiscall UBitmapMaterial::operator=(class UBitmapMaterial const &)
	public: class UBlackWhite & __thiscall UBlackWhite::operator=(class UBlackWhite const &)
	public: class UBumpShader & __thiscall UBumpShader::operator=(class UBumpShader const &)
	public: class UCameraEffect & __thiscall UCameraEffect::operator=(class UCameraEffect const &)
	public: class UCameraOverlay & __thiscall UCameraOverlay::operator=(class UCameraOverlay const &)
	public: class UCanvas & __thiscall UCanvas::operator=(class UCanvas const &)
	public: class UChannel & __thiscall UChannel::operator=(class UChannel const &)
	public: class UChannelDownload & __thiscall UChannelDownload::operator=(class UChannelDownload const &)
	public: class UCheatManager & __thiscall UCheatManager::operator=(class UCheatManager const &)
	public: class UClient & __thiscall UClient::operator=(class UClient const &)
	public: class UColorModifier & __thiscall UColorModifier::operator=(class UColorModifier const &)
	public: class UCombiner & __thiscall UCombiner::operator=(class UCombiner const &)
	public: class UConsole & __thiscall UConsole::operator=(class UConsole const &)
	public: class UConstantColor & __thiscall UConstantColor::operator=(class UConstantColor const &)
	public: class UConstantMaterial & __thiscall UConstantMaterial::operator=(class UConstantMaterial const &)
	public: class UControlChannel & __thiscall UControlChannel::operator=(class UControlChannel const &)
	public: class UConvexVolume & __thiscall UConvexVolume::operator=(class UConvexVolume const &)
	public: class UCubemap & __thiscall UCubemap::operator=(class UCubemap const &)
	public: class UDemoRecConnection & __thiscall UDemoRecConnection::operator=(class UDemoRecConnection const &)
	public: class UDemoRecDriver & __thiscall UDemoRecDriver::operator=(class UDemoRecDriver const &)
	public: class UDownload & __thiscall UDownload::operator=(class UDownload const &)
	public: class UDummyAudio & __thiscall UDummyAudio::operator=(class UDummyAudio const &)
	public: class UEngine & __thiscall UEngine::operator=(class UEngine const &)
	public: class UExtraMeshData & __thiscall UExtraMeshData::operator=(class UExtraMeshData const &)
	public: class UExtraSkeletalMeshInstance & __thiscall UExtraSkeletalMeshInstance::operator=(class UExtraSkeletalMeshInstance const &)
	public: class UFadeBlackWhite & __thiscall UFadeBlackWhite::operator=(class UFadeBlackWhite const &)
	public: class UFadeColor & __thiscall UFadeColor::operator=(class UFadeColor const &)
	public: class UFileChannel & __thiscall UFileChannel::operator=(class UFileChannel const &)
	public: class UFinalBlend & __thiscall UFinalBlend::operator=(class UFinalBlend const &)
	public: class UFluidSurfacePrimitive & __thiscall UFluidSurfacePrimitive::operator=(class UFluidSurfacePrimitive const &)
	public: class UFont & __thiscall UFont::operator=(class UFont const &)
	public: class UGameEngine & __thiscall UGameEngine::operator=(class UGameEngine const &)
	public: class UGlowEffect & __thiscall UGlowEffect::operator=(class UGlowEffect const &)
	public: class UGlowModifier & __thiscall UGlowModifier::operator=(class UGlowModifier const &)
	public: class UHDREffect & __thiscall UHDREffect::operator=(class UHDREffect const &)
	public: class UI3DL2Listener & __thiscall UI3DL2Listener::operator=(class UI3DL2Listener const &)
	public: class UIndexBuffer & __thiscall UIndexBuffer::operator=(class UIndexBuffer const &)
	public: class UInput & __thiscall UInput::operator=(class UInput const &)
	public: class UInteraction & __thiscall UInteraction::operator=(class UInteraction const &)
	public: class UInteractionMaster & __thiscall UInteractionMaster::operator=(class UInteractionMaster const &)
	public: class UInteractions & __thiscall UInteractions::operator=(class UInteractions const &)
	public: class UKarmaParams & __thiscall UKarmaParams::operator=(class UKarmaParams const &)
	public: class UKarmaParamsCollision & __thiscall UKarmaParamsCollision::operator=(class UKarmaParamsCollision const &)
	public: class UKarmaParamsRBFull & __thiscall UKarmaParamsRBFull::operator=(class UKarmaParamsRBFull const &)
	public: class UKarmaParamsSkel & __thiscall UKarmaParamsSkel::operator=(class UKarmaParamsSkel const &)
	public: class UKMeshProps & __thiscall UKMeshProps::operator=(class UKMeshProps const &)
	public: class UL2ColorModifier & __thiscall UL2ColorModifier::operator=(class UL2ColorModifier const &)
	public: class UL2ConsoleWnd & __thiscall UL2ConsoleWnd::operator=(class UL2ConsoleWnd const &)
	public: class UL2Font & __thiscall UL2Font::operator=(class UL2Font const &)
	public: class UL2NEnvLight & __thiscall UL2NEnvLight::operator=(class UL2NEnvLight const &)
	public: class UL2NEnvManager & __thiscall UL2NEnvManager::operator=(class UL2NEnvManager const &)
	public: class UL2NetHandler & __thiscall UL2NetHandler::operator=(class UL2NetHandler const &)
	public: class UL2NTimeLight & __thiscall UL2NTimeLight::operator=(class UL2NTimeLight const &)
	public: class UL2OrcMove & __thiscall UL2OrcMove::operator=(class UL2OrcMove const &)
	public: class UL2TextureFactory & __thiscall UL2TextureFactory::operator=(class UL2TextureFactory const &)
	public: class ULevel & __thiscall ULevel::operator=(class ULevel const &)
	public: class ULevelBase & __thiscall ULevelBase::operator=(class ULevelBase const &)
	public: class ULevelObject & __thiscall ULevelObject::operator=(class ULevelObject const &)
	public: class ULevelSummary & __thiscall ULevelSummary::operator=(class ULevelSummary const &)
	public: class ULodMesh & __thiscall ULodMesh::operator=(class ULodMesh const &)
	public: class ULodMeshInstance & __thiscall ULodMeshInstance::operator=(class ULodMeshInstance const &)
	public: class UMatAction & __thiscall UMatAction::operator=(class UMatAction const &)
	public: class UMaterial & __thiscall UMaterial::operator=(class UMaterial const &)
	public: class UMaterialSequence & __thiscall UMaterialSequence::operator=(class UMaterialSequence const &)
	public: class UMaterialSwitch & __thiscall UMaterialSwitch::operator=(class UMaterialSwitch const &)
	public: class UMatObject & __thiscall UMatObject::operator=(class UMatObject const &)
	public: class UMatSubAction & __thiscall UMatSubAction::operator=(class UMatSubAction const &)
	public: class UMesh & __thiscall UMesh::operator=(class UMesh const &)
	public: class UMeshAnimation & __thiscall UMeshAnimation::operator=(class UMeshAnimation const &)
	public: class UMeshEmitter & __thiscall UMeshEmitter::operator=(class UMeshEmitter const &)
	public: class UMeshInstance & __thiscall UMeshInstance::operator=(class UMeshInstance const &)
	public: class UMeshObject & __thiscall UMeshObject::operator=(class UMeshObject const &)
	public: class UModel & __thiscall UModel::operator=(class UModel const &)
	public: class UModifier & __thiscall UModifier::operator=(class UModifier const &)
	public: class UMotionBlur & __thiscall UMotionBlur::operator=(class UMotionBlur const &)
	public: class UNetConnection & __thiscall UNetConnection::operator=(class UNetConnection const &)
	public: class UNetDriver & __thiscall UNetDriver::operator=(class UNetDriver const &)
	public: class UNetworkHandler & __thiscall UNetworkHandler::operator=(class UNetworkHandler const &)
	public: class UNullRenderDevice & __thiscall UNullRenderDevice::operator=(class UNullRenderDevice const &)
	public: class UOpacityModifier & __thiscall UOpacityModifier::operator=(class UOpacityModifier const &)
	public: class UOrcMove & __thiscall UOrcMove::operator=(class UOrcMove const &)
	public: class UPackageCheckInfo & __thiscall UPackageCheckInfo::operator=(class UPackageCheckInfo const &)
	public: class UPackageMapLevel & __thiscall UPackageMapLevel::operator=(class UPackageMapLevel const &)
	public: class UPalette & __thiscall UPalette::operator=(class UPalette const &)
	public: class UParticleEmitter & __thiscall UParticleEmitter::operator=(class UParticleEmitter const &)
	public: class UParticleMaterial & __thiscall UParticleMaterial::operator=(class UParticleMaterial const &)
	public: class UPlayer & __thiscall UPlayer::operator=(class UPlayer const &)
	public: class UPlayerInput & __thiscall UPlayerInput::operator=(class UPlayerInput const &)
	public: class UPolys & __thiscall UPolys::operator=(class UPolys const &)
	public: class UPrimitive & __thiscall UPrimitive::operator=(class UPrimitive const &)
	public: class UProjectorMaterial & __thiscall UProjectorMaterial::operator=(class UProjectorMaterial const &)
	public: class UProjectorPrimitive & __thiscall UProjectorPrimitive::operator=(class UProjectorPrimitive const &)
	public: class UProxyBitmapMaterial & __thiscall UProxyBitmapMaterial::operator=(class UProxyBitmapMaterial const &)
	public: class UReachSpec & __thiscall UReachSpec::operator=(class UReachSpec const &)
	public: class UReachSpec * __thiscall UReachSpec::operator+(class UReachSpec const &)const 
	public: class URenderDevice & __thiscall URenderDevice::operator=(class URenderDevice const &)
	public: class URenderedMaterial & __thiscall URenderedMaterial::operator=(class URenderedMaterial const &)
	public: class URenderResource & __thiscall URenderResource::operator=(class URenderResource const &)
	public: class URibbonEmitter & __thiscall URibbonEmitter::operator=(class URibbonEmitter const &)
	public: class UScriptedTexture & __thiscall UScriptedTexture::operator=(class UScriptedTexture const &)
	public: class UShader & __thiscall UShader::operator=(class UShader const &)
	public: class UShadowBitmapMaterial & __thiscall UShadowBitmapMaterial::operator=(class UShadowBitmapMaterial const &)
	public: class USkeletalMesh & __thiscall USkeletalMesh::operator=(class USkeletalMesh const &)
	public: class USkeletalMeshInstance & __thiscall USkeletalMeshInstance::operator=(class USkeletalMeshInstance const &)
	public: class USkillAction & __thiscall USkillAction::operator=(class USkillAction const &)
	public: class USkillAction_LocateEffect & __thiscall USkillAction_LocateEffect::operator=(class USkillAction_LocateEffect const &)
	public: class USkillAction_SwordTrail & __thiscall USkillAction_SwordTrail::operator=(class USkillAction_SwordTrail const &)
	public: class USkillVisualEffect & __thiscall USkillVisualEffect::operator=(class USkillVisualEffect const &)
	public: class USkinVertexBuffer & __thiscall USkinVertexBuffer::operator=(class USkinVertexBuffer const &)
	public: class USound & __thiscall USound::operator=(class USound const &)
	public: class USparkEmitter & __thiscall USparkEmitter::operator=(class USparkEmitter const &)
	public: class USpriteEmitter & __thiscall USpriteEmitter::operator=(class USpriteEmitter const &)
	public: class UStaticMesh & __thiscall UStaticMesh::operator=(class UStaticMesh const &)
	public: class UStaticMeshInstance & __thiscall UStaticMeshInstance::operator=(class UStaticMeshInstance const &)
	public: class USubActionCameraEffect & __thiscall USubActionCameraEffect::operator=(class USubActionCameraEffect const &)
	public: class USubActionCameraShake & __thiscall USubActionCameraShake::operator=(class USubActionCameraShake const &)
	public: class USubActionFade & __thiscall USubActionFade::operator=(class USubActionFade const &)
	public: class USubActionFOV & __thiscall USubActionFOV::operator=(class USubActionFOV const &)
	public: class USubActionGameSpeed & __thiscall USubActionGameSpeed::operator=(class USubActionGameSpeed const &)
	public: class USubActionOrientation & __thiscall USubActionOrientation::operator=(class USubActionOrientation const &)
	public: class USubActionSceneSpeed & __thiscall USubActionSceneSpeed::operator=(class USubActionSceneSpeed const &)
	public: class USubActionTrigger & __thiscall USubActionTrigger::operator=(class USubActionTrigger const &)
	public: class USubSkeletalMeshInstance & __thiscall USubSkeletalMeshInstance::operator=(class USubSkeletalMeshInstance const &)
	public: class UTerrainBrush & __thiscall UTerrainBrush::operator=(class UTerrainBrush const &)
	public: class UTerrainBrushColor & __thiscall UTerrainBrushColor::operator=(class UTerrainBrushColor const &)
	public: class UTerrainBrushEdgeTurn & __thiscall UTerrainBrushEdgeTurn::operator=(class UTerrainBrushEdgeTurn const &)
	public: class UTerrainBrushFlatten & __thiscall UTerrainBrushFlatten::operator=(class UTerrainBrushFlatten const &)
	public: class UTerrainBrushNoise & __thiscall UTerrainBrushNoise::operator=(class UTerrainBrushNoise const &)
	public: class UTerrainBrushPaint & __thiscall UTerrainBrushPaint::operator=(class UTerrainBrushPaint const &)
	public: class UTerrainBrushSelect & __thiscall UTerrainBrushSelect::operator=(class UTerrainBrushSelect const &)
	public: class UTerrainBrushSmooth & __thiscall UTerrainBrushSmooth::operator=(class UTerrainBrushSmooth const &)
	public: class UTerrainBrushTexPan & __thiscall UTerrainBrushTexPan::operator=(class UTerrainBrushTexPan const &)
	public: class UTerrainBrushTexRotate & __thiscall UTerrainBrushTexRotate::operator=(class UTerrainBrushTexRotate const &)
	public: class UTerrainBrushTexScale & __thiscall UTerrainBrushTexScale::operator=(class UTerrainBrushTexScale const &)
	public: class UTerrainBrushVertexEdit & __thiscall UTerrainBrushVertexEdit::operator=(class UTerrainBrushVertexEdit const &)
	public: class UTerrainBrushVisibility & __thiscall UTerrainBrushVisibility::operator=(class UTerrainBrushVisibility const &)
	public: class UTerrainMaterial & __thiscall UTerrainMaterial::operator=(class UTerrainMaterial const &)
	public: class UTerrainPrimitive & __thiscall UTerrainPrimitive::operator=(class UTerrainPrimitive const &)
	public: class UTerrainSector & __thiscall UTerrainSector::operator=(class UTerrainSector const &)
	public: class UTexCoordMaterial & __thiscall UTexCoordMaterial::operator=(class UTexCoordMaterial const &)
	public: class UTexCoordSource & __thiscall UTexCoordSource::operator=(class UTexCoordSource const &)
	public: class UTexEnvMap & __thiscall UTexEnvMap::operator=(class UTexEnvMap const &)
	public: class UTexMatrix & __thiscall UTexMatrix::operator=(class UTexMatrix const &)
	public: class UTexModifier & __thiscall UTexModifier::operator=(class UTexModifier const &)
	public: class UTexOscillator & __thiscall UTexOscillator::operator=(class UTexOscillator const &)
	public: class UTexOscillatorTriggered & __thiscall UTexOscillatorTriggered::operator=(class UTexOscillatorTriggered const &)
	public: class UTexPanner & __thiscall UTexPanner::operator=(class UTexPanner const &)
	public: class UTexPannerTriggered & __thiscall UTexPannerTriggered::operator=(class UTexPannerTriggered const &)
	public: class UTexRotator & __thiscall UTexRotator::operator=(class UTexRotator const &)
	public: class UTexScaler & __thiscall UTexScaler::operator=(class UTexScaler const &)
	public: class UTexture & __thiscall UTexture::operator=(class UTexture const &)
	public: class UTrailEmitter & __thiscall UTrailEmitter::operator=(class UTrailEmitter const &)
	public: class UUnderWaterEffect & __thiscall UUnderWaterEffect::operator=(class UUnderWaterEffect const &)
	public: class UUnderWaterMaterial & __thiscall UUnderWaterMaterial::operator=(class UUnderWaterMaterial const &)
	public: class UUnderWaterShader & __thiscall UUnderWaterShader::operator=(class UUnderWaterShader const &)
	public: class UVertexBuffer & __thiscall UVertexBuffer::operator=(class UVertexBuffer const &)
	public: class UVertexColor & __thiscall UVertexColor::operator=(class UVertexColor const &)
	public: class UVertexStreamBase & __thiscall UVertexStreamBase::operator=(class UVertexStreamBase const &)
	public: class UVertexStreamCOLOR & __thiscall UVertexStreamCOLOR::operator=(class UVertexStreamCOLOR const &)
	public: class UVertexStreamPosNormTex & __thiscall UVertexStreamPosNormTex::operator=(class UVertexStreamPosNormTex const &)
	public: class UVertexStreamUV & __thiscall UVertexStreamUV::operator=(class UVertexStreamUV const &)
	public: class UVertexStreamVECTOR & __thiscall UVertexStreamVECTOR::operator=(class UVertexStreamVECTOR const &)
	public: class UVertMesh & __thiscall UVertMesh::operator=(class UVertMesh const &)
	public: class UVertMeshEmitter & __thiscall UVertMeshEmitter::operator=(class UVertMeshEmitter const &)
	public: class UVertMeshInstance & __thiscall UVertMeshInstance::operator=(class UVertMeshInstance const &)
	public: class UViewport & __thiscall UViewport::operator=(class UViewport const &)
	public: class UWaterMaterial & __thiscall UWaterMaterial::operator=(class UWaterMaterial const &)
	public: float __thiscall FBezier::Evaluate(class FVector *,int,class TArray<class FVector> *)
	public: int __thiscall ATerrainInfo::GetRenderCombinationNum(class TArray<int> &,enum ETerrainRenderMethod)
	public: int __thiscall FColor::operator!=(class FColor const &)const 
	public: int __thiscall FColor::operator==(class FColor const &)const 
	public: int __thiscall FOrientation::operator!=(struct FOrientation const &)const 
	public: int __thiscall FPoly::operator!=(class FPoly)
	public: int __thiscall FPoly::operator==(class FPoly)
	public: int __thiscall FStatGraphLine::operator==(class FStatGraphLine const &)const 
	public: int __thiscall FURL::operator==(class FURL const &)const 
	public: int __thiscall FWaveModInfo::ReadWaveInfo(class TArray<unsigned char> &)
	public: int __thiscall FWaveModInfo::UpdateWaveData(class TArray<unsigned char> &)
	public: int __thiscall TArray<unsigned char>::Add(int)
	public: int __thiscall TArray<unsigned char>::AddItem(unsigned char const &)
	public: int __thiscall TArray<unsigned char>::AddUniqueItem(unsigned char const &)
	public: int __thiscall TArray<unsigned char>::AddZeroed(int)
	public: int __thiscall TArray<unsigned char>::FindItem(unsigned char const &,int &)const 
	public: int __thiscall TArray<unsigned char>::FindItemIndex(unsigned char const &)const 
	public: int __thiscall TArray<unsigned char>::RemoveItem(unsigned char const &)
	public: int __thiscall ULevel::FindL2EventActors(class FName,class TArray<class AActor *> &)
	public: int __thiscall UModel::ConvexVolumeMultiCheck(class FBox &,class FPlane *,int,class FVector,class TArray<int> &)
	public: int __thiscall UReachSpec::operator<=(class UReachSpec const &)
	public: int __thiscall UReachSpec::operator==(class UReachSpec const &)
	public: int __thiscall USkeletalMeshInstance::AnimGetAttackShotNotifyTimeEx(class FName,class TArray<float> *,float,float,int)
	public: int __thiscall USkeletalMeshInstance::GetMeshJointsAndNormals(class AActor *,class TArray<class FVector> *,int)
	public: int __thiscall USkeletalMeshInstance::GetMeshVertsAndNormals(class AActor *,class TArray<class FVector> *)
	public: static class FAuxRenderTarget * FPlayerSceneNode::GlowAspectTex
	public: static class FAuxRenderTarget * FPlayerSceneNode::OcclusionTex
	public: static class FAuxRenderTarget * FPlayerSceneNode::RefractionBkTex
	public: static class FAuxRenderTarget * FWaterSheetSceneNode::GeneralTemporaryTarget
	public: static class FAuxRenderTarget * FWaterSheetSceneNode::GeneralWaterReflectionTarget
	public: static class FAuxRenderTarget * FWaterSheetSceneNode::TemporaryTarget
	public: static class FAuxRenderTarget * FWaterSheetSceneNode::WaterReflectionTarget
	public: static class FSolidColorTexture FWaterSheetSceneNode::WaterColorTexture
	public: static class FString FURL::DefaultHost
	public: static class FString FURL::DefaultLocalMap
	public: static class FString FURL::DefaultMap
	public: static class FString FURL::DefaultMapExt
	public: static class FString FURL::DefaultName
	public: static class FString FURL::DefaultPortal
	public: static class FString FURL::DefaultProtocol
	public: static class FString FURL::DefaultProtocolDescription
	public: static class FString FURL::DefaultSaveExt
	public: static class FWaterBumpTexture * FWaterSheetSceneNode::WaterBumpTexture
	public: static class FWaterMappingTexture * FWaterSheetSceneNode::WaterMappingTexture
	public: static class UAudioSubsystem * USound::Audio
	public: static class UClass * * UChannel::ChannelClasses
	public: static class UClient * UTexture::__Client
	public: static int * FCollisionHash::HashX
	public: static int * FCollisionHash::HashY
	public: static int * FCollisionHash::HashZ
	public: static int FCollisionHash::CollisionTag
	public: static int FCollisionHash::Inited
	public: static int FURL::DefaultPort
	public: static int FWaterSheetSceneNode::IsRenderWaterReflection
	public: static unsigned char FWaterSheetSceneNode::RelfectionRatio
	public: static unsigned short const (* UOrcMove::OrcName)[100]
	public: static void * __cdecl AActor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAIController::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAIController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAIMarker::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAIMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAirEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAirEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAirVolume::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAirVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAIScript::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAIScript::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAmbientSound::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAmbientSound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAmmo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAmmo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAmmunition::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAmmunition::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAntiPortalActor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAntiPortalActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAutoDoor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAutoDoor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAutoLadder::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAutoLadder::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AAvoidMarker::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AAvoidMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ABlockingVolume::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ABlockingVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ABrush::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ABrush::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ACamera::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ACamera::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ACarriedObject::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ACarriedObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AClipMarker::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AClipMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AController::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADamageType::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ADamageType::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADecoration::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ADecoration::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADecorationList::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ADecorationList::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADecoVolumeObject::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ADecoVolumeObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADefaultPhysicsVolume::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ADefaultPhysicsVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ADoor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ADoor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AEmitterLight::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AEmitterLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AEnvCreatureManagerInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AEnvCreatureManagerInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AFileLog::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AFileLog::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AFluidSurfaceInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AFluidSurfaceInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AFluidSurfaceOscillator::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AFluidSurfaceOscillator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AGameInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AGameInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AGameReplicationInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AGameReplicationInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AGameStats::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AGameStats::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AHUD::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AHUD::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInspector::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AInspector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInternetInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AInternetInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInterpolationPoint::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AInterpolationPoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInventory::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AInventory::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInventoryAttachment::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AInventoryAttachment::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AInventorySpot::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AInventorySpot::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AJumpDest::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AJumpDest::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AJumpPad::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AJumpPad::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKActor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AKActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKBSJoint::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AKBSJoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKCarWheelJoint::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AKCarWheelJoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKConeLimit::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AKConeLimit::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKConstraint::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AKConstraint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKeypoint::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AKeypoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKHinge::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AKHinge::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKTire::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AKTire::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AKVehicle::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AKVehicle::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Alarm::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AL2Alarm::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Dice::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AL2Dice::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Float::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AL2Float::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Indicator::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AL2Indicator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2NMover::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AL2NMover::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Pickup::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AL2Pickup::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2Radar::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AL2Radar::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AL2SeamlessInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AL2SeamlessInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALadder::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALadder::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALadderVolume::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALadderVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALevelInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALevelInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALiftCenter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALiftCenter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALiftExit::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALiftExit::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALight::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALineagePlayerController::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALineagePlayerController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALineOfSightTrigger::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALineOfSightTrigger::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALocationInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALocationInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ALookTarget::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ALookTarget::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMarkProjector::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AMarkProjector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMatDemoActor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AMatDemoActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMovableStaticMeshActor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AMovableStaticMeshActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMover::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AMover::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMusicVolume::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AMusicVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AMutator::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AMutator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANavigationPoint::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANavigationPoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANCubics::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANCubics::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANLine::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANLine::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANMoon::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANMoon::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANMovableSunLight::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANMovableSunLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANote::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANote::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANpcPosInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANpcPosInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANProjectile::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANProjectile::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANSkillProjectile::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANSkillProjectile::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ANSun::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ANSun::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APathNode::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APathNode::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APawn::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APawn::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APhysicsVolume::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APhysicsVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APickup::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APickup::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APlayerController::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APlayerController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APlayerReplicationInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APlayerReplicationInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APlayerStart::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APlayerStart::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APolyMarker::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APolyMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APotentialClimbWatcher::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APotentialClimbWatcher::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl APowerups::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl APowerups::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AProjectile::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AProjectile::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AProjector::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AProjector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AReplicationInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AReplicationInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASavedMove::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ASavedMove::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASceneManager::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ASceneManager::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AScout::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AScout::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASecurity::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ASecurity::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AServerPrimitive::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AServerPrimitive::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AShadowProjector::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AShadowProjector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASkyZoneInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ASkyZoneInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASmallNavigationPoint::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ASmallNavigationPoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASpawnableStaticMeshActor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ASpawnableStaticMeshActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AStaticMeshActor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AStaticMeshActor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AStationaryWeapons::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AStationaryWeapons::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AStatLog::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AStatLog::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AStatLogFile::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AStatLogFile::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ASuperPointInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ASuperPointInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATeamInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ATeamInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATeleporter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ATeleporter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATerrainInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ATerrainInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATerritoryInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ATerritoryInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATrigger::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ATrigger::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ATriggers::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ATriggers::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVehicle::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AVehicle::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVehiclePart::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AVehiclePart::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVehicleRoutePoint::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AVehicleRoutePoint::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AViewportWindowController::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AViewportWindowController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AVolume::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWarpZoneInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AWarpZoneInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWarpZoneMarker::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AWarpZoneMarker::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWaterHitEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AWaterHitEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWeapon::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AWeapon::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AWeaponAttachment::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AWeaponAttachment::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl AZoneInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl AZoneInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UActionMoveCamera::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UActionMoveCamera::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UActionPause::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UActionPause::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UActionWarp::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UActionWarp::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UActorChannel::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UActorChannel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAmbientSoundObject::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAmbientSoundObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimation::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimation::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_AttackItem::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_AttackItem::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_AttackPreShot::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_AttackPreShot::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_AttackShot::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_AttackShot::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_AttackVoice::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_AttackVoice::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_BoneScale::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_BoneScale::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Channeling::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_Channeling::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_DestroyEffect::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_DestroyEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Effect::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_Effect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_IdleSound::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_IdleSound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_MatSubAction::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_MatSubAction::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_ScreenFade::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_ScreenFade::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Script::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_Script::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Scripted::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_Scripted::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_Sound::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_Sound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_SwimSound::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_SwimSound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAnimNotify_ViewShake::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAnimNotify_ViewShake::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UAudioSubsystem::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UAudioSubsystem::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UBaseGUIController::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UBaseGUIController::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UBeamEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UBeamEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UBitmapMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UBitmapMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UBlackWhite::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UBlackWhite::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UBumpShader::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UBumpShader::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCameraEffect::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UCameraEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCameraOverlay::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UCameraOverlay::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCanvas::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UCanvas::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UChannel::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UChannel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UChannelDownload::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UChannelDownload::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCheatManager::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UCheatManager::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UClient::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UClient::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UColorModifier::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UColorModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCombiner::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UCombiner::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UConsole::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UConsole::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UConstantColor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UConstantColor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UConstantMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UConstantMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UControlChannel::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UControlChannel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UConvexVolume::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UConvexVolume::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UCubemap::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UCubemap::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UDemoRecConnection::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UDemoRecConnection::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UDemoRecDriver::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UDemoRecDriver::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UDownload::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UDownload::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UDummyAudio::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UDummyAudio::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UEngine::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UEngine::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UExtraMeshData::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UExtraMeshData::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UExtraSkeletalMeshInstance::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UExtraSkeletalMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFadeBlackWhite::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UFadeBlackWhite::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFadeColor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UFadeColor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFileChannel::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UFileChannel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFinalBlend::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UFinalBlend::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFluidSurfacePrimitive::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UFluidSurfacePrimitive::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UFont::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UFont::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UGameEngine::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UGameEngine::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UGlowEffect::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UGlowEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UGlowModifier::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UGlowModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UHDREffect::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UHDREffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UI3DL2Listener::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UI3DL2Listener::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UIndexBuffer::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UIndexBuffer::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UInput::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UInput::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UInteraction::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UInteraction::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UInteractionMaster::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UInteractionMaster::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UInteractions::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UInteractions::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKarmaParams::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UKarmaParams::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKarmaParamsCollision::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UKarmaParamsCollision::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKarmaParamsRBFull::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UKarmaParamsRBFull::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKarmaParamsSkel::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UKarmaParamsSkel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UKMeshProps::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UKMeshProps::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2ColorModifier::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UL2ColorModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2ConsoleWnd::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UL2ConsoleWnd::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2Font::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UL2Font::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2NEnvLight::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UL2NEnvLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2NEnvManager::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UL2NEnvManager::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2NetHandler::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UL2NetHandler::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2NTimeLight::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UL2NTimeLight::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2OrcMove::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UL2OrcMove::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UL2TextureFactory::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UL2TextureFactory::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULevel::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ULevel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULevelBase::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ULevelBase::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULevelObject::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ULevelObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULevelSummary::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ULevelSummary::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULodMesh::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ULodMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl ULodMeshInstance::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl ULodMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMatAction::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMatAction::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMaterialSequence::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMaterialSequence::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMaterialSwitch::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMaterialSwitch::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMatObject::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMatObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMatSubAction::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMatSubAction::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMesh::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshAnimation::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMeshAnimation::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMeshEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshInstance::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMeshObject::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMeshObject::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UModel::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UModel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UModifier::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UMotionBlur::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UMotionBlur::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UNetConnection::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UNetConnection::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UNetDriver::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UNetDriver::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UNetworkHandler::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UNetworkHandler::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UNullRenderDevice::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UNullRenderDevice::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UOpacityModifier::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UOpacityModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UOrcMove::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UOrcMove::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPackageCheckInfo::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UPackageCheckInfo::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPackageMapLevel::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UPackageMapLevel::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPalette::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UPalette::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UParticleEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UParticleEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UParticleMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UParticleMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPlayer::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UPlayer::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPlayerInput::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UPlayerInput::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPolys::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UPolys::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UPrimitive::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UPrimitive::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UProjectorMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UProjectorMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UProjectorPrimitive::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UProjectorPrimitive::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UProxyBitmapMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UProxyBitmapMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UReachSpec::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UReachSpec::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl URenderDevice::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl URenderDevice::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl URenderedMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl URenderedMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl URenderResource::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl URenderResource::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl URibbonEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl URibbonEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UScriptedTexture::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UScriptedTexture::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UShader::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UShader::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UShadowBitmapMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UShadowBitmapMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USkeletalMesh::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USkeletalMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USkeletalMeshInstance::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USkeletalMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USkillAction::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USkillAction::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USkillAction_LocateEffect::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USkillAction_LocateEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USkillAction_SwordTrail::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USkillAction_SwordTrail::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USkillVisualEffect::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USkillVisualEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USkinVertexBuffer::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USkinVertexBuffer::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USound::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USound::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USparkEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USparkEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USpriteEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USpriteEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UStaticMesh::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UStaticMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UStaticMeshInstance::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UStaticMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionCameraEffect::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USubActionCameraEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionCameraShake::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USubActionCameraShake::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionFade::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USubActionFade::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionFOV::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USubActionFOV::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionGameSpeed::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USubActionGameSpeed::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionOrientation::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USubActionOrientation::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionSceneSpeed::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USubActionSceneSpeed::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubActionTrigger::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USubActionTrigger::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl USubSkeletalMeshInstance::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl USubSkeletalMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTerrainMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTerrainMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTerrainPrimitive::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTerrainPrimitive::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTerrainSector::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTerrainSector::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexCoordMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexCoordMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexCoordSource::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexCoordSource::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexEnvMap::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexEnvMap::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexMatrix::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexMatrix::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexModifier::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexModifier::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexOscillator::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexOscillator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexOscillatorTriggered::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexOscillatorTriggered::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexPanner::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexPanner::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexPannerTriggered::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexPannerTriggered::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexRotator::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexRotator::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexScaler::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexScaler::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTexture::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTexture::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UTrailEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UTrailEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UUnderWaterEffect::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UUnderWaterEffect::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UUnderWaterMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UUnderWaterMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UUnderWaterShader::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UUnderWaterShader::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertexBuffer::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertexBuffer::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertexColor::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertexColor::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertexStreamBase::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertexStreamBase::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertexStreamCOLOR::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertexStreamCOLOR::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertexStreamPosNormTex::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertexStreamPosNormTex::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertexStreamUV::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertexStreamUV::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertexStreamVECTOR::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertexStreamVECTOR::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertMesh::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertMesh::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertMeshEmitter::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertMeshEmitter::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UVertMeshInstance::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UVertMeshInstance::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UViewport::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UViewport::operator new(unsigned int,enum EInternal *)
	public: static void * __cdecl UWaterMaterial::operator new(unsigned int,class UObject *,class FName,unsigned long)
	public: static void * __cdecl UWaterMaterial::operator new(unsigned int,enum EInternal *)
	public: static void * ALineagePlayerController::m_pPrevZoneNameInfo
	public: struct ColosseumFence & __thiscall ColosseumFence::operator=(struct ColosseumFence const &)
	public: struct ConnectInfo & __thiscall ConnectInfo::operator=(struct ConnectInfo const &)
	public: struct FAccessoryType & __thiscall FAccessoryType::operator=(struct FAccessoryType const &)
	public: struct FAnywhereNpc & __thiscall FAnywhereNpc::operator=(struct FAnywhereNpc const &)
	public: struct FAnywhereNpcMaker & __thiscall FAnywhereNpcMaker::operator=(struct FAnywhereNpcMaker const &)
	public: struct FBspVertex & __thiscall FBspVertex::operator=(struct FBspVertex const &)
	public: struct FConsoleMessage & __thiscall FConsoleMessage::operator=(struct FConsoleMessage const &)
	public: struct FDXTCompressionOptions & __thiscall FDXTCompressionOptions::operator=(struct FDXTCompressionOptions const &)
	public: struct FFadeColorMaterialInfo & __thiscall FFadeColorMaterialInfo::operator=(struct FFadeColorMaterialInfo const &)
	public: struct FFontCharacter & __thiscall FFontCharacter::operator=(struct FFontCharacter const &)
	public: struct FHitCause & __thiscall FHitCause::operator=(struct FHitCause const &)
	public: struct FKeyValuePair & __thiscall FKeyValuePair::operator=(struct FKeyValuePair const &)
	public: struct FL2Event & __thiscall FL2Event::operator=(struct FL2Event const &)
	public: struct FL2NpcData & __thiscall FL2NpcData::operator=(struct FL2NpcData const &)
	public: struct FL2ResueOrCast & __thiscall FL2ResueOrCast::operator=(struct FL2ResueOrCast const &)
	public: struct FLeafRenderInfo & __thiscall FLeafRenderInfo::operator=(struct FLeafRenderInfo const &)
	public: struct FMaterialProperty & __thiscall FMaterialProperty::operator=(struct FMaterialProperty const &)
	public: struct FMaterialSequenceItem & __thiscall FMaterialSequenceItem::operator=(struct FMaterialSequenceItem const &)
	public: struct FMipmap & __thiscall FMipmap::operator=(struct FMipmap const &)
	public: struct FMipmapBase & __thiscall FMipmapBase::operator=(struct FMipmapBase const &)
	public: struct FNAtkConsumeItemParam & __thiscall FNAtkConsumeItemParam::operator=(struct FNAtkConsumeItemParam const &)
	public: struct FNAttackActionParam & __thiscall FNAttackActionParam::operator=(struct FNAttackActionParam const &)
	public: struct FNMagicInfo & __thiscall FNMagicInfo::operator=(struct FNMagicInfo &)
	public: struct FNMover & __thiscall FNMover::operator=(struct FNMover const &)
	public: struct FNpcPos & __thiscall FNpcPos::operator=(struct FNpcPos const &)
	public: struct FNpcPrivate & __thiscall FNpcPrivate::operator=(struct FNpcPrivate const &)
	public: struct FNPrimeActionParam & __thiscall FNPrimeActionParam::operator=(struct FNPrimeActionParam const &)
	public: struct FNSilhouetteParam & __thiscall FNSilhouetteParam::operator=(struct FNSilhouetteParam const &)
	public: struct FOrientation & __thiscall FOrientation::operator=(struct FOrientation)
	public: struct FPlayerResponseLine & __thiscall FPlayerResponseLine::operator=(struct FPlayerResponseLine const &)
	public: struct FPointRegion & __thiscall FPointRegion::operator=(struct FPointRegion const &)
	public: struct FRibbonPoint & __thiscall FRibbonPoint::operator=(struct FRibbonPoint const &)
	public: struct FServerResponseLine & __thiscall FServerResponseLine::operator=(struct FServerResponseLine const &)
	public: struct FServerStaticObject & __thiscall FServerStaticObject::operator=(struct FServerStaticObject const &)
	public: struct FSkillActionInfo & __thiscall FSkillActionInfo::operator=(struct FSkillActionInfo const &)
	public: struct FStaticLODModelTriangle & __thiscall FStaticLODModelTriangle::operator=(struct FStaticLODModelTriangle const &)
	public: struct FStaticMeshBatchNormalVertex & __thiscall FStaticMeshBatchNormalVertex::operator=(struct FStaticMeshBatchNormalVertex const &)
	public: struct FStaticMeshBatchVertex & __thiscall FStaticMeshBatchVertex::operator=(struct FStaticMeshBatchVertex const &)
	public: struct FStaticMeshCollisionNode & __thiscall FStaticMeshCollisionNode::operator=(struct FStaticMeshCollisionNode const &)
	public: struct FStaticMeshCollisionTriangle & __thiscall FStaticMeshCollisionTriangle::operator=(struct FStaticMeshCollisionTriangle const &)
	public: struct FStaticMeshTriangle & __thiscall FStaticMeshTriangle::operator=(struct FStaticMeshTriangle const &)
	public: struct FStaticMeshUV & __thiscall FStaticMeshUV::operator=(struct FStaticMeshUV const &)
	public: struct FStaticMeshVertex & __thiscall FStaticMeshVertex::operator=(struct FStaticMeshVertex const &)
	public: struct FStaticProjectorInfo & __thiscall FStaticProjectorInfo::operator=(struct FStaticProjectorInfo const &)
	public: struct FStaticProjectorUV & __thiscall FStaticProjectorUV::operator=(struct FStaticProjectorUV const &)
	public: struct FStaticProjectorVertex & __thiscall FStaticProjectorVertex::operator=(struct FStaticProjectorVertex const &)
	public: struct FTangent & __thiscall FTangent::operator=(struct FTangent const &)
	public: struct FTerrainMaterialLayer & __thiscall FTerrainMaterialLayer::operator=(struct FTerrainMaterialLayer const &)
	public: struct FTexModifierInfo & __thiscall FTexModifierInfo::operator=(struct FTexModifierInfo const &)
	public: struct FTextureModifyinfo & __thiscall FTextureModifyinfo::operator=(struct FTextureModifyinfo const &)
	public: struct FWayPoint & __thiscall FWayPoint::operator=(struct FWayPoint const &)
	public: struct FWhenExtinctionCreate & __thiscall FWhenExtinctionCreate::operator=(struct FWhenExtinctionCreate const &)
	public: struct FZoneRenderInfo & __thiscall FZoneRenderInfo::operator=(struct FZoneRenderInfo const &)
	public: struct HActor & __thiscall HActor::operator=(struct HActor const &)
	public: struct HBspSurf & __thiscall HBspSurf::operator=(struct HBspSurf const &)
	public: struct HCoords & __thiscall HCoords::operator=(struct HCoords const &)
	public: struct HHitProxy & __thiscall HHitProxy::operator=(struct HHitProxy const &)
	public: struct HLevelObject & __thiscall HLevelObject::operator=(struct HLevelObject const &)
	public: struct HMaterialTree & __thiscall HMaterialTree::operator=(struct HMaterialTree const &)
	public: struct HMatineeAction & __thiscall HMatineeAction::operator=(struct HMatineeAction const &)
	public: struct HMatineeScene & __thiscall HMatineeScene::operator=(struct HMatineeScene const &)
	public: struct HMatineeSubAction & __thiscall HMatineeSubAction::operator=(struct HMatineeSubAction const &)
	public: struct HMatineeTimePath & __thiscall HMatineeTimePath::operator=(struct HMatineeTimePath const &)
	public: struct HTerrain & __thiscall HTerrain::operator=(struct HTerrain const &)
	public: struct HTerrainToolLayer & __thiscall HTerrainToolLayer::operator=(struct HTerrainToolLayer const &)
	public: struct User & __thiscall User::operator=(struct User const &)
	public: unsigned char & __thiscall TArray<unsigned char>::Last(int)
	public: unsigned char & __thiscall TArray<unsigned char>::operator()(int)
	public: unsigned char __thiscall TArray<unsigned char>::Pop(void)
	public: unsigned char const & __thiscall TArray<unsigned char>::Last(int)const 
	public: unsigned char const & __thiscall TArray<unsigned char>::operator()(int)const 
	public: unsigned long __thiscall UInteractionMaster::eventProcess_KeyEvent(class TArray<class UInteraction *>,unsigned char &,unsigned char &,float)
	public: unsigned long __thiscall UInteractionMaster::eventProcess_KeyType(class TArray<class UInteraction *>,unsigned char &,class FString const &)
	public: unsigned short const * __thiscall L2FName::operator*(void)const 
	public: virtual class FArchive & __thiscall FInBunch::operator<<(class FName &)
	public: virtual class FArchive & __thiscall FInBunch::operator<<(class UObject * &)
	public: virtual class FArchive & __thiscall FOutBunch::operator<<(class FName &)
	public: virtual class FArchive & __thiscall FOutBunch::operator<<(class UObject * &)
	public: virtual int __thiscall UCombiner::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UMaterial::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UMaterialSequence::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UMaterialSwitch::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UModifier::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual int __thiscall UShader::CheckCircularReferences(class TArray<class UMaterial *> &)
	public: virtual unsigned long __thiscall UCanvas::DrawNormalText(int,int,unsigned long,unsigned short const *,unsigned long,unsigned long,unsigned long,float,int,enum L2FontType,int,int,unsigned long,int,int,int,class TArray<class FL2ColorFontInfo *> *,unsigned short,enum EFontExceptionType,int)
	public: virtual unsigned long __thiscall UCanvas::DrawTextToCanvas(int,int,unsigned long,unsigned short const *,unsigned long,unsigned long,unsigned long,float,int,enum L2FontType,int,int,unsigned long,int,int,int,class TArray<class FL2ColorFontInfo *> *,unsigned short,enum EFontExceptionType,int)
	public: virtual unsigned long __thiscall UCanvas::DrawThaiText(int,int,unsigned long,class TArray<struct ThaiCharacter>,unsigned long,unsigned long,unsigned long,float,int,enum L2FontType,int,int,unsigned long,int,int,int,class TArray<class FL2ColorFontInfo *> *,unsigned short,enum EFontExceptionType)
	public: virtual unsigned long __thiscall UCanvas::DrawTrueFontHtmlText(int,int,unsigned long,unsigned short const *,unsigned long,unsigned long,unsigned long,int,enum L2FontType,int,int,unsigned long,int,int,class TArray<class FL2ColorFontInfo *> *)
	public: virtual unsigned long __thiscall UCanvas::GetThaiTextSize(class TArray<struct ThaiCharacter>,struct tagSIZE *,unsigned long,unsigned long,int,enum L2FontType,int,unsigned long)
	public: virtual void __thiscall TLazyArray<unsigned char>::Load(void)
	public: virtual void __thiscall TLazyArray<unsigned char>::Unload(void)
	public: virtual void __thiscall UCanvas::WrapStringToArray(unsigned short const *,class TArray<class FString> *,float,class UFont *,unsigned short)
	public: virtual void __thiscall UGameEngine::OnCursedWeaponList(class TArray<int> *)
	public: virtual void __thiscall UGameEngine::OnCursedWeaponLocation(class TArray<int> *,class TArray<int> *,class TArray<class FVector> *)
	public: virtual void __thiscall UL2NEnvLight::GetCloudColor(float,class TArray<class FColor> &)
	public: virtual void __thiscall UL2NEnvLight::GetHazeColor(float,class TArray<class FColor> &)
	public: virtual void __thiscall UL2NEnvManager::GetCloudColor(float,class TArray<class FColor> &)
	public: virtual void __thiscall UL2NEnvManager::GetHazeColor(float,class TArray<class FColor> &)
	public: virtual void __thiscall UNetworkHandler::GetUserIDList(class TArray<int> *)
	public: void __thiscall APawn::GetAllAnimName(class TArray<class FName> &)
	public: void __thiscall FColor::operator+=(class FColor)
	public: void __thiscall FDynamicLight::`default constructor closure'(void)
	public: void __thiscall FL2ReplayManager::`default constructor closure'(void)
	public: void __thiscall FMatineeTools::GetSamples(class ASceneManager *,class UMatAction *,class TArray<class FVector> *)
	public: void __thiscall FNAbnormalStat::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_BIGBODY::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_BIGHEAD::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_CHANGE_TEXTURE::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_DANCE_ROOT::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_DOT_BLEEDING::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_DOT_FIRE::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_DOT_FIRE_AREA::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_DOT_MP::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_DOT_POISON::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_DOT_SOIL::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_DOT_WATER::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_DOT_WIND::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_FLESH_STONE::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_FLOATING_ROOT::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_GHOST_STUN::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_MAGIC_SQUARE::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_PARALYZE::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_ROOT::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_SEIZURE1::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_SEIZURE2::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_SILENCE::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_SLEEP::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_STEALTH::`default constructor closure'(void)
	public: void __thiscall FNAbnormalStat_STUN::`default constructor closure'(void)
	public: void __thiscall FNActorResourceLoader::FindPawnResourceWithActor(class APawn *,class TArray<class FNPawnResource *> *)
	public: void __thiscall FNAppendixEffect::`default constructor closure'(void)
	public: void __thiscall FNAppendixEffect_COLOSSEUM_1::`default constructor closure'(void)
	public: void __thiscall FNAppendixEffect_COLOSSEUM_2::`default constructor closure'(void)
	public: void __thiscall FNAppendixEffect_COLOSSEUM_IDENTIFIER_BLUE::`default constructor closure'(void)
	public: void __thiscall FNAppendixEffect_COLOSSEUM_IDENTIFIER_RED::`default constructor closure'(void)
	public: void __thiscall FNAppendixEffect_COLOSSEUM_SELECTED_BLUE::`default constructor closure'(void)
	public: void __thiscall FNAppendixEffect_COLOSSEUM_SELECTED_RED::`default constructor closure'(void)
	public: void __thiscall FNBoneScalerStat::`default constructor closure'(void)
	public: void __thiscall FNPawnLight::`default constructor closure'(void)
	public: void __thiscall FNViewShake::`default constructor closure'(void)
	public: void __thiscall FOctreeNode::FilterTest(class FBox *,int,class TArray<class FOctreeNode *> *,class FPlane const *)
	public: void __thiscall FURL::`default constructor closure'(void)
	public: void __thiscall TArray<unsigned char>::CountBytes(class FArchive &)
	public: void __thiscall TArray<unsigned char>::Empty(int)
	public: void __thiscall TArray<unsigned char>::Insert(int,int)
	public: void __thiscall TArray<unsigned char>::InsertZeroed(int,int)
	public: void __thiscall TArray<unsigned char>::Remove(int,int)
	public: void __thiscall TArray<unsigned char>::Shrink(void)
	public: void __thiscall TLazyArray<unsigned char>::`default constructor closure'(void)
	public: void __thiscall UCanvas::MakeThaiCharArray(unsigned short const *,class TArray<struct ThaiCharacter> &,unsigned short *)
	public: void __thiscall UInteractionMaster::eventProcess_Message(class FString const &,float,class TArray<class UInteraction *>)
	public: void __thiscall UInteractionMaster::eventProcess_PostRender(class TArray<class UInteraction *>,class UCanvas *)
	public: void __thiscall UInteractionMaster::eventProcess_PreRender(class TArray<class UInteraction *>,class UCanvas *)
	public: void __thiscall UInteractionMaster::eventProcess_Tick(class TArray<class UInteraction *>,float)
	public: void __thiscall USkeletalMesh::CalculateNormals(class TArray<class FVector> &,int)
	public: void __thiscall UStaticMesh::TriangleSphereQuery(class AActor *,class FSphere &,class TArray<struct FStaticMeshCollisionTriangle *> &)
	public: void __thiscall UTerrainSector::CalcLight(class ALight *,int,class TArray<unsigned long> &)
	unsigned short const * const `public: __thiscall TLazyArray<unsigned char>::~TLazyArray<unsigned char>(void)'::`3'::__FUNC_NAME__
	unsigned short const * const `public: struct FNMagicInfo & __thiscall FNMagicInfo::operator=(struct FNMagicInfo &)'::`3'::__FUNC_NAME__
	unsigned short const * const `public: virtual void __thiscall TLazyArray<unsigned char>::Load(void)'::`3'::__FUNC_NAME__
	unsigned short const * const `public: virtual void __thiscall TLazyArray<unsigned char>::Unload(void)'::`3'::__FUNC_NAME__
